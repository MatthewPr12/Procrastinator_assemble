
lora1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e0c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005150  08005150  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005158  08005158  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  0800516c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800516c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123b1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f8  00000000  00000000  000323ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00034be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018834  00000000  00000000  000369f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158ba  00000000  00000000  0004f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bafa  00000000  00000000  00064ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001005d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000406c  00000000  00000000  00100628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f8c 	.word	0x08004f8c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004f8c 	.word	0x08004f8c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004dc:	b4b0      	push	{r4, r5, r7}
 80004de:	b08f      	sub	sp, #60	; 0x3c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004e4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004ea:	2307      	movs	r3, #7
 80004ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004f0:	2307      	movs	r3, #7
 80004f2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004f6:	2301      	movs	r3, #1
 80004f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004fc:	23ff      	movs	r3, #255	; 0xff
 80004fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000502:	2364      	movs	r3, #100	; 0x64
 8000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000508:	2308      	movs	r3, #8
 800050a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	461d      	mov	r5, r3
 8000510:	f107 040c 	add.w	r4, r7, #12
 8000514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800051a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	373c      	adds	r7, #60	; 0x3c
 8000528:	46bd      	mov	sp, r7
 800052a:	bcb0      	pop	{r4, r5, r7}
 800052c:	4770      	bx	lr

0800052e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6898      	ldr	r0, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	899b      	ldrh	r3, [r3, #12]
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	f002 f827 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 ff9e 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6898      	ldr	r0, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	899b      	ldrh	r3, [r3, #12]
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	f002 f81c 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800055c:	2064      	movs	r0, #100	; 0x64
 800055e:	f000 ff93 	bl	8001488 <HAL_Delay>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000574:	2101      	movs	r1, #1
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f99f 	bl	80008ba <LoRa_read>
 800057c:	4603      	mov	r3, r0
 800057e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d107      	bne.n	800059a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	f023 0307 	bic.w	r3, r3, #7
 8000590:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
 8000598:	e03e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d10c      	bne.n	80005ba <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80005a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a4:	f023 0307 	bic.w	r3, r3, #7
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	e02e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d10c      	bne.n	80005da <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005c4:	f023 0307 	bic.w	r3, r3, #7
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f043 0303 	orr.w	r3, r3, #3
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2203      	movs	r2, #3
 80005d6:	61da      	str	r2, [r3, #28]
 80005d8:	e01e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d10c      	bne.n	80005fa <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005e4:	f023 0307 	bic.w	r3, r3, #7
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	f043 0305 	orr.w	r3, r3, #5
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2205      	movs	r2, #5
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	e00e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d10b      	bne.n	8000618 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000604:	f023 0307 	bic.w	r3, r3, #7
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f043 0306 	orr.w	r3, r3, #6
 800060e:	b25b      	sxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2206      	movs	r2, #6
 8000616:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	461a      	mov	r2, r3
 800061c:	2101      	movs	r1, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f965 	bl	80008ee <LoRa_write>
	//HAL_Delay(10);
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	889b      	ldrh	r3, [r3, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	f001 ffa4 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6998      	ldr	r0, [r3, #24]
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	f002 ff8c 	bl	8003574 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800065c:	bf00      	nop
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fb92 	bl	8003d8c <HAL_SPI_GetState>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d1f7      	bne.n	800065e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6998      	ldr	r0, [r3, #24]
 8000672:	8b3a      	ldrh	r2, [r7, #24]
 8000674:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	f003 f8c7 	bl	800380c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800067e:	bf00      	nop
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fb81 	bl	8003d8c <HAL_SPI_GetState>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d1f7      	bne.n	8000680 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f001 ff7a 	bl	8002594 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4613      	mov	r3, r2
 80006b6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f001 ff66 	bl	8002594 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6998      	ldr	r0, [r3, #24]
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	f002 ff4e 	bl	8003574 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006d8:	bf00      	nop
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fb54 	bl	8003d8c <HAL_SPI_GetState>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d1f7      	bne.n	80006da <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6998      	ldr	r0, [r3, #24]
 80006ee:	8b3a      	ldrh	r2, [r7, #24]
 80006f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f4:	6839      	ldr	r1, [r7, #0]
 80006f6:	f002 ff3d 	bl	8003574 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006fa:	bf00      	nop
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fb43 	bl	8003d8c <HAL_SPI_GetState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d1f7      	bne.n	80006fc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	889b      	ldrh	r3, [r3, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f001 ff3c 	bl	8002594 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	04db      	lsls	r3, r3, #19
 8000732:	115b      	asrs	r3, r3, #5
 8000734:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	461a      	mov	r2, r3
 8000740:	2106      	movs	r1, #6
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f8d3 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000748:	2005      	movs	r0, #5
 800074a:	f000 fe9d 	bl	8001488 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000754:	7afb      	ldrb	r3, [r7, #11]
 8000756:	461a      	mov	r2, r3
 8000758:	2107      	movs	r1, #7
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f8c7 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000760:	2005      	movs	r0, #5
 8000762:	f000 fe91 	bl	8001488 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	461a      	mov	r2, r3
 800076e:	2108      	movs	r1, #8
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f8bc 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000776:	2005      	movs	r0, #5
 8000778:	f000 fe86 	bl	8001488 <HAL_Delay>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b0c      	cmp	r3, #12
 8000792:	dd01      	ble.n	8000798 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000794:	230c      	movs	r3, #12
 8000796:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b06      	cmp	r3, #6
 800079c:	dc01      	bgt.n	80007a2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800079e:	2307      	movs	r3, #7
 80007a0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007a2:	211e      	movs	r1, #30
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f888 	bl	80008ba <LoRa_read>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 fe6a 	bl	8001488 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	461a      	mov	r2, r3
 80007cc:	211e      	movs	r1, #30
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f88d 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f000 fe57 	bl	8001488 <HAL_Delay>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	461a      	mov	r2, r3
 80007f2:	2109      	movs	r1, #9
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f87a 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 fe44 	bl	8001488 <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b2c      	cmp	r3, #44	; 0x2c
 800081c:	d801      	bhi.n	8000822 <LoRa_setOCP+0x1a>
		current = 45;
 800081e:	232d      	movs	r3, #45	; 0x2d
 8000820:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2bf0      	cmp	r3, #240	; 0xf0
 8000826:	d901      	bls.n	800082c <LoRa_setOCP+0x24>
		current = 240;
 8000828:	23f0      	movs	r3, #240	; 0xf0
 800082a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2b78      	cmp	r3, #120	; 0x78
 8000830:	d809      	bhi.n	8000846 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	3b2d      	subs	r3, #45	; 0x2d
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <LoRa_setOCP+0x78>)
 8000838:	fb82 1203 	smull	r1, r2, r2, r3
 800083c:	1052      	asrs	r2, r2, #1
 800083e:	17db      	asrs	r3, r3, #31
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e00b      	b.n	800085e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2bf0      	cmp	r3, #240	; 0xf0
 800084a:	d808      	bhi.n	800085e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	331e      	adds	r3, #30
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <LoRa_setOCP+0x78>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1092      	asrs	r2, r2, #2
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3320      	adds	r3, #32
 8000862:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	461a      	mov	r2, r3
 8000868:	210b      	movs	r1, #11
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f83f 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 8000870:	200a      	movs	r0, #10
 8000872:	f000 fe09 	bl	8001488 <HAL_Delay>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	66666667 	.word	0x66666667

08000884 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800088c:	211e      	movs	r1, #30
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 f813 	bl	80008ba <LoRa_read>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	f043 0307 	orr.w	r3, r3, #7
 800089e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	461a      	mov	r2, r3
 80008a4:	211e      	movs	r1, #30
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f821 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f000 fdeb 	bl	8001488 <HAL_Delay>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af02      	add	r7, sp, #8
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008d0:	f107 030f 	add.w	r3, r7, #15
 80008d4:	f107 010e 	add.w	r1, r7, #14
 80008d8:	2201      	movs	r2, #1
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fea4 	bl	800062c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af02      	add	r7, sp, #8
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
 80008fa:	4613      	mov	r3, r2
 80008fc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000904:	b2db      	uxtb	r3, r3
 8000906:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000908:	78bb      	ldrb	r3, [r7, #2]
 800090a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800090c:	f107 030f 	add.w	r3, r7, #15
 8000910:	f107 010e 	add.w	r1, r7, #14
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fec4 	bl	80006a8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000946:	2105      	movs	r1, #5
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fe0e 	bl	800056a <LoRa_gotoMode>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000956:	b590      	push	{r4, r7, lr}
 8000958:	b089      	sub	sp, #36	; 0x24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	4613      	mov	r3, r2
 8000962:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	e007      	b.n	800097e <LoRa_receive+0x28>
		data[i]=0;
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	4413      	add	r3, r2
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	3301      	adds	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf3      	blt.n	800096e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000986:	2101      	movs	r1, #1
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fdee 	bl	800056a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800098e:	2112      	movs	r1, #18
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff ff92 	bl	80008ba <LoRa_read>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d02f      	beq.n	8000a04 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80009a4:	22ff      	movs	r2, #255	; 0xff
 80009a6:	2112      	movs	r1, #18
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff ffa0 	bl	80008ee <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80009ae:	2113      	movs	r1, #19
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff ff82 	bl	80008ba <LoRa_read>
 80009b6:	4603      	mov	r3, r0
 80009b8:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80009ba:	2110      	movs	r1, #16
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff ff7c 	bl	80008ba <LoRa_read>
 80009c2:	4603      	mov	r3, r0
 80009c4:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009c6:	7cfb      	ldrb	r3, [r7, #19]
 80009c8:	461a      	mov	r2, r3
 80009ca:	210d      	movs	r1, #13
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff ff8e 	bl	80008ee <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80009d2:	7cba      	ldrb	r2, [r7, #18]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4293      	cmp	r3, r2
 80009d8:	bf28      	it	cs
 80009da:	4613      	movcs	r3, r2
 80009dc:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e00b      	b.n	80009fc <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	18d4      	adds	r4, r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff ff64 	bl	80008ba <LoRa_read>
 80009f2:	4603      	mov	r3, r0
 80009f4:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbef      	blt.n	80009e4 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a04:	2105      	movs	r1, #5
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff fdaf 	bl	800056a <LoRa_gotoMode>
    return min;
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}

08000a16 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ff82 	bl	8000928 <LoRa_isvalid>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 8093 	beq.w	8000b52 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fd9b 	bl	800056a <LoRa_gotoMode>
			HAL_Delay(10);
 8000a34:	200a      	movs	r0, #10
 8000a36:	f000 fd27 	bl	8001488 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff3c 	bl	80008ba <LoRa_read>
 8000a42:	4603      	mov	r3, r0
 8000a44:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f000 fd1e 	bl	8001488 <HAL_Delay>
			data = read | 0x80;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a52:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	461a      	mov	r2, r3
 8000a58:	2101      	movs	r1, #1
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ff47 	bl	80008ee <LoRa_write>
			HAL_Delay(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f000 fd11 	bl	8001488 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fe59 	bl	8000724 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff feb1 	bl	80007e2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a86:	4619      	mov	r1, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff febd 	bl	8000808 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a8e:	2223      	movs	r2, #35	; 0x23
 8000a90:	210c      	movs	r1, #12
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff2b 	bl	80008ee <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fef3 	bl	8000884 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe6c 	bl	8000784 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	211f      	movs	r1, #31
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff1c 	bl	80008ee <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4413      	add	r3, r2
 8000ad0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	211d      	movs	r1, #29
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff08 	bl	80008ee <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2120      	movs	r1, #32
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fefe 	bl	80008ee <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	2121      	movs	r1, #33	; 0x21
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fef6 	bl	80008ee <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fed8 	bl	80008ba <LoRa_read>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000b14:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fee6 	bl	80008ee <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b22:	2101      	movs	r1, #1
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fd20 	bl	800056a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f000 fca9 	bl	8001488 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b36:	2142      	movs	r1, #66	; 0x42
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff febe 	bl	80008ba <LoRa_read>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b12      	cmp	r3, #18
 8000b46:	d101      	bne.n	8000b4c <LoRa_init+0x136>
				return LORA_OK;
 8000b48:	23c8      	movs	r3, #200	; 0xc8
 8000b4a:	e004      	b.n	8000b56 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000b4c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000b50:	e001      	b.n	8000b56 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b52:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x9c>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <MX_ADC1_Init+0xa0>)
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bc2:	f000 fc85 	bl	80014d0 <HAL_ADC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 fa0e 	bl	8000fec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000be2:	f000 feab 	bl	800193c <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bec:	f000 f9fe 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000028 	.word	0x20000028
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	0f000001 	.word	0x0f000001

08000c04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_ADC_MspInit+0x7c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d127      	bne.n	8000c76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	2303      	movs	r3, #3
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_ADC_MspInit+0x84>)
 8000c72:	f001 f9f5 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40012000 	.word	0x40012000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a3d      	ldr	r2, [pc, #244]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2103      	movs	r1, #3
 8000d32:	481c      	ldr	r0, [pc, #112]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d34:	f001 fc2e 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000d3e:	4819      	ldr	r0, [pc, #100]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d40:	f001 fc28 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PB14 PB15 */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000d44:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d5e:	f001 f97f 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000d62:	2304      	movs	r3, #4
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d78:	f001 f972 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_GPIO_Init+0x11c>)
 8000d92:	f001 f965 	bl	8002060 <HAL_GPIO_Init>

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40020c00 	.word	0x40020c00

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	b096      	sub	sp, #88	; 0x58
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db2:	f000 fb27 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f89f 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f7ff ff67 	bl	8000c8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dbe:	f000 f925 	bl	800100c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000dc2:	f7ff fecd 	bl	8000b60 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000dc6:	f000 fa81 	bl	80012cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t readvalue;
  HAL_ADC_Start(&hadc1);
 8000dca:	4846      	ldr	r0, [pc, #280]	; (8000ee4 <main+0x138>)
 8000dcc:	f000 fcde 	bl	800178c <HAL_ADC_Start>
  myLoRa = newLoRa();
 8000dd0:	4c45      	ldr	r4, [pc, #276]	; (8000ee8 <main+0x13c>)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb81 	bl	80004dc <newLoRa>
 8000dda:	4625      	mov	r5, r4
 8000ddc:	463c      	mov	r4, r7
 8000dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000dea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa_reset(&myLoRa);
 8000dee:	483e      	ldr	r0, [pc, #248]	; (8000ee8 <main+0x13c>)
 8000df0:	f7ff fb9d 	bl	800052e <LoRa_reset>
  myLoRa.CS_port         = NSS_GPIO_Port;
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <main+0x13c>)
 8000df6:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <main+0x140>)
 8000df8:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <main+0x13c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8000e00:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <main+0x13c>)
 8000e02:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <main+0x140>)
 8000e04:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <main+0x13c>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000e0c:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <main+0x13c>)
 8000e0e:	4a37      	ldr	r2, [pc, #220]	; (8000eec <main+0x140>)
 8000e10:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <main+0x13c>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000e18:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <main+0x13c>)
 8000e1a:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <main+0x144>)
 8000e1c:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <main+0x13c>)
 8000e20:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8000e24:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8000e26:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <main+0x13c>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <main+0x13c>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <main+0x13c>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <main+0x13c>)
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <main+0x13c>)
 8000e48:	2282      	movs	r2, #130	; 0x82
 8000e4a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <main+0x13c>)
 8000e50:	2209      	movs	r2, #9
 8000e52:	851a      	strh	r2, [r3, #40]	; 0x28
//  LoRa_stat = LoRa_init(&myLoRa);
  if (LoRa_init(&myLoRa) == LORA_OK){
 8000e54:	4824      	ldr	r0, [pc, #144]	; (8000ee8 <main+0x13c>)
 8000e56:	f7ff fdde 	bl	8000a16 <LoRa_init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2bc8      	cmp	r3, #200	; 0xc8
 8000e5e:	d105      	bne.n	8000e6c <main+0xc0>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e66:	4821      	ldr	r0, [pc, #132]	; (8000eec <main+0x140>)
 8000e68:	f001 fb94 	bl	8002594 <HAL_GPIO_WritePin>
//  if(LoRa_transmit(&myLoRa, (uint8_t*)send_data, 12, 100) == 1){
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
//  }
  //receiver
  uint8_t received_data[32];
  uint8_t packet_size = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  LoRa_startReceiving(&myLoRa);
 8000e72:	481d      	ldr	r0, [pc, #116]	; (8000ee8 <main+0x13c>)
 8000e74:	f7ff fd63 	bl	800093e <LoRa_startReceiving>
//	    	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	    }
//	    HAL_Delay(500);

//	  receiver
	  packet_size = LoRa_receive(&myLoRa, received_data, 32);
 8000e78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <main+0x13c>)
 8000e82:	f7ff fd68 	bl	8000956 <LoRa_receive>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  if (packet_size == 32) {
 8000e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e90:	2b20      	cmp	r3, #32
 8000e92:	d105      	bne.n	8000ea0 <main+0xf4>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <main+0x140>)
 8000e9c:	f001 fb7a 	bl	8002594 <HAL_GPIO_WritePin>
	  }
//	  HAL_Delay(500);
	  if (LoRa_init(&myLoRa) == LORA_OK){
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <main+0x13c>)
 8000ea2:	f7ff fdb8 	bl	8000a16 <LoRa_init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2bc8      	cmp	r3, #200	; 0xc8
 8000eaa:	d106      	bne.n	8000eba <main+0x10e>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <main+0x140>)
 8000eb4:	f001 fb6e 	bl	8002594 <HAL_GPIO_WritePin>
 8000eb8:	e005      	b.n	8000ec6 <main+0x11a>
	    }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec0:	480a      	ldr	r0, [pc, #40]	; (8000eec <main+0x140>)
 8000ec2:	f001 fb67 	bl	8002594 <HAL_GPIO_WritePin>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t *) received_data, packet_size, 100);
 8000ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <main+0x148>)
 8000ed4:	f003 fc74 	bl	80047c0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000edc:	f000 fad4 	bl	8001488 <HAL_Delay>
	  packet_size = LoRa_receive(&myLoRa, received_data, 32);
 8000ee0:	e7ca      	b.n	8000e78 <main+0xcc>
 8000ee2:	bf00      	nop
 8000ee4:	20000028 	.word	0x20000028
 8000ee8:	20000070 	.word	0x20000070
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	2000013c 	.word	0x2000013c

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b094      	sub	sp, #80	; 0x50
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	2230      	movs	r2, #48	; 0x30
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 f838 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <SystemClock_Config+0xc8>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <SystemClock_Config+0xc8>)
 8000f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <SystemClock_Config+0xc8>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f6c:	23c0      	movs	r3, #192	; 0xc0
 8000f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f70:	2304      	movs	r3, #4
 8000f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f74:	2308      	movs	r3, #8
 8000f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fb3b 	bl	80025f8 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f88:	f000 f830 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2302      	movs	r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fe4d 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fb4:	f000 f81a 	bl	8000fec <Error_Handler>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3750      	adds	r7, #80	; 0x50
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fda:	f000 fa35 	bl	8001448 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40010000 	.word	0x40010000

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>

08000ff6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_SPI1_Init+0x64>)
 8001012:	4a18      	ldr	r2, [pc, #96]	; (8001074 <MX_SPI1_Init+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_SPI1_Init+0x64>)
 8001038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_SPI1_Init+0x64>)
 8001040:	2238      	movs	r2, #56	; 0x38
 8001042:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_SPI1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_SPI1_Init+0x64>)
 8001058:	220a      	movs	r2, #10
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_SPI1_Init+0x64>)
 800105e:	f002 f8ed 	bl	800323c <HAL_SPI_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001068:	f7ff ffc0 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000009c 	.word	0x2000009c
 8001074:	40013000 	.word	0x40013000

08001078 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_SPI_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12b      	bne.n	80010f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010d2:	23e0      	movs	r3, #224	; 0xe0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e2:	2305      	movs	r3, #5
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_SPI_MspInit+0x8c>)
 80010ee:	f000 ffb7 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40013000 	.word	0x40013000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001146:	2007      	movs	r0, #7
 8001148:	f000 ff26 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_InitTick+0xd0>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_InitTick+0xd0>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6453      	str	r3, [r2, #68]	; 0x44
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_InitTick+0xd0>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001184:	f107 020c 	add.w	r2, r7, #12
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f002 f822 	bl	80031d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001194:	f002 f80c 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8001198:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <HAL_InitTick+0xd4>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	3b01      	subs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_InitTick+0xd8>)
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_InitTick+0xdc>)
 80011ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_InitTick+0xd8>)
 80011b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_InitTick+0xd8>)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_InitTick+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_InitTick+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_InitTick+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <HAL_InitTick+0xd8>)
 80011d0:	f002 ff1a 	bl	8004008 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d11b      	bne.n	800121a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <HAL_InitTick+0xd8>)
 80011e4:	f002 ffe0 	bl	80041a8 <HAL_TIM_Base_Start_IT>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d111      	bne.n	800121a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011f6:	2019      	movs	r0, #25
 80011f8:	f000 ff1a 	bl	8002030 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	d808      	bhi.n	8001214 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001202:	2200      	movs	r2, #0
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	2019      	movs	r0, #25
 8001208:	f000 fee6 	bl	8001fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_InitTick+0xe0>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e002      	b.n	800121a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800121a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800121e:	4618      	mov	r0, r3
 8001220:	3730      	adds	r7, #48	; 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	431bde83 	.word	0x431bde83
 8001230:	200000f4 	.word	0x200000f4
 8001234:	40010000 	.word	0x40010000
 8001238:	20000004 	.word	0x20000004

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800129a:	f003 f817 	bl	80042cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000f4 	.word	0x200000f4

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f003 f9a6 	bl	8004654 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f7ff fe6d 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000013c 	.word	0x2000013c
 800131c:	40004400 	.word	0x40004400

08001320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_UART_MspInit+0x88>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800137a:	230c      	movs	r3, #12
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_UART_MspInit+0x8c>)
 8001396:	f000 fe63 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013da:	f7ff ff65 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f003 fda9 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fce3 	bl	8000dac <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013f4:	08005160 	.word	0x08005160
  ldr r2, =_sbss
 80013f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013fc:	20000184 	.word	0x20000184

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 fdb3 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fe90 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe66 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	20000180 	.word	0x20000180

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000180 	.word	0x20000180

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e14e      	b.n	8001784 <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a90      	ldr	r2, [pc, #576]	; (800172c <HAL_ADC_Init+0x25c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d004      	beq.n	80014fa <HAL_ADC_Init+0x2a>
 80014f0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80014f4:	488e      	ldr	r0, [pc, #568]	; (8001730 <HAL_ADC_Init+0x260>)
 80014f6:	f7ff fd7e 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d013      	beq.n	800152a <HAL_ADC_Init+0x5a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d00e      	beq.n	800152a <HAL_ADC_Init+0x5a>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001514:	d009      	beq.n	800152a <HAL_ADC_Init+0x5a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800151e:	d004      	beq.n	800152a <HAL_ADC_Init+0x5a>
 8001520:	f240 1143 	movw	r1, #323	; 0x143
 8001524:	4882      	ldr	r0, [pc, #520]	; (8001730 <HAL_ADC_Init+0x260>)
 8001526:	f7ff fd66 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d013      	beq.n	800155a <HAL_ADC_Init+0x8a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153a:	d00e      	beq.n	800155a <HAL_ADC_Init+0x8a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001544:	d009      	beq.n	800155a <HAL_ADC_Init+0x8a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800154e:	d004      	beq.n	800155a <HAL_ADC_Init+0x8a>
 8001550:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001554:	4876      	ldr	r0, [pc, #472]	; (8001730 <HAL_ADC_Init+0x260>)
 8001556:	f7ff fd4e 	bl	8000ff6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_ADC_Init+0xa4>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d004      	beq.n	8001574 <HAL_ADC_Init+0xa4>
 800156a:	f240 1145 	movw	r1, #325	; 0x145
 800156e:	4870      	ldr	r0, [pc, #448]	; (8001730 <HAL_ADC_Init+0x260>)
 8001570:	f7ff fd41 	bl	8000ff6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_ADC_Init+0xbe>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7e1b      	ldrb	r3, [r3, #24]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d004      	beq.n	800158e <HAL_ADC_Init+0xbe>
 8001584:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001588:	4869      	ldr	r0, [pc, #420]	; (8001730 <HAL_ADC_Init+0x260>)
 800158a:	f7ff fd34 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	2b00      	cmp	r3, #0
 8001594:	d054      	beq.n	8001640 <HAL_ADC_Init+0x170>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159e:	d04f      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015a8:	d04a      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80015b2:	d045      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015bc:	d040      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80015c6:	d03b      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80015d0:	d036      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80015da:	d031      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015e4:	d02c      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80015ee:	d027      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80015f8:	d022      	beq.n	8001640 <HAL_ADC_Init+0x170>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8001602:	d01d      	beq.n	8001640 <HAL_ADC_Init+0x170>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800160c:	d018      	beq.n	8001640 <HAL_ADC_Init+0x170>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8001616:	d013      	beq.n	8001640 <HAL_ADC_Init+0x170>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001620:	d00e      	beq.n	8001640 <HAL_ADC_Init+0x170>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800162a:	d009      	beq.n	8001640 <HAL_ADC_Init+0x170>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	4a40      	ldr	r2, [pc, #256]	; (8001734 <HAL_ADC_Init+0x264>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_ADC_Init+0x170>
 8001636:	f240 1147 	movw	r1, #327	; 0x147
 800163a:	483d      	ldr	r0, [pc, #244]	; (8001730 <HAL_ADC_Init+0x260>)
 800163c:	f7ff fcdb 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <HAL_ADC_Init+0x18c>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001650:	d004      	beq.n	800165c <HAL_ADC_Init+0x18c>
 8001652:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001656:	4836      	ldr	r0, [pc, #216]	; (8001730 <HAL_ADC_Init+0x260>)
 8001658:	f7ff fccd 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_ADC_Init+0x19c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2b10      	cmp	r3, #16
 800166a:	d904      	bls.n	8001676 <HAL_ADC_Init+0x1a6>
 800166c:	f240 1149 	movw	r1, #329	; 0x149
 8001670:	482f      	ldr	r0, [pc, #188]	; (8001730 <HAL_ADC_Init+0x260>)
 8001672:	f7ff fcc0 	bl	8000ff6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <HAL_ADC_Init+0x1c4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001686:	2b01      	cmp	r3, #1
 8001688:	d004      	beq.n	8001694 <HAL_ADC_Init+0x1c4>
 800168a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800168e:	4828      	ldr	r0, [pc, #160]	; (8001730 <HAL_ADC_Init+0x260>)
 8001690:	f7ff fcb1 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d00c      	beq.n	80016b6 <HAL_ADC_Init+0x1e6>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_ADC_Init+0x1e6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d004      	beq.n	80016b6 <HAL_ADC_Init+0x1e6>
 80016ac:	f240 114b 	movw	r1, #331	; 0x14b
 80016b0:	481f      	ldr	r0, [pc, #124]	; (8001730 <HAL_ADC_Init+0x260>)
 80016b2:	f7ff fca0 	bl	8000ff6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <HAL_ADC_Init+0x204>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d004      	beq.n	80016d4 <HAL_ADC_Init+0x204>
 80016ca:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <HAL_ADC_Init+0x260>)
 80016d0:	f7ff fc91 	bl	8000ff6 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_ADC_Init+0x264>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d017      	beq.n	800170e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d013      	beq.n	800170e <HAL_ADC_Init+0x23e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016ee:	d00e      	beq.n	800170e <HAL_ADC_Init+0x23e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016f8:	d009      	beq.n	800170e <HAL_ADC_Init+0x23e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001702:	d004      	beq.n	800170e <HAL_ADC_Init+0x23e>
 8001704:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <HAL_ADC_Init+0x260>)
 800170a:	f7ff fc74 	bl	8000ff6 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d110      	bne.n	8001738 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fa74 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800172a:	e005      	b.n	8001738 <HAL_ADC_Init+0x268>
 800172c:	40012000 	.word	0x40012000
 8001730:	08004fa4 	.word	0x08004fa4
 8001734:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800174c:	f023 0302 	bic.w	r3, r3, #2
 8001750:	f043 0202 	orr.w	r2, r3, #2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fa65 	bl	8001c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f023 0303 	bic.w	r3, r3, #3
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
 8001774:	e001      	b.n	800177a <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7e1b      	ldrb	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_ADC_Start+0x26>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e1b      	ldrb	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d004      	beq.n	80017b2 <HAL_ADC_Start+0x26>
 80017a8:	f240 21d2 	movw	r1, #722	; 0x2d2
 80017ac:	485e      	ldr	r0, [pc, #376]	; (8001928 <HAL_ADC_Start+0x19c>)
 80017ae:	f7ff fc22 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d013      	beq.n	80017e2 <HAL_ADC_Start+0x56>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017c2:	d00e      	beq.n	80017e2 <HAL_ADC_Start+0x56>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017cc:	d009      	beq.n	80017e2 <HAL_ADC_Start+0x56>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80017d6:	d004      	beq.n	80017e2 <HAL_ADC_Start+0x56>
 80017d8:	f240 21d3 	movw	r1, #723	; 0x2d3
 80017dc:	4852      	ldr	r0, [pc, #328]	; (8001928 <HAL_ADC_Start+0x19c>)
 80017de:	f7ff fc0a 	bl	8000ff6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_Start+0x64>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e097      	b.n	8001920 <HAL_ADC_Start+0x194>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d018      	beq.n	8001838 <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0201 	orr.w	r2, r2, #1
 8001814:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001816:	4b45      	ldr	r3, [pc, #276]	; (800192c <HAL_ADC_Start+0x1a0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a45      	ldr	r2, [pc, #276]	; (8001930 <HAL_ADC_Start+0x1a4>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	0c9a      	lsrs	r2, r3, #18
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800182a:	e002      	b.n	8001832 <HAL_ADC_Start+0xa6>
    {
      counter--;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3b01      	subs	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f9      	bne.n	800182c <HAL_ADC_Start+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d15f      	bne.n	8001906 <HAL_ADC_Start+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001870:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001884:	d106      	bne.n	8001894 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f023 0206 	bic.w	r2, r3, #6
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
 8001892:	e002      	b.n	800189a <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_ADC_Start+0x1a8>)
 80018a4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018ae:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10f      	bne.n	80018dc <HAL_ADC_Start+0x150>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d129      	bne.n	800191e <HAL_ADC_Start+0x192>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	e020      	b.n	800191e <HAL_ADC_Start+0x192>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_ADC_Start+0x1ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d11b      	bne.n	800191e <HAL_ADC_Start+0x192>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d114      	bne.n	800191e <HAL_ADC_Start+0x192>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e00b      	b.n	800191e <HAL_ADC_Start+0x192>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	08004fa4 	.word	0x08004fa4
 800192c:	20000000 	.word	0x20000000
 8001930:	431bde83 	.word	0x431bde83
 8001934:	40012300 	.word	0x40012300
 8001938:	40012000 	.word	0x40012000

0800193c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b12      	cmp	r3, #18
 8001950:	d909      	bls.n	8001966 <HAL_ADC_ConfigChannel+0x2a>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_ADC_ConfigChannel+0x1e4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_ADC_ConfigChannel+0x2a>
 800195c:	f240 618b 	movw	r1, #1675	; 0x68b
 8001960:	4870      	ldr	r0, [pc, #448]	; (8001b24 <HAL_ADC_ConfigChannel+0x1e8>)
 8001962:	f7ff fb48 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_ADC_ConfigChannel+0x3a>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b10      	cmp	r3, #16
 8001974:	d904      	bls.n	8001980 <HAL_ADC_ConfigChannel+0x44>
 8001976:	f240 618c 	movw	r1, #1676	; 0x68c
 800197a:	486a      	ldr	r0, [pc, #424]	; (8001b24 <HAL_ADC_ConfigChannel+0x1e8>)
 800197c:	f7ff fb3b 	bl	8000ff6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d01c      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d018      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d014      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d010      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d00c      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b06      	cmp	r3, #6
 80019b6:	d008      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b07      	cmp	r3, #7
 80019be:	d004      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x8e>
 80019c0:	f240 618d 	movw	r1, #1677	; 0x68d
 80019c4:	4857      	ldr	r0, [pc, #348]	; (8001b24 <HAL_ADC_ConfigChannel+0x1e8>)
 80019c6:	f7ff fb16 	bl	8000ff6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x9c>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e118      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x2ce>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b09      	cmp	r3, #9
 80019e6:	d925      	bls.n	8001a34 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68d9      	ldr	r1, [r3, #12]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	3b1e      	subs	r3, #30
 80019fe:	2207      	movs	r2, #7
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43da      	mvns	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68d9      	ldr	r1, [r3, #12]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4403      	add	r3, r0
 8001a26:	3b1e      	subs	r3, #30
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	e022      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	2207      	movs	r2, #7
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	400a      	ands	r2, r1
 8001a56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6919      	ldr	r1, [r3, #16]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4403      	add	r3, r0
 8001a70:	409a      	lsls	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d824      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b05      	subs	r3, #5
 8001a94:	221f      	movs	r2, #31
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b05      	subs	r3, #5
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aca:	e051      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d829      	bhi.n	8001b28 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b23      	subs	r3, #35	; 0x23
 8001ae6:	221f      	movs	r2, #31
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43da      	mvns	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	400a      	ands	r2, r1
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3b23      	subs	r3, #35	; 0x23
 8001b10:	fa00 f203 	lsl.w	r2, r0, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1c:	e028      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x234>
 8001b1e:	bf00      	nop
 8001b20:	10000012 	.word	0x10000012
 8001b24:	08004fa4 	.word	0x08004fa4
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b41      	subs	r3, #65	; 0x41
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b41      	subs	r3, #65	; 0x41
 8001b64:	fa00 f203 	lsl.w	r2, r0, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_ADC_ConfigChannel+0x2d8>)
 8001b72:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_ADC_ConfigChannel+0x2dc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10f      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x262>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b12      	cmp	r3, #18
 8001b84:	d10b      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_ADC_ConfigChannel+0x2dc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d12b      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x2c4>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_ADC_ConfigChannel+0x2e0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d003      	beq.n	8001bba <HAL_ADC_ConfigChannel+0x27e>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b11      	cmp	r3, #17
 8001bb8:	d122      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_ADC_ConfigChannel+0x2e0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_ADC_ConfigChannel+0x2e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_ADC_ConfigChannel+0x2e8>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9a      	lsrs	r2, r3, #18
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf2:	e002      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40012300 	.word	0x40012300
 8001c18:	40012000 	.word	0x40012000
 8001c1c:	10000012 	.word	0x10000012
 8001c20:	20000000 	.word	0x20000000
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c30:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <ADC_Init+0x208>)
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	021a      	lsls	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	4a5e      	ldr	r2, [pc, #376]	; (8001e34 <ADC_Init+0x20c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e00f      	b.n	8001d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0202 	bic.w	r2, r2, #2
 8001d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
 8001d40:	005a      	lsls	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d028      	beq.n	8001da6 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <ADC_Init+0x13c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d904      	bls.n	8001d6e <ADC_Init+0x146>
 8001d64:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001d68:	4833      	ldr	r0, [pc, #204]	; (8001e38 <ADC_Init+0x210>)
 8001d6a:	f7ff f944 	bl	8000ff6 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d8c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	035a      	lsls	r2, r3, #13
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	e007      	b.n	8001db6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	051a      	lsls	r2, r3, #20
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001df8:	025a      	lsls	r2, r3, #9
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	029a      	lsls	r2, r3, #10
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40012300 	.word	0x40012300
 8001e34:	0f000001 	.word	0x0f000001
 8001e38:	08004fa4 	.word	0x08004fa4

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b07      	cmp	r3, #7
 8001fa4:	d00f      	beq.n	8001fc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	d00c      	beq.n	8001fc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d009      	beq.n	8001fc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d006      	beq.n	8001fc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d003      	beq.n	8001fc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fbe:	2190      	movs	r1, #144	; 0x90
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001fc2:	f7ff f818 	bl	8000ff6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff38 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	08004fdc 	.word	0x08004fdc

08001fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d903      	bls.n	8001ff8 <HAL_NVIC_SetPriority+0x20>
 8001ff0:	21a8      	movs	r1, #168	; 0xa8
 8001ff2:	480e      	ldr	r0, [pc, #56]	; (800202c <HAL_NVIC_SetPriority+0x54>)
 8001ff4:	f7fe ffff 	bl	8000ff6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	d903      	bls.n	8002006 <HAL_NVIC_SetPriority+0x2e>
 8001ffe:	21a9      	movs	r1, #169	; 0xa9
 8002000:	480a      	ldr	r0, [pc, #40]	; (800202c <HAL_NVIC_SetPriority+0x54>)
 8002002:	f7fe fff8 	bl	8000ff6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002006:	f7ff ff3d 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 800200a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	6978      	ldr	r0, [r7, #20]
 8002012:	f7ff ff8d 	bl	8001f30 <NVIC_EncodePriority>
 8002016:	4602      	mov	r2, r0
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff5c 	bl	8001edc <__NVIC_SetPriority>
}
 8002024:	bf00      	nop
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	08004fdc 	.word	0x08004fdc

08002030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	da03      	bge.n	800204a <HAL_NVIC_EnableIRQ+0x1a>
 8002042:	21bc      	movs	r1, #188	; 0xbc
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <HAL_NVIC_EnableIRQ+0x2c>)
 8002046:	f7fe ffd6 	bl	8000ff6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff26 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	08004fdc 	.word	0x08004fdc

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a33      	ldr	r2, [pc, #204]	; (8002148 <HAL_GPIO_Init+0xe8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d017      	beq.n	80020ae <HAL_GPIO_Init+0x4e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_GPIO_Init+0xec>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x4e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_GPIO_Init+0xf0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <HAL_GPIO_Init+0x4e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a30      	ldr	r2, [pc, #192]	; (8002154 <HAL_GPIO_Init+0xf4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <HAL_GPIO_Init+0x4e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <HAL_GPIO_Init+0xf8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x4e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_GPIO_Init+0xfc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x4e>
 80020a6:	21ac      	movs	r1, #172	; 0xac
 80020a8:	482d      	ldr	r0, [pc, #180]	; (8002160 <HAL_GPIO_Init+0x100>)
 80020aa:	f7fe ffa4 	bl	8000ff6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_GPIO_Init+0x64>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x6c>
 80020c4:	21ad      	movs	r1, #173	; 0xad
 80020c6:	4826      	ldr	r0, [pc, #152]	; (8002160 <HAL_GPIO_Init+0x100>)
 80020c8:	f7fe ff95 	bl	8000ff6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d035      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d031      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b11      	cmp	r3, #17
 80020e2:	d02d      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d029      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b12      	cmp	r3, #18
 80020f2:	d025      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80020fc:	d020      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002106:	d01b      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002110:	d016      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800211a:	d011      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002124:	d00c      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0xe0>
 8002138:	21ae      	movs	r1, #174	; 0xae
 800213a:	4809      	ldr	r0, [pc, #36]	; (8002160 <HAL_GPIO_Init+0x100>)
 800213c:	f7fe ff5b 	bl	8000ff6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e20c      	b.n	8002560 <HAL_GPIO_Init+0x500>
 8002146:	bf00      	nop
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40021c00 	.word	0x40021c00
 8002160:	08005018 	.word	0x08005018
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 81ec 	bne.w	800255a <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	2b02      	cmp	r3, #2
 8002198:	d144      	bne.n	8002224 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00f      	beq.n	80021c2 <HAL_GPIO_Init+0x162>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d00b      	beq.n	80021c2 <HAL_GPIO_Init+0x162>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x162>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x162>
 80021ba:	21c0      	movs	r1, #192	; 0xc0
 80021bc:	4884      	ldr	r0, [pc, #528]	; (80023d0 <HAL_GPIO_Init+0x370>)
 80021be:	f7fe ff1a 	bl	8000ff6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b03      	cmp	r3, #3
 800222e:	d027      	beq.n	8002280 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_GPIO_Init+0x1f0>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d007      	beq.n	8002250 <HAL_GPIO_Init+0x1f0>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x1f0>
 8002248:	21d1      	movs	r1, #209	; 0xd1
 800224a:	4861      	ldr	r0, [pc, #388]	; (80023d0 <HAL_GPIO_Init+0x370>)
 800224c:	f7fe fed3 	bl	8000ff6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	f040 80a3 	bne.w	80023d4 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d077      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b09      	cmp	r3, #9
 800229c:	d073      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d06f      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d06b      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d067      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d05f      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d05b      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d057      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d053      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d04f      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d04b      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d047      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d043      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b05      	cmp	r3, #5
 8002304:	d03f      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d03b      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b05      	cmp	r3, #5
 8002314:	d037      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b06      	cmp	r3, #6
 800231c:	d033      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d02f      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d02b      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b06      	cmp	r3, #6
 8002334:	d027      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b07      	cmp	r3, #7
 800233c:	d023      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b07      	cmp	r3, #7
 8002344:	d01f      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b07      	cmp	r3, #7
 800234c:	d01b      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b08      	cmp	r3, #8
 8002354:	d017      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b0a      	cmp	r3, #10
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b09      	cmp	r3, #9
 8002364:	d00f      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b09      	cmp	r3, #9
 800236c:	d00b      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x326>
 800237e:	21de      	movs	r1, #222	; 0xde
 8002380:	4813      	ldr	r0, [pc, #76]	; (80023d0 <HAL_GPIO_Init+0x370>)
 8002382:	f7fe fe38 	bl	8000ff6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	69b9      	ldr	r1, [r7, #24]
 80023ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80023ce:	e001      	b.n	80023d4 <HAL_GPIO_Init+0x374>
 80023d0:	08005018 	.word	0x08005018
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a2 	beq.w	800255a <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b56      	ldr	r3, [pc, #344]	; (8002574 <HAL_GPIO_Init+0x514>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a55      	ldr	r2, [pc, #340]	; (8002574 <HAL_GPIO_Init+0x514>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_GPIO_Init+0x514>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_GPIO_Init+0x518>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_GPIO_Init+0x51c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x432>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a47      	ldr	r2, [pc, #284]	; (8002580 <HAL_GPIO_Init+0x520>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x42e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a46      	ldr	r2, [pc, #280]	; (8002584 <HAL_GPIO_Init+0x524>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x42a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a45      	ldr	r2, [pc, #276]	; (8002588 <HAL_GPIO_Init+0x528>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x426>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a44      	ldr	r2, [pc, #272]	; (800258c <HAL_GPIO_Init+0x52c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x422>
 800247e:	2304      	movs	r3, #4
 8002480:	e008      	b.n	8002494 <HAL_GPIO_Init+0x434>
 8002482:	2307      	movs	r3, #7
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x434>
 8002486:	2303      	movs	r3, #3
 8002488:	e004      	b.n	8002494 <HAL_GPIO_Init+0x434>
 800248a:	2302      	movs	r3, #2
 800248c:	e002      	b.n	8002494 <HAL_GPIO_Init+0x434>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x434>
 8002492:	2300      	movs	r3, #0
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	4093      	lsls	r3, r2
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a4:	4934      	ldr	r1, [pc, #208]	; (8002578 <HAL_GPIO_Init+0x518>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_GPIO_Init+0x530>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d6:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <HAL_GPIO_Init+0x530>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024dc:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_GPIO_Init+0x530>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x530>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_GPIO_Init+0x530>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252a:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_GPIO_Init+0x530>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <HAL_GPIO_Init+0x530>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <HAL_GPIO_Init+0x530>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	f67f adfe 	bls.w	8002164 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40013800 	.word	0x40013800
 800257c:	40020000 	.word	0x40020000
 8002580:	40020400 	.word	0x40020400
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_GPIO_WritePin+0x20>
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_GPIO_WritePin+0x2a>
 80025b4:	f240 119d 	movw	r1, #413	; 0x19d
 80025b8:	480e      	ldr	r0, [pc, #56]	; (80025f4 <HAL_GPIO_WritePin+0x60>)
 80025ba:	f7fe fd1c 	bl	8000ff6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80025be:	787b      	ldrb	r3, [r7, #1]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_GPIO_WritePin+0x40>
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d004      	beq.n	80025d4 <HAL_GPIO_WritePin+0x40>
 80025ca:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80025ce:	4809      	ldr	r0, [pc, #36]	; (80025f4 <HAL_GPIO_WritePin+0x60>)
 80025d0:	f7fe fd11 	bl	8000ff6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	08005018 	.word	0x08005018

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e314      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b0f      	cmp	r3, #15
 8002610:	d903      	bls.n	800261a <HAL_RCC_OscConfig+0x22>
 8002612:	21e6      	movs	r1, #230	; 0xe6
 8002614:	4897      	ldr	r0, [pc, #604]	; (8002874 <HAL_RCC_OscConfig+0x27c>)
 8002616:	f7fe fcee 	bl	8000ff6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8088 	beq.w	8002738 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <HAL_RCC_OscConfig+0x54>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d008      	beq.n	800264c <HAL_RCC_OscConfig+0x54>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002642:	d003      	beq.n	800264c <HAL_RCC_OscConfig+0x54>
 8002644:	21eb      	movs	r1, #235	; 0xeb
 8002646:	488b      	ldr	r0, [pc, #556]	; (8002874 <HAL_RCC_OscConfig+0x27c>)
 8002648:	f7fe fcd5 	bl	8000ff6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264c:	4b8a      	ldr	r3, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b04      	cmp	r3, #4
 8002656:	d00c      	beq.n	8002672 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002658:	4b87      	ldr	r3, [pc, #540]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002660:	2b08      	cmp	r3, #8
 8002662:	d112      	bne.n	800268a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002664:	4b84      	ldr	r3, [pc, #528]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002670:	d10b      	bne.n	800268a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d05b      	beq.n	8002736 <HAL_RCC_OscConfig+0x13e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d157      	bne.n	8002736 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e2d4      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0xaa>
 8002694:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a77      	ldr	r2, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	e01d      	b.n	80026de <HAL_RCC_OscConfig+0xe6>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCC_OscConfig+0xce>
 80026ac:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a71      	ldr	r2, [pc, #452]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6e      	ldr	r2, [pc, #440]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e00b      	b.n	80026de <HAL_RCC_OscConfig+0xe6>
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6b      	ldr	r2, [pc, #428]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b69      	ldr	r3, [pc, #420]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a68      	ldr	r2, [pc, #416]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80026d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d013      	beq.n	800270e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe fec3 	bl	8001470 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ee:	f7fe febf 	bl	8001470 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e299      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002700:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0xf6>
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe feaf 	bl	8001470 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002716:	f7fe feab 	bl	8001470 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b64      	cmp	r3, #100	; 0x64
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e285      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x11e>
 8002734:	e000      	b.n	8002738 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002736:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d079      	beq.n	8002838 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_OscConfig+0x166>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d004      	beq.n	800275e <HAL_RCC_OscConfig+0x166>
 8002754:	f240 111d 	movw	r1, #285	; 0x11d
 8002758:	4846      	ldr	r0, [pc, #280]	; (8002874 <HAL_RCC_OscConfig+0x27c>)
 800275a:	f7fe fc4c 	bl	8000ff6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b1f      	cmp	r3, #31
 8002764:	d904      	bls.n	8002770 <HAL_RCC_OscConfig+0x178>
 8002766:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800276a:	4842      	ldr	r0, [pc, #264]	; (8002874 <HAL_RCC_OscConfig+0x27c>)
 800276c:	f7fe fc43 	bl	8000ff6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277c:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002784:	2b08      	cmp	r3, #8
 8002786:	d11c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d116      	bne.n	80027c2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002794:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_OscConfig+0x1b4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e243      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	492f      	ldr	r1, [pc, #188]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c0:	e03a      	b.n	8002838 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d020      	beq.n	800280c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ca:	4b2c      	ldr	r3, [pc, #176]	; (800287c <HAL_RCC_OscConfig+0x284>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe4e 	bl	8001470 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe fe4a 	bl	8001470 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e224      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	491c      	ldr	r1, [pc, #112]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
 800280a:	e015      	b.n	8002838 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x284>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fe2d 	bl	8001470 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281a:	f7fe fe29 	bl	8001470 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e203      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x280>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d045      	beq.n	80028d0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_OscConfig+0x266>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d004      	beq.n	800285e <HAL_RCC_OscConfig+0x266>
 8002854:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002858:	4806      	ldr	r0, [pc, #24]	; (8002874 <HAL_RCC_OscConfig+0x27c>)
 800285a:	f7fe fbcc 	bl	8000ff6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01e      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_OscConfig+0x288>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fe00 	bl	8001470 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	e010      	b.n	8002896 <HAL_RCC_OscConfig+0x29e>
 8002874:	08005054 	.word	0x08005054
 8002878:	40023800 	.word	0x40023800
 800287c:	42470000 	.word	0x42470000
 8002880:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe fdf4 	bl	8001470 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1ce      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x28c>
 80028a2:	e015      	b.n	80028d0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b5b      	ldr	r3, [pc, #364]	; (8002a14 <HAL_RCC_OscConfig+0x41c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fde1 	bl	8001470 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe fddd 	bl	8001470 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1b7      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80b0 	beq.w	8002a3e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d008      	beq.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d004      	beq.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028fa:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80028fe:	4846      	ldr	r0, [pc, #280]	; (8002a18 <HAL_RCC_OscConfig+0x420>)
 8002900:	f7fe fb79 	bl	8000ff6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002904:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10f      	bne.n	8002930 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292c:	2301      	movs	r3, #1
 800292e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_RCC_OscConfig+0x424>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d118      	bne.n	800296e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_RCC_OscConfig+0x424>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a36      	ldr	r2, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x424>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002948:	f7fe fd92 	bl	8001470 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7fe fd8e 	bl	8001470 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e168      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <HAL_RCC_OscConfig+0x424>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x38c>
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	e01c      	b.n	80029be <HAL_RCC_OscConfig+0x3c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b05      	cmp	r3, #5
 800298a:	d10c      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3ae>
 800298c:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	e00b      	b.n	80029be <HAL_RCC_OscConfig+0x3c6>
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d015      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fd53 	bl	8001470 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fd4f 	bl	8001470 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e127      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_OscConfig+0x418>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ee      	beq.n	80029ce <HAL_RCC_OscConfig+0x3d6>
 80029f0:	e01c      	b.n	8002a2c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fd3d 	bl	8001470 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	e012      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fd39 	bl	8001470 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d909      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e111      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470e80 	.word	0x42470e80
 8002a18:	08005054 	.word	0x08005054
 8002a1c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	4b86      	ldr	r3, [pc, #536]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e6      	bne.n	80029fa <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a81      	ldr	r2, [pc, #516]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x468>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCC_OscConfig+0x468>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d004      	beq.n	8002a60 <HAL_RCC_OscConfig+0x468>
 8002a56:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002a5a:	4879      	ldr	r0, [pc, #484]	; (8002c40 <HAL_RCC_OscConfig+0x648>)
 8002a5c:	f7fe facb 	bl	8000ff6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80e4 	beq.w	8002c32 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6a:	4b74      	ldr	r3, [pc, #464]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	f000 80a5 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	f040 8089 	bne.w	8002b94 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4a6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d004      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4a6>
 8002a94:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002a98:	4869      	ldr	r0, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x648>)
 8002a9a:	f7fe faac 	bl	8000ff6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	2b3f      	cmp	r3, #63	; 0x3f
 8002aa4:	d904      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x4b8>
 8002aa6:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002aaa:	4865      	ldr	r0, [pc, #404]	; (8002c40 <HAL_RCC_OscConfig+0x648>)
 8002aac:	f7fe faa3 	bl	8000ff6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	2b31      	cmp	r3, #49	; 0x31
 8002ab6:	d904      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4ca>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ac0:	d904      	bls.n	8002acc <HAL_RCC_OscConfig+0x4d4>
 8002ac2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002ac6:	485e      	ldr	r0, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x648>)
 8002ac8:	f7fe fa95 	bl	8000ff6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4fe>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00c      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4fe>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b06      	cmp	r3, #6
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4fe>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d004      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4fe>
 8002aec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002af0:	4853      	ldr	r0, [pc, #332]	; (8002c40 <HAL_RCC_OscConfig+0x648>)
 8002af2:	f7fe fa80 	bl	8000ff6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d903      	bls.n	8002b06 <HAL_RCC_OscConfig+0x50e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	d904      	bls.n	8002b10 <HAL_RCC_OscConfig+0x518>
 8002b06:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002b0a:	484d      	ldr	r0, [pc, #308]	; (8002c40 <HAL_RCC_OscConfig+0x648>)
 8002b0c:	f7fe fa73 	bl	8000ff6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x64c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fcab 	bl	8001470 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe fca7 	bl	8001470 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e081      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b30:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	019b      	lsls	r3, r3, #6
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	3b01      	subs	r3, #1
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	4936      	ldr	r1, [pc, #216]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <HAL_RCC_OscConfig+0x64c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fc80 	bl	8001470 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fc7c 	bl	8001470 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e056      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x57c>
 8002b92:	e04e      	b.n	8002c32 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x64c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fc69 	bl	8001470 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fc65 	bl	8001470 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e03f      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5aa>
 8002bc0:	e037      	b.n	8002c32 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e032      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_OscConfig+0x644>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d028      	beq.n	8002c2e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d11a      	bne.n	8002c2e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bfe:	4013      	ands	r3, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d111      	bne.n	8002c2e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	3b01      	subs	r3, #1
 8002c18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	08005054 	.word	0x08005054
 8002c44:	42470060 	.word	0x42470060

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e174      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x24>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d904      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x2e>
 8002c6c:	f240 215a 	movw	r1, #602	; 0x25a
 8002c70:	487b      	ldr	r0, [pc, #492]	; (8002e60 <HAL_RCC_ClockConfig+0x218>)
 8002c72:	f7fe f9c0 	bl	8000ff6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d019      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d016      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d010      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d00d      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d007      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b07      	cmp	r3, #7
 8002ca4:	d004      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
 8002ca6:	f240 215b 	movw	r1, #603	; 0x25b
 8002caa:	486d      	ldr	r0, [pc, #436]	; (8002e60 <HAL_RCC_ClockConfig+0x218>)
 8002cac:	f7fe f9a3 	bl	8000ff6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_RCC_ClockConfig+0x21c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d90c      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b69      	ldr	r3, [pc, #420]	; (8002e64 <HAL_RCC_ClockConfig+0x21c>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_ClockConfig+0x21c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e136      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d049      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf0:	4b5d      	ldr	r3, [pc, #372]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a5c      	ldr	r2, [pc, #368]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d08:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a56      	ldr	r2, [pc, #344]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d024      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b90      	cmp	r3, #144	; 0x90
 8002d2a:	d01c      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2ba0      	cmp	r3, #160	; 0xa0
 8002d32:	d018      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2bb0      	cmp	r3, #176	; 0xb0
 8002d3a:	d014      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2bc0      	cmp	r3, #192	; 0xc0
 8002d42:	d010      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2bd0      	cmp	r3, #208	; 0xd0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2be0      	cmp	r3, #224	; 0xe0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2bf0      	cmp	r3, #240	; 0xf0
 8002d5a:	d004      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x11e>
 8002d5c:	f240 217e 	movw	r1, #638	; 0x27e
 8002d60:	483f      	ldr	r0, [pc, #252]	; (8002e60 <HAL_RCC_ClockConfig+0x218>)
 8002d62:	f7fe f948 	bl	8000ff6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d66:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	493d      	ldr	r1, [pc, #244]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d059      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x166>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d00c      	beq.n	8002dae <HAL_RCC_ClockConfig+0x166>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x166>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d004      	beq.n	8002dae <HAL_RCC_ClockConfig+0x166>
 8002da4:	f240 2185 	movw	r1, #645	; 0x285
 8002da8:	482d      	ldr	r0, [pc, #180]	; (8002e60 <HAL_RCC_ClockConfig+0x218>)
 8002daa:	f7fe f924 	bl	8000ff6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d119      	bne.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0bf      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0af      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0a7      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4919      	ldr	r1, [pc, #100]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fb32 	bl	8001470 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fe fb2e 	bl	8001470 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e08f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_RCC_ClockConfig+0x220>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x21c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d212      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RCC_ClockConfig+0x21c>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_ClockConfig+0x21c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d007      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e072      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2fe>
 8002e60:	08005054 	.word	0x08005054
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d025      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d018      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x26a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e88:	d013      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x26a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e92:	d00e      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x26a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x26a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002ea6:	d004      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x26a>
 8002ea8:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002eac:	4828      	ldr	r0, [pc, #160]	; (8002f50 <HAL_RCC_ClockConfig+0x308>)
 8002eae:	f7fe f8a2 	bl	8000ff6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_RCC_ClockConfig+0x30c>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4925      	ldr	r1, [pc, #148]	; (8002f54 <HAL_RCC_ClockConfig+0x30c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d026      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d018      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x2c2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d013      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x2c2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002eea:	d00e      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x2c2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x2c2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002efe:	d004      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x2c2>
 8002f00:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002f04:	4812      	ldr	r0, [pc, #72]	; (8002f50 <HAL_RCC_ClockConfig+0x308>)
 8002f06:	f7fe f876 	bl	8000ff6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x30c>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x30c>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f821 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x30c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x310>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x314>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x318>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f90a 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	08005054 	.word	0x08005054
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08005138 	.word	0x08005138
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b094      	sub	sp, #80	; 0x50
 8002f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f70:	2300      	movs	r3, #0
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7c:	4b79      	ldr	r3, [pc, #484]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d00d      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	f200 80e1 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x34>
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f96:	e0db      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b73      	ldr	r3, [pc, #460]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f9c:	e0db      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa2:	e0d8      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d063      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4621      	mov	r1, r4
 8002ff0:	1a51      	subs	r1, r2, r1
 8002ff2:	6139      	str	r1, [r7, #16]
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003008:	4659      	mov	r1, fp
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003012:	4651      	mov	r1, sl
 8003014:	018a      	lsls	r2, r1, #6
 8003016:	4651      	mov	r1, sl
 8003018:	ebb2 0801 	subs.w	r8, r2, r1
 800301c:	4659      	mov	r1, fp
 800301e:	eb63 0901 	sbc.w	r9, r3, r1
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800302e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003036:	4690      	mov	r8, r2
 8003038:	4699      	mov	r9, r3
 800303a:	4623      	mov	r3, r4
 800303c:	eb18 0303 	adds.w	r3, r8, r3
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	462b      	mov	r3, r5
 8003044:	eb49 0303 	adc.w	r3, r9, r3
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003056:	4629      	mov	r1, r5
 8003058:	024b      	lsls	r3, r1, #9
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003060:	4621      	mov	r1, r4
 8003062:	024a      	lsls	r2, r1, #9
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
 800306e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003074:	f7fd f8b0 	bl	80001d8 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	e058      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	2200      	movs	r2, #0
 800308a:	4618      	mov	r0, r3
 800308c:	4611      	mov	r1, r2
 800308e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0159      	lsls	r1, r3, #5
 80030aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ae:	0150      	lsls	r0, r2, #5
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4641      	mov	r1, r8
 80030b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ba:	4649      	mov	r1, r9
 80030bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030d4:	ebb2 040a 	subs.w	r4, r2, sl
 80030d8:	eb63 050b 	sbc.w	r5, r3, fp
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	00eb      	lsls	r3, r5, #3
 80030e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ea:	00e2      	lsls	r2, r4, #3
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	4643      	mov	r3, r8
 80030f2:	18e3      	adds	r3, r4, r3
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	464b      	mov	r3, r9
 80030f8:	eb45 0303 	adc.w	r3, r5, r3
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	2200      	movs	r2, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	61fa      	str	r2, [r7, #28]
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003128:	f7fd f856 	bl	80001d8 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003158:	4618      	mov	r0, r3
 800315a:	3750      	adds	r7, #80	; 0x50
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	007a1200 	.word	0x007a1200

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_RCC_GetHCLKFreq+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000

08003188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800318c:	f7ff fff0 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	08005148 	.word	0x08005148

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b4:	f7ff ffdc 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0b5b      	lsrs	r3, r3, #13
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08005148 	.word	0x08005148

080031d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	220f      	movs	r2, #15
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_RCC_GetClockConfig+0x5c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0203 	and.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	08db      	lsrs	r3, r3, #3
 8003212:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <HAL_RCC_GetClockConfig+0x60>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0207 	and.w	r2, r3, #7
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	601a      	str	r2, [r3, #0]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40023c00 	.word	0x40023c00

0800323c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e18c      	b.n	8003568 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a75      	ldr	r2, [pc, #468]	; (8003428 <HAL_SPI_Init+0x1ec>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d018      	beq.n	800328a <HAL_SPI_Init+0x4e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a73      	ldr	r2, [pc, #460]	; (800342c <HAL_SPI_Init+0x1f0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_SPI_Init+0x4e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a72      	ldr	r2, [pc, #456]	; (8003430 <HAL_SPI_Init+0x1f4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_SPI_Init+0x4e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a70      	ldr	r2, [pc, #448]	; (8003434 <HAL_SPI_Init+0x1f8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_SPI_Init+0x4e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6f      	ldr	r2, [pc, #444]	; (8003438 <HAL_SPI_Init+0x1fc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_SPI_Init+0x4e>
 8003280:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003284:	486d      	ldr	r0, [pc, #436]	; (800343c <HAL_SPI_Init+0x200>)
 8003286:	f7fd feb6 	bl	8000ff6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_SPI_Init+0x6a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329a:	d004      	beq.n	80032a6 <HAL_SPI_Init+0x6a>
 800329c:	f240 1141 	movw	r1, #321	; 0x141
 80032a0:	4866      	ldr	r0, [pc, #408]	; (800343c <HAL_SPI_Init+0x200>)
 80032a2:	f7fd fea8 	bl	8000ff6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <HAL_SPI_Init+0x90>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d009      	beq.n	80032cc <HAL_SPI_Init+0x90>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d004      	beq.n	80032cc <HAL_SPI_Init+0x90>
 80032c2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80032c6:	485d      	ldr	r0, [pc, #372]	; (800343c <HAL_SPI_Init+0x200>)
 80032c8:	f7fd fe95 	bl	8000ff6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d4:	d008      	beq.n	80032e8 <HAL_SPI_Init+0xac>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <HAL_SPI_Init+0xac>
 80032de:	f240 1143 	movw	r1, #323	; 0x143
 80032e2:	4856      	ldr	r0, [pc, #344]	; (800343c <HAL_SPI_Init+0x200>)
 80032e4:	f7fd fe87 	bl	8000ff6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f0:	d00d      	beq.n	800330e <HAL_SPI_Init+0xd2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_SPI_Init+0xd2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003302:	d004      	beq.n	800330e <HAL_SPI_Init+0xd2>
 8003304:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003308:	484c      	ldr	r0, [pc, #304]	; (800343c <HAL_SPI_Init+0x200>)
 800330a:	f7fd fe74 	bl	8000ff6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	2b08      	cmp	r3, #8
 800331c:	d01c      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	2b10      	cmp	r3, #16
 8003324:	d018      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	2b18      	cmp	r3, #24
 800332c:	d014      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	2b20      	cmp	r3, #32
 8003334:	d010      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	2b28      	cmp	r3, #40	; 0x28
 800333c:	d00c      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2b30      	cmp	r3, #48	; 0x30
 8003344:	d008      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b38      	cmp	r3, #56	; 0x38
 800334c:	d004      	beq.n	8003358 <HAL_SPI_Init+0x11c>
 800334e:	f240 1145 	movw	r1, #325	; 0x145
 8003352:	483a      	ldr	r0, [pc, #232]	; (800343c <HAL_SPI_Init+0x200>)
 8003354:	f7fd fe4f 	bl	8000ff6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_SPI_Init+0x136>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	2b80      	cmp	r3, #128	; 0x80
 8003366:	d004      	beq.n	8003372 <HAL_SPI_Init+0x136>
 8003368:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800336c:	4833      	ldr	r0, [pc, #204]	; (800343c <HAL_SPI_Init+0x200>)
 800336e:	f7fd fe42 	bl	8000ff6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_SPI_Init+0x150>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b10      	cmp	r3, #16
 8003380:	d004      	beq.n	800338c <HAL_SPI_Init+0x150>
 8003382:	f240 1147 	movw	r1, #327	; 0x147
 8003386:	482d      	ldr	r0, [pc, #180]	; (800343c <HAL_SPI_Init+0x200>)
 8003388:	f7fd fe35 	bl	8000ff6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2b00      	cmp	r3, #0
 8003392:	d155      	bne.n	8003440 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_SPI_Init+0x172>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d004      	beq.n	80033ae <HAL_SPI_Init+0x172>
 80033a4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80033a8:	4824      	ldr	r0, [pc, #144]	; (800343c <HAL_SPI_Init+0x200>)
 80033aa:	f7fd fe24 	bl	8000ff6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_SPI_Init+0x18c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d004      	beq.n	80033c8 <HAL_SPI_Init+0x18c>
 80033be:	f240 114b 	movw	r1, #331	; 0x14b
 80033c2:	481e      	ldr	r0, [pc, #120]	; (800343c <HAL_SPI_Init+0x200>)
 80033c4:	f7fd fe17 	bl	8000ff6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d0:	d125      	bne.n	800341e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d05d      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d059      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d055      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b18      	cmp	r3, #24
 80033f0:	d051      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d04d      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	2b28      	cmp	r3, #40	; 0x28
 8003400:	d049      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b30      	cmp	r3, #48	; 0x30
 8003408:	d045      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b38      	cmp	r3, #56	; 0x38
 8003410:	d041      	beq.n	8003496 <HAL_SPI_Init+0x25a>
 8003412:	f240 114f 	movw	r1, #335	; 0x14f
 8003416:	4809      	ldr	r0, [pc, #36]	; (800343c <HAL_SPI_Init+0x200>)
 8003418:	f7fd fded 	bl	8000ff6 <assert_failed>
 800341c:	e03b      	b.n	8003496 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	61da      	str	r2, [r3, #28]
 8003424:	e037      	b.n	8003496 <HAL_SPI_Init+0x25a>
 8003426:	bf00      	nop
 8003428:	40013000 	.word	0x40013000
 800342c:	40003800 	.word	0x40003800
 8003430:	40003c00 	.word	0x40003c00
 8003434:	40013400 	.word	0x40013400
 8003438:	40015000 	.word	0x40015000
 800343c:	0800508c 	.word	0x0800508c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d01c      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b10      	cmp	r3, #16
 8003456:	d018      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b18      	cmp	r3, #24
 800345e:	d014      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b20      	cmp	r3, #32
 8003466:	d010      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b28      	cmp	r3, #40	; 0x28
 800346e:	d00c      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b30      	cmp	r3, #48	; 0x30
 8003476:	d008      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b38      	cmp	r3, #56	; 0x38
 800347e:	d004      	beq.n	800348a <HAL_SPI_Init+0x24e>
 8003480:	f240 1159 	movw	r1, #345	; 0x159
 8003484:	483a      	ldr	r0, [pc, #232]	; (8003570 <HAL_SPI_Init+0x334>)
 8003486:	f7fd fdb6 	bl	8000ff6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fd fde1 	bl	8001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	f003 0104 	and.w	r1, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0210 	and.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	0800508c 	.word	0x0800508c

08003574 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_SPI_Transmit+0x30>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003598:	d004      	beq.n	80035a4 <HAL_SPI_Transmit+0x30>
 800359a:	f44f 7142 	mov.w	r1, #776	; 0x308
 800359e:	4880      	ldr	r0, [pc, #512]	; (80037a0 <HAL_SPI_Transmit+0x22c>)
 80035a0:	f7fd fd29 	bl	8000ff6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_SPI_Transmit+0x3e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e128      	b.n	8003804 <HAL_SPI_Transmit+0x290>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ba:	f7fd ff59 	bl	8001470 <HAL_GetTick>
 80035be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d002      	beq.n	80035d6 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
 80035d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d4:	e10d      	b.n	80037f2 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_Transmit+0x6e>
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035e6:	e104      	b.n	80037f2 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2203      	movs	r2, #3
 80035ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362e:	d10f      	bne.n	8003650 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800364e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d007      	beq.n	800366e <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003676:	d14b      	bne.n	8003710 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_SPI_Transmit+0x112>
 8003680:	8afb      	ldrh	r3, [r7, #22]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d13e      	bne.n	8003704 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036aa:	e02b      	b.n	8003704 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d112      	bne.n	80036e0 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	1c9a      	adds	r2, r3, #2
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80036de:	e011      	b.n	8003704 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e0:	f7fd fec6 	bl	8001470 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d803      	bhi.n	80036f8 <HAL_SPI_Transmit+0x184>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f6:	d102      	bne.n	80036fe <HAL_SPI_Transmit+0x18a>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003702:	e076      	b.n	80037f2 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ce      	bne.n	80036ac <HAL_SPI_Transmit+0x138>
 800370e:	e04e      	b.n	80037ae <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_SPI_Transmit+0x1aa>
 8003718:	8afb      	ldrh	r3, [r7, #22]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d142      	bne.n	80037a4 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003744:	e02e      	b.n	80037a4 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d113      	bne.n	800377c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	7812      	ldrb	r2, [r2, #0]
 8003760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	86da      	strh	r2, [r3, #54]	; 0x36
 800377a:	e013      	b.n	80037a4 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800377c:	f7fd fe78 	bl	8001470 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d803      	bhi.n	8003794 <HAL_SPI_Transmit+0x220>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit+0x226>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800379e:	e028      	b.n	80037f2 <HAL_SPI_Transmit+0x27e>
 80037a0:	0800508c 	.word	0x0800508c
    while (hspi->TxXferCount > 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1cb      	bne.n	8003746 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fbe6 	bl	8003f84 <SPI_EndRxTxTransaction>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e000      	b.n	80037f2 <HAL_SPI_Transmit+0x27e>
  }

error:
 80037f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003802:	7ffb      	ldrb	r3, [r7, #31]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003828:	d112      	bne.n	8003850 <HAL_SPI_Receive+0x44>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10e      	bne.n	8003850 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2204      	movs	r2, #4
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f8f2 	bl	8003a30 <HAL_SPI_TransmitReceive>
 800384c:	4603      	mov	r3, r0
 800384e:	e0ea      	b.n	8003a26 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_SPI_Receive+0x52>
 800385a:	2302      	movs	r3, #2
 800385c:	e0e3      	b.n	8003a26 <HAL_SPI_Receive+0x21a>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003866:	f7fd fe03 	bl	8001470 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d002      	beq.n	800387e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800387c:	e0ca      	b.n	8003a14 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_SPI_Receive+0x7e>
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800388e:	e0c1      	b.n	8003a14 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2204      	movs	r2, #4
 8003894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d10f      	bne.n	80038f8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d007      	beq.n	8003916 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d162      	bne.n	80039e4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800391e:	e02e      	b.n	800397e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d115      	bne.n	800395a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f103 020c 	add.w	r2, r3, #12
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003958:	e011      	b.n	800397e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395a:	f7fd fd89 	bl	8001470 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d803      	bhi.n	8003972 <HAL_SPI_Receive+0x166>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003970:	d102      	bne.n	8003978 <HAL_SPI_Receive+0x16c>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800397c:	e04a      	b.n	8003a14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1cb      	bne.n	8003920 <HAL_SPI_Receive+0x114>
 8003988:	e031      	b.n	80039ee <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d113      	bne.n	80039c0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	b292      	uxth	r2, r2
 80039a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	1c9a      	adds	r2, r3, #2
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039be:	e011      	b.n	80039e4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c0:	f7fd fd56 	bl	8001470 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d803      	bhi.n	80039d8 <HAL_SPI_Receive+0x1cc>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d6:	d102      	bne.n	80039de <HAL_SPI_Receive+0x1d2>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039e2:	e017      	b.n	8003a14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1cd      	bne.n	800398a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fa60 	bl	8003eb8 <SPI_EndRxTransaction>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	75fb      	strb	r3, [r7, #23]
 8003a10:	e000      	b.n	8003a14 <HAL_SPI_Receive+0x208>
  }

error :
 8003a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	; 0x30
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x2a>
 8003a50:	f240 417c 	movw	r1, #1148	; 0x47c
 8003a54:	4884      	ldr	r0, [pc, #528]	; (8003c68 <HAL_SPI_TransmitReceive+0x238>)
 8003a56:	f7fd face 	bl	8000ff6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x38>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e18d      	b.n	8003d84 <HAL_SPI_TransmitReceive+0x354>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a70:	f7fd fcfe 	bl	8001470 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d00f      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x82>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a98:	d107      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x7a>
 8003aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d003      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ab0:	e15e      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x94>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x94>
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aca:	e151      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d003      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2205      	movs	r2, #5
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	887a      	ldrh	r2, [r7, #2]
 8003af6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d007      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3c:	d178      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x11c>
 8003b46:	8b7b      	ldrh	r3, [r7, #26]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d166      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	1c9a      	adds	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b70:	e053      	b.n	8003c1a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x188>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x188>
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d113      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d119      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x1ca>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d014      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bfa:	f7fd fc39 	bl	8001470 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d807      	bhi.n	8003c1a <HAL_SPI_TransmitReceive+0x1ea>
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d003      	beq.n	8003c1a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c18:	e0aa      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1a6      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x142>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1a1      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x142>
 8003c2e:	e07f      	b.n	8003d30 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x20e>
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d16e      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	7812      	ldrb	r2, [r2, #0]
 8003c4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c64:	e05a      	b.n	8003d1c <HAL_SPI_TransmitReceive+0x2ec>
 8003c66:	bf00      	nop
 8003c68:	0800508c 	.word	0x0800508c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d11c      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x284>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x284>
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d114      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d119      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x2c6>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d014      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cf6:	f7fd fbbb 	bl	8001470 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d803      	bhi.n	8003d0e <HAL_SPI_TransmitReceive+0x2de>
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0c:	d102      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x2e4>
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d1a:	e029      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1a2      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x23c>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d19d      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f925 	bl	8003f84 <SPI_EndRxTxTransaction>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d4c:	e010      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	e000      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8003d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3730      	adds	r7, #48	; 0x30
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9a:	b2db      	uxtb	r3, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003db8:	f7fd fb5a 	bl	8001470 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dc8:	f7fd fb52 	bl	8001470 <HAL_GetTick>
 8003dcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dce:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	015b      	lsls	r3, r3, #5
 8003dd4:	0d1b      	lsrs	r3, r3, #20
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dde:	e054      	b.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de6:	d050      	beq.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003de8:	f7fd fb42 	bl	8001470 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d902      	bls.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d13d      	bne.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e16:	d111      	bne.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e20:	d004      	beq.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2a:	d107      	bne.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e44:	d10f      	bne.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e017      	b.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d19b      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ecc:	d111      	bne.n	8003ef2 <SPI_EndRxTransaction+0x3a>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed6:	d004      	beq.n	8003ee2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee0:	d107      	bne.n	8003ef2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efa:	d12a      	bne.n	8003f52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d012      	beq.n	8003f2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ff49 	bl	8003da8 <SPI_WaitFlagStateUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02d      	beq.n	8003f78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e026      	b.n	8003f7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2101      	movs	r1, #1
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff ff36 	bl	8003da8 <SPI_WaitFlagStateUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01a      	beq.n	8003f78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e013      	b.n	8003f7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff ff23 	bl	8003da8 <SPI_WaitFlagStateUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e000      	b.n	8003f7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <SPI_EndRxTxTransaction+0x7c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <SPI_EndRxTxTransaction+0x80>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	0d5b      	lsrs	r3, r3, #21
 8003f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fa0:	fb02 f303 	mul.w	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fae:	d112      	bne.n	8003fd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff fef4 	bl	8003da8 <SPI_WaitFlagStateUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e00f      	b.n	8003ff6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d0f2      	beq.n	8003fd6 <SPI_EndRxTxTransaction+0x52>
 8003ff0:	e000      	b.n	8003ff4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ff2:	bf00      	nop
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000000 	.word	0x20000000
 8004004:	165e9f81 	.word	0x165e9f81

08004008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e0a7      	b.n	800416a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a55      	ldr	r2, [pc, #340]	; (8004174 <HAL_TIM_Base_Init+0x16c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d027      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d022      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_TIM_Base_Init+0x170>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a4f      	ldr	r2, [pc, #316]	; (800417c <HAL_TIM_Base_Init+0x174>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <HAL_TIM_Base_Init+0x178>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a4c      	ldr	r2, [pc, #304]	; (8004184 <HAL_TIM_Base_Init+0x17c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4b      	ldr	r2, [pc, #300]	; (8004188 <HAL_TIM_Base_Init+0x180>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a49      	ldr	r2, [pc, #292]	; (800418c <HAL_TIM_Base_Init+0x184>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_TIM_Base_Init+0x6c>
 800406a:	f240 1113 	movw	r1, #275	; 0x113
 800406e:	4848      	ldr	r0, [pc, #288]	; (8004190 <HAL_TIM_Base_Init+0x188>)
 8004070:	f7fc ffc1 	bl	8000ff6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d014      	beq.n	80040a6 <HAL_TIM_Base_Init+0x9e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b10      	cmp	r3, #16
 8004082:	d010      	beq.n	80040a6 <HAL_TIM_Base_Init+0x9e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b20      	cmp	r3, #32
 800408a:	d00c      	beq.n	80040a6 <HAL_TIM_Base_Init+0x9e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d008      	beq.n	80040a6 <HAL_TIM_Base_Init+0x9e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b60      	cmp	r3, #96	; 0x60
 800409a:	d004      	beq.n	80040a6 <HAL_TIM_Base_Init+0x9e>
 800409c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80040a0:	483b      	ldr	r0, [pc, #236]	; (8004190 <HAL_TIM_Base_Init+0x188>)
 80040a2:	f7fc ffa8 	bl	8000ff6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <HAL_TIM_Base_Init+0xc4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d009      	beq.n	80040cc <HAL_TIM_Base_Init+0xc4>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d004      	beq.n	80040cc <HAL_TIM_Base_Init+0xc4>
 80040c2:	f240 1115 	movw	r1, #277	; 0x115
 80040c6:	4832      	ldr	r0, [pc, #200]	; (8004190 <HAL_TIM_Base_Init+0x188>)
 80040c8:	f7fc ff95 	bl	8000ff6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_TIM_Base_Init+0xde>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d004      	beq.n	80040e6 <HAL_TIM_Base_Init+0xde>
 80040dc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80040e0:	482b      	ldr	r0, [pc, #172]	; (8004190 <HAL_TIM_Base_Init+0x188>)
 80040e2:	f7fc ff88 	bl	8000ff6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f84a 	bl	8004194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 fa0a 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800
 8004190:	080050c4 	.word	0x080050c4

08004194 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <HAL_TIM_Base_Start_IT+0x104>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d027      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d022      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a39      	ldr	r2, [pc, #228]	; (80042b0 <HAL_TIM_Base_Start_IT+0x108>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a38      	ldr	r2, [pc, #224]	; (80042b4 <HAL_TIM_Base_Start_IT+0x10c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d018      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a36      	ldr	r2, [pc, #216]	; (80042b8 <HAL_TIM_Base_Start_IT+0x110>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a35      	ldr	r2, [pc, #212]	; (80042bc <HAL_TIM_Base_Start_IT+0x114>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a33      	ldr	r2, [pc, #204]	; (80042c0 <HAL_TIM_Base_Start_IT+0x118>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a32      	ldr	r2, [pc, #200]	; (80042c4 <HAL_TIM_Base_Start_IT+0x11c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x62>
 8004200:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004204:	4830      	ldr	r0, [pc, #192]	; (80042c8 <HAL_TIM_Base_Start_IT+0x120>)
 8004206:	f7fc fef6 	bl	8000ff6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e044      	b.n	80042a4 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <HAL_TIM_Base_Start_IT+0x104>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_TIM_Base_Start_IT+0xc6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d013      	beq.n	800426e <HAL_TIM_Base_Start_IT+0xc6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <HAL_TIM_Base_Start_IT+0x108>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_TIM_Base_Start_IT+0xc6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <HAL_TIM_Base_Start_IT+0x10c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_TIM_Base_Start_IT+0xc6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <HAL_TIM_Base_Start_IT+0x110>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_TIM_Base_Start_IT+0xc6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <HAL_TIM_Base_Start_IT+0x114>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d111      	bne.n	8004292 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d010      	beq.n	80042a2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	e007      	b.n	80042a2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800
 80042c8:	080050c4 	.word	0x080050c4

080042cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d122      	bne.n	8004328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d11b      	bne.n	8004328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0202 	mvn.w	r2, #2
 80042f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8ee 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 8004314:	e005      	b.n	8004322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8e0 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8f1 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b04      	cmp	r3, #4
 8004334:	d122      	bne.n	800437c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0204 	mvn.w	r2, #4
 800434c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8c4 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8b6 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8c7 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b08      	cmp	r3, #8
 8004388:	d122      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b08      	cmp	r3, #8
 8004396:	d11b      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0208 	mvn.w	r2, #8
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2204      	movs	r2, #4
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f89a 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f88c 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f89d 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d122      	bne.n	8004424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d11b      	bne.n	8004424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0210 	mvn.w	r2, #16
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2208      	movs	r2, #8
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f870 	bl	80044f0 <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f862 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f873 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10e      	bne.n	8004450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0201 	mvn.w	r2, #1
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc fdbc 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d10e      	bne.n	800447c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d107      	bne.n	800447c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8e2 	bl	8004640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f838 	bl	8004518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0220 	mvn.w	r2, #32
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f8ac 	bl	800462c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a34      	ldr	r2, [pc, #208]	; (8004610 <TIM_Base_SetConfig+0xe4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00f      	beq.n	8004564 <TIM_Base_SetConfig+0x38>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d00b      	beq.n	8004564 <TIM_Base_SetConfig+0x38>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a31      	ldr	r2, [pc, #196]	; (8004614 <TIM_Base_SetConfig+0xe8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <TIM_Base_SetConfig+0x38>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a30      	ldr	r2, [pc, #192]	; (8004618 <TIM_Base_SetConfig+0xec>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0x38>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a2f      	ldr	r2, [pc, #188]	; (800461c <TIM_Base_SetConfig+0xf0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a25      	ldr	r2, [pc, #148]	; (8004610 <TIM_Base_SetConfig+0xe4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01b      	beq.n	80045b6 <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004584:	d017      	beq.n	80045b6 <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a22      	ldr	r2, [pc, #136]	; (8004614 <TIM_Base_SetConfig+0xe8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a21      	ldr	r2, [pc, #132]	; (8004618 <TIM_Base_SetConfig+0xec>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00f      	beq.n	80045b6 <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a20      	ldr	r2, [pc, #128]	; (800461c <TIM_Base_SetConfig+0xf0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <TIM_Base_SetConfig+0xf4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <TIM_Base_SetConfig+0xf8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <TIM_Base_SetConfig+0xfc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d108      	bne.n	80045c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <TIM_Base_SetConfig+0xe4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d103      	bne.n	80045fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	615a      	str	r2, [r3, #20]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40010000 	.word	0x40010000
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40000c00 	.word	0x40000c00
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800

0800462c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0a0      	b.n	80047a8 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d02c      	beq.n	80046c8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a4f      	ldr	r2, [pc, #316]	; (80047b0 <HAL_UART_Init+0x15c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <HAL_UART_Init+0x42>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a4d      	ldr	r2, [pc, #308]	; (80047b4 <HAL_UART_Init+0x160>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_UART_Init+0x42>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a4c      	ldr	r2, [pc, #304]	; (80047b8 <HAL_UART_Init+0x164>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_UART_Init+0x42>
 800468c:	f240 1173 	movw	r1, #371	; 0x173
 8004690:	484a      	ldr	r0, [pc, #296]	; (80047bc <HAL_UART_Init+0x168>)
 8004692:	f7fc fcb0 	bl	8000ff6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d028      	beq.n	80046f0 <HAL_UART_Init+0x9c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a6:	d023      	beq.n	80046f0 <HAL_UART_Init+0x9c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b0:	d01e      	beq.n	80046f0 <HAL_UART_Init+0x9c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ba:	d019      	beq.n	80046f0 <HAL_UART_Init+0x9c>
 80046bc:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80046c0:	483e      	ldr	r0, [pc, #248]	; (80047bc <HAL_UART_Init+0x168>)
 80046c2:	f7fc fc98 	bl	8000ff6 <assert_failed>
 80046c6:	e013      	b.n	80046f0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a38      	ldr	r2, [pc, #224]	; (80047b0 <HAL_UART_Init+0x15c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_UART_Init+0x9c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <HAL_UART_Init+0x160>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_UART_Init+0x9c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a35      	ldr	r2, [pc, #212]	; (80047b8 <HAL_UART_Init+0x164>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_UART_Init+0x9c>
 80046e6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80046ea:	4834      	ldr	r0, [pc, #208]	; (80047bc <HAL_UART_Init+0x168>)
 80046ec:	f7fc fc83 	bl	8000ff6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <HAL_UART_Init+0xb8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d004      	beq.n	800470c <HAL_UART_Init+0xb8>
 8004702:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004706:	482d      	ldr	r0, [pc, #180]	; (80047bc <HAL_UART_Init+0x168>)
 8004708:	f7fc fc75 	bl	8000ff6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_UART_Init+0xd4>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d004      	beq.n	8004728 <HAL_UART_Init+0xd4>
 800471e:	f240 117b 	movw	r1, #379	; 0x17b
 8004722:	4826      	ldr	r0, [pc, #152]	; (80047bc <HAL_UART_Init+0x168>)
 8004724:	f7fc fc67 	bl	8000ff6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fc fdef 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2224      	movs	r2, #36	; 0x24
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004758:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f930 	bl	80049c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800476e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800477e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800478e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40011000 	.word	0x40011000
 80047b4:	40004400 	.word	0x40004400
 80047b8:	40011400 	.word	0x40011400
 80047bc:	080050fc 	.word	0x080050fc

080047c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d17c      	bne.n	80048da <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_UART_Transmit+0x2c>
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e075      	b.n	80048dc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Transmit+0x3e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e06e      	b.n	80048dc <HAL_UART_Transmit+0x11c>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2221      	movs	r2, #33	; 0x21
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004814:	f7fc fe2c 	bl	8001470 <HAL_GetTick>
 8004818:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	88fa      	ldrh	r2, [r7, #6]
 800481e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	d108      	bne.n	8004842 <HAL_UART_Transmit+0x82>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e003      	b.n	800484a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004852:	e02a      	b.n	80048aa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2200      	movs	r2, #0
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f840 	bl	80048e4 <UART_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e036      	b.n	80048dc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004882:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	3302      	adds	r3, #2
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	e007      	b.n	800489c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3301      	adds	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1cf      	bne.n	8004854 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2140      	movs	r1, #64	; 0x40
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f810 	bl	80048e4 <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e006      	b.n	80048dc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b090      	sub	sp, #64	; 0x40
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f4:	e050      	b.n	8004998 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048fc:	d04c      	beq.n	8004998 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <UART_WaitOnFlagUntilTimeout+0x30>
 8004904:	f7fc fdb4 	bl	8001470 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004910:	429a      	cmp	r2, r3
 8004912:	d241      	bcs.n	8004998 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004934:	637a      	str	r2, [r7, #52]	; 0x34
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3314      	adds	r3, #20
 800494e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	613b      	str	r3, [r7, #16]
   return(result);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3314      	adds	r3, #20
 8004966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004968:	623a      	str	r2, [r7, #32]
 800496a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	69f9      	ldr	r1, [r7, #28]
 800496e:	6a3a      	ldr	r2, [r7, #32]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	61bb      	str	r3, [r7, #24]
   return(result);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e5      	bne.n	8004948 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e00f      	b.n	80049b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d09f      	beq.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3740      	adds	r7, #64	; 0x40
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c4:	b0c0      	sub	sp, #256	; 0x100
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4bcf      	ldr	r3, [pc, #828]	; (8004d10 <UART_SetConfig+0x350>)
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d904      	bls.n	80049e2 <UART_SetConfig+0x22>
 80049d8:	f640 6161 	movw	r1, #3681	; 0xe61
 80049dc:	48cd      	ldr	r0, [pc, #820]	; (8004d14 <UART_SetConfig+0x354>)
 80049de:	f7fc fb0a 	bl	8000ff6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_SetConfig+0x42>
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f6:	d004      	beq.n	8004a02 <UART_SetConfig+0x42>
 80049f8:	f640 6162 	movw	r1, #3682	; 0xe62
 80049fc:	48c5      	ldr	r0, [pc, #788]	; (8004d14 <UART_SetConfig+0x354>)
 80049fe:	f7fc fafa 	bl	8000ff6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <UART_SetConfig+0x6e>
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d00a      	beq.n	8004a2e <UART_SetConfig+0x6e>
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a22:	d004      	beq.n	8004a2e <UART_SetConfig+0x6e>
 8004a24:	f640 6163 	movw	r1, #3683	; 0xe63
 8004a28:	48ba      	ldr	r0, [pc, #744]	; (8004d14 <UART_SetConfig+0x354>)
 8004a2a:	f7fc fae4 	bl	8000ff6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <UART_SetConfig+0x88>
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <UART_SetConfig+0x92>
 8004a48:	f640 6164 	movw	r1, #3684	; 0xe64
 8004a4c:	48b1      	ldr	r0, [pc, #708]	; (8004d14 <UART_SetConfig+0x354>)
 8004a4e:	f7fc fad2 	bl	8000ff6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a62:	68d9      	ldr	r1, [r3, #12]
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	ea40 0301 	orr.w	r3, r0, r1
 8004a6e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a9e:	f021 010c 	bic.w	r1, r1, #12
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aac:	430b      	orrs	r3, r1
 8004aae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	6999      	ldr	r1, [r3, #24]
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	ea40 0301 	orr.w	r3, r0, r1
 8004acc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b90      	ldr	r3, [pc, #576]	; (8004d18 <UART_SetConfig+0x358>)
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d005      	beq.n	8004ae6 <UART_SetConfig+0x126>
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b8e      	ldr	r3, [pc, #568]	; (8004d1c <UART_SetConfig+0x35c>)
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d104      	bne.n	8004af0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ae6:	f7fe fb63 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8004aea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004aee:	e003      	b.n	8004af8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe fb4a 	bl	8003188 <HAL_RCC_GetPCLK1Freq>
 8004af4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b02:	f040 810f 	bne.w	8004d24 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b10:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	1891      	adds	r1, r2, r2
 8004b1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b20:	415b      	adcs	r3, r3
 8004b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b28:	4621      	mov	r1, r4
 8004b2a:	eb12 0801 	adds.w	r8, r2, r1
 8004b2e:	4629      	mov	r1, r5
 8004b30:	eb43 0901 	adc.w	r9, r3, r1
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b48:	4690      	mov	r8, r2
 8004b4a:	4699      	mov	r9, r3
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	eb18 0303 	adds.w	r3, r8, r3
 8004b52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b56:	462b      	mov	r3, r5
 8004b58:	eb49 0303 	adc.w	r3, r9, r3
 8004b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b6c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b70:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b74:	460b      	mov	r3, r1
 8004b76:	18db      	adds	r3, r3, r3
 8004b78:	653b      	str	r3, [r7, #80]	; 0x50
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	657b      	str	r3, [r7, #84]	; 0x54
 8004b82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b86:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b8a:	f7fb fb25 	bl	80001d8 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4b63      	ldr	r3, [pc, #396]	; (8004d20 <UART_SetConfig+0x360>)
 8004b94:	fba3 2302 	umull	r2, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ba6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004baa:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bae:	4642      	mov	r2, r8
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	eb12 0a01 	adds.w	sl, r2, r1
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	eb43 0b01 	adc.w	fp, r3, r1
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bde:	4692      	mov	sl, r2
 8004be0:	469b      	mov	fp, r3
 8004be2:	4643      	mov	r3, r8
 8004be4:	eb1a 0303 	adds.w	r3, sl, r3
 8004be8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bec:	464b      	mov	r3, r9
 8004bee:	eb4b 0303 	adc.w	r3, fp, r3
 8004bf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c02:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	18db      	adds	r3, r3, r3
 8004c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c10:	4613      	mov	r3, r2
 8004c12:	eb42 0303 	adc.w	r3, r2, r3
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44
 8004c18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c1c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c20:	f7fb fada 	bl	80001d8 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4611      	mov	r1, r2
 8004c2a:	4b3d      	ldr	r3, [pc, #244]	; (8004d20 <UART_SetConfig+0x360>)
 8004c2c:	fba3 2301 	umull	r2, r3, r3, r1
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	2264      	movs	r2, #100	; 0x64
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	1acb      	subs	r3, r1, r3
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c40:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <UART_SetConfig+0x360>)
 8004c42:	fba3 2302 	umull	r2, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c4e:	441c      	add	r4, r3
 8004c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c5a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c5e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c62:	4642      	mov	r2, r8
 8004c64:	464b      	mov	r3, r9
 8004c66:	1891      	adds	r1, r2, r2
 8004c68:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c6a:	415b      	adcs	r3, r3
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c72:	4641      	mov	r1, r8
 8004c74:	1851      	adds	r1, r2, r1
 8004c76:	6339      	str	r1, [r7, #48]	; 0x30
 8004c78:	4649      	mov	r1, r9
 8004c7a:	414b      	adcs	r3, r1
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	00cb      	lsls	r3, r1, #3
 8004c8e:	4651      	mov	r1, sl
 8004c90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c94:	4651      	mov	r1, sl
 8004c96:	00ca      	lsls	r2, r1, #3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	460a      	mov	r2, r1
 8004caa:	eb42 0303 	adc.w	r3, r2, r3
 8004cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cbe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cc2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	18db      	adds	r3, r3, r3
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ccc:	4613      	mov	r3, r2
 8004cce:	eb42 0303 	adc.w	r3, r2, r3
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cd8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cdc:	f7fb fa7c 	bl	80001d8 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <UART_SetConfig+0x360>)
 8004ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2164      	movs	r1, #100	; 0x64
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	3332      	adds	r3, #50	; 0x32
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <UART_SetConfig+0x360>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	f003 0207 	and.w	r2, r3, #7
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4422      	add	r2, r4
 8004d0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d0e:	e108      	b.n	8004f22 <UART_SetConfig+0x562>
 8004d10:	00a037a0 	.word	0x00a037a0
 8004d14:	080050fc 	.word	0x080050fc
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	1891      	adds	r1, r2, r2
 8004d3c:	6239      	str	r1, [r7, #32]
 8004d3e:	415b      	adcs	r3, r3
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d46:	4641      	mov	r1, r8
 8004d48:	1854      	adds	r4, r2, r1
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	eb43 0501 	adc.w	r5, r3, r1
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	00eb      	lsls	r3, r5, #3
 8004d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5e:	00e2      	lsls	r2, r4, #3
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	18e3      	adds	r3, r4, r3
 8004d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	eb45 0303 	adc.w	r3, r5, r3
 8004d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d92:	4629      	mov	r1, r5
 8004d94:	008b      	lsls	r3, r1, #2
 8004d96:	4621      	mov	r1, r4
 8004d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	008a      	lsls	r2, r1, #2
 8004da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004da4:	f7fb fa18 	bl	80001d8 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4b60      	ldr	r3, [pc, #384]	; (8004f30 <UART_SetConfig+0x570>)
 8004dae:	fba3 2302 	umull	r2, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	011c      	lsls	r4, r3, #4
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	61b9      	str	r1, [r7, #24]
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6139      	str	r1, [r7, #16]
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e30:	4649      	mov	r1, r9
 8004e32:	008b      	lsls	r3, r1, #2
 8004e34:	4641      	mov	r1, r8
 8004e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	008a      	lsls	r2, r1, #2
 8004e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e42:	f7fb f9c9 	bl	80001d8 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <UART_SetConfig+0x570>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	; 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	3332      	adds	r3, #50	; 0x32
 8004e5e:	4a34      	ldr	r2, [pc, #208]	; (8004f30 <UART_SetConfig+0x570>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6a:	441c      	add	r4, r3
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	673b      	str	r3, [r7, #112]	; 0x70
 8004e74:	677a      	str	r2, [r7, #116]	; 0x74
 8004e76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e7a:	4642      	mov	r2, r8
 8004e7c:	464b      	mov	r3, r9
 8004e7e:	1891      	adds	r1, r2, r2
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	415b      	adcs	r3, r3
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	1851      	adds	r1, r2, r1
 8004e8e:	6039      	str	r1, [r7, #0]
 8004e90:	4649      	mov	r1, r9
 8004e92:	414b      	adcs	r3, r1
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ea2:	4659      	mov	r1, fp
 8004ea4:	00cb      	lsls	r3, r1, #3
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eac:	4651      	mov	r1, sl
 8004eae:	00ca      	lsls	r2, r1, #3
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	189b      	adds	r3, r3, r2
 8004eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	eb42 0303 	adc.w	r3, r2, r3
 8004ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ede:	4649      	mov	r1, r9
 8004ee0:	008b      	lsls	r3, r1, #2
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ee8:	4641      	mov	r1, r8
 8004eea:	008a      	lsls	r2, r1, #2
 8004eec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ef0:	f7fb f972 	bl	80001d8 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <UART_SetConfig+0x570>)
 8004efa:	fba3 1302 	umull	r1, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2164      	movs	r1, #100	; 0x64
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	; 0x32
 8004f0c:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <UART_SetConfig+0x570>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4422      	add	r2, r4
 8004f20:	609a      	str	r2, [r3, #8]
}
 8004f22:	bf00      	nop
 8004f24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4d0d      	ldr	r5, [pc, #52]	; (8004f6c <__libc_init_array+0x38>)
 8004f38:	4c0d      	ldr	r4, [pc, #52]	; (8004f70 <__libc_init_array+0x3c>)
 8004f3a:	1b64      	subs	r4, r4, r5
 8004f3c:	10a4      	asrs	r4, r4, #2
 8004f3e:	2600      	movs	r6, #0
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	4d0b      	ldr	r5, [pc, #44]	; (8004f74 <__libc_init_array+0x40>)
 8004f46:	4c0c      	ldr	r4, [pc, #48]	; (8004f78 <__libc_init_array+0x44>)
 8004f48:	f000 f820 	bl	8004f8c <_init>
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	2600      	movs	r6, #0
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	08005158 	.word	0x08005158
 8004f70:	08005158 	.word	0x08005158
 8004f74:	08005158 	.word	0x08005158
 8004f78:	0800515c 	.word	0x0800515c

08004f7c <memset>:
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <_init>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr

08004f98 <_fini>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr
