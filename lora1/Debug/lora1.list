
lora1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005154  08005154  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800515c  0800515c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08005170  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08005170  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123bb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f8  00000000  00000000  000323f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00034bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018834  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158c0  00000000  00000000  0004f22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bafa  00000000  00000000  00064aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001005e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000406c  00000000  00000000  00100638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f90 	.word	0x08004f90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004f90 	.word	0x08004f90

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004dc:	b4b0      	push	{r4, r5, r7}
 80004de:	b08f      	sub	sp, #60	; 0x3c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004e4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004ea:	2307      	movs	r3, #7
 80004ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004f0:	2307      	movs	r3, #7
 80004f2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004f6:	2301      	movs	r3, #1
 80004f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004fc:	23ff      	movs	r3, #255	; 0xff
 80004fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000502:	2364      	movs	r3, #100	; 0x64
 8000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000508:	2308      	movs	r3, #8
 800050a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	461d      	mov	r5, r3
 8000510:	f107 040c 	add.w	r4, r7, #12
 8000514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800051a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	373c      	adds	r7, #60	; 0x3c
 8000528:	46bd      	mov	sp, r7
 800052a:	bcb0      	pop	{r4, r5, r7}
 800052c:	4770      	bx	lr

0800052e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6898      	ldr	r0, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	899b      	ldrh	r3, [r3, #12]
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	f002 f829 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 ffa0 	bl	800148c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6898      	ldr	r0, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	899b      	ldrh	r3, [r3, #12]
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	f002 f81e 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800055c:	2064      	movs	r0, #100	; 0x64
 800055e:	f000 ff95 	bl	800148c <HAL_Delay>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000574:	2101      	movs	r1, #1
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f99f 	bl	80008ba <LoRa_read>
 800057c:	4603      	mov	r3, r0
 800057e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d107      	bne.n	800059a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	f023 0307 	bic.w	r3, r3, #7
 8000590:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
 8000598:	e03e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d10c      	bne.n	80005ba <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80005a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a4:	f023 0307 	bic.w	r3, r3, #7
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	e02e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d10c      	bne.n	80005da <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005c4:	f023 0307 	bic.w	r3, r3, #7
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f043 0303 	orr.w	r3, r3, #3
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2203      	movs	r2, #3
 80005d6:	61da      	str	r2, [r3, #28]
 80005d8:	e01e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d10c      	bne.n	80005fa <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005e4:	f023 0307 	bic.w	r3, r3, #7
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	f043 0305 	orr.w	r3, r3, #5
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2205      	movs	r2, #5
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	e00e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d10b      	bne.n	8000618 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000604:	f023 0307 	bic.w	r3, r3, #7
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f043 0306 	orr.w	r3, r3, #6
 800060e:	b25b      	sxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2206      	movs	r2, #6
 8000616:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	461a      	mov	r2, r3
 800061c:	2101      	movs	r1, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f965 	bl	80008ee <LoRa_write>
	//HAL_Delay(10);
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	889b      	ldrh	r3, [r3, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	f001 ffa6 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6998      	ldr	r0, [r3, #24]
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	f002 ff8e 	bl	8003578 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800065c:	bf00      	nop
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fb94 	bl	8003d90 <HAL_SPI_GetState>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d1f7      	bne.n	800065e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6998      	ldr	r0, [r3, #24]
 8000672:	8b3a      	ldrh	r2, [r7, #24]
 8000674:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	f003 f8c9 	bl	8003810 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800067e:	bf00      	nop
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fb83 	bl	8003d90 <HAL_SPI_GetState>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d1f7      	bne.n	8000680 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f001 ff7c 	bl	8002598 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4613      	mov	r3, r2
 80006b6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f001 ff68 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6998      	ldr	r0, [r3, #24]
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	f002 ff50 	bl	8003578 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006d8:	bf00      	nop
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fb56 	bl	8003d90 <HAL_SPI_GetState>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d1f7      	bne.n	80006da <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6998      	ldr	r0, [r3, #24]
 80006ee:	8b3a      	ldrh	r2, [r7, #24]
 80006f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f4:	6839      	ldr	r1, [r7, #0]
 80006f6:	f002 ff3f 	bl	8003578 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006fa:	bf00      	nop
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fb45 	bl	8003d90 <HAL_SPI_GetState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d1f7      	bne.n	80006fc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	889b      	ldrh	r3, [r3, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f001 ff3e 	bl	8002598 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	04db      	lsls	r3, r3, #19
 8000732:	115b      	asrs	r3, r3, #5
 8000734:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	461a      	mov	r2, r3
 8000740:	2106      	movs	r1, #6
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f8d3 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000748:	2005      	movs	r0, #5
 800074a:	f000 fe9f 	bl	800148c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000754:	7afb      	ldrb	r3, [r7, #11]
 8000756:	461a      	mov	r2, r3
 8000758:	2107      	movs	r1, #7
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f8c7 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000760:	2005      	movs	r0, #5
 8000762:	f000 fe93 	bl	800148c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	461a      	mov	r2, r3
 800076e:	2108      	movs	r1, #8
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f8bc 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000776:	2005      	movs	r0, #5
 8000778:	f000 fe88 	bl	800148c <HAL_Delay>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b0c      	cmp	r3, #12
 8000792:	dd01      	ble.n	8000798 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000794:	230c      	movs	r3, #12
 8000796:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b06      	cmp	r3, #6
 800079c:	dc01      	bgt.n	80007a2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800079e:	2307      	movs	r3, #7
 80007a0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007a2:	211e      	movs	r1, #30
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f888 	bl	80008ba <LoRa_read>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 fe6c 	bl	800148c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	461a      	mov	r2, r3
 80007cc:	211e      	movs	r1, #30
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f88d 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f000 fe59 	bl	800148c <HAL_Delay>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	461a      	mov	r2, r3
 80007f2:	2109      	movs	r1, #9
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f87a 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 fe46 	bl	800148c <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b2c      	cmp	r3, #44	; 0x2c
 800081c:	d801      	bhi.n	8000822 <LoRa_setOCP+0x1a>
		current = 45;
 800081e:	232d      	movs	r3, #45	; 0x2d
 8000820:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2bf0      	cmp	r3, #240	; 0xf0
 8000826:	d901      	bls.n	800082c <LoRa_setOCP+0x24>
		current = 240;
 8000828:	23f0      	movs	r3, #240	; 0xf0
 800082a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2b78      	cmp	r3, #120	; 0x78
 8000830:	d809      	bhi.n	8000846 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	3b2d      	subs	r3, #45	; 0x2d
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <LoRa_setOCP+0x78>)
 8000838:	fb82 1203 	smull	r1, r2, r2, r3
 800083c:	1052      	asrs	r2, r2, #1
 800083e:	17db      	asrs	r3, r3, #31
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e00b      	b.n	800085e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2bf0      	cmp	r3, #240	; 0xf0
 800084a:	d808      	bhi.n	800085e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	331e      	adds	r3, #30
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <LoRa_setOCP+0x78>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1092      	asrs	r2, r2, #2
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3320      	adds	r3, #32
 8000862:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	461a      	mov	r2, r3
 8000868:	210b      	movs	r1, #11
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f83f 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 8000870:	200a      	movs	r0, #10
 8000872:	f000 fe0b 	bl	800148c <HAL_Delay>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	66666667 	.word	0x66666667

08000884 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800088c:	211e      	movs	r1, #30
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 f813 	bl	80008ba <LoRa_read>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	f043 0307 	orr.w	r3, r3, #7
 800089e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	461a      	mov	r2, r3
 80008a4:	211e      	movs	r1, #30
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f821 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f000 fded 	bl	800148c <HAL_Delay>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af02      	add	r7, sp, #8
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008d0:	f107 030f 	add.w	r3, r7, #15
 80008d4:	f107 010e 	add.w	r1, r7, #14
 80008d8:	2201      	movs	r2, #1
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fea4 	bl	800062c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af02      	add	r7, sp, #8
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
 80008fa:	4613      	mov	r3, r2
 80008fc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000904:	b2db      	uxtb	r3, r3
 8000906:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000908:	78bb      	ldrb	r3, [r7, #2]
 800090a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800090c:	f107 030f 	add.w	r3, r7, #15
 8000910:	f107 010e 	add.w	r1, r7, #14
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fec4 	bl	80006a8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000946:	2105      	movs	r1, #5
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fe0e 	bl	800056a <LoRa_gotoMode>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000956:	b590      	push	{r4, r7, lr}
 8000958:	b089      	sub	sp, #36	; 0x24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	4613      	mov	r3, r2
 8000962:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	e007      	b.n	800097e <LoRa_receive+0x28>
		data[i]=0;
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	4413      	add	r3, r2
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	3301      	adds	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf3      	blt.n	800096e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000986:	2101      	movs	r1, #1
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fdee 	bl	800056a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800098e:	2112      	movs	r1, #18
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff ff92 	bl	80008ba <LoRa_read>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d02f      	beq.n	8000a04 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80009a4:	22ff      	movs	r2, #255	; 0xff
 80009a6:	2112      	movs	r1, #18
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff ffa0 	bl	80008ee <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80009ae:	2113      	movs	r1, #19
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff ff82 	bl	80008ba <LoRa_read>
 80009b6:	4603      	mov	r3, r0
 80009b8:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80009ba:	2110      	movs	r1, #16
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff ff7c 	bl	80008ba <LoRa_read>
 80009c2:	4603      	mov	r3, r0
 80009c4:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009c6:	7cfb      	ldrb	r3, [r7, #19]
 80009c8:	461a      	mov	r2, r3
 80009ca:	210d      	movs	r1, #13
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff ff8e 	bl	80008ee <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80009d2:	7cba      	ldrb	r2, [r7, #18]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4293      	cmp	r3, r2
 80009d8:	bf28      	it	cs
 80009da:	4613      	movcs	r3, r2
 80009dc:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e00b      	b.n	80009fc <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	18d4      	adds	r4, r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff ff64 	bl	80008ba <LoRa_read>
 80009f2:	4603      	mov	r3, r0
 80009f4:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbef      	blt.n	80009e4 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a04:	2105      	movs	r1, #5
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff fdaf 	bl	800056a <LoRa_gotoMode>
    return min;
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}

08000a16 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ff82 	bl	8000928 <LoRa_isvalid>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 8093 	beq.w	8000b52 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fd9b 	bl	800056a <LoRa_gotoMode>
			HAL_Delay(10);
 8000a34:	200a      	movs	r0, #10
 8000a36:	f000 fd29 	bl	800148c <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff3c 	bl	80008ba <LoRa_read>
 8000a42:	4603      	mov	r3, r0
 8000a44:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f000 fd20 	bl	800148c <HAL_Delay>
			data = read | 0x80;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a52:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	461a      	mov	r2, r3
 8000a58:	2101      	movs	r1, #1
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ff47 	bl	80008ee <LoRa_write>
			HAL_Delay(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f000 fd13 	bl	800148c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fe59 	bl	8000724 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff feb1 	bl	80007e2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a86:	4619      	mov	r1, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff febd 	bl	8000808 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a8e:	2223      	movs	r2, #35	; 0x23
 8000a90:	210c      	movs	r1, #12
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff2b 	bl	80008ee <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fef3 	bl	8000884 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe6c 	bl	8000784 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	211f      	movs	r1, #31
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff1c 	bl	80008ee <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4413      	add	r3, r2
 8000ad0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	211d      	movs	r1, #29
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff08 	bl	80008ee <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2120      	movs	r1, #32
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fefe 	bl	80008ee <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	2121      	movs	r1, #33	; 0x21
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fef6 	bl	80008ee <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fed8 	bl	80008ba <LoRa_read>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000b14:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fee6 	bl	80008ee <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b22:	2101      	movs	r1, #1
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fd20 	bl	800056a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f000 fcab 	bl	800148c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b36:	2142      	movs	r1, #66	; 0x42
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff febe 	bl	80008ba <LoRa_read>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b12      	cmp	r3, #18
 8000b46:	d101      	bne.n	8000b4c <LoRa_init+0x136>
				return LORA_OK;
 8000b48:	23c8      	movs	r3, #200	; 0xc8
 8000b4a:	e004      	b.n	8000b56 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000b4c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000b50:	e001      	b.n	8000b56 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b52:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x9c>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <MX_ADC1_Init+0xa0>)
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bc2:	f000 fc87 	bl	80014d4 <HAL_ADC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 fa10 	bl	8000ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000be2:	f000 fead 	bl	8001940 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bec:	f000 fa00 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000028 	.word	0x20000028
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	0f000001 	.word	0x0f000001

08000c04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_ADC_MspInit+0x7c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d127      	bne.n	8000c76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_ADC_MspInit+0x80>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	2303      	movs	r3, #3
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_ADC_MspInit+0x84>)
 8000c72:	f001 f9f7 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40012000 	.word	0x40012000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a3d      	ldr	r2, [pc, #244]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_GPIO_Init+0x114>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2103      	movs	r1, #3
 8000d32:	481c      	ldr	r0, [pc, #112]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d34:	f001 fc30 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000d3e:	4819      	ldr	r0, [pc, #100]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d40:	f001 fc2a 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PB14 PB15 */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000d44:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d5e:	f001 f981 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000d62:	2304      	movs	r3, #4
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <MX_GPIO_Init+0x118>)
 8000d78:	f001 f974 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_GPIO_Init+0x11c>)
 8000d92:	f001 f967 	bl	8002064 <HAL_GPIO_Init>

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40020c00 	.word	0x40020c00

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	b090      	sub	sp, #64	; 0x40
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db2:	f000 fb29 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f8a1 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f7ff ff67 	bl	8000c8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dbe:	f000 f927 	bl	8001010 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000dc2:	f7ff fecd 	bl	8000b60 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000dc6:	f000 fa83 	bl	80012d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t readvalue;
  HAL_ADC_Start(&hadc1);
 8000dca:	4847      	ldr	r0, [pc, #284]	; (8000ee8 <main+0x13c>)
 8000dcc:	f000 fce0 	bl	8001790 <HAL_ADC_Start>
  myLoRa = newLoRa();
 8000dd0:	4c46      	ldr	r4, [pc, #280]	; (8000eec <main+0x140>)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb81 	bl	80004dc <newLoRa>
 8000dda:	4625      	mov	r5, r4
 8000ddc:	463c      	mov	r4, r7
 8000dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000dea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa_reset(&myLoRa);
 8000dee:	483f      	ldr	r0, [pc, #252]	; (8000eec <main+0x140>)
 8000df0:	f7ff fb9d 	bl	800052e <LoRa_reset>
  myLoRa.CS_port         = NSS_GPIO_Port;
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <main+0x140>)
 8000df6:	4a3e      	ldr	r2, [pc, #248]	; (8000ef0 <main+0x144>)
 8000df8:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <main+0x140>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <main+0x140>)
 8000e02:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <main+0x144>)
 8000e04:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8000e06:	4b39      	ldr	r3, [pc, #228]	; (8000eec <main+0x140>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <main+0x140>)
 8000e0e:	4a38      	ldr	r2, [pc, #224]	; (8000ef0 <main+0x144>)
 8000e10:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <main+0x140>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000e18:	4b34      	ldr	r3, [pc, #208]	; (8000eec <main+0x140>)
 8000e1a:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <main+0x148>)
 8000e1c:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <main+0x140>)
 8000e20:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8000e24:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <main+0x140>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <main+0x140>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <main+0x140>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <main+0x140>)
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <main+0x140>)
 8000e48:	2282      	movs	r2, #130	; 0x82
 8000e4a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <main+0x140>)
 8000e50:	2209      	movs	r2, #9
 8000e52:	851a      	strh	r2, [r3, #40]	; 0x28
//  LoRa_stat = LoRa_init(&myLoRa);
  if (LoRa_init(&myLoRa) == LORA_OK){
 8000e54:	4825      	ldr	r0, [pc, #148]	; (8000eec <main+0x140>)
 8000e56:	f7ff fdde 	bl	8000a16 <LoRa_init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2bc8      	cmp	r3, #200	; 0xc8
 8000e5e:	d105      	bne.n	8000e6c <main+0xc0>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <main+0x144>)
 8000e68:	f001 fb96 	bl	8002598 <HAL_GPIO_WritePin>
//  if(LoRa_transmit(&myLoRa, (uint8_t*)send_data, 12, 100) == 1){
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
//  }
  //receiver
  volatile uint8_t received_data[12];
  volatile uint8_t packet_size = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  LoRa_startReceiving(&myLoRa);
 8000e72:	481e      	ldr	r0, [pc, #120]	; (8000eec <main+0x140>)
 8000e74:	f7ff fd63 	bl	800093e <LoRa_startReceiving>
//	    	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	    }
//	    HAL_Delay(500);

//	  receiver
	  packet_size = LoRa_receive(&myLoRa, received_data, 12);
 8000e78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481a      	ldr	r0, [pc, #104]	; (8000eec <main+0x140>)
 8000e82:	f7ff fd68 	bl	8000956 <LoRa_receive>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  if (packet_size != 10) {
 8000e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b0a      	cmp	r3, #10
 8000e94:	d005      	beq.n	8000ea2 <main+0xf6>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9c:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <main+0x144>)
 8000e9e:	f001 fb7b 	bl	8002598 <HAL_GPIO_WritePin>
	  }
//	  HAL_Delay(500);
	  if (LoRa_init(&myLoRa) == LORA_OK){
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <main+0x140>)
 8000ea4:	f7ff fdb7 	bl	8000a16 <LoRa_init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2bc8      	cmp	r3, #200	; 0xc8
 8000eac:	d106      	bne.n	8000ebc <main+0x110>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb4:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <main+0x144>)
 8000eb6:	f001 fb6f 	bl	8002598 <HAL_GPIO_WritePin>
 8000eba:	e005      	b.n	8000ec8 <main+0x11c>
	    }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <main+0x144>)
 8000ec4:	f001 fb68 	bl	8002598 <HAL_GPIO_WritePin>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t *) received_data, packet_size, 100);
 8000ec8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <main+0x14c>)
 8000ed8:	f003 fc74 	bl	80047c4 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee0:	f000 fad4 	bl	800148c <HAL_Delay>
	  packet_size = LoRa_receive(&myLoRa, received_data, 12);
 8000ee4:	e7c8      	b.n	8000e78 <main+0xcc>
 8000ee6:	bf00      	nop
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	20000070 	.word	0x20000070
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	2000009c 	.word	0x2000009c
 8000ef8:	2000013c 	.word	0x2000013c

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 f838 	bl	8004f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <SystemClock_Config+0xc8>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <SystemClock_Config+0xc8>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <SystemClock_Config+0xc8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f62:	2302      	movs	r3, #2
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f74:	2304      	movs	r3, #4
 8000f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fb3b 	bl	80025fc <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f8c:	f000 f830 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f94:	2302      	movs	r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2103      	movs	r1, #3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 fe4d 	bl	8002c4c <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fb8:	f000 f81a 	bl	8000ff0 <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3750      	adds	r7, #80	; 0x50
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fde:	f000 fa35 	bl	800144c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <Error_Handler+0x8>

08000ffa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_SPI1_Init+0x64>)
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <MX_SPI1_Init+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_SPI1_Init+0x64>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_SPI1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_SPI1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_SPI1_Init+0x64>)
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SPI1_Init+0x64>)
 8001044:	2238      	movs	r2, #56	; 0x38
 8001046:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SPI1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_SPI1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SPI1_Init+0x64>)
 800105c:	220a      	movs	r2, #10
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_SPI1_Init+0x64>)
 8001062:	f002 f8ed 	bl	8003240 <HAL_SPI_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800106c:	f7ff ffc0 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000009c 	.word	0x2000009c
 8001078:	40013000 	.word	0x40013000

0800107c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_SPI_MspInit+0x84>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12b      	bne.n	80010f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_SPI_MspInit+0x88>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_SPI_MspInit+0x88>)
 80010a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_SPI_MspInit+0x88>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_SPI_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_SPI_MspInit+0x88>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_SPI_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010d6:	23e0      	movs	r3, #224	; 0xe0
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e6:	2305      	movs	r3, #5
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_SPI_MspInit+0x8c>)
 80010f2:	f000 ffb7 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40013000 	.word	0x40013000
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_MspInit+0x4c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_MspInit+0x4c>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_MspInit+0x4c>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_MspInit+0x4c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	; 0x40
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_MspInit+0x4c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800114a:	2007      	movs	r0, #7
 800114c:	f000 ff26 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_InitTick+0xd0>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	4a2d      	ldr	r2, [pc, #180]	; (800122c <HAL_InitTick+0xd0>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6453      	str	r3, [r2, #68]	; 0x44
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_InitTick+0xd0>)
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001188:	f107 020c 	add.w	r2, r7, #12
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f002 f822 	bl	80031dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001198:	f002 f80c 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 800119c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	4a23      	ldr	r2, [pc, #140]	; (8001230 <HAL_InitTick+0xd4>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	3b01      	subs	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <HAL_InitTick+0xd8>)
 80011ae:	4a22      	ldr	r2, [pc, #136]	; (8001238 <HAL_InitTick+0xdc>)
 80011b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_InitTick+0xd8>)
 80011b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_InitTick+0xd8>)
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_InitTick+0xd8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_InitTick+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_InitTick+0xd8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011d2:	4818      	ldr	r0, [pc, #96]	; (8001234 <HAL_InitTick+0xd8>)
 80011d4:	f002 ff1a 	bl	800400c <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d11b      	bne.n	800121e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <HAL_InitTick+0xd8>)
 80011e8:	f002 ffe0 	bl	80041ac <HAL_TIM_Base_Start_IT>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d111      	bne.n	800121e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011fa:	2019      	movs	r0, #25
 80011fc:	f000 ff1a 	bl	8002034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d808      	bhi.n	8001218 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001206:	2200      	movs	r2, #0
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	2019      	movs	r0, #25
 800120c:	f000 fee6 	bl	8001fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_InitTick+0xe0>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e002      	b.n	800121e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800121e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001222:	4618      	mov	r0, r3
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	431bde83 	.word	0x431bde83
 8001234:	200000f4 	.word	0x200000f4
 8001238:	40010000 	.word	0x40010000
 800123c:	20000004 	.word	0x20000004

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800129e:	f003 f817 	bl	80042d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000f4 	.word	0x200000f4

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_USART2_UART_Init+0x50>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USART2_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USART2_UART_Init+0x4c>)
 8001308:	f003 f9a6 	bl	8004658 <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001312:	f7ff fe6d 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000013c 	.word	0x2000013c
 8001320:	40004400 	.word	0x40004400

08001324 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <HAL_UART_MspInit+0x84>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12b      	bne.n	800139e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_UART_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_UART_MspInit+0x88>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800137e:	230c      	movs	r3, #12
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138e:	2307      	movs	r3, #7
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 800139a:	f000 fe63 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40004400 	.word	0x40004400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013de:	f7ff ff65 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f003 fda9 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff fce1 	bl	8000dac <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013f8:	08005164 	.word	0x08005164
  ldr r2, =_sbss
 80013fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001400:	20000184 	.word	0x20000184

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_Init+0x40>)
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_Init+0x40>)
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x40>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 fdb3 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fe90 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe66 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008
 8001470:	20000180 	.word	0x20000180

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000180 	.word	0x20000180

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff ffee 	bl	8001474 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a4:	d005      	beq.n	80014b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_Delay+0x44>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b2:	bf00      	nop
 80014b4:	f7ff ffde 	bl	8001474 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8f7      	bhi.n	80014b4 <HAL_Delay+0x28>
  {
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e14e      	b.n	8001788 <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a90      	ldr	r2, [pc, #576]	; (8001730 <HAL_ADC_Init+0x25c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d004      	beq.n	80014fe <HAL_ADC_Init+0x2a>
 80014f4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80014f8:	488e      	ldr	r0, [pc, #568]	; (8001734 <HAL_ADC_Init+0x260>)
 80014fa:	f7ff fd7e 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d013      	beq.n	800152e <HAL_ADC_Init+0x5a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d00e      	beq.n	800152e <HAL_ADC_Init+0x5a>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001518:	d009      	beq.n	800152e <HAL_ADC_Init+0x5a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001522:	d004      	beq.n	800152e <HAL_ADC_Init+0x5a>
 8001524:	f240 1143 	movw	r1, #323	; 0x143
 8001528:	4882      	ldr	r0, [pc, #520]	; (8001734 <HAL_ADC_Init+0x260>)
 800152a:	f7ff fd66 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d013      	beq.n	800155e <HAL_ADC_Init+0x8a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153e:	d00e      	beq.n	800155e <HAL_ADC_Init+0x8a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001548:	d009      	beq.n	800155e <HAL_ADC_Init+0x8a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001552:	d004      	beq.n	800155e <HAL_ADC_Init+0x8a>
 8001554:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001558:	4876      	ldr	r0, [pc, #472]	; (8001734 <HAL_ADC_Init+0x260>)
 800155a:	f7ff fd4e 	bl	8000ffa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_ADC_Init+0xa4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d004      	beq.n	8001578 <HAL_ADC_Init+0xa4>
 800156e:	f240 1145 	movw	r1, #325	; 0x145
 8001572:	4870      	ldr	r0, [pc, #448]	; (8001734 <HAL_ADC_Init+0x260>)
 8001574:	f7ff fd41 	bl	8000ffa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7e1b      	ldrb	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_ADC_Init+0xbe>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e1b      	ldrb	r3, [r3, #24]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d004      	beq.n	8001592 <HAL_ADC_Init+0xbe>
 8001588:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800158c:	4869      	ldr	r0, [pc, #420]	; (8001734 <HAL_ADC_Init+0x260>)
 800158e:	f7ff fd34 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	2b00      	cmp	r3, #0
 8001598:	d054      	beq.n	8001644 <HAL_ADC_Init+0x170>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a2:	d04f      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015ac:	d04a      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80015b6:	d045      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015c0:	d040      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80015ca:	d03b      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80015d4:	d036      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80015de:	d031      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015e8:	d02c      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80015f2:	d027      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80015fc:	d022      	beq.n	8001644 <HAL_ADC_Init+0x170>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8001606:	d01d      	beq.n	8001644 <HAL_ADC_Init+0x170>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001610:	d018      	beq.n	8001644 <HAL_ADC_Init+0x170>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800161a:	d013      	beq.n	8001644 <HAL_ADC_Init+0x170>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001624:	d00e      	beq.n	8001644 <HAL_ADC_Init+0x170>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800162e:	d009      	beq.n	8001644 <HAL_ADC_Init+0x170>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	4a40      	ldr	r2, [pc, #256]	; (8001738 <HAL_ADC_Init+0x264>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d004      	beq.n	8001644 <HAL_ADC_Init+0x170>
 800163a:	f240 1147 	movw	r1, #327	; 0x147
 800163e:	483d      	ldr	r0, [pc, #244]	; (8001734 <HAL_ADC_Init+0x260>)
 8001640:	f7ff fcdb 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_ADC_Init+0x18c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001654:	d004      	beq.n	8001660 <HAL_ADC_Init+0x18c>
 8001656:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800165a:	4836      	ldr	r0, [pc, #216]	; (8001734 <HAL_ADC_Init+0x260>)
 800165c:	f7ff fccd 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_ADC_Init+0x19c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b10      	cmp	r3, #16
 800166e:	d904      	bls.n	800167a <HAL_ADC_Init+0x1a6>
 8001670:	f240 1149 	movw	r1, #329	; 0x149
 8001674:	482f      	ldr	r0, [pc, #188]	; (8001734 <HAL_ADC_Init+0x260>)
 8001676:	f7ff fcc0 	bl	8000ffa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001680:	2b00      	cmp	r3, #0
 8001682:	d009      	beq.n	8001698 <HAL_ADC_Init+0x1c4>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800168a:	2b01      	cmp	r3, #1
 800168c:	d004      	beq.n	8001698 <HAL_ADC_Init+0x1c4>
 800168e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001692:	4828      	ldr	r0, [pc, #160]	; (8001734 <HAL_ADC_Init+0x260>)
 8001694:	f7ff fcb1 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d00c      	beq.n	80016ba <HAL_ADC_Init+0x1e6>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_ADC_Init+0x1e6>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d004      	beq.n	80016ba <HAL_ADC_Init+0x1e6>
 80016b0:	f240 114b 	movw	r1, #331	; 0x14b
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <HAL_ADC_Init+0x260>)
 80016b6:	f7ff fca0 	bl	8000ffa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <HAL_ADC_Init+0x204>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_Init+0x204>
 80016ce:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <HAL_ADC_Init+0x260>)
 80016d4:	f7ff fc91 	bl	8000ffa <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	4a16      	ldr	r2, [pc, #88]	; (8001738 <HAL_ADC_Init+0x264>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d017      	beq.n	8001712 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d013      	beq.n	8001712 <HAL_ADC_Init+0x23e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016f2:	d00e      	beq.n	8001712 <HAL_ADC_Init+0x23e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016fc:	d009      	beq.n	8001712 <HAL_ADC_Init+0x23e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001706:	d004      	beq.n	8001712 <HAL_ADC_Init+0x23e>
 8001708:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <HAL_ADC_Init+0x260>)
 800170e:	f7ff fc74 	bl	8000ffa <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d110      	bne.n	800173c <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fa72 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800172e:	e005      	b.n	800173c <HAL_ADC_Init+0x268>
 8001730:	40012000 	.word	0x40012000
 8001734:	08004fa8 	.word	0x08004fa8
 8001738:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d118      	bne.n	800177a <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001750:	f023 0302 	bic.w	r3, r3, #2
 8001754:	f043 0202 	orr.w	r2, r3, #2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 fa65 	bl	8001c2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f023 0303 	bic.w	r3, r3, #3
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
 8001778:	e001      	b.n	800177e <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e1b      	ldrb	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_ADC_Start+0x26>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7e1b      	ldrb	r3, [r3, #24]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d004      	beq.n	80017b6 <HAL_ADC_Start+0x26>
 80017ac:	f240 21d2 	movw	r1, #722	; 0x2d2
 80017b0:	485e      	ldr	r0, [pc, #376]	; (800192c <HAL_ADC_Start+0x19c>)
 80017b2:	f7ff fc22 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d013      	beq.n	80017e6 <HAL_ADC_Start+0x56>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017c6:	d00e      	beq.n	80017e6 <HAL_ADC_Start+0x56>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017d0:	d009      	beq.n	80017e6 <HAL_ADC_Start+0x56>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80017da:	d004      	beq.n	80017e6 <HAL_ADC_Start+0x56>
 80017dc:	f240 21d3 	movw	r1, #723	; 0x2d3
 80017e0:	4852      	ldr	r0, [pc, #328]	; (800192c <HAL_ADC_Start+0x19c>)
 80017e2:	f7ff fc0a 	bl	8000ffa <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_Start+0x64>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e097      	b.n	8001924 <HAL_ADC_Start+0x194>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b01      	cmp	r3, #1
 8001808:	d018      	beq.n	800183c <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_ADC_Start+0x1a0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a45      	ldr	r2, [pc, #276]	; (8001934 <HAL_ADC_Start+0x1a4>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	0c9a      	lsrs	r2, r3, #18
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800182e:	e002      	b.n	8001836 <HAL_ADC_Start+0xa6>
    {
      counter--;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3b01      	subs	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f9      	bne.n	8001830 <HAL_ADC_Start+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d15f      	bne.n	800190a <HAL_ADC_Start+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001874:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001888:	d106      	bne.n	8001898 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f023 0206 	bic.w	r2, r3, #6
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
 8001896:	e002      	b.n	800189e <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_ADC_Start+0x1a8>)
 80018a8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018b2:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10f      	bne.n	80018e0 <HAL_ADC_Start+0x150>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d129      	bne.n	8001922 <HAL_ADC_Start+0x192>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	e020      	b.n	8001922 <HAL_ADC_Start+0x192>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a15      	ldr	r2, [pc, #84]	; (800193c <HAL_ADC_Start+0x1ac>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11b      	bne.n	8001922 <HAL_ADC_Start+0x192>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d114      	bne.n	8001922 <HAL_ADC_Start+0x192>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e00b      	b.n	8001922 <HAL_ADC_Start+0x192>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	08004fa8 	.word	0x08004fa8
 8001930:	20000000 	.word	0x20000000
 8001934:	431bde83 	.word	0x431bde83
 8001938:	40012300 	.word	0x40012300
 800193c:	40012000 	.word	0x40012000

08001940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b12      	cmp	r3, #18
 8001954:	d909      	bls.n	800196a <HAL_ADC_ConfigChannel+0x2a>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a72      	ldr	r2, [pc, #456]	; (8001b24 <HAL_ADC_ConfigChannel+0x1e4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d004      	beq.n	800196a <HAL_ADC_ConfigChannel+0x2a>
 8001960:	f240 618b 	movw	r1, #1675	; 0x68b
 8001964:	4870      	ldr	r0, [pc, #448]	; (8001b28 <HAL_ADC_ConfigChannel+0x1e8>)
 8001966:	f7ff fb48 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_ADC_ConfigChannel+0x3a>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b10      	cmp	r3, #16
 8001978:	d904      	bls.n	8001984 <HAL_ADC_ConfigChannel+0x44>
 800197a:	f240 618c 	movw	r1, #1676	; 0x68c
 800197e:	486a      	ldr	r0, [pc, #424]	; (8001b28 <HAL_ADC_ConfigChannel+0x1e8>)
 8001980:	f7ff fb3b 	bl	8000ffa <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d01c      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d018      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d014      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d010      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d00c      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b06      	cmp	r3, #6
 80019ba:	d008      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b07      	cmp	r3, #7
 80019c2:	d004      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x8e>
 80019c4:	f240 618d 	movw	r1, #1677	; 0x68d
 80019c8:	4857      	ldr	r0, [pc, #348]	; (8001b28 <HAL_ADC_ConfigChannel+0x1e8>)
 80019ca:	f7ff fb16 	bl	8000ffa <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x9c>
 80019d8:	2302      	movs	r3, #2
 80019da:	e118      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x2ce>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	d925      	bls.n	8001a38 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68d9      	ldr	r1, [r3, #12]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	3b1e      	subs	r3, #30
 8001a02:	2207      	movs	r2, #7
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	400a      	ands	r2, r1
 8001a10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68d9      	ldr	r1, [r3, #12]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	4603      	mov	r3, r0
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4403      	add	r3, r0
 8001a2a:	3b1e      	subs	r3, #30
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	e022      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6919      	ldr	r1, [r3, #16]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	400a      	ands	r2, r1
 8001a5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6919      	ldr	r1, [r3, #16]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4403      	add	r3, r0
 8001a74:	409a      	lsls	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d824      	bhi.n	8001ad0 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b05      	subs	r3, #5
 8001a98:	221f      	movs	r2, #31
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ace:	e051      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d829      	bhi.n	8001b2c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b23      	subs	r3, #35	; 0x23
 8001aea:	221f      	movs	r2, #31
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b23      	subs	r3, #35	; 0x23
 8001b14:	fa00 f203 	lsl.w	r2, r0, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b20:	e028      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x234>
 8001b22:	bf00      	nop
 8001b24:	10000012 	.word	0x10000012
 8001b28:	08004fa8 	.word	0x08004fa8
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b41      	subs	r3, #65	; 0x41
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43da      	mvns	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b41      	subs	r3, #65	; 0x41
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_ADC_ConfigChannel+0x2d8>)
 8001b76:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_ADC_ConfigChannel+0x2dc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10f      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x262>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d10b      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_ADC_ConfigChannel+0x2dc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d12b      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x2c4>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_ADC_ConfigChannel+0x2e0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x27e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b11      	cmp	r3, #17
 8001bbc:	d122      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_ADC_ConfigChannel+0x2e0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d111      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_ADC_ConfigChannel+0x2e4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_ADC_ConfigChannel+0x2e8>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0c9a      	lsrs	r2, r3, #18
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf6:	e002      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	10000012 	.word	0x10000012
 8001c24:	20000000 	.word	0x20000000
 8001c28:	431bde83 	.word	0x431bde83

08001c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c34:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <ADC_Init+0x208>)
 8001c36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	021a      	lsls	r2, r3, #8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	4a5e      	ldr	r2, [pc, #376]	; (8001e38 <ADC_Init+0x20c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d022      	beq.n	8001d0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6899      	ldr	r1, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6899      	ldr	r1, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e00f      	b.n	8001d2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0202 	bic.w	r2, r2, #2
 8001d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6899      	ldr	r1, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	005a      	lsls	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d028      	beq.n	8001daa <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <ADC_Init+0x13c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d904      	bls.n	8001d72 <ADC_Init+0x146>
 8001d68:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001d6c:	4833      	ldr	r0, [pc, #204]	; (8001e3c <ADC_Init+0x210>)
 8001d6e:	f7ff f944 	bl	8000ffa <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d80:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d90:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	035a      	lsls	r2, r3, #13
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	e007      	b.n	8001dba <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	051a      	lsls	r2, r3, #20
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfc:	025a      	lsls	r2, r3, #9
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6899      	ldr	r1, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	029a      	lsls	r2, r3, #10
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40012300 	.word	0x40012300
 8001e38:	0f000001 	.word	0x0f000001
 8001e3c:	08004fa8 	.word	0x08004fa8

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b07      	cmp	r3, #7
 8001fa8:	d00f      	beq.n	8001fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d00c      	beq.n	8001fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d009      	beq.n	8001fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d006      	beq.n	8001fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d003      	beq.n	8001fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fc2:	2190      	movs	r1, #144	; 0x90
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001fc6:	f7ff f818 	bl	8000ffa <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff38 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	08004fe0 	.word	0x08004fe0

08001fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d903      	bls.n	8001ffc <HAL_NVIC_SetPriority+0x20>
 8001ff4:	21a8      	movs	r1, #168	; 0xa8
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <HAL_NVIC_SetPriority+0x54>)
 8001ff8:	f7fe ffff 	bl	8000ffa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	d903      	bls.n	800200a <HAL_NVIC_SetPriority+0x2e>
 8002002:	21a9      	movs	r1, #169	; 0xa9
 8002004:	480a      	ldr	r0, [pc, #40]	; (8002030 <HAL_NVIC_SetPriority+0x54>)
 8002006:	f7fe fff8 	bl	8000ffa <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200a:	f7ff ff3d 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 800200e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	6978      	ldr	r0, [r7, #20]
 8002016:	f7ff ff8d 	bl	8001f34 <NVIC_EncodePriority>
 800201a:	4602      	mov	r2, r0
 800201c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff5c 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002028:	bf00      	nop
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	08004fe0 	.word	0x08004fe0

08002034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da03      	bge.n	800204e <HAL_NVIC_EnableIRQ+0x1a>
 8002046:	21bc      	movs	r1, #188	; 0xbc
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_NVIC_EnableIRQ+0x2c>)
 800204a:	f7fe ffd6 	bl	8000ffa <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff26 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	08004fe0 	.word	0x08004fe0

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a33      	ldr	r2, [pc, #204]	; (800214c <HAL_GPIO_Init+0xe8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <HAL_GPIO_Init+0x4e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a32      	ldr	r2, [pc, #200]	; (8002150 <HAL_GPIO_Init+0xec>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x4e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_GPIO_Init+0xf0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <HAL_GPIO_Init+0x4e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a30      	ldr	r2, [pc, #192]	; (8002158 <HAL_GPIO_Init+0xf4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <HAL_GPIO_Init+0x4e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2f      	ldr	r2, [pc, #188]	; (800215c <HAL_GPIO_Init+0xf8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x4e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2e      	ldr	r2, [pc, #184]	; (8002160 <HAL_GPIO_Init+0xfc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x4e>
 80020aa:	21ac      	movs	r1, #172	; 0xac
 80020ac:	482d      	ldr	r0, [pc, #180]	; (8002164 <HAL_GPIO_Init+0x100>)
 80020ae:	f7fe ffa4 	bl	8000ffa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_GPIO_Init+0x64>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x6c>
 80020c8:	21ad      	movs	r1, #173	; 0xad
 80020ca:	4826      	ldr	r0, [pc, #152]	; (8002164 <HAL_GPIO_Init+0x100>)
 80020cc:	f7fe ff95 	bl	8000ffa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d035      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d031      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b11      	cmp	r3, #17
 80020e6:	d02d      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d029      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b12      	cmp	r3, #18
 80020f6:	d025      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002100:	d020      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800210a:	d01b      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002114:	d016      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800211e:	d011      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002128:	d00c      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002132:	d007      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0xe0>
 800213c:	21ae      	movs	r1, #174	; 0xae
 800213e:	4809      	ldr	r0, [pc, #36]	; (8002164 <HAL_GPIO_Init+0x100>)
 8002140:	f7fe ff5b 	bl	8000ffa <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	e20c      	b.n	8002564 <HAL_GPIO_Init+0x500>
 800214a:	bf00      	nop
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021c00 	.word	0x40021c00
 8002164:	0800501c 	.word	0x0800501c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 81ec 	bne.w	800255e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d005      	beq.n	800219e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	2b02      	cmp	r3, #2
 800219c:	d144      	bne.n	8002228 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00f      	beq.n	80021c6 <HAL_GPIO_Init+0x162>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d00b      	beq.n	80021c6 <HAL_GPIO_Init+0x162>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x162>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x162>
 80021be:	21c0      	movs	r1, #192	; 0xc0
 80021c0:	4884      	ldr	r0, [pc, #528]	; (80023d4 <HAL_GPIO_Init+0x370>)
 80021c2:	f7fe ff1a 	bl	8000ffa <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 0201 	and.w	r2, r3, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b03      	cmp	r3, #3
 8002232:	d027      	beq.n	8002284 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_GPIO_Init+0x1f0>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d007      	beq.n	8002254 <HAL_GPIO_Init+0x1f0>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x1f0>
 800224c:	21d1      	movs	r1, #209	; 0xd1
 800224e:	4861      	ldr	r0, [pc, #388]	; (80023d4 <HAL_GPIO_Init+0x370>)
 8002250:	f7fe fed3 	bl	8000ffa <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	f040 80a3 	bne.w	80023d8 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d077      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d073      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d06f      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d06b      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d067      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d063      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d05f      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d05b      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d057      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d053      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d04f      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d04b      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d047      	beq.n	800238a <HAL_GPIO_Init+0x326>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d043      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d03f      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d03b      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d037      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b06      	cmp	r3, #6
 8002320:	d033      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d02f      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b05      	cmp	r3, #5
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d027      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b07      	cmp	r3, #7
 8002340:	d023      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b07      	cmp	r3, #7
 8002348:	d01f      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b07      	cmp	r3, #7
 8002350:	d01b      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d017      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b0a      	cmp	r3, #10
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b09      	cmp	r3, #9
 8002368:	d00f      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b09      	cmp	r3, #9
 8002370:	d00b      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x326>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x326>
 8002382:	21de      	movs	r1, #222	; 0xde
 8002384:	4813      	ldr	r0, [pc, #76]	; (80023d4 <HAL_GPIO_Init+0x370>)
 8002386:	f7fe fe38 	bl	8000ffa <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	69b9      	ldr	r1, [r7, #24]
 80023ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80023d2:	e001      	b.n	80023d8 <HAL_GPIO_Init+0x374>
 80023d4:	0800501c 	.word	0x0800501c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0203 	and.w	r2, r3, #3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a2 	beq.w	800255e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b56      	ldr	r3, [pc, #344]	; (8002578 <HAL_GPIO_Init+0x514>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a55      	ldr	r2, [pc, #340]	; (8002578 <HAL_GPIO_Init+0x514>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_GPIO_Init+0x514>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002436:	4a51      	ldr	r2, [pc, #324]	; (800257c <HAL_GPIO_Init+0x518>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x51c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x432>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a47      	ldr	r2, [pc, #284]	; (8002584 <HAL_GPIO_Init+0x520>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x42e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a46      	ldr	r2, [pc, #280]	; (8002588 <HAL_GPIO_Init+0x524>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x42a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_GPIO_Init+0x528>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x426>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a44      	ldr	r2, [pc, #272]	; (8002590 <HAL_GPIO_Init+0x52c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x422>
 8002482:	2304      	movs	r3, #4
 8002484:	e008      	b.n	8002498 <HAL_GPIO_Init+0x434>
 8002486:	2307      	movs	r3, #7
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x434>
 800248a:	2303      	movs	r3, #3
 800248c:	e004      	b.n	8002498 <HAL_GPIO_Init+0x434>
 800248e:	2302      	movs	r3, #2
 8002490:	e002      	b.n	8002498 <HAL_GPIO_Init+0x434>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x434>
 8002496:	2300      	movs	r3, #0
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f002 0203 	and.w	r2, r2, #3
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a8:	4934      	ldr	r1, [pc, #208]	; (800257c <HAL_GPIO_Init+0x518>)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_GPIO_Init+0x530>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024da:	4a2e      	ldr	r2, [pc, #184]	; (8002594 <HAL_GPIO_Init+0x530>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <HAL_GPIO_Init+0x530>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <HAL_GPIO_Init+0x530>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_GPIO_Init+0x530>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_GPIO_Init+0x530>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_GPIO_Init+0x530>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002558:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_GPIO_Init+0x530>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3301      	adds	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	f67f adfe 	bls.w	8002168 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40013800 	.word	0x40013800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40013c00 	.word	0x40013c00

08002598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_GPIO_WritePin+0x20>
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_GPIO_WritePin+0x2a>
 80025b8:	f240 119d 	movw	r1, #413	; 0x19d
 80025bc:	480e      	ldr	r0, [pc, #56]	; (80025f8 <HAL_GPIO_WritePin+0x60>)
 80025be:	f7fe fd1c 	bl	8000ffa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80025c2:	787b      	ldrb	r3, [r7, #1]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_WritePin+0x40>
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d004      	beq.n	80025d8 <HAL_GPIO_WritePin+0x40>
 80025ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80025d2:	4809      	ldr	r0, [pc, #36]	; (80025f8 <HAL_GPIO_WritePin+0x60>)
 80025d4:	f7fe fd11 	bl	8000ffa <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0800501c 	.word	0x0800501c

080025fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e314      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	d903      	bls.n	800261e <HAL_RCC_OscConfig+0x22>
 8002616:	21e6      	movs	r1, #230	; 0xe6
 8002618:	4897      	ldr	r0, [pc, #604]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 800261a:	f7fe fcee 	bl	8000ffa <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8088 	beq.w	800273c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_OscConfig+0x54>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d008      	beq.n	8002650 <HAL_RCC_OscConfig+0x54>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002646:	d003      	beq.n	8002650 <HAL_RCC_OscConfig+0x54>
 8002648:	21eb      	movs	r1, #235	; 0xeb
 800264a:	488b      	ldr	r0, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 800264c:	f7fe fcd5 	bl	8000ffa <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002650:	4b8a      	ldr	r3, [pc, #552]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b04      	cmp	r3, #4
 800265a:	d00c      	beq.n	8002676 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265c:	4b87      	ldr	r3, [pc, #540]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002664:	2b08      	cmp	r3, #8
 8002666:	d112      	bne.n	800268e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002668:	4b84      	ldr	r3, [pc, #528]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002674:	d10b      	bne.n	800268e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002676:	4b81      	ldr	r3, [pc, #516]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d05b      	beq.n	800273a <HAL_RCC_OscConfig+0x13e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d157      	bne.n	800273a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e2d4      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0xaa>
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a77      	ldr	r2, [pc, #476]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e01d      	b.n	80026e2 <HAL_RCC_OscConfig+0xe6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ae:	d10c      	bne.n	80026ca <HAL_RCC_OscConfig+0xce>
 80026b0:	4b72      	ldr	r3, [pc, #456]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a71      	ldr	r2, [pc, #452]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b6f      	ldr	r3, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6e      	ldr	r2, [pc, #440]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e00b      	b.n	80026e2 <HAL_RCC_OscConfig+0xe6>
 80026ca:	4b6c      	ldr	r3, [pc, #432]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6b      	ldr	r2, [pc, #428]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b69      	ldr	r3, [pc, #420]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a68      	ldr	r2, [pc, #416]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d013      	beq.n	8002712 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fec3 	bl	8001474 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f2:	f7fe febf 	bl	8001474 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e299      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002704:	4b5d      	ldr	r3, [pc, #372]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0xf6>
 8002710:	e014      	b.n	800273c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe feaf 	bl	8001474 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271a:	f7fe feab 	bl	8001474 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	; 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e285      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x11e>
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d079      	beq.n	800283c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_OscConfig+0x166>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d004      	beq.n	8002762 <HAL_RCC_OscConfig+0x166>
 8002758:	f240 111d 	movw	r1, #285	; 0x11d
 800275c:	4846      	ldr	r0, [pc, #280]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 800275e:	f7fe fc4c 	bl	8000ffa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b1f      	cmp	r3, #31
 8002768:	d904      	bls.n	8002774 <HAL_RCC_OscConfig+0x178>
 800276a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800276e:	4842      	ldr	r0, [pc, #264]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 8002770:	f7fe fc43 	bl	8000ffa <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002774:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002788:	2b08      	cmp	r3, #8
 800278a:	d11c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002798:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1b4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e243      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	492f      	ldr	r1, [pc, #188]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c4:	e03a      	b.n	800283c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d020      	beq.n	8002810 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ce:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCC_OscConfig+0x284>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fe4e 	bl	8001474 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7fe fe4a 	bl	8001474 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e224      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	491c      	ldr	r1, [pc, #112]	; (800287c <HAL_RCC_OscConfig+0x280>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
 800280e:	e015      	b.n	800283c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x284>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fe2d 	bl	8001474 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fe29 	bl	8001474 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e203      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_OscConfig+0x280>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d045      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_OscConfig+0x266>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d004      	beq.n	8002862 <HAL_RCC_OscConfig+0x266>
 8002858:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800285c:	4806      	ldr	r0, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 800285e:	f7fe fbcc 	bl	8000ffa <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01e      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fe00 	bl	8001474 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	e010      	b.n	800289a <HAL_RCC_OscConfig+0x29e>
 8002878:	08005058 	.word	0x08005058
 800287c:	40023800 	.word	0x40023800
 8002880:	42470000 	.word	0x42470000
 8002884:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fdf4 	bl	8001474 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1ce      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 800289c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x28c>
 80028a6:	e015      	b.n	80028d4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a8:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_RCC_OscConfig+0x41c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fde1 	bl	8001474 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe fddd 	bl	8001474 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1b7      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 80028ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80b0 	beq.w	8002a42 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_RCC_OscConfig+0x30c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d008      	beq.n	8002908 <HAL_RCC_OscConfig+0x30c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d004      	beq.n	8002908 <HAL_RCC_OscConfig+0x30c>
 80028fe:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002902:	4846      	ldr	r0, [pc, #280]	; (8002a1c <HAL_RCC_OscConfig+0x420>)
 8002904:	f7fe fb79 	bl	8000ffa <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002908:	4b42      	ldr	r3, [pc, #264]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10f      	bne.n	8002934 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a3d      	ldr	r2, [pc, #244]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <HAL_RCC_OscConfig+0x424>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002940:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_RCC_OscConfig+0x424>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a36      	ldr	r2, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x424>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294c:	f7fe fd92 	bl	8001474 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fd8e 	bl	8001474 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e168      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <HAL_RCC_OscConfig+0x424>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d106      	bne.n	8002988 <HAL_RCC_OscConfig+0x38c>
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
 8002986:	e01c      	b.n	80029c2 <HAL_RCC_OscConfig+0x3c6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x3ae>
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	e00b      	b.n	80029c2 <HAL_RCC_OscConfig+0x3c6>
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d015      	beq.n	80029f6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fd53 	bl	8001474 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fd4f 	bl	8001474 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e127      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_OscConfig+0x418>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3d6>
 80029f4:	e01c      	b.n	8002a30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fd3d 	bl	8001474 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	e012      	b.n	8002a24 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fd39 	bl	8001474 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d909      	bls.n	8002a24 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e111      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470e80 	.word	0x42470e80
 8002a1c:	08005058 	.word	0x08005058
 8002a20:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	4b86      	ldr	r3, [pc, #536]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e6      	bne.n	80029fe <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b82      	ldr	r3, [pc, #520]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a81      	ldr	r2, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x468>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d008      	beq.n	8002a64 <HAL_RCC_OscConfig+0x468>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d004      	beq.n	8002a64 <HAL_RCC_OscConfig+0x468>
 8002a5a:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002a5e:	4879      	ldr	r0, [pc, #484]	; (8002c44 <HAL_RCC_OscConfig+0x648>)
 8002a60:	f7fe facb 	bl	8000ffa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80e4 	beq.w	8002c36 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6e:	4b74      	ldr	r3, [pc, #464]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	f000 80a5 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	f040 8089 	bne.w	8002b98 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4a6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a96:	d004      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4a6>
 8002a98:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002a9c:	4869      	ldr	r0, [pc, #420]	; (8002c44 <HAL_RCC_OscConfig+0x648>)
 8002a9e:	f7fe faac 	bl	8000ffa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	2b3f      	cmp	r3, #63	; 0x3f
 8002aa8:	d904      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x4b8>
 8002aaa:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002aae:	4865      	ldr	r0, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x648>)
 8002ab0:	f7fe faa3 	bl	8000ffa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b31      	cmp	r3, #49	; 0x31
 8002aba:	d904      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4ca>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ac4:	d904      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x4d4>
 8002ac6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002aca:	485e      	ldr	r0, [pc, #376]	; (8002c44 <HAL_RCC_OscConfig+0x648>)
 8002acc:	f7fe fa95 	bl	8000ffa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d010      	beq.n	8002afa <HAL_RCC_OscConfig+0x4fe>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d00c      	beq.n	8002afa <HAL_RCC_OscConfig+0x4fe>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_OscConfig+0x4fe>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d004      	beq.n	8002afa <HAL_RCC_OscConfig+0x4fe>
 8002af0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002af4:	4853      	ldr	r0, [pc, #332]	; (8002c44 <HAL_RCC_OscConfig+0x648>)
 8002af6:	f7fe fa80 	bl	8000ffa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d903      	bls.n	8002b0a <HAL_RCC_OscConfig+0x50e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	d904      	bls.n	8002b14 <HAL_RCC_OscConfig+0x518>
 8002b0a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002b0e:	484d      	ldr	r0, [pc, #308]	; (8002c44 <HAL_RCC_OscConfig+0x648>)
 8002b10:	f7fe fa73 	bl	8000ffa <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_RCC_OscConfig+0x64c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fcab 	bl	8001474 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe fca7 	bl	8001474 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e081      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b34:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	019b      	lsls	r3, r3, #6
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
 8002b64:	4936      	ldr	r1, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_OscConfig+0x64c>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fc80 	bl	8001474 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fc7c 	bl	8001474 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e056      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x57c>
 8002b96:	e04e      	b.n	8002c36 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x64c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fc69 	bl	8001474 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fc65 	bl	8001474 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e03f      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x5aa>
 8002bc4:	e037      	b.n	8002c36 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e032      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x644>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d028      	beq.n	8002c32 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d121      	bne.n	8002c32 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d11a      	bne.n	8002c32 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08005058 	.word	0x08005058
 8002c48:	42470060 	.word	0x42470060

08002c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e174      	b.n	8002f4a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x24>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b0f      	cmp	r3, #15
 8002c6e:	d904      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x2e>
 8002c70:	f240 215a 	movw	r1, #602	; 0x25a
 8002c74:	487b      	ldr	r0, [pc, #492]	; (8002e64 <HAL_RCC_ClockConfig+0x218>)
 8002c76:	f7fe f9c0 	bl	8000ffa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d019      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d00d      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d007      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d004      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
 8002caa:	f240 215b 	movw	r1, #603	; 0x25b
 8002cae:	486d      	ldr	r0, [pc, #436]	; (8002e64 <HAL_RCC_ClockConfig+0x218>)
 8002cb0:	f7fe f9a3 	bl	8000ffa <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b6c      	ldr	r3, [pc, #432]	; (8002e68 <HAL_RCC_ClockConfig+0x21c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d90c      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <HAL_RCC_ClockConfig+0x21c>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_ClockConfig+0x21c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e136      	b.n	8002f4a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d049      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a5c      	ldr	r2, [pc, #368]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d024      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b80      	cmp	r3, #128	; 0x80
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b90      	cmp	r3, #144	; 0x90
 8002d2e:	d01c      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2ba0      	cmp	r3, #160	; 0xa0
 8002d36:	d018      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2bb0      	cmp	r3, #176	; 0xb0
 8002d3e:	d014      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2bc0      	cmp	r3, #192	; 0xc0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2bd0      	cmp	r3, #208	; 0xd0
 8002d4e:	d00c      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2be0      	cmp	r3, #224	; 0xe0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2bf0      	cmp	r3, #240	; 0xf0
 8002d5e:	d004      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x11e>
 8002d60:	f240 217e 	movw	r1, #638	; 0x27e
 8002d64:	483f      	ldr	r0, [pc, #252]	; (8002e64 <HAL_RCC_ClockConfig+0x218>)
 8002d66:	f7fe f948 	bl	8000ffa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6a:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	493d      	ldr	r1, [pc, #244]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d059      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d010      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d00c      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d004      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
 8002da8:	f240 2185 	movw	r1, #645	; 0x285
 8002dac:	482d      	ldr	r0, [pc, #180]	; (8002e64 <HAL_RCC_ClockConfig+0x218>)
 8002dae:	f7fe f924 	bl	8000ffa <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d119      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0bf      	b.n	8002f4a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0af      	b.n	8002f4a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0a7      	b.n	8002f4a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4919      	ldr	r1, [pc, #100]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fb32 	bl	8001474 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7fe fb2e 	bl	8001474 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e08f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_ClockConfig+0x220>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x21c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d212      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_RCC_ClockConfig+0x21c>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_ClockConfig+0x21c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d007      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e072      	b.n	8002f4a <HAL_RCC_ClockConfig+0x2fe>
 8002e64:	08005058 	.word	0x08005058
 8002e68:	40023c00 	.word	0x40023c00
 8002e6c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d025      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x26a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8c:	d013      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x26a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e96:	d00e      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x26a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x26a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002eaa:	d004      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x26a>
 8002eac:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002eb0:	4828      	ldr	r0, [pc, #160]	; (8002f54 <HAL_RCC_ClockConfig+0x308>)
 8002eb2:	f7fe f8a2 	bl	8000ffa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <HAL_RCC_ClockConfig+0x30c>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4925      	ldr	r1, [pc, #148]	; (8002f58 <HAL_RCC_ClockConfig+0x30c>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d026      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x2c2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d013      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x2c2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002eee:	d00e      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x2c2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x2c2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f02:	d004      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x2c2>
 8002f04:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002f08:	4812      	ldr	r0, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x308>)
 8002f0a:	f7fe f876 	bl	8000ffa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x30c>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	490e      	ldr	r1, [pc, #56]	; (8002f58 <HAL_RCC_ClockConfig+0x30c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f22:	f000 f821 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_ClockConfig+0x30c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	490a      	ldr	r1, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x310>)
 8002f34:	5ccb      	ldrb	r3, [r1, r3]
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x314>)
 8002f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x318>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe f90a 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	08005058 	.word	0x08005058
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	0800513c 	.word	0x0800513c
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20000004 	.word	0x20000004

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	b094      	sub	sp, #80	; 0x50
 8002f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	647b      	str	r3, [r7, #68]	; 0x44
 8002f74:	2300      	movs	r3, #0
 8002f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f78:	2300      	movs	r3, #0
 8002f7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f80:	4b79      	ldr	r3, [pc, #484]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	f200 80e1 	bhi.w	8003154 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x34>
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9a:	e0db      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fa0:	e0db      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa2:	4b73      	ldr	r3, [pc, #460]	; (8003170 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa6:	e0d8      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	f04f 0000 	mov.w	r0, #0
 8002fe2:	f04f 0100 	mov.w	r1, #0
 8002fe6:	0159      	lsls	r1, r3, #5
 8002fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fec:	0150      	lsls	r0, r2, #5
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	1a51      	subs	r1, r2, r1
 8002ff6:	6139      	str	r1, [r7, #16]
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800300c:	4659      	mov	r1, fp
 800300e:	018b      	lsls	r3, r1, #6
 8003010:	4651      	mov	r1, sl
 8003012:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003016:	4651      	mov	r1, sl
 8003018:	018a      	lsls	r2, r1, #6
 800301a:	4651      	mov	r1, sl
 800301c:	ebb2 0801 	subs.w	r8, r2, r1
 8003020:	4659      	mov	r1, fp
 8003022:	eb63 0901 	sbc.w	r9, r3, r1
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303a:	4690      	mov	r8, r2
 800303c:	4699      	mov	r9, r3
 800303e:	4623      	mov	r3, r4
 8003040:	eb18 0303 	adds.w	r3, r8, r3
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	462b      	mov	r3, r5
 8003048:	eb49 0303 	adc.w	r3, r9, r3
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800305a:	4629      	mov	r1, r5
 800305c:	024b      	lsls	r3, r1, #9
 800305e:	4621      	mov	r1, r4
 8003060:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003064:	4621      	mov	r1, r4
 8003066:	024a      	lsls	r2, r1, #9
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	2200      	movs	r2, #0
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
 8003072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003078:	f7fd f8ae 	bl	80001d8 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003084:	e058      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	2200      	movs	r2, #0
 800308e:	4618      	mov	r0, r3
 8003090:	4611      	mov	r1, r2
 8003092:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030a0:	4642      	mov	r2, r8
 80030a2:	464b      	mov	r3, r9
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	0159      	lsls	r1, r3, #5
 80030ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b2:	0150      	lsls	r0, r2, #5
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4641      	mov	r1, r8
 80030ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80030be:	4649      	mov	r1, r9
 80030c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030d8:	ebb2 040a 	subs.w	r4, r2, sl
 80030dc:	eb63 050b 	sbc.w	r5, r3, fp
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	00eb      	lsls	r3, r5, #3
 80030ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	4614      	mov	r4, r2
 80030f2:	461d      	mov	r5, r3
 80030f4:	4643      	mov	r3, r8
 80030f6:	18e3      	adds	r3, r4, r3
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	464b      	mov	r3, r9
 80030fc:	eb45 0303 	adc.w	r3, r5, r3
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310e:	4629      	mov	r1, r5
 8003110:	028b      	lsls	r3, r1, #10
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003118:	4621      	mov	r1, r4
 800311a:	028a      	lsls	r2, r1, #10
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003122:	2200      	movs	r2, #0
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	61fa      	str	r2, [r7, #28]
 8003128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800312c:	f7fd f854 	bl	80001d8 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_GetSysClockFreq+0x200>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	3301      	adds	r3, #1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003148:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800314a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003152:	e002      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetSysClockFreq+0x204>)
 8003156:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800315c:	4618      	mov	r0, r3
 800315e:	3750      	adds	r7, #80	; 0x50
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200

08003174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4903      	ldr	r1, [pc, #12]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	0800514c 	.word	0x0800514c

080031b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b8:	f7ff ffdc 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0b5b      	lsrs	r3, r3, #13
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	0800514c 	.word	0x0800514c

080031dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	220f      	movs	r2, #15
 80031ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <HAL_RCC_GetClockConfig+0x60>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0207 	and.w	r2, r3, #7
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40023c00 	.word	0x40023c00

08003240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e18c      	b.n	800356c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a75      	ldr	r2, [pc, #468]	; (800342c <HAL_SPI_Init+0x1ec>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_SPI_Init+0x4e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a73      	ldr	r2, [pc, #460]	; (8003430 <HAL_SPI_Init+0x1f0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_SPI_Init+0x4e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a72      	ldr	r2, [pc, #456]	; (8003434 <HAL_SPI_Init+0x1f4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_SPI_Init+0x4e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a70      	ldr	r2, [pc, #448]	; (8003438 <HAL_SPI_Init+0x1f8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_SPI_Init+0x4e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6f      	ldr	r2, [pc, #444]	; (800343c <HAL_SPI_Init+0x1fc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_SPI_Init+0x4e>
 8003284:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003288:	486d      	ldr	r0, [pc, #436]	; (8003440 <HAL_SPI_Init+0x200>)
 800328a:	f7fd feb6 	bl	8000ffa <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_SPI_Init+0x6a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329e:	d004      	beq.n	80032aa <HAL_SPI_Init+0x6a>
 80032a0:	f240 1141 	movw	r1, #321	; 0x141
 80032a4:	4866      	ldr	r0, [pc, #408]	; (8003440 <HAL_SPI_Init+0x200>)
 80032a6:	f7fd fea8 	bl	8000ffa <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <HAL_SPI_Init+0x90>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	d009      	beq.n	80032d0 <HAL_SPI_Init+0x90>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c4:	d004      	beq.n	80032d0 <HAL_SPI_Init+0x90>
 80032c6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80032ca:	485d      	ldr	r0, [pc, #372]	; (8003440 <HAL_SPI_Init+0x200>)
 80032cc:	f7fd fe95 	bl	8000ffa <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d8:	d008      	beq.n	80032ec <HAL_SPI_Init+0xac>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_SPI_Init+0xac>
 80032e2:	f240 1143 	movw	r1, #323	; 0x143
 80032e6:	4856      	ldr	r0, [pc, #344]	; (8003440 <HAL_SPI_Init+0x200>)
 80032e8:	f7fd fe87 	bl	8000ffa <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f4:	d00d      	beq.n	8003312 <HAL_SPI_Init+0xd2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_SPI_Init+0xd2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003306:	d004      	beq.n	8003312 <HAL_SPI_Init+0xd2>
 8003308:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800330c:	484c      	ldr	r0, [pc, #304]	; (8003440 <HAL_SPI_Init+0x200>)
 800330e:	f7fd fe74 	bl	8000ffa <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d020      	beq.n	800335c <HAL_SPI_Init+0x11c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	2b08      	cmp	r3, #8
 8003320:	d01c      	beq.n	800335c <HAL_SPI_Init+0x11c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d018      	beq.n	800335c <HAL_SPI_Init+0x11c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b18      	cmp	r3, #24
 8003330:	d014      	beq.n	800335c <HAL_SPI_Init+0x11c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	2b20      	cmp	r3, #32
 8003338:	d010      	beq.n	800335c <HAL_SPI_Init+0x11c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	2b28      	cmp	r3, #40	; 0x28
 8003340:	d00c      	beq.n	800335c <HAL_SPI_Init+0x11c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	2b30      	cmp	r3, #48	; 0x30
 8003348:	d008      	beq.n	800335c <HAL_SPI_Init+0x11c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	2b38      	cmp	r3, #56	; 0x38
 8003350:	d004      	beq.n	800335c <HAL_SPI_Init+0x11c>
 8003352:	f240 1145 	movw	r1, #325	; 0x145
 8003356:	483a      	ldr	r0, [pc, #232]	; (8003440 <HAL_SPI_Init+0x200>)
 8003358:	f7fd fe4f 	bl	8000ffa <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_SPI_Init+0x136>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d004      	beq.n	8003376 <HAL_SPI_Init+0x136>
 800336c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003370:	4833      	ldr	r0, [pc, #204]	; (8003440 <HAL_SPI_Init+0x200>)
 8003372:	f7fd fe42 	bl	8000ffa <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_SPI_Init+0x150>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b10      	cmp	r3, #16
 8003384:	d004      	beq.n	8003390 <HAL_SPI_Init+0x150>
 8003386:	f240 1147 	movw	r1, #327	; 0x147
 800338a:	482d      	ldr	r0, [pc, #180]	; (8003440 <HAL_SPI_Init+0x200>)
 800338c:	f7fd fe35 	bl	8000ffa <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d155      	bne.n	8003444 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_SPI_Init+0x172>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d004      	beq.n	80033b2 <HAL_SPI_Init+0x172>
 80033a8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80033ac:	4824      	ldr	r0, [pc, #144]	; (8003440 <HAL_SPI_Init+0x200>)
 80033ae:	f7fd fe24 	bl	8000ffa <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_SPI_Init+0x18c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d004      	beq.n	80033cc <HAL_SPI_Init+0x18c>
 80033c2:	f240 114b 	movw	r1, #331	; 0x14b
 80033c6:	481e      	ldr	r0, [pc, #120]	; (8003440 <HAL_SPI_Init+0x200>)
 80033c8:	f7fd fe17 	bl	8000ffa <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d4:	d125      	bne.n	8003422 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d05d      	beq.n	800349a <HAL_SPI_Init+0x25a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d059      	beq.n	800349a <HAL_SPI_Init+0x25a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d055      	beq.n	800349a <HAL_SPI_Init+0x25a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	2b18      	cmp	r3, #24
 80033f4:	d051      	beq.n	800349a <HAL_SPI_Init+0x25a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d04d      	beq.n	800349a <HAL_SPI_Init+0x25a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	2b28      	cmp	r3, #40	; 0x28
 8003404:	d049      	beq.n	800349a <HAL_SPI_Init+0x25a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b30      	cmp	r3, #48	; 0x30
 800340c:	d045      	beq.n	800349a <HAL_SPI_Init+0x25a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	2b38      	cmp	r3, #56	; 0x38
 8003414:	d041      	beq.n	800349a <HAL_SPI_Init+0x25a>
 8003416:	f240 114f 	movw	r1, #335	; 0x14f
 800341a:	4809      	ldr	r0, [pc, #36]	; (8003440 <HAL_SPI_Init+0x200>)
 800341c:	f7fd fded 	bl	8000ffa <assert_failed>
 8003420:	e03b      	b.n	800349a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	61da      	str	r2, [r3, #28]
 8003428:	e037      	b.n	800349a <HAL_SPI_Init+0x25a>
 800342a:	bf00      	nop
 800342c:	40013000 	.word	0x40013000
 8003430:	40003800 	.word	0x40003800
 8003434:	40003c00 	.word	0x40003c00
 8003438:	40013400 	.word	0x40013400
 800343c:	40015000 	.word	0x40015000
 8003440:	08005090 	.word	0x08005090
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_SPI_Init+0x24e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d01c      	beq.n	800348e <HAL_SPI_Init+0x24e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b10      	cmp	r3, #16
 800345a:	d018      	beq.n	800348e <HAL_SPI_Init+0x24e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2b18      	cmp	r3, #24
 8003462:	d014      	beq.n	800348e <HAL_SPI_Init+0x24e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b20      	cmp	r3, #32
 800346a:	d010      	beq.n	800348e <HAL_SPI_Init+0x24e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b28      	cmp	r3, #40	; 0x28
 8003472:	d00c      	beq.n	800348e <HAL_SPI_Init+0x24e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b30      	cmp	r3, #48	; 0x30
 800347a:	d008      	beq.n	800348e <HAL_SPI_Init+0x24e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b38      	cmp	r3, #56	; 0x38
 8003482:	d004      	beq.n	800348e <HAL_SPI_Init+0x24e>
 8003484:	f240 1159 	movw	r1, #345	; 0x159
 8003488:	483a      	ldr	r0, [pc, #232]	; (8003574 <HAL_SPI_Init+0x334>)
 800348a:	f7fd fdb6 	bl	8000ffa <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fd fde1 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	ea42 0103 	orr.w	r1, r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	f003 0104 	and.w	r1, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0210 	and.w	r2, r3, #16
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	08005090 	.word	0x08005090

08003578 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <HAL_SPI_Transmit+0x30>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	d004      	beq.n	80035a8 <HAL_SPI_Transmit+0x30>
 800359e:	f44f 7142 	mov.w	r1, #776	; 0x308
 80035a2:	4880      	ldr	r0, [pc, #512]	; (80037a4 <HAL_SPI_Transmit+0x22c>)
 80035a4:	f7fd fd29 	bl	8000ffa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_SPI_Transmit+0x3e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e128      	b.n	8003808 <HAL_SPI_Transmit+0x290>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035be:	f7fd ff59 	bl	8001474 <HAL_GetTick>
 80035c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d002      	beq.n	80035da <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
 80035d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d8:	e10d      	b.n	80037f6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_SPI_Transmit+0x6e>
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ea:	e104      	b.n	80037f6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2203      	movs	r2, #3
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003632:	d10f      	bne.n	8003654 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003652:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d007      	beq.n	8003672 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367a:	d14b      	bne.n	8003714 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_SPI_Transmit+0x112>
 8003684:	8afb      	ldrh	r3, [r7, #22]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d13e      	bne.n	8003708 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	1c9a      	adds	r2, r3, #2
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036ae:	e02b      	b.n	8003708 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d112      	bne.n	80036e4 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e2:	e011      	b.n	8003708 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e4:	f7fd fec6 	bl	8001474 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d803      	bhi.n	80036fc <HAL_SPI_Transmit+0x184>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fa:	d102      	bne.n	8003702 <HAL_SPI_Transmit+0x18a>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003706:	e076      	b.n	80037f6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ce      	bne.n	80036b0 <HAL_SPI_Transmit+0x138>
 8003712:	e04e      	b.n	80037b2 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x1aa>
 800371c:	8afb      	ldrh	r3, [r7, #22]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d142      	bne.n	80037a8 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003748:	e02e      	b.n	80037a8 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d113      	bne.n	8003780 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	86da      	strh	r2, [r3, #54]	; 0x36
 800377e:	e013      	b.n	80037a8 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003780:	f7fd fe78 	bl	8001474 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d803      	bhi.n	8003798 <HAL_SPI_Transmit+0x220>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003796:	d102      	bne.n	800379e <HAL_SPI_Transmit+0x226>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a2:	e028      	b.n	80037f6 <HAL_SPI_Transmit+0x27e>
 80037a4:	08005090 	.word	0x08005090
    while (hspi->TxXferCount > 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1cb      	bne.n	800374a <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fbe6 	bl	8003f88 <SPI_EndRxTxTransaction>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e000      	b.n	80037f6 <HAL_SPI_Transmit+0x27e>
  }

error:
 80037f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003806:	7ffb      	ldrb	r3, [r7, #31]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382c:	d112      	bne.n	8003854 <HAL_SPI_Receive+0x44>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2204      	movs	r2, #4
 800383a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f8f2 	bl	8003a34 <HAL_SPI_TransmitReceive>
 8003850:	4603      	mov	r3, r0
 8003852:	e0ea      	b.n	8003a2a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_SPI_Receive+0x52>
 800385e:	2302      	movs	r3, #2
 8003860:	e0e3      	b.n	8003a2a <HAL_SPI_Receive+0x21a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386a:	f7fd fe03 	bl	8001474 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d002      	beq.n	8003882 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003880:	e0ca      	b.n	8003a18 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_SPI_Receive+0x7e>
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003892:	e0c1      	b.n	8003a18 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2204      	movs	r2, #4
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038da:	d10f      	bne.n	80038fc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d007      	beq.n	800391a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d162      	bne.n	80039e8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003922:	e02e      	b.n	8003982 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d115      	bne.n	800395e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f103 020c 	add.w	r2, r3, #12
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800395c:	e011      	b.n	8003982 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395e:	f7fd fd89 	bl	8001474 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d803      	bhi.n	8003976 <HAL_SPI_Receive+0x166>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003974:	d102      	bne.n	800397c <HAL_SPI_Receive+0x16c>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003980:	e04a      	b.n	8003a18 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1cb      	bne.n	8003924 <HAL_SPI_Receive+0x114>
 800398c:	e031      	b.n	80039f2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d113      	bne.n	80039c4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	b292      	uxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	1c9a      	adds	r2, r3, #2
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039c2:	e011      	b.n	80039e8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c4:	f7fd fd56 	bl	8001474 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d803      	bhi.n	80039dc <HAL_SPI_Receive+0x1cc>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_Receive+0x1d2>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039e6:	e017      	b.n	8003a18 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1cd      	bne.n	800398e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fa60 	bl	8003ebc <SPI_EndRxTransaction>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	75fb      	strb	r3, [r7, #23]
 8003a14:	e000      	b.n	8003a18 <HAL_SPI_Receive+0x208>
  }

error :
 8003a16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a42:	2301      	movs	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x2a>
 8003a54:	f240 417c 	movw	r1, #1148	; 0x47c
 8003a58:	4884      	ldr	r0, [pc, #528]	; (8003c6c <HAL_SPI_TransmitReceive+0x238>)
 8003a5a:	f7fd face 	bl	8000ffa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x38>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e18d      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x354>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a74:	f7fd fcfe 	bl	8001474 <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d00f      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9c:	d107      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x7a>
 8003aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d003      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ab4:	e15e      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x94>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x94>
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ace:	e151      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d003      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2205      	movs	r2, #5
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	887a      	ldrh	r2, [r7, #2]
 8003afa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	887a      	ldrh	r2, [r7, #2]
 8003b06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d007      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b40:	d178      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x11c>
 8003b4a:	8b7b      	ldrh	r3, [r7, #26]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d166      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b74:	e053      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d11b      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x188>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x188>
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d113      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	881a      	ldrh	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	1c9a      	adds	r2, r3, #2
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d119      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x1ca>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d014      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	b292      	uxth	r2, r2
 8003be0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bfe:	f7fd fc39 	bl	8001474 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d807      	bhi.n	8003c1e <HAL_SPI_TransmitReceive+0x1ea>
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c14:	d003      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c1c:	e0aa      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1a6      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x142>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1a1      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x142>
 8003c32:	e07f      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_SPI_TransmitReceive+0x20e>
 8003c3c:	8b7b      	ldrh	r3, [r7, #26]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d16e      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c68:	e05a      	b.n	8003d20 <HAL_SPI_TransmitReceive+0x2ec>
 8003c6a:	bf00      	nop
 8003c6c:	08005090 	.word	0x08005090
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d11c      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x284>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d017      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x284>
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d114      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	7812      	ldrb	r2, [r2, #0]
 8003c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d119      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x2c6>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d014      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cfa:	f7fd fbbb 	bl	8001474 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d803      	bhi.n	8003d12 <HAL_SPI_TransmitReceive+0x2de>
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d10:	d102      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x2e4>
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d1e:	e029      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1a2      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x23c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d19d      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f925 	bl	8003f88 <SPI_EndRxTxTransaction>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d50:	e010      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	e000      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8003d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	; 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9e:	b2db      	uxtb	r3, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dbc:	f7fd fb5a 	bl	8001474 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	4413      	add	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dcc:	f7fd fb52 	bl	8001474 <HAL_GetTick>
 8003dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	015b      	lsls	r3, r3, #5
 8003dd8:	0d1b      	lsrs	r3, r3, #20
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de2:	e054      	b.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dea:	d050      	beq.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dec:	f7fd fb42 	bl	8001474 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d902      	bls.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d13d      	bne.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1a:	d111      	bne.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e24:	d004      	beq.n	8003e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d107      	bne.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e48:	d10f      	bne.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e017      	b.n	8003eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d19b      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000

08003ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed0:	d111      	bne.n	8003ef6 <SPI_EndRxTransaction+0x3a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eda:	d004      	beq.n	8003ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee4:	d107      	bne.n	8003ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efe:	d12a      	bne.n	8003f56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f08:	d012      	beq.n	8003f30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff ff49 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d02d      	beq.n	8003f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e026      	b.n	8003f7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2101      	movs	r1, #1
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff ff36 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01a      	beq.n	8003f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e013      	b.n	8003f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2101      	movs	r1, #1
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff ff23 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e000      	b.n	8003f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <SPI_EndRxTxTransaction+0x7c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <SPI_EndRxTxTransaction+0x80>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0d5b      	lsrs	r3, r3, #21
 8003fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb2:	d112      	bne.n	8003fda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2180      	movs	r1, #128	; 0x80
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff fef4 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e00f      	b.n	8003ffa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d0f2      	beq.n	8003fda <SPI_EndRxTxTransaction+0x52>
 8003ff4:	e000      	b.n	8003ff8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ff6:	bf00      	nop
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000000 	.word	0x20000000
 8004008:	165e9f81 	.word	0x165e9f81

0800400c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e0a7      	b.n	800416e <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a55      	ldr	r2, [pc, #340]	; (8004178 <HAL_TIM_Base_Init+0x16c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d027      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d022      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a51      	ldr	r2, [pc, #324]	; (800417c <HAL_TIM_Base_Init+0x170>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01d      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a4f      	ldr	r2, [pc, #316]	; (8004180 <HAL_TIM_Base_Init+0x174>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a4e      	ldr	r2, [pc, #312]	; (8004184 <HAL_TIM_Base_Init+0x178>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_TIM_Base_Init+0x17c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_TIM_Base_Init+0x180>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a49      	ldr	r2, [pc, #292]	; (8004190 <HAL_TIM_Base_Init+0x184>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Init+0x6c>
 800406e:	f240 1113 	movw	r1, #275	; 0x113
 8004072:	4848      	ldr	r0, [pc, #288]	; (8004194 <HAL_TIM_Base_Init+0x188>)
 8004074:	f7fc ffc1 	bl	8000ffa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d014      	beq.n	80040aa <HAL_TIM_Base_Init+0x9e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d010      	beq.n	80040aa <HAL_TIM_Base_Init+0x9e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b20      	cmp	r3, #32
 800408e:	d00c      	beq.n	80040aa <HAL_TIM_Base_Init+0x9e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d008      	beq.n	80040aa <HAL_TIM_Base_Init+0x9e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b60      	cmp	r3, #96	; 0x60
 800409e:	d004      	beq.n	80040aa <HAL_TIM_Base_Init+0x9e>
 80040a0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80040a4:	483b      	ldr	r0, [pc, #236]	; (8004194 <HAL_TIM_Base_Init+0x188>)
 80040a6:	f7fc ffa8 	bl	8000ffa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <HAL_TIM_Base_Init+0xc4>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ba:	d009      	beq.n	80040d0 <HAL_TIM_Base_Init+0xc4>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c4:	d004      	beq.n	80040d0 <HAL_TIM_Base_Init+0xc4>
 80040c6:	f240 1115 	movw	r1, #277	; 0x115
 80040ca:	4832      	ldr	r0, [pc, #200]	; (8004194 <HAL_TIM_Base_Init+0x188>)
 80040cc:	f7fc ff95 	bl	8000ffa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_TIM_Base_Init+0xde>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d004      	beq.n	80040ea <HAL_TIM_Base_Init+0xde>
 80040e0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80040e4:	482b      	ldr	r0, [pc, #172]	; (8004194 <HAL_TIM_Base_Init+0x188>)
 80040e6:	f7fc ff88 	bl	8000ffa <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f84a 	bl	8004198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f000 fa0a 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800
 8004194:	080050c8 	.word	0x080050c8

08004198 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3d      	ldr	r2, [pc, #244]	; (80042b0 <HAL_TIM_Base_Start_IT+0x104>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d027      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c6:	d022      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a39      	ldr	r2, [pc, #228]	; (80042b4 <HAL_TIM_Base_Start_IT+0x108>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01d      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a38      	ldr	r2, [pc, #224]	; (80042b8 <HAL_TIM_Base_Start_IT+0x10c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a36      	ldr	r2, [pc, #216]	; (80042bc <HAL_TIM_Base_Start_IT+0x110>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <HAL_TIM_Base_Start_IT+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <HAL_TIM_Base_Start_IT+0x118>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <HAL_TIM_Base_Start_IT+0x11c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIM_Base_Start_IT+0x62>
 8004204:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004208:	4830      	ldr	r0, [pc, #192]	; (80042cc <HAL_TIM_Base_Start_IT+0x120>)
 800420a:	f7fc fef6 	bl	8000ffa <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e044      	b.n	80042a8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <HAL_TIM_Base_Start_IT+0x104>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d018      	beq.n	8004272 <HAL_TIM_Base_Start_IT+0xc6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d013      	beq.n	8004272 <HAL_TIM_Base_Start_IT+0xc6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_TIM_Base_Start_IT+0x108>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <HAL_TIM_Base_Start_IT+0xc6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_TIM_Base_Start_IT+0x10c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_TIM_Base_Start_IT+0xc6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_TIM_Base_Start_IT+0x110>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIM_Base_Start_IT+0xc6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <HAL_TIM_Base_Start_IT+0x114>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d111      	bne.n	8004296 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b06      	cmp	r3, #6
 8004282:	d010      	beq.n	80042a6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	e007      	b.n	80042a6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800
 80042cc:	080050c8 	.word	0x080050c8

080042d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0202 	mvn.w	r2, #2
 80042fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8ee 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8e0 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8f1 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0204 	mvn.w	r2, #4
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8c4 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8b6 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8c7 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b08      	cmp	r3, #8
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0208 	mvn.w	r2, #8
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2204      	movs	r2, #4
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f89a 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f88c 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f89d 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0210 	mvn.w	r2, #16
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2208      	movs	r2, #8
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f870 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f862 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f873 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d10e      	bne.n	8004454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fc fdbc 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d10e      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d107      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8e2 	bl	8004644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d107      	bne.n	80044ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f838 	bl	800451c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0220 	mvn.w	r2, #32
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8ac 	bl	8004630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a34      	ldr	r2, [pc, #208]	; (8004614 <TIM_Base_SetConfig+0xe4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00f      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d00b      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a31      	ldr	r2, [pc, #196]	; (8004618 <TIM_Base_SetConfig+0xe8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a30      	ldr	r2, [pc, #192]	; (800461c <TIM_Base_SetConfig+0xec>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <TIM_Base_SetConfig+0xf0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a25      	ldr	r2, [pc, #148]	; (8004614 <TIM_Base_SetConfig+0xe4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01b      	beq.n	80045ba <TIM_Base_SetConfig+0x8a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004588:	d017      	beq.n	80045ba <TIM_Base_SetConfig+0x8a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a22      	ldr	r2, [pc, #136]	; (8004618 <TIM_Base_SetConfig+0xe8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <TIM_Base_SetConfig+0x8a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a21      	ldr	r2, [pc, #132]	; (800461c <TIM_Base_SetConfig+0xec>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00f      	beq.n	80045ba <TIM_Base_SetConfig+0x8a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a20      	ldr	r2, [pc, #128]	; (8004620 <TIM_Base_SetConfig+0xf0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_Base_SetConfig+0x8a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <TIM_Base_SetConfig+0xf4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_Base_SetConfig+0x8a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <TIM_Base_SetConfig+0xf8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_Base_SetConfig+0x8a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <TIM_Base_SetConfig+0xfc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d108      	bne.n	80045cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a08      	ldr	r2, [pc, #32]	; (8004614 <TIM_Base_SetConfig+0xe4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d103      	bne.n	8004600 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	615a      	str	r2, [r3, #20]
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400
 800462c:	40014800 	.word	0x40014800

08004630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0a0      	b.n	80047ac <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d02c      	beq.n	80046cc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a4f      	ldr	r2, [pc, #316]	; (80047b4 <HAL_UART_Init+0x15c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_UART_Init+0x42>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a4d      	ldr	r2, [pc, #308]	; (80047b8 <HAL_UART_Init+0x160>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_UART_Init+0x42>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a4c      	ldr	r2, [pc, #304]	; (80047bc <HAL_UART_Init+0x164>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_UART_Init+0x42>
 8004690:	f240 1173 	movw	r1, #371	; 0x173
 8004694:	484a      	ldr	r0, [pc, #296]	; (80047c0 <HAL_UART_Init+0x168>)
 8004696:	f7fc fcb0 	bl	8000ffa <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d028      	beq.n	80046f4 <HAL_UART_Init+0x9c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d023      	beq.n	80046f4 <HAL_UART_Init+0x9c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b4:	d01e      	beq.n	80046f4 <HAL_UART_Init+0x9c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046be:	d019      	beq.n	80046f4 <HAL_UART_Init+0x9c>
 80046c0:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80046c4:	483e      	ldr	r0, [pc, #248]	; (80047c0 <HAL_UART_Init+0x168>)
 80046c6:	f7fc fc98 	bl	8000ffa <assert_failed>
 80046ca:	e013      	b.n	80046f4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <HAL_UART_Init+0x15c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_UART_Init+0x9c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a37      	ldr	r2, [pc, #220]	; (80047b8 <HAL_UART_Init+0x160>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d009      	beq.n	80046f4 <HAL_UART_Init+0x9c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a35      	ldr	r2, [pc, #212]	; (80047bc <HAL_UART_Init+0x164>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_UART_Init+0x9c>
 80046ea:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80046ee:	4834      	ldr	r0, [pc, #208]	; (80047c0 <HAL_UART_Init+0x168>)
 80046f0:	f7fc fc83 	bl	8000ffa <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_UART_Init+0xb8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d004      	beq.n	8004710 <HAL_UART_Init+0xb8>
 8004706:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800470a:	482d      	ldr	r0, [pc, #180]	; (80047c0 <HAL_UART_Init+0x168>)
 800470c:	f7fc fc75 	bl	8000ffa <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <HAL_UART_Init+0xd4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004720:	d004      	beq.n	800472c <HAL_UART_Init+0xd4>
 8004722:	f240 117b 	movw	r1, #379	; 0x17b
 8004726:	4826      	ldr	r0, [pc, #152]	; (80047c0 <HAL_UART_Init+0x168>)
 8004728:	f7fc fc67 	bl	8000ffa <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fc fdef 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2224      	movs	r2, #36	; 0x24
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800475c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f930 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004772:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004782:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004792:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40004400 	.word	0x40004400
 80047bc:	40011400 	.word	0x40011400
 80047c0:	08005100 	.word	0x08005100

080047c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d17c      	bne.n	80048de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Transmit+0x2c>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e075      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Transmit+0x3e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e06e      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004818:	f7fc fe2c 	bl	8001474 <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	d108      	bne.n	8004846 <HAL_UART_Transmit+0x82>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e003      	b.n	800484e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004856:	e02a      	b.n	80048ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f840 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e036      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004886:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3302      	adds	r3, #2
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e007      	b.n	80048a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3301      	adds	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1cf      	bne.n	8004858 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f810 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b090      	sub	sp, #64	; 0x40
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	e050      	b.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004900:	d04c      	beq.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
 8004908:	f7fc fdb4 	bl	8001474 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004914:	429a      	cmp	r2, r3
 8004916:	d241      	bcs.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004938:	637a      	str	r2, [r7, #52]	; 0x34
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3314      	adds	r3, #20
 8004952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	63bb      	str	r3, [r7, #56]	; 0x38
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496c:	623a      	str	r2, [r7, #32]
 800496e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	61bb      	str	r3, [r7, #24]
   return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e00f      	b.n	80049bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d09f      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3740      	adds	r7, #64	; 0x40
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	; 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	4bcf      	ldr	r3, [pc, #828]	; (8004d14 <UART_SetConfig+0x350>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d904      	bls.n	80049e6 <UART_SetConfig+0x22>
 80049dc:	f640 6161 	movw	r1, #3681	; 0xe61
 80049e0:	48cd      	ldr	r0, [pc, #820]	; (8004d18 <UART_SetConfig+0x354>)
 80049e2:	f7fc fb0a 	bl	8000ffa <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_SetConfig+0x42>
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fa:	d004      	beq.n	8004a06 <UART_SetConfig+0x42>
 80049fc:	f640 6162 	movw	r1, #3682	; 0xe62
 8004a00:	48c5      	ldr	r0, [pc, #788]	; (8004d18 <UART_SetConfig+0x354>)
 8004a02:	f7fc fafa 	bl	8000ffa <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <UART_SetConfig+0x6e>
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d00a      	beq.n	8004a32 <UART_SetConfig+0x6e>
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a26:	d004      	beq.n	8004a32 <UART_SetConfig+0x6e>
 8004a28:	f640 6163 	movw	r1, #3683	; 0xe63
 8004a2c:	48ba      	ldr	r0, [pc, #744]	; (8004d18 <UART_SetConfig+0x354>)
 8004a2e:	f7fc fae4 	bl	8000ffa <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <UART_SetConfig+0x88>
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <UART_SetConfig+0x92>
 8004a4c:	f640 6164 	movw	r1, #3684	; 0xe64
 8004a50:	48b1      	ldr	r0, [pc, #708]	; (8004d18 <UART_SetConfig+0x354>)
 8004a52:	f7fc fad2 	bl	8000ffa <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	68d9      	ldr	r1, [r3, #12]
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	ea40 0301 	orr.w	r3, r0, r1
 8004a72:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004aa2:	f021 010c 	bic.w	r1, r1, #12
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	ea40 0301 	orr.w	r3, r0, r1
 8004ad0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b90      	ldr	r3, [pc, #576]	; (8004d1c <UART_SetConfig+0x358>)
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d005      	beq.n	8004aea <UART_SetConfig+0x126>
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b8e      	ldr	r3, [pc, #568]	; (8004d20 <UART_SetConfig+0x35c>)
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d104      	bne.n	8004af4 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aea:	f7fe fb63 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 8004aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004af2:	e003      	b.n	8004afc <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af4:	f7fe fb4a 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004af8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b06:	f040 810f 	bne.w	8004d28 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b14:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b18:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	462b      	mov	r3, r5
 8004b20:	1891      	adds	r1, r2, r2
 8004b22:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b24:	415b      	adcs	r3, r3
 8004b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	eb12 0801 	adds.w	r8, r2, r1
 8004b32:	4629      	mov	r1, r5
 8004b34:	eb43 0901 	adc.w	r9, r3, r1
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b4c:	4690      	mov	r8, r2
 8004b4e:	4699      	mov	r9, r3
 8004b50:	4623      	mov	r3, r4
 8004b52:	eb18 0303 	adds.w	r3, r8, r3
 8004b56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	eb49 0303 	adc.w	r3, r9, r3
 8004b60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b70:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b78:	460b      	mov	r3, r1
 8004b7a:	18db      	adds	r3, r3, r3
 8004b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b7e:	4613      	mov	r3, r2
 8004b80:	eb42 0303 	adc.w	r3, r2, r3
 8004b84:	657b      	str	r3, [r7, #84]	; 0x54
 8004b86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b8a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b8e:	f7fb fb23 	bl	80001d8 <__aeabi_uldivmod>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4b63      	ldr	r3, [pc, #396]	; (8004d24 <UART_SetConfig+0x360>)
 8004b98:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	011c      	lsls	r4, r3, #4
 8004ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004baa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bae:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bb2:	4642      	mov	r2, r8
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	eb12 0a01 	adds.w	sl, r2, r1
 8004bc8:	4649      	mov	r1, r9
 8004bca:	eb43 0b01 	adc.w	fp, r3, r1
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004be2:	4692      	mov	sl, r2
 8004be4:	469b      	mov	fp, r3
 8004be6:	4643      	mov	r3, r8
 8004be8:	eb1a 0303 	adds.w	r3, sl, r3
 8004bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	eb4b 0303 	adc.w	r3, fp, r3
 8004bf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c06:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	18db      	adds	r3, r3, r3
 8004c12:	643b      	str	r3, [r7, #64]	; 0x40
 8004c14:	4613      	mov	r3, r2
 8004c16:	eb42 0303 	adc.w	r3, r2, r3
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c24:	f7fb fad8 	bl	80001d8 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <UART_SetConfig+0x360>)
 8004c30:	fba3 2301 	umull	r2, r3, r3, r1
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	2264      	movs	r2, #100	; 0x64
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	1acb      	subs	r3, r1, r3
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c44:	4b37      	ldr	r3, [pc, #220]	; (8004d24 <UART_SetConfig+0x360>)
 8004c46:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c52:	441c      	add	r4, r3
 8004c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c5e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c62:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c66:	4642      	mov	r2, r8
 8004c68:	464b      	mov	r3, r9
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c76:	4641      	mov	r1, r8
 8004c78:	1851      	adds	r1, r2, r1
 8004c7a:	6339      	str	r1, [r7, #48]	; 0x30
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	414b      	adcs	r3, r1
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c8e:	4659      	mov	r1, fp
 8004c90:	00cb      	lsls	r3, r1, #3
 8004c92:	4651      	mov	r1, sl
 8004c94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c98:	4651      	mov	r1, sl
 8004c9a:	00ca      	lsls	r2, r1, #3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4642      	mov	r2, r8
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004caa:	464b      	mov	r3, r9
 8004cac:	460a      	mov	r2, r1
 8004cae:	eb42 0303 	adc.w	r3, r2, r3
 8004cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cc2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cc6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cca:	460b      	mov	r3, r1
 8004ccc:	18db      	adds	r3, r3, r3
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	eb42 0303 	adc.w	r3, r2, r3
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cdc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ce0:	f7fb fa7a 	bl	80001d8 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <UART_SetConfig+0x360>)
 8004cea:	fba3 1302 	umull	r1, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2164      	movs	r1, #100	; 0x64
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <UART_SetConfig+0x360>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 0207 	and.w	r2, r3, #7
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4422      	add	r2, r4
 8004d10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d12:	e108      	b.n	8004f26 <UART_SetConfig+0x562>
 8004d14:	00a037a0 	.word	0x00a037a0
 8004d18:	08005100 	.word	0x08005100
 8004d1c:	40011000 	.word	0x40011000
 8004d20:	40011400 	.word	0x40011400
 8004d24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d3a:	4642      	mov	r2, r8
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	1891      	adds	r1, r2, r2
 8004d40:	6239      	str	r1, [r7, #32]
 8004d42:	415b      	adcs	r3, r3
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	1854      	adds	r4, r2, r1
 8004d4e:	4649      	mov	r1, r9
 8004d50:	eb43 0501 	adc.w	r5, r3, r1
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	00eb      	lsls	r3, r5, #3
 8004d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d62:	00e2      	lsls	r2, r4, #3
 8004d64:	4614      	mov	r4, r2
 8004d66:	461d      	mov	r5, r3
 8004d68:	4643      	mov	r3, r8
 8004d6a:	18e3      	adds	r3, r4, r3
 8004d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d70:	464b      	mov	r3, r9
 8004d72:	eb45 0303 	adc.w	r3, r5, r3
 8004d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d96:	4629      	mov	r1, r5
 8004d98:	008b      	lsls	r3, r1, #2
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004da0:	4621      	mov	r1, r4
 8004da2:	008a      	lsls	r2, r1, #2
 8004da4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004da8:	f7fb fa16 	bl	80001d8 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4b60      	ldr	r3, [pc, #384]	; (8004f34 <UART_SetConfig+0x570>)
 8004db2:	fba3 2302 	umull	r2, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	011c      	lsls	r4, r3, #4
 8004dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	1891      	adds	r1, r2, r2
 8004dd2:	61b9      	str	r1, [r7, #24]
 8004dd4:	415b      	adcs	r3, r3
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ddc:	4641      	mov	r1, r8
 8004dde:	1851      	adds	r1, r2, r1
 8004de0:	6139      	str	r1, [r7, #16]
 8004de2:	4649      	mov	r1, r9
 8004de4:	414b      	adcs	r3, r1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df4:	4659      	mov	r1, fp
 8004df6:	00cb      	lsls	r3, r1, #3
 8004df8:	4651      	mov	r1, sl
 8004dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfe:	4651      	mov	r1, sl
 8004e00:	00ca      	lsls	r2, r1, #3
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	4642      	mov	r2, r8
 8004e0a:	189b      	adds	r3, r3, r2
 8004e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e10:	464b      	mov	r3, r9
 8004e12:	460a      	mov	r2, r1
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e34:	4649      	mov	r1, r9
 8004e36:	008b      	lsls	r3, r1, #2
 8004e38:	4641      	mov	r1, r8
 8004e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3e:	4641      	mov	r1, r8
 8004e40:	008a      	lsls	r2, r1, #2
 8004e42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e46:	f7fb f9c7 	bl	80001d8 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <UART_SetConfig+0x570>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2164      	movs	r1, #100	; 0x64
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	3332      	adds	r3, #50	; 0x32
 8004e62:	4a34      	ldr	r2, [pc, #208]	; (8004f34 <UART_SetConfig+0x570>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6e:	441c      	add	r4, r3
 8004e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e74:	2200      	movs	r2, #0
 8004e76:	673b      	str	r3, [r7, #112]	; 0x70
 8004e78:	677a      	str	r2, [r7, #116]	; 0x74
 8004e7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e7e:	4642      	mov	r2, r8
 8004e80:	464b      	mov	r3, r9
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	415b      	adcs	r3, r3
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e8e:	4641      	mov	r1, r8
 8004e90:	1851      	adds	r1, r2, r1
 8004e92:	6039      	str	r1, [r7, #0]
 8004e94:	4649      	mov	r1, r9
 8004e96:	414b      	adcs	r3, r1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	00cb      	lsls	r3, r1, #3
 8004eaa:	4651      	mov	r1, sl
 8004eac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb0:	4651      	mov	r1, sl
 8004eb2:	00ca      	lsls	r2, r1, #3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4642      	mov	r2, r8
 8004ebc:	189b      	adds	r3, r3, r2
 8004ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	eb42 0303 	adc.w	r3, r2, r3
 8004ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed4:	667a      	str	r2, [r7, #100]	; 0x64
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	008b      	lsls	r3, r1, #2
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eec:	4641      	mov	r1, r8
 8004eee:	008a      	lsls	r2, r1, #2
 8004ef0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ef4:	f7fb f970 	bl	80001d8 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <UART_SetConfig+0x570>)
 8004efe:	fba3 1302 	umull	r1, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2164      	movs	r1, #100	; 0x64
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	3332      	adds	r3, #50	; 0x32
 8004f10:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <UART_SetConfig+0x570>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4422      	add	r2, r4
 8004f24:	609a      	str	r2, [r3, #8]
}
 8004f26:	bf00      	nop
 8004f28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f32:	bf00      	nop
 8004f34:	51eb851f 	.word	0x51eb851f

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	; (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	; (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	; (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	; (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f000 f820 	bl	8004f90 <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	0800515c 	.word	0x0800515c
 8004f74:	0800515c 	.word	0x0800515c
 8004f78:	0800515c 	.word	0x0800515c
 8004f7c:	08005160 	.word	0x08005160

08004f80 <memset>:
 8004f80:	4402      	add	r2, r0
 8004f82:	4603      	mov	r3, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <_init>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr

08004f9c <_fini>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr
