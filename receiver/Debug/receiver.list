
receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009684  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800981c  0800981c  0001981c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009838  08009838  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009840  08009840  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  20000090  080098d8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  080098d8  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f8e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cda  00000000  00000000  0003a04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003f120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a207  00000000  00000000  000403b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1dc  00000000  00000000  0005a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009135d  00000000  00000000  0007579b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106af8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b0  00000000  00000000  00106b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009804 	.word	0x08009804

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009804 	.word	0x08009804

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004dc:	b4b0      	push	{r4, r5, r7}
 80004de:	b08f      	sub	sp, #60	; 0x3c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004e4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004ea:	2307      	movs	r3, #7
 80004ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004f0:	2307      	movs	r3, #7
 80004f2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004f6:	2301      	movs	r3, #1
 80004f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004fc:	23ff      	movs	r3, #255	; 0xff
 80004fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000502:	2364      	movs	r3, #100	; 0x64
 8000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000508:	2308      	movs	r3, #8
 800050a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	461d      	mov	r5, r3
 8000510:	f107 040c 	add.w	r4, r7, #12
 8000514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800051a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	373c      	adds	r7, #60	; 0x3c
 8000528:	46bd      	mov	sp, r7
 800052a:	bcb0      	pop	{r4, r5, r7}
 800052c:	4770      	bx	lr

0800052e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6898      	ldr	r0, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	899b      	ldrh	r3, [r3, #12]
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	f001 fbdb 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f001 f91e 	bl	8001788 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6898      	ldr	r0, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	899b      	ldrh	r3, [r3, #12]
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	f001 fbd0 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800055c:	2064      	movs	r0, #100	; 0x64
 800055e:	f001 f913 	bl	8001788 <HAL_Delay>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000574:	2101      	movs	r1, #1
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f99f 	bl	80008ba <LoRa_read>
 800057c:	4603      	mov	r3, r0
 800057e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d107      	bne.n	800059a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	f023 0307 	bic.w	r3, r3, #7
 8000590:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
 8000598:	e03e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d10c      	bne.n	80005ba <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80005a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a4:	f023 0307 	bic.w	r3, r3, #7
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	e02e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d10c      	bne.n	80005da <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005c4:	f023 0307 	bic.w	r3, r3, #7
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f043 0303 	orr.w	r3, r3, #3
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2203      	movs	r2, #3
 80005d6:	61da      	str	r2, [r3, #28]
 80005d8:	e01e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d10c      	bne.n	80005fa <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005e4:	f023 0307 	bic.w	r3, r3, #7
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	f043 0305 	orr.w	r3, r3, #5
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2205      	movs	r2, #5
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	e00e      	b.n	8000618 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d10b      	bne.n	8000618 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000604:	f023 0307 	bic.w	r3, r3, #7
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f043 0306 	orr.w	r3, r3, #6
 800060e:	b25b      	sxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2206      	movs	r2, #6
 8000616:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	461a      	mov	r2, r3
 800061c:	2101      	movs	r1, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f965 	bl	80008ee <LoRa_write>
	//HAL_Delay(10);
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	889b      	ldrh	r3, [r3, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	f001 fb58 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6998      	ldr	r0, [r3, #24]
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	f004 fbc9 	bl	8004dee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800065c:	bf00      	nop
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4618      	mov	r0, r3
 8000664:	f004 ffb2 	bl	80055cc <HAL_SPI_GetState>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d1f7      	bne.n	800065e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6998      	ldr	r0, [r3, #24]
 8000672:	8b3a      	ldrh	r2, [r7, #24]
 8000674:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	f004 fcf4 	bl	8005066 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800067e:	bf00      	nop
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4618      	mov	r0, r3
 8000686:	f004 ffa1 	bl	80055cc <HAL_SPI_GetState>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d1f7      	bne.n	8000680 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f001 fb2e 	bl	8001cfc <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4613      	mov	r3, r2
 80006b6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f001 fb1a 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6998      	ldr	r0, [r3, #24]
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	f004 fb8b 	bl	8004dee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006d8:	bf00      	nop
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 ff74 	bl	80055cc <HAL_SPI_GetState>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d1f7      	bne.n	80006da <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6998      	ldr	r0, [r3, #24]
 80006ee:	8b3a      	ldrh	r2, [r7, #24]
 80006f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f4:	6839      	ldr	r1, [r7, #0]
 80006f6:	f004 fb7a 	bl	8004dee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006fa:	bf00      	nop
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4618      	mov	r0, r3
 8000702:	f004 ff63 	bl	80055cc <HAL_SPI_GetState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d1f7      	bne.n	80006fc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	889b      	ldrh	r3, [r3, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f001 faf0 	bl	8001cfc <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	04db      	lsls	r3, r3, #19
 8000732:	115b      	asrs	r3, r3, #5
 8000734:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	461a      	mov	r2, r3
 8000740:	2106      	movs	r1, #6
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f8d3 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000748:	2005      	movs	r0, #5
 800074a:	f001 f81d 	bl	8001788 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000754:	7afb      	ldrb	r3, [r7, #11]
 8000756:	461a      	mov	r2, r3
 8000758:	2107      	movs	r1, #7
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f8c7 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000760:	2005      	movs	r0, #5
 8000762:	f001 f811 	bl	8001788 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	461a      	mov	r2, r3
 800076e:	2108      	movs	r1, #8
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f8bc 	bl	80008ee <LoRa_write>
	HAL_Delay(5);
 8000776:	2005      	movs	r0, #5
 8000778:	f001 f806 	bl	8001788 <HAL_Delay>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b0c      	cmp	r3, #12
 8000792:	dd01      	ble.n	8000798 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000794:	230c      	movs	r3, #12
 8000796:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b06      	cmp	r3, #6
 800079c:	dc01      	bgt.n	80007a2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800079e:	2307      	movs	r3, #7
 80007a0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007a2:	211e      	movs	r1, #30
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f888 	bl	80008ba <LoRa_read>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 ffea 	bl	8001788 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	461a      	mov	r2, r3
 80007cc:	211e      	movs	r1, #30
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f88d 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f000 ffd7 	bl	8001788 <HAL_Delay>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	461a      	mov	r2, r3
 80007f2:	2109      	movs	r1, #9
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f87a 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 ffc4 	bl	8001788 <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b2c      	cmp	r3, #44	; 0x2c
 800081c:	d801      	bhi.n	8000822 <LoRa_setOCP+0x1a>
		current = 45;
 800081e:	232d      	movs	r3, #45	; 0x2d
 8000820:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2bf0      	cmp	r3, #240	; 0xf0
 8000826:	d901      	bls.n	800082c <LoRa_setOCP+0x24>
		current = 240;
 8000828:	23f0      	movs	r3, #240	; 0xf0
 800082a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2b78      	cmp	r3, #120	; 0x78
 8000830:	d809      	bhi.n	8000846 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	3b2d      	subs	r3, #45	; 0x2d
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <LoRa_setOCP+0x78>)
 8000838:	fb82 1203 	smull	r1, r2, r2, r3
 800083c:	1052      	asrs	r2, r2, #1
 800083e:	17db      	asrs	r3, r3, #31
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e00b      	b.n	800085e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2bf0      	cmp	r3, #240	; 0xf0
 800084a:	d808      	bhi.n	800085e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	331e      	adds	r3, #30
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <LoRa_setOCP+0x78>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1092      	asrs	r2, r2, #2
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3320      	adds	r3, #32
 8000862:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	461a      	mov	r2, r3
 8000868:	210b      	movs	r1, #11
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f83f 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 8000870:	200a      	movs	r0, #10
 8000872:	f000 ff89 	bl	8001788 <HAL_Delay>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	66666667 	.word	0x66666667

08000884 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800088c:	211e      	movs	r1, #30
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 f813 	bl	80008ba <LoRa_read>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	f043 0307 	orr.w	r3, r3, #7
 800089e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	461a      	mov	r2, r3
 80008a4:	211e      	movs	r1, #30
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f821 	bl	80008ee <LoRa_write>
	HAL_Delay(10);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f000 ff6b 	bl	8001788 <HAL_Delay>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af02      	add	r7, sp, #8
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008d0:	f107 030f 	add.w	r3, r7, #15
 80008d4:	f107 010e 	add.w	r1, r7, #14
 80008d8:	2201      	movs	r2, #1
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fea4 	bl	800062c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af02      	add	r7, sp, #8
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
 80008fa:	4613      	mov	r3, r2
 80008fc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000904:	b2db      	uxtb	r3, r3
 8000906:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000908:	78bb      	ldrb	r3, [r7, #2]
 800090a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800090c:	f107 030f 	add.w	r3, r7, #15
 8000910:	f107 010e 	add.w	r1, r7, #14
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fec4 	bl	80006a8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000946:	2105      	movs	r1, #5
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fe0e 	bl	800056a <LoRa_gotoMode>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000956:	b590      	push	{r4, r7, lr}
 8000958:	b089      	sub	sp, #36	; 0x24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	4613      	mov	r3, r2
 8000962:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	e007      	b.n	800097e <LoRa_receive+0x28>
		data[i]=0;
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	4413      	add	r3, r2
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	3301      	adds	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf3      	blt.n	800096e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000986:	2101      	movs	r1, #1
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fdee 	bl	800056a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800098e:	2112      	movs	r1, #18
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff ff92 	bl	80008ba <LoRa_read>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d02f      	beq.n	8000a04 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80009a4:	22ff      	movs	r2, #255	; 0xff
 80009a6:	2112      	movs	r1, #18
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff ffa0 	bl	80008ee <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80009ae:	2113      	movs	r1, #19
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff ff82 	bl	80008ba <LoRa_read>
 80009b6:	4603      	mov	r3, r0
 80009b8:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80009ba:	2110      	movs	r1, #16
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff ff7c 	bl	80008ba <LoRa_read>
 80009c2:	4603      	mov	r3, r0
 80009c4:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009c6:	7cfb      	ldrb	r3, [r7, #19]
 80009c8:	461a      	mov	r2, r3
 80009ca:	210d      	movs	r1, #13
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff ff8e 	bl	80008ee <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80009d2:	7cba      	ldrb	r2, [r7, #18]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4293      	cmp	r3, r2
 80009d8:	bf28      	it	cs
 80009da:	4613      	movcs	r3, r2
 80009dc:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e00b      	b.n	80009fc <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	18d4      	adds	r4, r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff ff64 	bl	80008ba <LoRa_read>
 80009f2:	4603      	mov	r3, r0
 80009f4:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbef      	blt.n	80009e4 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a04:	2105      	movs	r1, #5
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff fdaf 	bl	800056a <LoRa_gotoMode>
    return min;
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}

08000a16 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ff82 	bl	8000928 <LoRa_isvalid>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 8093 	beq.w	8000b52 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fd9b 	bl	800056a <LoRa_gotoMode>
			HAL_Delay(10);
 8000a34:	200a      	movs	r0, #10
 8000a36:	f000 fea7 	bl	8001788 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff3c 	bl	80008ba <LoRa_read>
 8000a42:	4603      	mov	r3, r0
 8000a44:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f000 fe9e 	bl	8001788 <HAL_Delay>
			data = read | 0x80;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a52:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	461a      	mov	r2, r3
 8000a58:	2101      	movs	r1, #1
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ff47 	bl	80008ee <LoRa_write>
			HAL_Delay(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f000 fe91 	bl	8001788 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fe59 	bl	8000724 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff feb1 	bl	80007e2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a86:	4619      	mov	r1, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff febd 	bl	8000808 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a8e:	2223      	movs	r2, #35	; 0x23
 8000a90:	210c      	movs	r1, #12
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff2b 	bl	80008ee <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fef3 	bl	8000884 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe6c 	bl	8000784 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	211f      	movs	r1, #31
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff1c 	bl	80008ee <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4413      	add	r3, r2
 8000ad0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	211d      	movs	r1, #29
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff08 	bl	80008ee <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2120      	movs	r1, #32
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fefe 	bl	80008ee <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	2121      	movs	r1, #33	; 0x21
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fef6 	bl	80008ee <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fed8 	bl	80008ba <LoRa_read>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000b14:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fee6 	bl	80008ee <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b22:	2101      	movs	r1, #1
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fd20 	bl	800056a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f000 fe29 	bl	8001788 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b36:	2142      	movs	r1, #66	; 0x42
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff febe 	bl	80008ba <LoRa_read>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b12      	cmp	r3, #18
 8000b46:	d101      	bne.n	8000b4c <LoRa_init+0x136>
				return LORA_OK;
 8000b48:	23c8      	movs	r3, #200	; 0xc8
 8000b4a:	e004      	b.n	8000b56 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000b4c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000b50:	e001      	b.n	8000b56 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b52:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b096      	sub	sp, #88	; 0x58
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fd9d 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f8a9 	bl	8000cc0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b6e:	f000 f90f 	bl	8000d90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b72:	f000 fa19 	bl	8000fa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b76:	f000 f92b 	bl	8000dd0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000b7a:	f000 f957 	bl	8000e2c <MX_I2S2_Init>
  MX_I2S3_Init();
 8000b7e:	f000 f983 	bl	8000e88 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b82:	f000 f9b1 	bl	8000ee8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b86:	f008 f9f5 	bl	8008f74 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000b8a:	f000 f9e3 	bl	8000f54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start(&hadc1);
  myLoRa = newLoRa();
 8000b8e:	4c48      	ldr	r4, [pc, #288]	; (8000cb0 <main+0x150>)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fca2 	bl	80004dc <newLoRa>
 8000b98:	4625      	mov	r5, r4
 8000b9a:	463c      	mov	r4, r7
 8000b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ba8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa_reset(&myLoRa);
 8000bac:	4840      	ldr	r0, [pc, #256]	; (8000cb0 <main+0x150>)
 8000bae:	f7ff fcbe 	bl	800052e <LoRa_reset>
  myLoRa.CS_port         = NSS_GPIO_Port;
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <main+0x150>)
 8000bb4:	4a3f      	ldr	r2, [pc, #252]	; (8000cb4 <main+0x154>)
 8000bb6:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8000bb8:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <main+0x150>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <main+0x150>)
 8000bc0:	4a3c      	ldr	r2, [pc, #240]	; (8000cb4 <main+0x154>)
 8000bc2:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <main+0x150>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <main+0x150>)
 8000bcc:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <main+0x154>)
 8000bce:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8000bd0:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <main+0x150>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000bd6:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <main+0x150>)
 8000bd8:	4a37      	ldr	r2, [pc, #220]	; (8000cb8 <main+0x158>)
 8000bda:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 8000bdc:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <main+0x150>)
 8000bde:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8000be2:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <main+0x150>)
 8000be6:	2207      	movs	r2, #7
 8000be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <main+0x150>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <main+0x150>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <main+0x150>)
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <main+0x150>)
 8000c06:	2282      	movs	r2, #130	; 0x82
 8000c08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <main+0x150>)
 8000c0e:	2209      	movs	r2, #9
 8000c10:	851a      	strh	r2, [r3, #40]	; 0x28

  if (LoRa_init(&myLoRa) == LORA_OK){
 8000c12:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <main+0x150>)
 8000c14:	f7ff feff 	bl	8000a16 <LoRa_init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2bc8      	cmp	r3, #200	; 0xc8
 8000c1c:	d105      	bne.n	8000c2a <main+0xca>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4823      	ldr	r0, [pc, #140]	; (8000cb4 <main+0x154>)
 8000c26:	f001 f869 	bl	8001cfc <HAL_GPIO_WritePin>
  }

  volatile uint8_t received_data[32];
  volatile uint8_t packet_size = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  LoRa_startReceiving(&myLoRa);
 8000c30:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <main+0x150>)
 8000c32:	f7ff fe84 	bl	800093e <LoRa_startReceiving>
  /* USER CODE BEGIN WHILE */
  // receiver
  while (1)
  {
//	  uint8_t received_data[32];
	  packet_size = LoRa_receive(&myLoRa, (uint8_t *)received_data, 32);
 8000c36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <main+0x150>)
 8000c40:	f7ff fe89 	bl	8000956 <LoRa_receive>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (packet_size == 32) {
 8000c4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b20      	cmp	r3, #32
 8000c52:	d106      	bne.n	8000c62 <main+0x102>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5a:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <main+0x154>)
 8000c5c:	f001 f84e 	bl	8001cfc <HAL_GPIO_WritePin>
 8000c60:	e005      	b.n	8000c6e <main+0x10e>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <main+0x154>)
 8000c6a:	f001 f847 	bl	8001cfc <HAL_GPIO_WritePin>
	  }
	  if (LoRa_init(&myLoRa) == LORA_OK){
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <main+0x150>)
 8000c70:	f7ff fed1 	bl	8000a16 <LoRa_init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2bc8      	cmp	r3, #200	; 0xc8
 8000c78:	d106      	bne.n	8000c88 <main+0x128>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <main+0x154>)
 8000c82:	f001 f83b 	bl	8001cfc <HAL_GPIO_WritePin>
 8000c86:	e005      	b.n	8000c94 <main+0x134>
	    }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <main+0x154>)
 8000c90:	f001 f834 	bl	8001cfc <HAL_GPIO_WritePin>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t *) received_data, 32, 100);
 8000c94:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <main+0x15c>)
 8000c9e:	f004 fe20 	bl	80058e2 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca6:	f000 fd6f 	bl	8001788 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000caa:	f008 f989 	bl	8008fc0 <MX_USB_HOST_Process>
	  packet_size = LoRa_receive(&myLoRa, (uint8_t *)received_data, 32);
 8000cae:	e7c2      	b.n	8000c36 <main+0xd6>
 8000cb0:	2000022c 	.word	0x2000022c
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	20000190 	.word	0x20000190
 8000cbc:	200001e8 	.word	0x200001e8

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f008 fc92 	bl	80095f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <SystemClock_Config+0xc8>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <SystemClock_Config+0xc8>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <SystemClock_Config+0xc8>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <SystemClock_Config+0xcc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <SystemClock_Config+0xcc>)
 8000d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <SystemClock_Config+0xcc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d34:	23c0      	movs	r3, #192	; 0xc0
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 f9e1 	bl	800410c <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d50:	f000 fa2e 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2103      	movs	r1, #3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fc43 	bl	80045fc <HAL_RCC_ClockConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d7c:	f000 fa18 	bl	80011b0 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3750      	adds	r7, #80	; 0x50
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000

08000d90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000da6:	2301      	movs	r3, #1
 8000da8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000daa:	23c8      	movs	r3, #200	; 0xc8
 8000dac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000dae:	2305      	movs	r3, #5
 8000db0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fe3f 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000dc4:	f000 f9f4 	bl	80011b0 <Error_Handler>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000dd6:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <MX_I2C1_Init+0x54>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MX_I2C1_Init+0x58>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_I2C1_Init+0x50>)
 8000e0e:	f002 fb99 	bl	8003544 <HAL_I2C_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e18:	f000 f9ca 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000ac 	.word	0x200000ac
 8000e24:	40005400 	.word	0x40005400
 8000e28:	000186a0 	.word	0x000186a0

08000e2c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_I2S2_Init+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e52:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <MX_I2S2_Init+0x58>)
 8000e54:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_I2S2_Init+0x50>)
 8000e6a:	f002 fcaf 	bl	80037cc <HAL_I2S_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000e74:	f000 f99c 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000100 	.word	0x20000100
 8000e80:	40003800 	.word	0x40003800
 8000e84:	00017700 	.word	0x00017700

08000e88 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_I2S3_Init+0x54>)
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <MX_I2S3_Init+0x58>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_I2S3_Init+0x54>)
 8000e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e98:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_I2S3_Init+0x54>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_I2S3_Init+0x54>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_I2S3_Init+0x54>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_I2S3_Init+0x54>)
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <MX_I2S3_Init+0x5c>)
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_I2S3_Init+0x54>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_I2S3_Init+0x54>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_I2S3_Init+0x54>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_I2S3_Init+0x54>)
 8000ec8:	f002 fc80 	bl	80037cc <HAL_I2S_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ed2:	f000 f96d 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000148 	.word	0x20000148
 8000ee0:	40003c00 	.word	0x40003c00
 8000ee4:	00017700 	.word	0x00017700

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f3a:	f003 fecf 	bl	8004cdc <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f44:	f000 f934 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000190 	.word	0x20000190
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_USART2_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f004 fc5c 	bl	8005848 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f000 f90b 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001e8 	.word	0x200001e8
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	4b75      	ldr	r3, [pc, #468]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a74      	ldr	r2, [pc, #464]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8000fc8:	f043 0310 	orr.w	r3, r3, #16
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a6d      	ldr	r2, [pc, #436]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b67      	ldr	r3, [pc, #412]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a66      	ldr	r2, [pc, #408]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b64      	ldr	r3, [pc, #400]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b60      	ldr	r3, [pc, #384]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a5f      	ldr	r2, [pc, #380]	; (8001198 <MX_GPIO_Init+0x1f0>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b59      	ldr	r3, [pc, #356]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b56      	ldr	r3, [pc, #344]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a51      	ldr	r2, [pc, #324]	; (8001198 <MX_GPIO_Init+0x1f0>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <MX_GPIO_Init+0x1f0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2108      	movs	r1, #8
 800106a:	484c      	ldr	r0, [pc, #304]	; (800119c <MX_GPIO_Init+0x1f4>)
 800106c:	f000 fe46 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2101      	movs	r1, #1
 8001074:	484a      	ldr	r0, [pc, #296]	; (80011a0 <MX_GPIO_Init+0x1f8>)
 8001076:	f000 fe41 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2103      	movs	r1, #3
 800107e:	4849      	ldr	r0, [pc, #292]	; (80011a4 <MX_GPIO_Init+0x1fc>)
 8001080:	f000 fe3c 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Pin|Blue_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800108a:	4846      	ldr	r0, [pc, #280]	; (80011a4 <MX_GPIO_Init+0x1fc>)
 800108c:	f000 fe36 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001090:	2200      	movs	r2, #0
 8001092:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001096:	4844      	ldr	r0, [pc, #272]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001098:	f000 fe30 	bl	8001cfc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800109c:	2304      	movs	r3, #4
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	483b      	ldr	r0, [pc, #236]	; (800119c <MX_GPIO_Init+0x1f4>)
 80010b0:	f000 fca0 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010b4:	2308      	movs	r3, #8
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4834      	ldr	r0, [pc, #208]	; (800119c <MX_GPIO_Init+0x1f4>)
 80010cc:	f000 fc92 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80010d0:	2332      	movs	r3, #50	; 0x32
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	482d      	ldr	r0, [pc, #180]	; (800119c <MX_GPIO_Init+0x1f4>)
 80010e6:	f000 fc85 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <MX_GPIO_Init+0x1f8>)
 8001102:	f000 fc77 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001106:	2301      	movs	r3, #1
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800110a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4824      	ldr	r0, [pc, #144]	; (80011ac <MX_GPIO_Init+0x204>)
 800111c:	f000 fc6a 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin Green_Pin Blue_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|Green_Pin|Blue_Pin;
 8001120:	f246 0303 	movw	r3, #24579	; 0x6003
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	481a      	ldr	r0, [pc, #104]	; (80011a4 <MX_GPIO_Init+0x1fc>)
 800113a:	f000 fc5b 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800113e:	2304      	movs	r3, #4
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_GPIO_Init+0x1fc>)
 8001154:	f000 fc4e 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001158:	f24f 0310 	movw	r3, #61456	; 0xf010
 800115c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_GPIO_Init+0x200>)
 8001172:	f000 fc3f 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001176:	2320      	movs	r3, #32
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_GPIO_Init+0x200>)
 800118a:	f000 fc33 	bl	80019f4 <HAL_GPIO_Init>

}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40021000 	.word	0x40021000
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40020000 	.word	0x40020000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fbb8 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_I2C_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12c      	bne.n	8001288 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800124a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001254:	2301      	movs	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125c:	2304      	movs	r3, #4
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <HAL_I2C_MspInit+0x8c>)
 8001268:	f000 fbc4 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_I2C_MspInit+0x88>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40005400 	.word	0x40005400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a59      	ldr	r2, [pc, #356]	; (8001420 <HAL_I2S_MspInit+0x184>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d15b      	bne.n	8001376 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
 80012c2:	4b58      	ldr	r3, [pc, #352]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a57      	ldr	r2, [pc, #348]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	4b51      	ldr	r3, [pc, #324]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a50      	ldr	r2, [pc, #320]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_I2S_MspInit+0x188>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <HAL_I2S_MspInit+0x188>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001312:	2304      	movs	r3, #4
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001322:	2306      	movs	r3, #6
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	483e      	ldr	r0, [pc, #248]	; (8001428 <HAL_I2S_MspInit+0x18c>)
 800132e:	f000 fb61 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001332:	2308      	movs	r3, #8
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001342:	2305      	movs	r3, #5
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4836      	ldr	r0, [pc, #216]	; (8001428 <HAL_I2S_MspInit+0x18c>)
 800134e:	f000 fb51 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001352:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001364:	2305      	movs	r3, #5
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	482f      	ldr	r0, [pc, #188]	; (800142c <HAL_I2S_MspInit+0x190>)
 8001370:	f000 fb40 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001374:	e04f      	b.n	8001416 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2d      	ldr	r2, [pc, #180]	; (8001430 <HAL_I2S_MspInit+0x194>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d14a      	bne.n	8001416 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_I2S_MspInit+0x188>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a26      	ldr	r2, [pc, #152]	; (8001424 <HAL_I2S_MspInit+0x188>)
 800138a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_I2S_MspInit+0x188>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_I2S_MspInit+0x188>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013d4:	2310      	movs	r3, #16
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e4:	2306      	movs	r3, #6
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	4811      	ldr	r0, [pc, #68]	; (8001434 <HAL_I2S_MspInit+0x198>)
 80013f0:	f000 fb00 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013f4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001406:	2306      	movs	r3, #6
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_I2S_MspInit+0x18c>)
 8001412:	f000 faef 	bl	80019f4 <HAL_GPIO_Init>
}
 8001416:	bf00      	nop
 8001418:	3738      	adds	r7, #56	; 0x38
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40003800 	.word	0x40003800
 8001424:	40023800 	.word	0x40023800
 8001428:	40020800 	.word	0x40020800
 800142c:	40020400 	.word	0x40020400
 8001430:	40003c00 	.word	0x40003c00
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_SPI_MspInit+0x84>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12b      	bne.n	80014b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_SPI_MspInit+0x88>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_SPI_MspInit+0x88>)
 8001464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_SPI_MspInit+0x88>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_SPI_MspInit+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_SPI_MspInit+0x88>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_SPI_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001492:	23e0      	movs	r3, #224	; 0xe0
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a2:	2305      	movs	r3, #5
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_SPI_MspInit+0x8c>)
 80014ae:	f000 faa1 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40013000 	.word	0x40013000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_UART_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_MspInit+0x88>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x88>)
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_UART_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_UART_MspInit+0x88>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_UART_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001522:	230c      	movs	r3, #12
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001532:	2307      	movs	r3, #7
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_UART_MspInit+0x8c>)
 800153e:	f000 fa59 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40004400 	.word	0x40004400
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f8d0 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <OTG_FS_IRQHandler+0x10>)
 80015b2:	f000 fe27 	bl	8002204 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000063c 	.word	0x2000063c

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f007 ffc8 	bl	8009584 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20020000 	.word	0x20020000
 8001620:	00000400 	.word	0x00000400
 8001624:	20000258 	.word	0x20000258
 8001628:	20000950 	.word	0x20000950

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <LoopFillZerobss+0x26>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167a:	f7ff ffd7 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f007 ff87 	bl	8009590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fa6d 	bl	8000b60 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001694:	08009848 	.word	0x08009848
  ldr r2, =_sbss
 8001698:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800169c:	20000950 	.word	0x20000950

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_Init+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_Init+0x40>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x40>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f94f 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fd70 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f967 	bl	80019da <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001724:	f000 f92f 	bl	8001986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000008 	.word	0x20000008
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	2000025c 	.word	0x2000025c

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000025c 	.word	0x2000025c

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_Delay+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <__NVIC_EnableIRQ+0x38>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193c:	d301      	bcc.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e00f      	b.n	8001962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <SysTick_Config+0x40>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	210f      	movs	r1, #15
 800194c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001950:	f7ff ff8e 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <SysTick_Config+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <SysTick_Config+0x40>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff29 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff3e 	bl	8001818 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff8e 	bl	80018c4 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff31 	bl	8001834 <__NVIC_EnableIRQ>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ffa2 	bl	800192c <SysTick_Config>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e159      	b.n	8001cc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f040 8148 	bne.w	8001cbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d005      	beq.n	8001a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d017      	beq.n	8001ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d123      	bne.n	8001b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80a2 	beq.w	8001cbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <HAL_GPIO_Init+0x2e8>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a56      	ldr	r2, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x2e8>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <HAL_GPIO_Init+0x2e8>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b96:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x2ec>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a49      	ldr	r2, [pc, #292]	; (8001ce4 <HAL_GPIO_Init+0x2f0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x202>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a48      	ldr	r2, [pc, #288]	; (8001ce8 <HAL_GPIO_Init+0x2f4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x1fe>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_GPIO_Init+0x2f8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x1fa>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a46      	ldr	r2, [pc, #280]	; (8001cf0 <HAL_GPIO_Init+0x2fc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x1f6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a45      	ldr	r2, [pc, #276]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x1f2>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x204>
 8001be6:	2307      	movs	r3, #7
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x204>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x204>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x204>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x204>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <HAL_GPIO_Init+0x2ec>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb8:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f aea2 	bls.w	8001a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40013c00 	.word	0x40013c00

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	619a      	str	r2, [r3, #24]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d30:	b08f      	sub	sp, #60	; 0x3c
 8001d32:	af0a      	add	r7, sp, #40	; 0x28
 8001d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e054      	b.n	8001dea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f007 f968 	bl	8009030 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 f996 	bl	80060b0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	687e      	ldr	r6, [r7, #4]
 8001d8c:	466d      	mov	r5, sp
 8001d8e:	f106 0410 	add.w	r4, r6, #16
 8001d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da2:	1d33      	adds	r3, r6, #4
 8001da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f004 f910 	bl	8005fcc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 f98d 	bl	80060d2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	687e      	ldr	r6, [r7, #4]
 8001dc0:	466d      	mov	r5, sp
 8001dc2:	f106 0410 	add.w	r4, r6, #16
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd6:	1d33      	adds	r3, r6, #4
 8001dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f004 fb16 	bl	800640c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001df2:	b590      	push	{r4, r7, lr}
 8001df4:	b089      	sub	sp, #36	; 0x24
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	4608      	mov	r0, r1
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	70fb      	strb	r3, [r7, #3]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70bb      	strb	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_HCD_HC_Init+0x28>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e076      	b.n	8001f08 <HAL_HCD_HC_Init+0x116>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	333d      	adds	r3, #61	; 0x3d
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	212c      	movs	r1, #44	; 0x2c
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	3338      	adds	r3, #56	; 0x38
 8001e42:	787a      	ldrb	r2, [r7, #1]
 8001e44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3340      	adds	r3, #64	; 0x40
 8001e54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e56:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3339      	adds	r3, #57	; 0x39
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	333f      	adds	r3, #63	; 0x3f
 8001e78:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	78ba      	ldrb	r2, [r7, #2]
 8001e82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e86:	b2d0      	uxtb	r0, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	333a      	adds	r3, #58	; 0x3a
 8001e94:	4602      	mov	r2, r0
 8001e96:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da09      	bge.n	8001eb4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	333b      	adds	r3, #59	; 0x3b
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e008      	b.n	8001ec6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	333b      	adds	r3, #59	; 0x3b
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	333c      	adds	r3, #60	; 0x3c
 8001ed4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ed8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	787c      	ldrb	r4, [r7, #1]
 8001ee0:	78ba      	ldrb	r2, [r7, #2]
 8001ee2:	78f9      	ldrb	r1, [r7, #3]
 8001ee4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ee6:	9302      	str	r3, [sp, #8]
 8001ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	f004 fc0f 	bl	8006718 <USB_HC_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}

08001f10 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_HCD_HC_Halt+0x1e>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e00f      	b.n	8001f4e <HAL_HCD_HC_Halt+0x3e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 fe5f 	bl	8006c02 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	70fb      	strb	r3, [r7, #3]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70bb      	strb	r3, [r7, #2]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	333b      	adds	r3, #59	; 0x3b
 8001f80:	78ba      	ldrb	r2, [r7, #2]
 8001f82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	333f      	adds	r3, #63	; 0x3f
 8001f92:	787a      	ldrb	r2, [r7, #1]
 8001f94:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f96:	7c3b      	ldrb	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d112      	bne.n	8001fc2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3342      	adds	r3, #66	; 0x42
 8001faa:	2203      	movs	r2, #3
 8001fac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	333d      	adds	r3, #61	; 0x3d
 8001fbc:	7f3a      	ldrb	r2, [r7, #28]
 8001fbe:	701a      	strb	r2, [r3, #0]
 8001fc0:	e008      	b.n	8001fd4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3342      	adds	r3, #66	; 0x42
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	f200 80c6 	bhi.w	8002168 <HAL_HCD_HC_SubmitRequest+0x210>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002155 	.word	0x08002155
 8001fec:	08002059 	.word	0x08002059
 8001ff0:	080020d7 	.word	0x080020d7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ff4:	7c3b      	ldrb	r3, [r7, #16]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	f040 80b8 	bne.w	800216c <HAL_HCD_HC_SubmitRequest+0x214>
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80b4 	bne.w	800216c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002004:	8b3b      	ldrh	r3, [r7, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d108      	bne.n	800201c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3355      	adds	r3, #85	; 0x55
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	3355      	adds	r3, #85	; 0x55
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3342      	adds	r3, #66	; 0x42
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002042:	e093      	b.n	800216c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3342      	adds	r3, #66	; 0x42
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
      break;
 8002056:	e089      	b.n	800216c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11d      	bne.n	800209a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3355      	adds	r3, #85	; 0x55
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3342      	adds	r3, #66	; 0x42
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002084:	e073      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	3342      	adds	r3, #66	; 0x42
 8002094:	2202      	movs	r2, #2
 8002096:	701a      	strb	r2, [r3, #0]
      break;
 8002098:	e069      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3354      	adds	r3, #84	; 0x54
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3342      	adds	r3, #66	; 0x42
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
      break;
 80020c0:	e055      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3342      	adds	r3, #66	; 0x42
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
      break;
 80020d4:	e04b      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020d6:	78bb      	ldrb	r3, [r7, #2]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d11d      	bne.n	8002118 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3355      	adds	r3, #85	; 0x55
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3342      	adds	r3, #66	; 0x42
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002102:	e034      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3342      	adds	r3, #66	; 0x42
 8002112:	2202      	movs	r2, #2
 8002114:	701a      	strb	r2, [r3, #0]
      break;
 8002116:	e02a      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3354      	adds	r3, #84	; 0x54
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3342      	adds	r3, #66	; 0x42
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
      break;
 800213e:	e016      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3342      	adds	r3, #66	; 0x42
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
      break;
 8002152:	e00c      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3342      	adds	r3, #66	; 0x42
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
      break;
 8002166:	e002      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002168:	bf00      	nop
 800216a:	e000      	b.n	800216e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800216c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3344      	adds	r3, #68	; 0x44
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	8b3a      	ldrh	r2, [r7, #24]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	202c      	movs	r0, #44	; 0x2c
 8002188:	fb00 f303 	mul.w	r3, r0, r3
 800218c:	440b      	add	r3, r1
 800218e:	334c      	adds	r3, #76	; 0x4c
 8002190:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3350      	adds	r3, #80	; 0x50
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3339      	adds	r3, #57	; 0x39
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3361      	adds	r3, #97	; 0x61
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	222c      	movs	r2, #44	; 0x2c
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	3338      	adds	r3, #56	; 0x38
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	18d1      	adds	r1, r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	f004 fbb2 	bl	800695c <USB_HC_StartXfer>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop

08002204 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f004 f8b3 	bl	8006386 <USB_GetMode>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	f040 80f6 	bne.w	8002414 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f004 f897 	bl	8006360 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80ec 	beq.w	8002412 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f88e 	bl	8006360 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800224e:	d104      	bne.n	800225a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002258:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f004 f87e 	bl	8006360 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226e:	d104      	bne.n	800227a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002278:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f004 f86e 	bl	8006360 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800228a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800228e:	d104      	bne.n	800229a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002298:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f85e 	bl	8006360 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d103      	bne.n	80022b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2202      	movs	r2, #2
 80022b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 f850 	bl	8006360 <USB_ReadInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ca:	d11c      	bne.n	8002306 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022e6:	2110      	movs	r1, #16
 80022e8:	6938      	ldr	r0, [r7, #16]
 80022ea:	f003 ff3f 	bl	800616c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022ee:	6938      	ldr	r0, [r7, #16]
 80022f0:	f003 ff70 	bl	80061d4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f004 f946 	bl	800658c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f006 ff13 	bl	800912c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f004 f828 	bl	8006360 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231a:	d102      	bne.n	8002322 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f001 f89e 	bl	800345e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f004 f81a 	bl	8006360 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b08      	cmp	r3, #8
 8002334:	d106      	bne.n	8002344 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f006 fedc 	bl	80090f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2208      	movs	r2, #8
 8002342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 f809 	bl	8006360 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b10      	cmp	r3, #16
 8002356:	d101      	bne.n	800235c <HAL_HCD_IRQHandler+0x158>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_HCD_IRQHandler+0x15a>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0210 	bic.w	r2, r2, #16
 8002370:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 ffa1 	bl	80032ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0210 	orr.w	r2, r2, #16
 8002386:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 ffe7 	bl	8006360 <USB_ReadInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800239c:	d13a      	bne.n	8002414 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 fc1c 	bl	8006be0 <USB_HC_ReadInterrupt>
 80023a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e025      	b.n	80023fc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d018      	beq.n	80023f6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023da:	d106      	bne.n	80023ea <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8ab 	bl	800253e <HCD_HC_IN_IRQHandler>
 80023e8:	e005      	b.n	80023f6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fbf9 	bl	8002be8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	429a      	cmp	r2, r3
 8002404:	d3d4      	bcc.n	80023b0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240e:	615a      	str	r2, [r3, #20]
 8002410:	e000      	b.n	8002414 <HAL_HCD_IRQHandler+0x210>
      return;
 8002412:	bf00      	nop
    }
  }
}
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_HCD_Start+0x16>
 800242c:	2302      	movs	r3, #2
 800242e:	e013      	b.n	8002458 <HAL_HCD_Start+0x3e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f004 f908 	bl	8006654 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fe20 	bl	800608e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_HCD_Stop+0x16>
 8002472:	2302      	movs	r3, #2
 8002474:	e00d      	b.n	8002492 <HAL_HCD_Stop+0x32>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f004 fcf6 	bl	8006e74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 f8aa 	bl	8006600 <USB_ResetPort>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	3360      	adds	r3, #96	; 0x60
 80024d0:	781b      	ldrb	r3, [r3, #0]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3350      	adds	r3, #80	; 0x50
 80024f8:	681b      	ldr	r3, [r3, #0]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 f8ee 	bl	80066f4 <USB_GetCurrentFrame>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f004 f8c9 	bl	80066c6 <USB_GetHostSpeed>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d11a      	bne.n	80025a4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	461a      	mov	r2, r3
 800257c:	2304      	movs	r3, #4
 800257e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3361      	adds	r3, #97	; 0x61
 800258e:	2206      	movs	r2, #6
 8002590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f004 fb30 	bl	8006c02 <USB_HC_Halt>
 80025a2:	e0af      	b.n	8002704 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ba:	d11b      	bne.n	80025f4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3361      	adds	r3, #97	; 0x61
 80025de:	2207      	movs	r2, #7
 80025e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 fb08 	bl	8006c02 <USB_HC_Halt>
 80025f2:	e087      	b.n	8002704 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b20      	cmp	r3, #32
 8002608:	d109      	bne.n	800261e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	461a      	mov	r2, r3
 8002618:	2320      	movs	r3, #32
 800261a:	6093      	str	r3, [r2, #8]
 800261c:	e072      	b.n	8002704 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b08      	cmp	r3, #8
 8002632:	d11a      	bne.n	800266a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2308      	movs	r3, #8
 8002644:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3361      	adds	r3, #97	; 0x61
 8002654:	2205      	movs	r2, #5
 8002656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f004 facd 	bl	8006c02 <USB_HC_Halt>
 8002668:	e04c      	b.n	8002704 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002680:	d11b      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002694:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3361      	adds	r3, #97	; 0x61
 80026a4:	2208      	movs	r2, #8
 80026a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 faa5 	bl	8006c02 <USB_HC_Halt>
 80026b8:	e024      	b.n	8002704 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b80      	cmp	r3, #128	; 0x80
 80026ce:	d119      	bne.n	8002704 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3361      	adds	r3, #97	; 0x61
 80026f0:	2206      	movs	r2, #6
 80026f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 fa7f 	bl	8006c02 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271a:	d112      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fa6b 	bl	8006c02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	461a      	mov	r2, r3
 800273a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002740:	e24e      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 80df 	bne.w	8002918 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d019      	beq.n	8002796 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3348      	adds	r3, #72	; 0x48
 8002770:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0159      	lsls	r1, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	440b      	add	r3, r1
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002784:	1ad2      	subs	r2, r2, r3
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	202c      	movs	r0, #44	; 0x2c
 800278c:	fb00 f303 	mul.w	r3, r0, r3
 8002790:	440b      	add	r3, r1
 8002792:	3350      	adds	r3, #80	; 0x50
 8002794:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3361      	adds	r3, #97	; 0x61
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	335c      	adds	r3, #92	; 0x5c
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	2301      	movs	r3, #1
 80027ca:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	333f      	adds	r3, #63	; 0x3f
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	333f      	adds	r3, #63	; 0x3f
 80027ee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d111      	bne.n	8002818 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 f9ff 	bl	8006c02 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2310      	movs	r3, #16
 8002814:	6093      	str	r3, [r2, #8]
 8002816:	e03a      	b.n	800288e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	333f      	adds	r3, #63	; 0x3f
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d009      	beq.n	8002840 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	333f      	adds	r3, #63	; 0x3f
 800283a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800283c:	2b01      	cmp	r3, #1
 800283e:	d126      	bne.n	800288e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	440a      	add	r2, r1
 8002856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800285e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3360      	adds	r3, #96	; 0x60
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	b2d9      	uxtb	r1, r3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	202c      	movs	r0, #44	; 0x2c
 800287c:	fb00 f303 	mul.w	r3, r0, r3
 8002880:	4413      	add	r3, r2
 8002882:	3360      	adds	r3, #96	; 0x60
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f006 fc5d 	bl	8009148 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d12b      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3348      	adds	r3, #72	; 0x48
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	202c      	movs	r0, #44	; 0x2c
 80028ac:	fb00 f202 	mul.w	r2, r0, r2
 80028b0:	440a      	add	r2, r1
 80028b2:	3240      	adds	r2, #64	; 0x40
 80028b4:	8812      	ldrh	r2, [r2, #0]
 80028b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 818e 	beq.w	8002be0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3354      	adds	r3, #84	; 0x54
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2d8      	uxtb	r0, r3
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3354      	adds	r3, #84	; 0x54
 80028e8:	4602      	mov	r2, r0
 80028ea:	701a      	strb	r2, [r3, #0]
}
 80028ec:	e178      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3354      	adds	r3, #84	; 0x54
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	f083 0301 	eor.w	r3, r3, #1
 8002902:	b2d8      	uxtb	r0, r3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3354      	adds	r3, #84	; 0x54
 8002912:	4602      	mov	r2, r0
 8002914:	701a      	strb	r2, [r3, #0]
}
 8002916:	e163      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	f040 80f6 	bne.w	8002b1c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3361      	adds	r3, #97	; 0x61
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d109      	bne.n	8002958 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3360      	adds	r3, #96	; 0x60
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e0c9      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3361      	adds	r3, #97	; 0x61
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d109      	bne.n	8002980 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3360      	adds	r3, #96	; 0x60
 800297a:	2205      	movs	r2, #5
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e0b5      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3361      	adds	r3, #97	; 0x61
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b06      	cmp	r3, #6
 8002992:	d009      	beq.n	80029a8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3361      	adds	r3, #97	; 0x61
 80029a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d150      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	335c      	adds	r3, #92	; 0x5c
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	202c      	movs	r0, #44	; 0x2c
 80029c0:	fb00 f303 	mul.w	r3, r0, r3
 80029c4:	440b      	add	r3, r1
 80029c6:	335c      	adds	r3, #92	; 0x5c
 80029c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d912      	bls.n	8002a04 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	335c      	adds	r3, #92	; 0x5c
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	2204      	movs	r2, #4
 8002a00:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a02:	e073      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3360      	adds	r3, #96	; 0x60
 8002a12:	2202      	movs	r2, #2
 8002a14:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a2c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a34:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a48:	e050      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3361      	adds	r3, #97	; 0x61
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d122      	bne.n	8002aa4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a86:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a8e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e023      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b07      	cmp	r3, #7
 8002ab6:	d119      	bne.n	8002aec <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	335c      	adds	r3, #92	; 0x5c
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	202c      	movs	r0, #44	; 0x2c
 8002ad0:	fb00 f303 	mul.w	r3, r0, r3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	335c      	adds	r3, #92	; 0x5c
 8002ad8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3360      	adds	r3, #96	; 0x60
 8002ae8:	2204      	movs	r2, #4
 8002aea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2302      	movs	r3, #2
 8002afc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	b2d9      	uxtb	r1, r3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	202c      	movs	r0, #44	; 0x2c
 8002b08:	fb00 f303 	mul.w	r3, r0, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3360      	adds	r3, #96	; 0x60
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f006 fb17 	bl	8009148 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b1a:	e061      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d156      	bne.n	8002be0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	333f      	adds	r3, #63	; 0x3f
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d111      	bne.n	8002b6a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	335c      	adds	r3, #92	; 0x5c
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f84d 	bl	8006c02 <USB_HC_Halt>
 8002b68:	e031      	b.n	8002bce <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	333f      	adds	r3, #63	; 0x3f
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	333f      	adds	r3, #63	; 0x3f
 8002b8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d11d      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	335c      	adds	r3, #92	; 0x5c
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d110      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 f81a 	bl	8006c02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2310      	movs	r3, #16
 8002bde:	6093      	str	r3, [r2, #8]
}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d11a      	bne.n	8002c4e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2304      	movs	r3, #4
 8002c28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3361      	adds	r3, #97	; 0x61
 8002c38:	2206      	movs	r2, #6
 8002c3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 ffdb 	bl	8006c02 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c4c:	e331      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d12e      	bne.n	8002cc2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	461a      	mov	r2, r3
 8002c72:	2320      	movs	r3, #32
 8002c74:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	333d      	adds	r3, #61	; 0x3d
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 8313 	bne.w	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	333d      	adds	r3, #61	; 0x3d
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3360      	adds	r3, #96	; 0x60
 8002cac:	2202      	movs	r2, #2
 8002cae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 ffa1 	bl	8006c02 <USB_HC_Halt>
}
 8002cc0:	e2f7      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd8:	d112      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 ff82 	bl	8006c02 <USB_HC_Halt>
}
 8002cfe:	e2d8      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d140      	bne.n	8002d98 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d111      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	333d      	adds	r3, #61	; 0x3d
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2340      	movs	r3, #64	; 0x40
 8002d60:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2301      	movs	r3, #1
 8002d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 ff36 	bl	8006c02 <USB_HC_Halt>
}
 8002d96:	e28c      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d12c      	bne.n	8002e08 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3361      	adds	r3, #97	; 0x61
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	333d      	adds	r3, #61	; 0x3d
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 ff07 	bl	8006c02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	461a      	mov	r2, r3
 8002e02:	2340      	movs	r3, #64	; 0x40
 8002e04:	6093      	str	r3, [r2, #8]
}
 8002e06:	e254      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11a      	bne.n	8002e54 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	2205      	movs	r2, #5
 8002e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fed8 	bl	8006c02 <USB_HC_Halt>
}
 8002e52:	e22e      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d140      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	335c      	adds	r3, #92	; 0x5c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	333d      	adds	r3, #61	; 0x3d
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d112      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	333d      	adds	r3, #61	; 0x3d
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fe95 	bl	8006c02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	6093      	str	r3, [r2, #8]
}
 8002eea:	e1e2      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d164      	bne.n	8002fcc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d111      	bne.n	8002f2e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3361      	adds	r3, #97	; 0x61
 8002f18:	2206      	movs	r2, #6
 8002f1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fe6b 	bl	8006c02 <USB_HC_Halt>
 8002f2c:	e044      	b.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	335c      	adds	r3, #92	; 0x5c
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	202c      	movs	r0, #44	; 0x2c
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	335c      	adds	r3, #92	; 0x5c
 8002f4e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	335c      	adds	r3, #92	; 0x5c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d920      	bls.n	8002fa6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	335c      	adds	r3, #92	; 0x5c
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3360      	adds	r3, #96	; 0x60
 8002f84:	2204      	movs	r2, #4
 8002f86:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	b2d9      	uxtb	r1, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	202c      	movs	r0, #44	; 0x2c
 8002f92:	fb00 f303 	mul.w	r3, r0, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3360      	adds	r3, #96	; 0x60
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f006 f8d2 	bl	8009148 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fa4:	e008      	b.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3360      	adds	r3, #96	; 0x60
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	6093      	str	r3, [r2, #8]
}
 8002fca:	e172      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d11b      	bne.n	800301c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3361      	adds	r3, #97	; 0x61
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f003 fdfe 	bl	8006c02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	461a      	mov	r2, r3
 8003014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003018:	6093      	str	r3, [r2, #8]
}
 800301a:	e14a      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	f040 813f 	bne.w	80032b2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3361      	adds	r3, #97	; 0x61
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d17d      	bne.n	8003144 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3360      	adds	r3, #96	; 0x60
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	333f      	adds	r3, #63	; 0x3f
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d00a      	beq.n	8003084 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	333f      	adds	r3, #63	; 0x3f
 800307c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	f040 8100 	bne.w	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d113      	bne.n	80030b4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3355      	adds	r3, #85	; 0x55
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	f083 0301 	eor.w	r3, r3, #1
 80030a0:	b2d8      	uxtb	r0, r3
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	3355      	adds	r3, #85	; 0x55
 80030b0:	4602      	mov	r2, r0
 80030b2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 80e3 	bne.w	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	334c      	adds	r3, #76	; 0x4c
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80d8 	beq.w	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	334c      	adds	r3, #76	; 0x4c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	202c      	movs	r0, #44	; 0x2c
 80030ea:	fb00 f202 	mul.w	r2, r0, r2
 80030ee:	440a      	add	r2, r1
 80030f0:	3240      	adds	r2, #64	; 0x40
 80030f2:	8812      	ldrh	r2, [r2, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	202c      	movs	r0, #44	; 0x2c
 80030fe:	fb00 f202 	mul.w	r2, r0, r2
 8003102:	440a      	add	r2, r1
 8003104:	3240      	adds	r2, #64	; 0x40
 8003106:	8812      	ldrh	r2, [r2, #0]
 8003108:	fbb3 f3f2 	udiv	r3, r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80b5 	beq.w	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3355      	adds	r3, #85	; 0x55
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2d8      	uxtb	r0, r3
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3355      	adds	r3, #85	; 0x55
 800313e:	4602      	mov	r2, r0
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	e09f      	b.n	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3361      	adds	r3, #97	; 0x61
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d109      	bne.n	800316c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3360      	adds	r3, #96	; 0x60
 8003166:	2202      	movs	r2, #2
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e08b      	b.n	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3361      	adds	r3, #97	; 0x61
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d109      	bne.n	8003194 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3360      	adds	r3, #96	; 0x60
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e077      	b.n	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3361      	adds	r3, #97	; 0x61
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d109      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3360      	adds	r3, #96	; 0x60
 80031b6:	2205      	movs	r2, #5
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e063      	b.n	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3361      	adds	r3, #97	; 0x61
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d009      	beq.n	80031e4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3361      	adds	r3, #97	; 0x61
 80031de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d14f      	bne.n	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	335c      	adds	r3, #92	; 0x5c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	202c      	movs	r0, #44	; 0x2c
 80031fc:	fb00 f303 	mul.w	r3, r0, r3
 8003200:	440b      	add	r3, r1
 8003202:	335c      	adds	r3, #92	; 0x5c
 8003204:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	335c      	adds	r3, #92	; 0x5c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d912      	bls.n	8003240 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3360      	adds	r3, #96	; 0x60
 800323a:	2204      	movs	r2, #4
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e021      	b.n	8003284 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3360      	adds	r3, #96	; 0x60
 800324e:	2202      	movs	r2, #2
 8003250:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003268:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003270:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	461a      	mov	r2, r3
 8003292:	2302      	movs	r3, #2
 8003294:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	b2d9      	uxtb	r1, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	202c      	movs	r0, #44	; 0x2c
 80032a0:	fb00 f303 	mul.w	r3, r0, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3360      	adds	r3, #96	; 0x60
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f005 ff4b 	bl	8009148 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032b2:	bf00      	nop
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b08a      	sub	sp, #40	; 0x28
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	0c5b      	lsrs	r3, r3, #17
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d004      	beq.n	8003300 <HCD_RXQLVL_IRQHandler+0x46>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	f000 80a9 	beq.w	8003450 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032fe:	e0aa      	b.n	8003456 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80a6 	beq.w	8003454 <HCD_RXQLVL_IRQHandler+0x19a>
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3344      	adds	r3, #68	; 0x44
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 809b 	beq.w	8003454 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3350      	adds	r3, #80	; 0x50
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	441a      	add	r2, r3
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	202c      	movs	r0, #44	; 0x2c
 8003338:	fb00 f303 	mul.w	r3, r0, r3
 800333c:	440b      	add	r3, r1
 800333e:	334c      	adds	r3, #76	; 0x4c
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d87a      	bhi.n	800343c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3344      	adds	r3, #68	; 0x44
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	b292      	uxth	r2, r2
 800335e:	4619      	mov	r1, r3
 8003360:	f002 ffa6 	bl	80062b0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3344      	adds	r3, #68	; 0x44
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	441a      	add	r2, r3
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	202c      	movs	r0, #44	; 0x2c
 800337e:	fb00 f303 	mul.w	r3, r0, r3
 8003382:	440b      	add	r3, r1
 8003384:	3344      	adds	r3, #68	; 0x44
 8003386:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3350      	adds	r3, #80	; 0x50
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	441a      	add	r2, r3
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	202c      	movs	r0, #44	; 0x2c
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	440b      	add	r3, r1
 80033a8:	3350      	adds	r3, #80	; 0x50
 80033aa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	0cdb      	lsrs	r3, r3, #19
 80033bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3340      	adds	r3, #64	; 0x40
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d13c      	bne.n	8003454 <HCD_RXQLVL_IRQHandler+0x19a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d039      	beq.n	8003454 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3354      	adds	r3, #84	; 0x54
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2d8      	uxtb	r0, r3
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3354      	adds	r3, #84	; 0x54
 8003436:	4602      	mov	r2, r0
 8003438:	701a      	strb	r2, [r3, #0]
      break;
 800343a:	e00b      	b.n	8003454 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3360      	adds	r3, #96	; 0x60
 800344a:	2204      	movs	r2, #4
 800344c:	701a      	strb	r2, [r3, #0]
      break;
 800344e:	e001      	b.n	8003454 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003454:	bf00      	nop
  }
}
 8003456:	bf00      	nop
 8003458:	3728      	adds	r7, #40	; 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800348a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d10b      	bne.n	80034ae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d102      	bne.n	80034a6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f005 fe35 	bl	8009110 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d132      	bne.n	800351e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d126      	bne.n	8003518 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d113      	bne.n	80034fa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034dc:	d106      	bne.n	80034ec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 f851 	bl	800658c <USB_InitFSLSPClkSel>
 80034ea:	e011      	b.n	8003510 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 f84a 	bl	800658c <USB_InitFSLSPClkSel>
 80034f8:	e00a      	b.n	8003510 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d106      	bne.n	8003510 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003508:	461a      	mov	r2, r3
 800350a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800350e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f005 fe27 	bl	8009164 <HAL_HCD_PortEnabled_Callback>
 8003516:	e002      	b.n	800351e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f005 fe31 	bl	8009180 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d103      	bne.n	8003530 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f043 0320 	orr.w	r3, r3, #32
 800352e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003536:	461a      	mov	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e12b      	b.n	80037ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fe4e 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	; 0x24
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003596:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a8:	f001 fa20 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 80035ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4a81      	ldr	r2, [pc, #516]	; (80037b8 <HAL_I2C_Init+0x274>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d807      	bhi.n	80035c8 <HAL_I2C_Init+0x84>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a80      	ldr	r2, [pc, #512]	; (80037bc <HAL_I2C_Init+0x278>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	bf94      	ite	ls
 80035c0:	2301      	movls	r3, #1
 80035c2:	2300      	movhi	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e006      	b.n	80035d6 <HAL_I2C_Init+0x92>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a7d      	ldr	r2, [pc, #500]	; (80037c0 <HAL_I2C_Init+0x27c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	bf94      	ite	ls
 80035d0:	2301      	movls	r3, #1
 80035d2:	2300      	movhi	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0e7      	b.n	80037ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a78      	ldr	r2, [pc, #480]	; (80037c4 <HAL_I2C_Init+0x280>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0c9b      	lsrs	r3, r3, #18
 80035e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a6a      	ldr	r2, [pc, #424]	; (80037b8 <HAL_I2C_Init+0x274>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d802      	bhi.n	8003618 <HAL_I2C_Init+0xd4>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3301      	adds	r3, #1
 8003616:	e009      	b.n	800362c <HAL_I2C_Init+0xe8>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	4a69      	ldr	r2, [pc, #420]	; (80037c8 <HAL_I2C_Init+0x284>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	099b      	lsrs	r3, r3, #6
 800362a:	3301      	adds	r3, #1
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	430b      	orrs	r3, r1
 8003632:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	495c      	ldr	r1, [pc, #368]	; (80037b8 <HAL_I2C_Init+0x274>)
 8003648:	428b      	cmp	r3, r1
 800364a:	d819      	bhi.n	8003680 <HAL_I2C_Init+0x13c>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1e59      	subs	r1, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	fbb1 f3f3 	udiv	r3, r1, r3
 800365a:	1c59      	adds	r1, r3, #1
 800365c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003660:	400b      	ands	r3, r1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_I2C_Init+0x138>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1e59      	subs	r1, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fbb1 f3f3 	udiv	r3, r1, r3
 8003674:	3301      	adds	r3, #1
 8003676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367a:	e051      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 800367c:	2304      	movs	r3, #4
 800367e:	e04f      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d111      	bne.n	80036ac <HAL_I2C_Init+0x168>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e58      	subs	r0, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	440b      	add	r3, r1
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
 800369a:	3301      	adds	r3, #1
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e012      	b.n	80036d2 <HAL_I2C_Init+0x18e>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	0099      	lsls	r1, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Init+0x196>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e022      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10e      	bne.n	8003700 <HAL_I2C_Init+0x1bc>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1e58      	subs	r0, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	440b      	add	r3, r1
 80036f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fe:	e00f      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e58      	subs	r0, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	0099      	lsls	r1, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	fbb0 f3f3 	udiv	r3, r0, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	6809      	ldr	r1, [r1, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800374e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6911      	ldr	r1, [r2, #16]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68d2      	ldr	r2, [r2, #12]
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	000186a0 	.word	0x000186a0
 80037bc:	001e847f 	.word	0x001e847f
 80037c0:	003d08ff 	.word	0x003d08ff
 80037c4:	431bde83 	.word	0x431bde83
 80037c8:	10624dd3 	.word	0x10624dd3

080037cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e128      	b.n	8003a30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a90      	ldr	r2, [pc, #576]	; (8003a38 <HAL_I2S_Init+0x26c>)
 80037f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7fd fd4f 	bl	800129c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003814:	f023 030f 	bic.w	r3, r3, #15
 8003818:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2202      	movs	r2, #2
 8003820:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d060      	beq.n	80038ec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003832:	2310      	movs	r3, #16
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e001      	b.n	800383c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b20      	cmp	r3, #32
 8003842:	d802      	bhi.n	800384a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800384a:	2001      	movs	r0, #1
 800384c:	f001 f9e6 	bl	8004c1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003850:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385a:	d125      	bne.n	80038a8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	fbb2 f2f3 	udiv	r2, r2, r3
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	461a      	mov	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	3305      	adds	r3, #5
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	e01f      	b.n	80038c6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	461a      	mov	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	3305      	adds	r3, #5
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e00e      	b.n	80038c6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	3305      	adds	r3, #5
 80038c4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <HAL_I2S_Init+0x270>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	08db      	lsrs	r3, r3, #3
 80038d0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	e003      	b.n	80038f4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038ec:	2302      	movs	r3, #2
 80038ee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d902      	bls.n	8003900 <HAL_I2S_Init+0x134>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2bff      	cmp	r3, #255	; 0xff
 80038fe:	d907      	bls.n	8003910 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e08f      	b.n	8003a30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	ea42 0103 	orr.w	r1, r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	430a      	orrs	r2, r1
 8003922:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800392e:	f023 030f 	bic.w	r3, r3, #15
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6851      	ldr	r1, [r2, #4]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6892      	ldr	r2, [r2, #8]
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68d2      	ldr	r2, [r2, #12]
 8003940:	4311      	orrs	r1, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6992      	ldr	r2, [r2, #24]
 8003946:	430a      	orrs	r2, r1
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003952:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d161      	bne.n	8003a20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a38      	ldr	r2, [pc, #224]	; (8003a40 <HAL_I2S_Init+0x274>)
 8003960:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a37      	ldr	r2, [pc, #220]	; (8003a44 <HAL_I2S_Init+0x278>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_I2S_Init+0x1a4>
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_I2S_Init+0x27c>)
 800396e:	e001      	b.n	8003974 <HAL_I2S_Init+0x1a8>
 8003970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	4932      	ldr	r1, [pc, #200]	; (8003a44 <HAL_I2S_Init+0x278>)
 800397c:	428a      	cmp	r2, r1
 800397e:	d101      	bne.n	8003984 <HAL_I2S_Init+0x1b8>
 8003980:	4a31      	ldr	r2, [pc, #196]	; (8003a48 <HAL_I2S_Init+0x27c>)
 8003982:	e001      	b.n	8003988 <HAL_I2S_Init+0x1bc>
 8003984:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003988:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800398c:	f023 030f 	bic.w	r3, r3, #15
 8003990:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2b      	ldr	r2, [pc, #172]	; (8003a44 <HAL_I2S_Init+0x278>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_I2S_Init+0x1d4>
 800399c:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <HAL_I2S_Init+0x27c>)
 800399e:	e001      	b.n	80039a4 <HAL_I2S_Init+0x1d8>
 80039a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a4:	2202      	movs	r2, #2
 80039a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <HAL_I2S_Init+0x278>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_I2S_Init+0x1ea>
 80039b2:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_I2S_Init+0x27c>)
 80039b4:	e001      	b.n	80039ba <HAL_I2S_Init+0x1ee>
 80039b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c6:	d003      	beq.n	80039d0 <HAL_I2S_Init+0x204>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80039d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e001      	b.n	80039dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039f0:	4313      	orrs	r3, r2
 80039f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039fa:	4313      	orrs	r3, r2
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <HAL_I2S_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_I2S_Init+0x24c>
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_I2S_Init+0x27c>)
 8003a16:	e001      	b.n	8003a1c <HAL_I2S_Init+0x250>
 8003a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a1c:	897a      	ldrh	r2, [r7, #10]
 8003a1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3720      	adds	r7, #32
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	08003b43 	.word	0x08003b43
 8003a3c:	cccccccd 	.word	0xcccccccd
 8003a40:	08003c59 	.word	0x08003c59
 8003a44:	40003800 	.word	0x40003800
 8003a48:	40003400 	.word	0x40003400

08003a4c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c9a      	adds	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10e      	bne.n	8003adc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003acc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ffb8 	bl	8003a4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	b292      	uxth	r2, r2
 8003af8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	1c9a      	adds	r2, r3, #2
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10e      	bne.n	8003b3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff93 	bl	8003a60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d13a      	bne.n	8003bd4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d109      	bne.n	8003b7c <I2S_IRQHandler+0x3a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d102      	bne.n	8003b7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffb4 	bl	8003ae4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d126      	bne.n	8003bd4 <I2S_IRQHandler+0x92>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d11f      	bne.n	8003bd4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff50 	bl	8003a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d136      	bne.n	8003c4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d109      	bne.n	8003bfe <I2S_IRQHandler+0xbc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d102      	bne.n	8003bfe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff45 	bl	8003a88 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d122      	bne.n	8003c4e <I2S_IRQHandler+0x10c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d11b      	bne.n	8003c4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f043 0204 	orr.w	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff13 	bl	8003a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a92      	ldr	r2, [pc, #584]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c72:	4b92      	ldr	r3, [pc, #584]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c74:	e001      	b.n	8003c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a8b      	ldr	r2, [pc, #556]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c90:	4b8a      	ldr	r3, [pc, #552]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c92:	e001      	b.n	8003c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca4:	d004      	beq.n	8003cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 8099 	bne.w	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d107      	bne.n	8003cca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f925 	bl	8003f14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f9c8 	bl	8004074 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d13a      	bne.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d035      	beq.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a6e      	ldr	r2, [pc, #440]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d02:	4b6e      	ldr	r3, [pc, #440]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d04:	e001      	b.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4969      	ldr	r1, [pc, #420]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d12:	428b      	cmp	r3, r1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d16:	4b69      	ldr	r3, [pc, #420]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d18:	e001      	b.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fe88 	bl	8003a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	f040 80c3 	bne.w	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80bd 	beq.w	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a49      	ldr	r2, [pc, #292]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d96:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d98:	e001      	b.n	8003d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4944      	ldr	r1, [pc, #272]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003da6:	428b      	cmp	r3, r1
 8003da8:	d101      	bne.n	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003daa:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dac:	e001      	b.n	8003db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fe4a 	bl	8003a74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003de0:	e089      	b.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d107      	bne.n	8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8be 	bl	8003f78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8fd 	bl	8004010 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d12f      	bne.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02a      	beq.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e46:	e001      	b.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4919      	ldr	r1, [pc, #100]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e54:	428b      	cmp	r3, r1
 8003e56:	d101      	bne.n	8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e5a:	e001      	b.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f043 0202 	orr.w	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fdfa 	bl	8003a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d136      	bne.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d031      	beq.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea0:	e001      	b.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4902      	ldr	r1, [pc, #8]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eae:	428b      	cmp	r3, r1
 8003eb0:	d106      	bne.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003eb2:	4b02      	ldr	r3, [pc, #8]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb4:	e006      	b.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003eb6:	bf00      	nop
 8003eb8:	40003800 	.word	0x40003800
 8003ebc:	40003400 	.word	0x40003400
 8003ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ed8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f043 0204 	orr.w	r2, r3, #4
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fdc0 	bl	8003a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ef4:	e000      	b.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef6:	bf00      	nop
}
 8003ef8:	bf00      	nop
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c99      	adds	r1, r3, #2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6251      	str	r1, [r2, #36]	; 0x24
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ffc9 	bl	8003f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c99      	adds	r1, r3, #2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6251      	str	r1, [r2, #36]	; 0x24
 8003f8a:	8819      	ldrh	r1, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <I2SEx_TxISR_I2SExt+0x90>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <I2SEx_TxISR_I2SExt+0x22>
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <I2SEx_TxISR_I2SExt+0x94>)
 8003f98:	e001      	b.n	8003f9e <I2SEx_TxISR_I2SExt+0x26>
 8003f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9e:	460a      	mov	r2, r1
 8003fa0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d121      	bne.n	8003ffe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a12      	ldr	r2, [pc, #72]	; (8004008 <I2SEx_TxISR_I2SExt+0x90>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <I2SEx_TxISR_I2SExt+0x50>
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <I2SEx_TxISR_I2SExt+0x94>)
 8003fc6:	e001      	b.n	8003fcc <I2SEx_TxISR_I2SExt+0x54>
 8003fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	490d      	ldr	r1, [pc, #52]	; (8004008 <I2SEx_TxISR_I2SExt+0x90>)
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	d101      	bne.n	8003fdc <I2SEx_TxISR_I2SExt+0x64>
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <I2SEx_TxISR_I2SExt+0x94>)
 8003fda:	e001      	b.n	8003fe0 <I2SEx_TxISR_I2SExt+0x68>
 8003fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fe4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff81 	bl	8003f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40003800 	.word	0x40003800
 800400c:	40003400 	.word	0x40003400

08004010 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68d8      	ldr	r0, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	1c99      	adds	r1, r3, #2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004028:	b282      	uxth	r2, r0
 800402a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d113      	bne.n	800406c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004052:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ff4a 	bl	8003f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <I2SEx_RxISR_I2SExt+0x90>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <I2SEx_RxISR_I2SExt+0x16>
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <I2SEx_RxISR_I2SExt+0x94>)
 8004088:	e001      	b.n	800408e <I2SEx_RxISR_I2SExt+0x1a>
 800408a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408e:	68d8      	ldr	r0, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	1c99      	adds	r1, r3, #2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	62d1      	str	r1, [r2, #44]	; 0x2c
 800409a:	b282      	uxth	r2, r0
 800409c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d121      	bne.n	80040fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <I2SEx_RxISR_I2SExt+0x90>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <I2SEx_RxISR_I2SExt+0x50>
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <I2SEx_RxISR_I2SExt+0x94>)
 80040c2:	e001      	b.n	80040c8 <I2SEx_RxISR_I2SExt+0x54>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	490d      	ldr	r1, [pc, #52]	; (8004104 <I2SEx_RxISR_I2SExt+0x90>)
 80040d0:	428b      	cmp	r3, r1
 80040d2:	d101      	bne.n	80040d8 <I2SEx_RxISR_I2SExt+0x64>
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <I2SEx_RxISR_I2SExt+0x94>)
 80040d6:	e001      	b.n	80040dc <I2SEx_RxISR_I2SExt+0x68>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff03 	bl	8003f00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40003800 	.word	0x40003800
 8004108:	40003400 	.word	0x40003400

0800410c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e267      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d075      	beq.n	8004216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800412a:	4b88      	ldr	r3, [pc, #544]	; (800434c <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b04      	cmp	r3, #4
 8004134:	d00c      	beq.n	8004150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004136:	4b85      	ldr	r3, [pc, #532]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800413e:	2b08      	cmp	r3, #8
 8004140:	d112      	bne.n	8004168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004142:	4b82      	ldr	r3, [pc, #520]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800414e:	d10b      	bne.n	8004168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	4b7e      	ldr	r3, [pc, #504]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d05b      	beq.n	8004214 <HAL_RCC_OscConfig+0x108>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d157      	bne.n	8004214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e242      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004170:	d106      	bne.n	8004180 <HAL_RCC_OscConfig+0x74>
 8004172:	4b76      	ldr	r3, [pc, #472]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a75      	ldr	r2, [pc, #468]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e01d      	b.n	80041bc <HAL_RCC_OscConfig+0xb0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x98>
 800418a:	4b70      	ldr	r3, [pc, #448]	; (800434c <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6f      	ldr	r2, [pc, #444]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4b6d      	ldr	r3, [pc, #436]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6c      	ldr	r2, [pc, #432]	; (800434c <HAL_RCC_OscConfig+0x240>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e00b      	b.n	80041bc <HAL_RCC_OscConfig+0xb0>
 80041a4:	4b69      	ldr	r3, [pc, #420]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a68      	ldr	r2, [pc, #416]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80041aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b66      	ldr	r3, [pc, #408]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a65      	ldr	r2, [pc, #404]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80041b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d013      	beq.n	80041ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fd fad4 	bl	8001770 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041cc:	f7fd fad0 	bl	8001770 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	; 0x64
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e207      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	4b5b      	ldr	r3, [pc, #364]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0xc0>
 80041ea:	e014      	b.n	8004216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7fd fac0 	bl	8001770 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f4:	f7fd fabc 	bl	8001770 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e1f3      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004206:	4b51      	ldr	r3, [pc, #324]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0xe8>
 8004212:	e000      	b.n	8004216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d063      	beq.n	80042ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004222:	4b4a      	ldr	r3, [pc, #296]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422e:	4b47      	ldr	r3, [pc, #284]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004236:	2b08      	cmp	r3, #8
 8004238:	d11c      	bne.n	8004274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b44      	ldr	r3, [pc, #272]	; (800434c <HAL_RCC_OscConfig+0x240>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d116      	bne.n	8004274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004246:	4b41      	ldr	r3, [pc, #260]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_RCC_OscConfig+0x152>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d001      	beq.n	800425e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e1c7      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425e:	4b3b      	ldr	r3, [pc, #236]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4937      	ldr	r1, [pc, #220]	; (800434c <HAL_RCC_OscConfig+0x240>)
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004272:	e03a      	b.n	80042ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800427c:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_RCC_OscConfig+0x244>)
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004282:	f7fd fa75 	bl	8001770 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800428a:	f7fd fa71 	bl	8001770 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e1a8      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429c:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCC_OscConfig+0x240>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a8:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4925      	ldr	r1, [pc, #148]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]
 80042bc:	e015      	b.n	80042ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCC_OscConfig+0x244>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd fa54 	bl	8001770 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042cc:	f7fd fa50 	bl	8001770 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e187      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d036      	beq.n	8004364 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <HAL_RCC_OscConfig+0x248>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fd fa34 	bl	8001770 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800430c:	f7fd fa30 	bl	8001770 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e167      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_OscConfig+0x240>)
 8004320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x200>
 800432a:	e01b      	b.n	8004364 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_RCC_OscConfig+0x248>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004332:	f7fd fa1d 	bl	8001770 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004338:	e00e      	b.n	8004358 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433a:	f7fd fa19 	bl	8001770 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d907      	bls.n	8004358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e150      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
 800434c:	40023800 	.word	0x40023800
 8004350:	42470000 	.word	0x42470000
 8004354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004358:	4b88      	ldr	r3, [pc, #544]	; (800457c <HAL_RCC_OscConfig+0x470>)
 800435a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ea      	bne.n	800433a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8097 	beq.w	80044a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004376:	4b81      	ldr	r3, [pc, #516]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10f      	bne.n	80043a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	4b7d      	ldr	r3, [pc, #500]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a7c      	ldr	r2, [pc, #496]	; (800457c <HAL_RCC_OscConfig+0x470>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
 8004392:	4b7a      	ldr	r3, [pc, #488]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a2:	4b77      	ldr	r3, [pc, #476]	; (8004580 <HAL_RCC_OscConfig+0x474>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d118      	bne.n	80043e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ae:	4b74      	ldr	r3, [pc, #464]	; (8004580 <HAL_RCC_OscConfig+0x474>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a73      	ldr	r2, [pc, #460]	; (8004580 <HAL_RCC_OscConfig+0x474>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ba:	f7fd f9d9 	bl	8001770 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c2:	f7fd f9d5 	bl	8001770 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e10c      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <HAL_RCC_OscConfig+0x474>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x2ea>
 80043e8:	4b64      	ldr	r3, [pc, #400]	; (800457c <HAL_RCC_OscConfig+0x470>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a63      	ldr	r2, [pc, #396]	; (800457c <HAL_RCC_OscConfig+0x470>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
 80043f4:	e01c      	b.n	8004430 <HAL_RCC_OscConfig+0x324>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x30c>
 80043fe:	4b5f      	ldr	r3, [pc, #380]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a5e      	ldr	r2, [pc, #376]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
 800440a:	4b5c      	ldr	r3, [pc, #368]	; (800457c <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a5b      	ldr	r2, [pc, #364]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	e00b      	b.n	8004430 <HAL_RCC_OscConfig+0x324>
 8004418:	4b58      	ldr	r3, [pc, #352]	; (800457c <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	4a57      	ldr	r2, [pc, #348]	; (800457c <HAL_RCC_OscConfig+0x470>)
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	; 0x70
 8004424:	4b55      	ldr	r3, [pc, #340]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a54      	ldr	r2, [pc, #336]	; (800457c <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 0304 	bic.w	r3, r3, #4
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d015      	beq.n	8004464 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004438:	f7fd f99a 	bl	8001770 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443e:	e00a      	b.n	8004456 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004440:	f7fd f996 	bl	8001770 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e0cb      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004456:	4b49      	ldr	r3, [pc, #292]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0ee      	beq.n	8004440 <HAL_RCC_OscConfig+0x334>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004464:	f7fd f984 	bl	8001770 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446a:	e00a      	b.n	8004482 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446c:	f7fd f980 	bl	8001770 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f241 3288 	movw	r2, #5000	; 0x1388
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e0b5      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004482:	4b3e      	ldr	r3, [pc, #248]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ee      	bne.n	800446c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448e:	7dfb      	ldrb	r3, [r7, #23]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d105      	bne.n	80044a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004494:	4b39      	ldr	r3, [pc, #228]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	4a38      	ldr	r2, [pc, #224]	; (800457c <HAL_RCC_OscConfig+0x470>)
 800449a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80a1 	beq.w	80045ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044aa:	4b34      	ldr	r3, [pc, #208]	; (800457c <HAL_RCC_OscConfig+0x470>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d05c      	beq.n	8004570 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d141      	bne.n	8004542 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCC_OscConfig+0x478>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fd f954 	bl	8001770 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fd f950 	bl	8001770 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e087      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <HAL_RCC_OscConfig+0x470>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69da      	ldr	r2, [r3, #28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	3b01      	subs	r3, #1
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	491b      	ldr	r1, [pc, #108]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_OscConfig+0x478>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fd f929 	bl	8001770 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004522:	f7fd f925 	bl	8001770 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e05c      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x416>
 8004540:	e054      	b.n	80045ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <HAL_RCC_OscConfig+0x478>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fd f912 	bl	8001770 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004550:	f7fd f90e 	bl	8001770 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e045      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCC_OscConfig+0x470>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x444>
 800456e:	e03d      	b.n	80045ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e038      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
 800457c:	40023800 	.word	0x40023800
 8004580:	40007000 	.word	0x40007000
 8004584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004588:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_RCC_OscConfig+0x4ec>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d028      	beq.n	80045e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d121      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d11a      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045b8:	4013      	ands	r3, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	3b01      	subs	r3, #1
 80045d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800

080045fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0cc      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b68      	ldr	r3, [pc, #416]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d90c      	bls.n	8004638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b65      	ldr	r3, [pc, #404]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0b8      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004650:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a58      	ldr	r2, [pc, #352]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800465a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004668:	4b53      	ldr	r3, [pc, #332]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004674:	4b50      	ldr	r3, [pc, #320]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	494d      	ldr	r1, [pc, #308]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d044      	beq.n	800471c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469a:	4b47      	ldr	r3, [pc, #284]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d119      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e07f      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d003      	beq.n	80046ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ba:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e06f      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e067      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046da:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f023 0203 	bic.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4934      	ldr	r1, [pc, #208]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ec:	f7fd f840 	bl	8001770 <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	e00a      	b.n	800470a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f4:	f7fd f83c 	bl	8001770 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e04f      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470a:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 020c 	and.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d1eb      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d20c      	bcs.n	8004744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e032      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4916      	ldr	r1, [pc, #88]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	490e      	ldr	r1, [pc, #56]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004782:	f000 f821 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8004786:	4602      	mov	r2, r0
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	490a      	ldr	r1, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	5ccb      	ldrb	r3, [r1, r3]
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc ffa0 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023c00 	.word	0x40023c00
 80047b8:	40023800 	.word	0x40023800
 80047bc:	08009820 	.word	0x08009820
 80047c0:	20000000 	.word	0x20000000
 80047c4:	20000004 	.word	0x20000004

080047c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047cc:	b094      	sub	sp, #80	; 0x50
 80047ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	647b      	str	r3, [r7, #68]	; 0x44
 80047d4:	2300      	movs	r3, #0
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d8:	2300      	movs	r3, #0
 80047da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e0:	4b79      	ldr	r3, [pc, #484]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d00d      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x40>
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	f200 80e1 	bhi.w	80049b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x34>
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d003      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0x3a>
 80047fa:	e0db      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047fc:	4b73      	ldr	r3, [pc, #460]	; (80049cc <HAL_RCC_GetSysClockFreq+0x204>)
 80047fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004800:	e0db      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004802:	4b73      	ldr	r3, [pc, #460]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004806:	e0d8      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004808:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004810:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004812:	4b6d      	ldr	r3, [pc, #436]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d063      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481e:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	2200      	movs	r2, #0
 8004826:	63bb      	str	r3, [r7, #56]	; 0x38
 8004828:	63fa      	str	r2, [r7, #60]	; 0x3c
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004830:	633b      	str	r3, [r7, #48]	; 0x30
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
 8004836:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800483a:	4622      	mov	r2, r4
 800483c:	462b      	mov	r3, r5
 800483e:	f04f 0000 	mov.w	r0, #0
 8004842:	f04f 0100 	mov.w	r1, #0
 8004846:	0159      	lsls	r1, r3, #5
 8004848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800484c:	0150      	lsls	r0, r2, #5
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4621      	mov	r1, r4
 8004854:	1a51      	subs	r1, r2, r1
 8004856:	6139      	str	r1, [r7, #16]
 8004858:	4629      	mov	r1, r5
 800485a:	eb63 0301 	sbc.w	r3, r3, r1
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800486c:	4659      	mov	r1, fp
 800486e:	018b      	lsls	r3, r1, #6
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004876:	4651      	mov	r1, sl
 8004878:	018a      	lsls	r2, r1, #6
 800487a:	4651      	mov	r1, sl
 800487c:	ebb2 0801 	subs.w	r8, r2, r1
 8004880:	4659      	mov	r1, fp
 8004882:	eb63 0901 	sbc.w	r9, r3, r1
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800489a:	4690      	mov	r8, r2
 800489c:	4699      	mov	r9, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	eb18 0303 	adds.w	r3, r8, r3
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	462b      	mov	r3, r5
 80048a8:	eb49 0303 	adc.w	r3, r9, r3
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ba:	4629      	mov	r1, r5
 80048bc:	024b      	lsls	r3, r1, #9
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048c4:	4621      	mov	r1, r4
 80048c6:	024a      	lsls	r2, r1, #9
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ce:	2200      	movs	r2, #0
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048d8:	f7fb fc7e 	bl	80001d8 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	e058      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e6:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	2200      	movs	r2, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	4611      	mov	r1, r2
 80048f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048f6:	623b      	str	r3, [r7, #32]
 80048f8:	2300      	movs	r3, #0
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004900:	4642      	mov	r2, r8
 8004902:	464b      	mov	r3, r9
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	0159      	lsls	r1, r3, #5
 800490e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004912:	0150      	lsls	r0, r2, #5
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4641      	mov	r1, r8
 800491a:	ebb2 0a01 	subs.w	sl, r2, r1
 800491e:	4649      	mov	r1, r9
 8004920:	eb63 0b01 	sbc.w	fp, r3, r1
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004930:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004934:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004938:	ebb2 040a 	subs.w	r4, r2, sl
 800493c:	eb63 050b 	sbc.w	r5, r3, fp
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	00eb      	lsls	r3, r5, #3
 800494a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800494e:	00e2      	lsls	r2, r4, #3
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	4643      	mov	r3, r8
 8004956:	18e3      	adds	r3, r4, r3
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	464b      	mov	r3, r9
 800495c:	eb45 0303 	adc.w	r3, r5, r3
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800496e:	4629      	mov	r1, r5
 8004970:	028b      	lsls	r3, r1, #10
 8004972:	4621      	mov	r1, r4
 8004974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004978:	4621      	mov	r1, r4
 800497a:	028a      	lsls	r2, r1, #10
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	2200      	movs	r2, #0
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	61fa      	str	r2, [r7, #28]
 8004988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800498c:	f7fb fc24 	bl	80001d8 <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	3301      	adds	r3, #1
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049b2:	e002      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetSysClockFreq+0x204>)
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3750      	adds	r7, #80	; 0x50
 80049c0:	46bd      	mov	sp, r7
 80049c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800
 80049cc:	00f42400 	.word	0x00f42400
 80049d0:	007a1200 	.word	0x007a1200

080049d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d8:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000000 	.word	0x20000000

080049ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049f0:	f7ff fff0 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	0a9b      	lsrs	r3, r3, #10
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	08009830 	.word	0x08009830

08004a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a18:	f7ff ffdc 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0b5b      	lsrs	r3, r3, #13
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800
 8004a38:	08009830 	.word	0x08009830

08004a3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d038      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a64:	4b68      	ldr	r3, [pc, #416]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6a:	f7fc fe81 	bl	8001770 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a72:	f7fc fe7d 	bl	8001770 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e0bd      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a84:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	019b      	lsls	r3, r3, #6
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	071b      	lsls	r3, r3, #28
 8004aa2:	495a      	ldr	r1, [pc, #360]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aaa:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab0:	f7fc fe5e 	bl	8001770 <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ab8:	f7fc fe5a 	bl	8001770 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e09a      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aca:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8083 	beq.w	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	4b48      	ldr	r3, [pc, #288]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	4a47      	ldr	r2, [pc, #284]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	6413      	str	r3, [r2, #64]	; 0x40
 8004af4:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a42      	ldr	r2, [pc, #264]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fc fe30 	bl	8001770 <HAL_GetTick>
 8004b10:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fc fe2c 	bl	8001770 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e06c      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b26:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d028      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b50:	4b2e      	ldr	r3, [pc, #184]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b5a:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b60:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b66:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d114      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fc fdfa 	bl	8001770 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fc fdf6 	bl	8001770 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e034      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ee      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bae:	d10d      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004bb0:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc4:	4911      	ldr	r1, [pc, #68]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
 8004bca:	e005      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bd6:	6093      	str	r3, [r2, #8]
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be4:	4909      	ldr	r1, [pc, #36]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7d1a      	ldrb	r2, [r3, #20]
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004bfc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	42470068 	.word	0x42470068
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40007000 	.word	0x40007000
 8004c14:	42470e40 	.word	0x42470e40
 8004c18:	424711e0 	.word	0x424711e0

08004c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d140      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d131      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c50:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c52:	617b      	str	r3, [r7, #20]
          break;
 8004c54:	e031      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c56:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c62:	d109      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c6e:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e008      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c78:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c8a:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
 8004c9c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca4:	0f1b      	lsrs	r3, r3, #28
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]
          break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
          break;
 8004cb8:	bf00      	nop
        }
      }
      break;
 8004cba:	bf00      	nop
    }
  }
  return frequency;
 8004cbc:	697b      	ldr	r3, [r7, #20]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	00bb8000 	.word	0x00bb8000
 8004cd4:	007a1200 	.word	0x007a1200
 8004cd8:	00f42400 	.word	0x00f42400

08004cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07b      	b.n	8004de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d108      	bne.n	8004d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d009      	beq.n	8004d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	61da      	str	r2, [r3, #28]
 8004d06:	e005      	b.n	8004d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fb82 	bl	8001438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	f003 0104 	and.w	r1, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0210 	and.w	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b088      	sub	sp, #32
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_SPI_Transmit+0x22>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e126      	b.n	800505e <HAL_SPI_Transmit+0x270>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e18:	f7fc fcaa 	bl	8001770 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e32:	e10b      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Transmit+0x52>
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e44:	e102      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	d10f      	bne.n	8004eae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d007      	beq.n	8004ecc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed4:	d14b      	bne.n	8004f6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Transmit+0xf6>
 8004ede:	8afb      	ldrh	r3, [r7, #22]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d13e      	bne.n	8004f62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	881a      	ldrh	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f08:	e02b      	b.n	8004f62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d112      	bne.n	8004f3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	881a      	ldrh	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f3c:	e011      	b.n	8004f62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3e:	f7fc fc17 	bl	8001770 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d803      	bhi.n	8004f56 <HAL_SPI_Transmit+0x168>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f54:	d102      	bne.n	8004f5c <HAL_SPI_Transmit+0x16e>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f60:	e074      	b.n	800504c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ce      	bne.n	8004f0a <HAL_SPI_Transmit+0x11c>
 8004f6c:	e04c      	b.n	8005008 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_SPI_Transmit+0x18e>
 8004f76:	8afb      	ldrh	r3, [r7, #22]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d140      	bne.n	8004ffe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fa2:	e02c      	b.n	8004ffe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d113      	bne.n	8004fda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fd8:	e011      	b.n	8004ffe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fda:	f7fc fbc9 	bl	8001770 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d803      	bhi.n	8004ff2 <HAL_SPI_Transmit+0x204>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff0:	d102      	bne.n	8004ff8 <HAL_SPI_Transmit+0x20a>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ffc:	e026      	b.n	800504c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1cd      	bne.n	8004fa4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fbd9 	bl	80057c4 <SPI_EndRxTxTransaction>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e000      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

error:
 800504a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800505c:	7ffb      	ldrb	r3, [r7, #31]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3720      	adds	r7, #32
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b088      	sub	sp, #32
 800506a:	af02      	add	r7, sp, #8
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005082:	d112      	bne.n	80050aa <HAL_SPI_Receive+0x44>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10e      	bne.n	80050aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2204      	movs	r2, #4
 8005090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8f1 	bl	8005288 <HAL_SPI_TransmitReceive>
 80050a6:	4603      	mov	r3, r0
 80050a8:	e0ea      	b.n	8005280 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_Receive+0x52>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0e3      	b.n	8005280 <HAL_SPI_Receive+0x21a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c0:	f7fc fb56 	bl	8001770 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
 80050d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050d6:	e0ca      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Receive+0x7e>
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050e8:	e0c1      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2204      	movs	r2, #4
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005130:	d10f      	bne.n	8005152 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005150:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d007      	beq.n	8005170 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d162      	bne.n	800523e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005178:	e02e      	b.n	80051d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d115      	bne.n	80051b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f103 020c 	add.w	r2, r3, #12
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051b2:	e011      	b.n	80051d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051b4:	f7fc fadc 	bl	8001770 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d803      	bhi.n	80051cc <HAL_SPI_Receive+0x166>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ca:	d102      	bne.n	80051d2 <HAL_SPI_Receive+0x16c>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051d6:	e04a      	b.n	800526e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1cb      	bne.n	800517a <HAL_SPI_Receive+0x114>
 80051e2:	e031      	b.n	8005248 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d113      	bne.n	800521a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	b292      	uxth	r2, r2
 80051fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	1c9a      	adds	r2, r3, #2
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005218:	e011      	b.n	800523e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521a:	f7fc faa9 	bl	8001770 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d803      	bhi.n	8005232 <HAL_SPI_Receive+0x1cc>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005230:	d102      	bne.n	8005238 <HAL_SPI_Receive+0x1d2>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800523c:	e017      	b.n	800526e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1cd      	bne.n	80051e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fa53 	bl	80056f8 <SPI_EndRxTransaction>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
 800526a:	e000      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

error :
 800526c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800527e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	; 0x30
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005296:	2301      	movs	r3, #1
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x26>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e18a      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x33c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b6:	f7fc fa5b 	bl	8001770 <HAL_GetTick>
 80052ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d00f      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x70>
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052de:	d107      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x68>
 80052e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d003      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052f6:	e15b      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_SPI_TransmitReceive+0x82>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_SPI_TransmitReceive+0x82>
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005310:	e14e      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b04      	cmp	r3, #4
 800531c:	d003      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2205      	movs	r2, #5
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	887a      	ldrh	r2, [r7, #2]
 800534e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d007      	beq.n	800537a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005382:	d178      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x10a>
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d166      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	1c9a      	adds	r2, r3, #2
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b6:	e053      	b.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d11b      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x176>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x176>
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d113      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d119      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x1b8>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d014      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	b292      	uxth	r2, r2
 8005422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	1c9a      	adds	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800543c:	2301      	movs	r3, #1
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005440:	f7fc f996 	bl	8001770 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800544c:	429a      	cmp	r2, r3
 800544e:	d807      	bhi.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005456:	d003      	beq.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800545e:	e0a7      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1a6      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x130>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1a1      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x130>
 8005474:	e07c      	b.n	8005570 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x1fc>
 800547e:	8b7b      	ldrh	r3, [r7, #26]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d16b      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	7812      	ldrb	r2, [r2, #0]
 8005490:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054aa:	e057      	b.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d11c      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d017      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d114      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d119      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x2ae>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d014      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005532:	2301      	movs	r3, #1
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005536:	f7fc f91b 	bl	8001770 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005542:	429a      	cmp	r2, r3
 8005544:	d803      	bhi.n	800554e <HAL_SPI_TransmitReceive+0x2c6>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800554c:	d102      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x2cc>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800555a:	e029      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1a2      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x224>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d19d      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f925 	bl	80057c4 <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800558c:	e010      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	e000      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3730      	adds	r7, #48	; 0x30
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055da:	b2db      	uxtb	r3, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055f8:	f7fc f8ba 	bl	8001770 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4413      	add	r3, r2
 8005606:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005608:	f7fc f8b2 	bl	8001770 <HAL_GetTick>
 800560c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800560e:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	015b      	lsls	r3, r3, #5
 8005614:	0d1b      	lsrs	r3, r3, #20
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	fb02 f303 	mul.w	r3, r2, r3
 800561c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800561e:	e054      	b.n	80056ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005626:	d050      	beq.n	80056ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005628:	f7fc f8a2 	bl	8001770 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	429a      	cmp	r2, r3
 8005636:	d902      	bls.n	800563e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d13d      	bne.n	80056ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800564c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005656:	d111      	bne.n	800567c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005660:	d004      	beq.n	800566c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566a:	d107      	bne.n	800567c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005684:	d10f      	bne.n	80056a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e017      	b.n	80056ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4013      	ands	r3, r2
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	bf0c      	ite	eq
 80056da:	2301      	moveq	r3, #1
 80056dc:	2300      	movne	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d19b      	bne.n	8005620 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000000 	.word	0x20000000

080056f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800570c:	d111      	bne.n	8005732 <SPI_EndRxTransaction+0x3a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005716:	d004      	beq.n	8005722 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005720:	d107      	bne.n	8005732 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005730:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800573a:	d12a      	bne.n	8005792 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005744:	d012      	beq.n	800576c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	2180      	movs	r1, #128	; 0x80
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff ff49 	bl	80055e8 <SPI_WaitFlagStateUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02d      	beq.n	80057b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005760:	f043 0220 	orr.w	r2, r3, #32
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e026      	b.n	80057ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	2101      	movs	r1, #1
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ff36 	bl	80055e8 <SPI_WaitFlagStateUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01a      	beq.n	80057b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e013      	b.n	80057ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2200      	movs	r2, #0
 800579a:	2101      	movs	r1, #1
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff ff23 	bl	80055e8 <SPI_WaitFlagStateUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e000      	b.n	80057ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <SPI_EndRxTxTransaction+0x7c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <SPI_EndRxTxTransaction+0x80>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	0d5b      	lsrs	r3, r3, #21
 80057dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057e0:	fb02 f303 	mul.w	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ee:	d112      	bne.n	8005816 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	2180      	movs	r1, #128	; 0x80
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff fef4 	bl	80055e8 <SPI_WaitFlagStateUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d016      	beq.n	8005834 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e00f      	b.n	8005836 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	3b01      	subs	r3, #1
 8005820:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d0f2      	beq.n	8005816 <SPI_EndRxTxTransaction+0x52>
 8005830:	e000      	b.n	8005834 <SPI_EndRxTxTransaction+0x70>
        break;
 8005832:	bf00      	nop
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000000 	.word	0x20000000
 8005844:	165e9f81 	.word	0x165e9f81

08005848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e03f      	b.n	80058da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fb fe2a 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2224      	movs	r2, #36	; 0x24
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800588a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f929 	bl	8005ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b08a      	sub	sp, #40	; 0x28
 80058e6:	af02      	add	r7, sp, #8
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d17c      	bne.n	80059fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <HAL_UART_Transmit+0x2c>
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e075      	b.n	80059fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_UART_Transmit+0x3e>
 800591c:	2302      	movs	r3, #2
 800591e:	e06e      	b.n	80059fe <HAL_UART_Transmit+0x11c>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2221      	movs	r2, #33	; 0x21
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005936:	f7fb ff1b 	bl	8001770 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005950:	d108      	bne.n	8005964 <HAL_UART_Transmit+0x82>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e003      	b.n	800596c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005974:	e02a      	b.n	80059cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f840 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e036      	b.n	80059fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	3302      	adds	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e007      	b.n	80059be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1cf      	bne.n	8005976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2140      	movs	r1, #64	; 0x40
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f810 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e006      	b.n	80059fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b090      	sub	sp, #64	; 0x40
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a16:	e050      	b.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a1e:	d04c      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a26:	f7fb fea3 	bl	8001770 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d241      	bcs.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a56:	637a      	str	r2, [r7, #52]	; 0x34
 8005a58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a8a:	623a      	str	r2, [r7, #32]
 8005a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	69f9      	ldr	r1, [r7, #28]
 8005a90:	6a3a      	ldr	r2, [r7, #32]
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e00f      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d09f      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3740      	adds	r7, #64	; 0x40
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae8:	b0c0      	sub	sp, #256	; 0x100
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	ea40 0301 	orr.w	r3, r0, r1
 8005b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b3c:	f021 010c 	bic.w	r1, r1, #12
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5e:	6999      	ldr	r1, [r3, #24]
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	ea40 0301 	orr.w	r3, r0, r1
 8005b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b8f      	ldr	r3, [pc, #572]	; (8005db0 <UART_SetConfig+0x2cc>)
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d005      	beq.n	8005b84 <UART_SetConfig+0xa0>
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b8d      	ldr	r3, [pc, #564]	; (8005db4 <UART_SetConfig+0x2d0>)
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d104      	bne.n	8005b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fe ff46 	bl	8004a14 <HAL_RCC_GetPCLK2Freq>
 8005b88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b8c:	e003      	b.n	8005b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7fe ff2d 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8005b92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba0:	f040 810c 	bne.w	8005dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	462b      	mov	r3, r5
 8005bba:	1891      	adds	r1, r2, r2
 8005bbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bbe:	415b      	adcs	r3, r3
 8005bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	eb12 0801 	adds.w	r8, r2, r1
 8005bcc:	4629      	mov	r1, r5
 8005bce:	eb43 0901 	adc.w	r9, r3, r1
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be6:	4690      	mov	r8, r2
 8005be8:	4699      	mov	r9, r3
 8005bea:	4623      	mov	r3, r4
 8005bec:	eb18 0303 	adds.w	r3, r8, r3
 8005bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	eb49 0303 	adc.w	r3, r9, r3
 8005bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c12:	460b      	mov	r3, r1
 8005c14:	18db      	adds	r3, r3, r3
 8005c16:	653b      	str	r3, [r7, #80]	; 0x50
 8005c18:	4613      	mov	r3, r2
 8005c1a:	eb42 0303 	adc.w	r3, r2, r3
 8005c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c28:	f7fa fad6 	bl	80001d8 <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4b61      	ldr	r3, [pc, #388]	; (8005db8 <UART_SetConfig+0x2d4>)
 8005c32:	fba3 2302 	umull	r2, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	011c      	lsls	r4, r3, #4
 8005c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	1891      	adds	r1, r2, r2
 8005c52:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c54:	415b      	adcs	r3, r3
 8005c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c62:	4649      	mov	r1, r9
 8005c64:	eb43 0b01 	adc.w	fp, r3, r1
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c7c:	4692      	mov	sl, r2
 8005c7e:	469b      	mov	fp, r3
 8005c80:	4643      	mov	r3, r8
 8005c82:	eb1a 0303 	adds.w	r3, sl, r3
 8005c86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	18db      	adds	r3, r3, r3
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
 8005cae:	4613      	mov	r3, r2
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cbe:	f7fa fa8b 	bl	80001d8 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <UART_SetConfig+0x2d4>)
 8005cca:	fba3 2301 	umull	r2, r3, r3, r1
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2264      	movs	r2, #100	; 0x64
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	1acb      	subs	r3, r1, r3
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cde:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <UART_SetConfig+0x2d4>)
 8005ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cec:	441c      	add	r4, r3
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6339      	str	r1, [r7, #48]	; 0x30
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d44:	464b      	mov	r3, r9
 8005d46:	460a      	mov	r2, r1
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d64:	460b      	mov	r3, r1
 8005d66:	18db      	adds	r3, r3, r3
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	eb42 0303 	adc.w	r3, r2, r3
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d7a:	f7fa fa2d 	bl	80001d8 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <UART_SetConfig+0x2d4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	; 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	3332      	adds	r3, #50	; 0x32
 8005d96:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <UART_SetConfig+0x2d4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 0207 	and.w	r2, r3, #7
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4422      	add	r2, r4
 8005daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dac:	e105      	b.n	8005fba <UART_SetConfig+0x4d6>
 8005dae:	bf00      	nop
 8005db0:	40011000 	.word	0x40011000
 8005db4:	40011400 	.word	0x40011400
 8005db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	1891      	adds	r1, r2, r2
 8005dd4:	6239      	str	r1, [r7, #32]
 8005dd6:	415b      	adcs	r3, r3
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dde:	4641      	mov	r1, r8
 8005de0:	1854      	adds	r4, r2, r1
 8005de2:	4649      	mov	r1, r9
 8005de4:	eb43 0501 	adc.w	r5, r3, r1
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	00eb      	lsls	r3, r5, #3
 8005df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005df6:	00e2      	lsls	r2, r4, #3
 8005df8:	4614      	mov	r4, r2
 8005dfa:	461d      	mov	r5, r3
 8005dfc:	4643      	mov	r3, r8
 8005dfe:	18e3      	adds	r3, r4, r3
 8005e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e04:	464b      	mov	r3, r9
 8005e06:	eb45 0303 	adc.w	r3, r5, r3
 8005e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	008b      	lsls	r3, r1, #2
 8005e2e:	4621      	mov	r1, r4
 8005e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e34:	4621      	mov	r1, r4
 8005e36:	008a      	lsls	r2, r1, #2
 8005e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e3c:	f7fa f9cc 	bl	80001d8 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4b60      	ldr	r3, [pc, #384]	; (8005fc8 <UART_SetConfig+0x4e4>)
 8005e46:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	011c      	lsls	r4, r3, #4
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	1891      	adds	r1, r2, r2
 8005e66:	61b9      	str	r1, [r7, #24]
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e70:	4641      	mov	r1, r8
 8005e72:	1851      	adds	r1, r2, r1
 8005e74:	6139      	str	r1, [r7, #16]
 8005e76:	4649      	mov	r1, r9
 8005e78:	414b      	adcs	r3, r1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e88:	4659      	mov	r1, fp
 8005e8a:	00cb      	lsls	r3, r1, #3
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e92:	4651      	mov	r1, sl
 8005e94:	00ca      	lsls	r2, r1, #3
 8005e96:	4610      	mov	r0, r2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	eb42 0303 	adc.w	r3, r2, r3
 8005eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ec8:	4649      	mov	r1, r9
 8005eca:	008b      	lsls	r3, r1, #2
 8005ecc:	4641      	mov	r1, r8
 8005ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	008a      	lsls	r2, r1, #2
 8005ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005eda:	f7fa f97d 	bl	80001d8 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <UART_SetConfig+0x4e4>)
 8005ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	2164      	movs	r1, #100	; 0x64
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	3332      	adds	r3, #50	; 0x32
 8005ef6:	4a34      	ldr	r2, [pc, #208]	; (8005fc8 <UART_SetConfig+0x4e4>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f02:	441c      	add	r4, r3
 8005f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f08:	2200      	movs	r2, #0
 8005f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f0c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f12:	4642      	mov	r2, r8
 8005f14:	464b      	mov	r3, r9
 8005f16:	1891      	adds	r1, r2, r2
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	415b      	adcs	r3, r3
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f22:	4641      	mov	r1, r8
 8005f24:	1851      	adds	r1, r2, r1
 8005f26:	6039      	str	r1, [r7, #0]
 8005f28:	4649      	mov	r1, r9
 8005f2a:	414b      	adcs	r3, r1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f3a:	4659      	mov	r1, fp
 8005f3c:	00cb      	lsls	r3, r1, #3
 8005f3e:	4651      	mov	r1, sl
 8005f40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f44:	4651      	mov	r1, sl
 8005f46:	00ca      	lsls	r2, r1, #3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4642      	mov	r2, r8
 8005f50:	189b      	adds	r3, r3, r2
 8005f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f54:	464b      	mov	r3, r9
 8005f56:	460a      	mov	r2, r1
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	663b      	str	r3, [r7, #96]	; 0x60
 8005f68:	667a      	str	r2, [r7, #100]	; 0x64
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f76:	4649      	mov	r1, r9
 8005f78:	008b      	lsls	r3, r1, #2
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f80:	4641      	mov	r1, r8
 8005f82:	008a      	lsls	r2, r1, #2
 8005f84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f88:	f7fa f926 	bl	80001d8 <__aeabi_uldivmod>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <UART_SetConfig+0x4e4>)
 8005f92:	fba3 1302 	umull	r1, r3, r3, r2
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2164      	movs	r1, #100	; 0x64
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	3332      	adds	r3, #50	; 0x32
 8005fa4:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <UART_SetConfig+0x4e4>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4422      	add	r2, r4
 8005fb8:	609a      	str	r2, [r3, #8]
}
 8005fba:	bf00      	nop
 8005fbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc6:	bf00      	nop
 8005fc8:	51eb851f 	.word	0x51eb851f

08005fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 001c 	add.w	r0, r7, #28
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d122      	bne.n	800602a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800600c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d105      	bne.n	800601e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9c0 	bl	80063a4 <USB_CoreReset>
 8006024:	4603      	mov	r3, r0
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	e01a      	b.n	8006060 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9b4 	bl	80063a4 <USB_CoreReset>
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
 8006052:	e005      	b.n	8006060 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	2b01      	cmp	r3, #1
 8006064:	d10b      	bne.n	800607e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f043 0206 	orr.w	r2, r3, #6
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f043 0220 	orr.w	r2, r3, #32
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800608a:	b004      	add	sp, #16
 800608c:	4770      	bx	lr

0800608e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f043 0201 	orr.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f023 0201 	bic.w	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d115      	bne.n	8006120 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006100:	2001      	movs	r0, #1
 8006102:	f7fb fb41 	bl	8001788 <HAL_Delay>
      ms++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f93a 	bl	8006386 <USB_GetMode>
 8006112:	4603      	mov	r3, r0
 8006114:	2b01      	cmp	r3, #1
 8006116:	d01e      	beq.n	8006156 <USB_SetCurrentMode+0x84>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b31      	cmp	r3, #49	; 0x31
 800611c:	d9f0      	bls.n	8006100 <USB_SetCurrentMode+0x2e>
 800611e:	e01a      	b.n	8006156 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d115      	bne.n	8006152 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006132:	2001      	movs	r0, #1
 8006134:	f7fb fb28 	bl	8001788 <HAL_Delay>
      ms++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f921 	bl	8006386 <USB_GetMode>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <USB_SetCurrentMode+0x84>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b31      	cmp	r3, #49	; 0x31
 800614e:	d9f0      	bls.n	8006132 <USB_SetCurrentMode+0x60>
 8006150:	e001      	b.n	8006156 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e005      	b.n	8006162 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b32      	cmp	r3, #50	; 0x32
 800615a:	d101      	bne.n	8006160 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <USB_FlushTxFifo+0x64>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e01b      	b.n	80061c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	daf2      	bge.n	800617a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	019b      	lsls	r3, r3, #6
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a08      	ldr	r2, [pc, #32]	; (80061d0 <USB_FlushTxFifo+0x64>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d901      	bls.n	80061b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e006      	b.n	80061c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d0f0      	beq.n	80061a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	00030d40 	.word	0x00030d40

080061d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a11      	ldr	r2, [pc, #68]	; (8006230 <USB_FlushRxFifo+0x5c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d901      	bls.n	80061f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e018      	b.n	8006224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	daf2      	bge.n	80061e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2210      	movs	r2, #16
 8006202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4a08      	ldr	r2, [pc, #32]	; (8006230 <USB_FlushRxFifo+0x5c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e006      	b.n	8006224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b10      	cmp	r3, #16
 8006220:	d0f0      	beq.n	8006204 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	00030d40 	.word	0x00030d40

08006234 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006234:	b480      	push	{r7}
 8006236:	b089      	sub	sp, #36	; 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	460b      	mov	r3, r1
 8006244:	71fb      	strb	r3, [r7, #7]
 8006246:	4613      	mov	r3, r2
 8006248:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006256:	2b00      	cmp	r3, #0
 8006258:	d123      	bne.n	80062a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800625a:	88bb      	ldrh	r3, [r7, #4]
 800625c:	3303      	adds	r3, #3
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006262:	2300      	movs	r3, #0
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	e018      	b.n	800629a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	031a      	lsls	r2, r3, #12
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4413      	add	r3, r2
 8006270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006274:	461a      	mov	r2, r3
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3301      	adds	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	3301      	adds	r3, #1
 8006286:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	3301      	adds	r3, #1
 800628c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3301      	adds	r3, #1
 8006292:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	3301      	adds	r3, #1
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d3e2      	bcc.n	8006268 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3724      	adds	r7, #36	; 0x24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b08b      	sub	sp, #44	; 0x2c
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	089b      	lsrs	r3, r3, #2
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	e014      	b.n	8006306 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	3301      	adds	r3, #1
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	3301      	adds	r3, #1
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	3301      	adds	r3, #1
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	3301      	adds	r3, #1
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	3301      	adds	r3, #1
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	429a      	cmp	r2, r3
 800630c:	d3e6      	bcc.n	80062dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800630e:	8bfb      	ldrh	r3, [r7, #30]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01e      	beq.n	8006352 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631e:	461a      	mov	r2, r3
 8006320:	f107 0310 	add.w	r3, r7, #16
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	701a      	strb	r2, [r3, #0]
      i++;
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	3301      	adds	r3, #1
 800633e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	3301      	adds	r3, #1
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006346:	8bfb      	ldrh	r3, [r7, #30]
 8006348:	3b01      	subs	r3, #1
 800634a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800634c:	8bfb      	ldrh	r3, [r7, #30]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ea      	bne.n	8006328 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006354:	4618      	mov	r0, r3
 8006356:	372c      	adds	r7, #44	; 0x2c
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4013      	ands	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006378:	68fb      	ldr	r3, [r7, #12]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f003 0301 	and.w	r3, r3, #1
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a13      	ldr	r2, [pc, #76]	; (8006408 <USB_CoreReset+0x64>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e01b      	b.n	80063fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	daf2      	bge.n	80063b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f043 0201 	orr.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4a09      	ldr	r2, [pc, #36]	; (8006408 <USB_CoreReset+0x64>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d901      	bls.n	80063ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e006      	b.n	80063fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d0f0      	beq.n	80063da <USB_CoreReset+0x36>

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	00030d40 	.word	0x00030d40

0800640c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800641a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800642c:	461a      	mov	r2, r3
 800642e:	2300      	movs	r3, #0
 8006430:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d018      	beq.n	8006494 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10a      	bne.n	800647e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006476:	f043 0304 	orr.w	r3, r3, #4
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e014      	b.n	80064a8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e009      	b.n	80064a8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064a2:	f023 0304 	bic.w	r3, r3, #4
 80064a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064a8:	2110      	movs	r1, #16
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fe5e 	bl	800616c <USB_FlushTxFifo>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fe8a 	bl	80061d4 <USB_FlushRxFifo>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	e015      	b.n	80064fc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	461a      	mov	r2, r3
 80064de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f0:	461a      	mov	r2, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3301      	adds	r3, #1
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	429a      	cmp	r2, r3
 8006502:	d3e5      	bcc.n	80064d0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006510:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006524:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a13      	ldr	r2, [pc, #76]	; (8006578 <USB_HostInit+0x16c>)
 800652a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a13      	ldr	r2, [pc, #76]	; (800657c <USB_HostInit+0x170>)
 8006530:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006534:	e009      	b.n	800654a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2280      	movs	r2, #128	; 0x80
 800653a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a10      	ldr	r2, [pc, #64]	; (8006580 <USB_HostInit+0x174>)
 8006540:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a0f      	ldr	r2, [pc, #60]	; (8006584 <USB_HostInit+0x178>)
 8006546:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d105      	bne.n	800655c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f043 0210 	orr.w	r2, r3, #16
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <USB_HostInit+0x17c>)
 8006562:	4313      	orrs	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006574:	b004      	add	sp, #16
 8006576:	4770      	bx	lr
 8006578:	01000200 	.word	0x01000200
 800657c:	00e00300 	.word	0x00e00300
 8006580:	00600080 	.word	0x00600080
 8006584:	004000e0 	.word	0x004000e0
 8006588:	a3200008 	.word	0xa3200008

0800658c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d107      	bne.n	80065de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d4:	461a      	mov	r2, r3
 80065d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065da:	6053      	str	r3, [r2, #4]
 80065dc:	e009      	b.n	80065f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d106      	bne.n	80065f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ea:	461a      	mov	r2, r3
 80065ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80065f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006620:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800662a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800662e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006630:	2064      	movs	r0, #100	; 0x64
 8006632:	f7fb f8a9 	bl	8001788 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800663e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006642:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006644:	200a      	movs	r0, #10
 8006646:	f7fb f89f 	bl	8001788 <HAL_Delay>

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006678:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <USB_DriveVbus+0x44>
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d106      	bne.n	8006698 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006696:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a2:	d109      	bne.n	80066b8 <USB_DriveVbus+0x64>
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	0c5b      	lsrs	r3, r3, #17
 80066e4:	f003 0303 	and.w	r3, r3, #3
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	b29b      	uxth	r3, r3
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	70fb      	strb	r3, [r7, #3]
 800672a:	460b      	mov	r3, r1
 800672c:	70bb      	strb	r3, [r7, #2]
 800672e:	4613      	mov	r3, r2
 8006730:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006746:	461a      	mov	r2, r3
 8006748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800674c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800674e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006752:	2b03      	cmp	r3, #3
 8006754:	d87e      	bhi.n	8006854 <USB_HC_Init+0x13c>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USB_HC_Init+0x44>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006817 	.word	0x08006817
 8006764:	0800676d 	.word	0x0800676d
 8006768:	080067d9 	.word	0x080067d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	461a      	mov	r2, r3
 800677a:	f240 439d 	movw	r3, #1181	; 0x49d
 800677e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006780:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006784:	2b00      	cmp	r3, #0
 8006786:	da10      	bge.n	80067aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	440a      	add	r2, r1
 800679e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80067a8:	e057      	b.n	800685a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d051      	beq.n	800685a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067d4:	60d3      	str	r3, [r2, #12]
      break;
 80067d6:	e040      	b.n	800685a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e4:	461a      	mov	r2, r3
 80067e6:	f240 639d 	movw	r3, #1693	; 0x69d
 80067ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	da34      	bge.n	800685e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	440a      	add	r2, r1
 800680a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006812:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006814:	e023      	b.n	800685e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	461a      	mov	r2, r3
 8006824:	f240 2325 	movw	r3, #549	; 0x225
 8006828:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800682a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800682e:	2b00      	cmp	r3, #0
 8006830:	da17      	bge.n	8006862 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	440a      	add	r2, r1
 8006848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006850:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006852:	e006      	b.n	8006862 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	77fb      	strb	r3, [r7, #31]
      break;
 8006858:	e004      	b.n	8006864 <USB_HC_Init+0x14c>
      break;
 800685a:	bf00      	nop
 800685c:	e002      	b.n	8006864 <USB_HC_Init+0x14c>
      break;
 800685e:	bf00      	nop
 8006860:	e000      	b.n	8006864 <USB_HC_Init+0x14c>
      break;
 8006862:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	4413      	add	r3, r2
 800686c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	78fa      	ldrb	r2, [r7, #3]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	440a      	add	r2, r1
 800687a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800687e:	f043 0302 	orr.w	r3, r3, #2
 8006882:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	2101      	movs	r1, #1
 8006894:	fa01 f303 	lsl.w	r3, r1, r3
 8006898:	6939      	ldr	r1, [r7, #16]
 800689a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800689e:	4313      	orrs	r3, r2
 80068a0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da03      	bge.n	80068be <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	e001      	b.n	80068c2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff feff 	bl	80066c6 <USB_GetHostSpeed>
 80068c8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d106      	bne.n	80068e0 <USB_HC_Init+0x1c8>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d003      	beq.n	80068e0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e001      	b.n	80068e4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068e4:	787b      	ldrb	r3, [r7, #1]
 80068e6:	059b      	lsls	r3, r3, #22
 80068e8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068ec:	78bb      	ldrb	r3, [r7, #2]
 80068ee:	02db      	lsls	r3, r3, #11
 80068f0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068f4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068fa:	049b      	lsls	r3, r3, #18
 80068fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006900:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006902:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006904:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006908:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	0159      	lsls	r1, r3, #5
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	440b      	add	r3, r1
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006920:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006922:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006926:	2b03      	cmp	r3, #3
 8006928:	d003      	beq.n	8006932 <USB_HC_Init+0x21a>
 800692a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10f      	bne.n	8006952 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006950:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006952:	7ffb      	ldrb	r3, [r7, #31]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	; 0x30
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006978:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02d      	beq.n	80069e2 <USB_HC_StartXfer+0x86>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	791b      	ldrb	r3, [r3, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d129      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d117      	bne.n	80069c4 <USB_HC_StartXfer+0x68>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	79db      	ldrb	r3, [r3, #7]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <USB_HC_StartXfer+0x48>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	79db      	ldrb	r3, [r3, #7]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d10f      	bne.n	80069c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	795b      	ldrb	r3, [r3, #5]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d107      	bne.n	80069e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	4619      	mov	r1, r3
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fa0f 	bl	8006dfc <USB_DoPing>
      return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e0f8      	b.n	8006bd4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d018      	beq.n	8006a1c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	8912      	ldrh	r2, [r2, #8]
 80069f2:	4413      	add	r3, r2
 80069f4:	3b01      	subs	r3, #1
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	8912      	ldrh	r2, [r2, #8]
 80069fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80069fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a02:	8b7b      	ldrh	r3, [r7, #26]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d90b      	bls.n	8006a20 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006a08:	8b7b      	ldrh	r3, [r7, #26]
 8006a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	8912      	ldrh	r2, [r2, #8]
 8006a12:	fb03 f202 	mul.w	r2, r3, r2
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	611a      	str	r2, [r3, #16]
 8006a1a:	e001      	b.n	8006a20 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	78db      	ldrb	r3, [r3, #3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	8912      	ldrh	r2, [r2, #8]
 8006a2e:	fb03 f202 	mul.w	r2, r3, r2
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	611a      	str	r2, [r3, #16]
 8006a36:	e003      	b.n	8006a40 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a4a:	04d9      	lsls	r1, r3, #19
 8006a4c:	4b63      	ldr	r3, [pc, #396]	; (8006bdc <USB_HC_StartXfer+0x280>)
 8006a4e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a50:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7a9b      	ldrb	r3, [r3, #10]
 8006a56:	075b      	lsls	r3, r3, #29
 8006a58:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	0148      	lsls	r0, r1, #5
 8006a60:	6a39      	ldr	r1, [r7, #32]
 8006a62:	4401      	add	r1, r0
 8006a64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a68:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a6a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	68d9      	ldr	r1, [r3, #12]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	460a      	mov	r2, r1
 8006a84:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bf0c      	ite	eq
 8006a96:	2301      	moveq	r3, #1
 8006a98:	2300      	movne	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	6a3a      	ldr	r2, [r7, #32]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006abc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	7e7b      	ldrb	r3, [r7, #25]
 8006ace:	075b      	lsls	r3, r3, #29
 8006ad0:	69f9      	ldr	r1, [r7, #28]
 8006ad2:	0148      	lsls	r0, r1, #5
 8006ad4:	6a39      	ldr	r1, [r7, #32]
 8006ad6:	4401      	add	r1, r0
 8006ad8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006adc:	4313      	orrs	r3, r2
 8006ade:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006af6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	78db      	ldrb	r3, [r3, #3]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	e003      	b.n	8006b12 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b10:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b18:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	461a      	mov	r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e04e      	b.n	8006bd4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	78db      	ldrb	r3, [r3, #3]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d149      	bne.n	8006bd2 <USB_HC_StartXfer+0x276>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d045      	beq.n	8006bd2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	79db      	ldrb	r3, [r3, #7]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d830      	bhi.n	8006bb0 <USB_HC_StartXfer+0x254>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <USB_HC_StartXfer+0x1f8>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b89 	.word	0x08006b89
 8006b5c:	08006b65 	.word	0x08006b65
 8006b60:	08006b89 	.word	0x08006b89
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b6e:	8afa      	ldrh	r2, [r7, #22]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d91c      	bls.n	8006bb4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f043 0220 	orr.w	r2, r3, #32
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b86:	e015      	b.n	8006bb4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	3303      	adds	r3, #3
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b92:	8afa      	ldrh	r2, [r7, #22]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d90a      	bls.n	8006bb8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bae:	e003      	b.n	8006bb8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <USB_HC_StartXfer+0x25e>
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <USB_HC_StartXfer+0x25e>
        break;
 8006bb8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	68d9      	ldr	r1, [r3, #12]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	785a      	ldrb	r2, [r3, #1]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2000      	movs	r0, #0
 8006bca:	9000      	str	r0, [sp, #0]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fb31 	bl	8006234 <USB_WritePacket>
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3728      	adds	r7, #40	; 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	1ff80000 	.word	0x1ff80000

08006be0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	b29b      	uxth	r3, r3
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b089      	sub	sp, #36	; 0x24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	0c9b      	lsrs	r3, r3, #18
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	0fdb      	lsrs	r3, r3, #31
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d104      	bne.n	8006c5c <USB_HC_Halt+0x5a>
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e0c8      	b.n	8006dee <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <USB_HC_Halt+0x66>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d163      	bne.n	8006d30 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c86:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f040 80ab 	bne.w	8006dec <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d133      	bne.n	8006d0a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cc0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cee:	d81d      	bhi.n	8006d2c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d06:	d0ec      	beq.n	8006ce2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d08:	e070      	b.n	8006dec <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d28:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d2a:	e05f      	b.n	8006dec <USB_HC_Halt+0x1ea>
            break;
 8006d2c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d2e:	e05d      	b.n	8006dec <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d4e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d133      	bne.n	8006dc8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3301      	adds	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dac:	d81d      	bhi.n	8006dea <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dc4:	d0ec      	beq.n	8006da0 <USB_HC_Halt+0x19e>
 8006dc6:	e011      	b.n	8006dec <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	e000      	b.n	8006dec <USB_HC_Halt+0x1ea>
          break;
 8006dea:	bf00      	nop
    }
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3724      	adds	r7, #36	; 0x24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e10:	2301      	movs	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	04da      	lsls	r2, r3, #19
 8006e18:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <USB_DoPing+0x74>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	1ff80000 	.word	0x1ff80000

08006e74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff f911 	bl	80060b0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e8e:	2110      	movs	r1, #16
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff f96b 	bl	800616c <USB_FlushTxFifo>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff f997 	bl	80061d4 <USB_FlushRxFifo>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	e01f      	b.n	8006ef6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ecc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006edc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	461a      	mov	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b0f      	cmp	r3, #15
 8006efa:	d9dc      	bls.n	8006eb6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006efc:	2300      	movs	r3, #0
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e034      	b.n	8006f6c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f36:	461a      	mov	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f48:	d80c      	bhi.n	8006f64 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f60:	d0ec      	beq.n	8006f3c <USB_StopHost+0xc8>
 8006f62:	e000      	b.n	8006f66 <USB_StopHost+0xf2>
        break;
 8006f64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b0f      	cmp	r3, #15
 8006f70:	d9c7      	bls.n	8006f02 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff f880 	bl	800608e <USB_EnableGlobalInt>

  return ret;
 8006f8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3720      	adds	r7, #32
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f98:	b590      	push	{r4, r7, lr}
 8006f9a:	b089      	sub	sp, #36	; 0x24
 8006f9c:	af04      	add	r7, sp, #16
 8006f9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	2102      	movs	r1, #2
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fc66 	bl	8007878 <USBH_FindInterface>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2bff      	cmp	r3, #255	; 0xff
 8006fb4:	d002      	beq.n	8006fbc <USBH_CDC_InterfaceInit+0x24>
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d901      	bls.n	8006fc0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e13d      	b.n	800723c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fc3b 	bl	8007840 <USBH_SelectInterface>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e131      	b.n	800723c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006fde:	2050      	movs	r0, #80	; 0x50
 8006fe0:	f002 fafa 	bl	80095d8 <malloc>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e11f      	b.n	800723c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ffc:	2250      	movs	r2, #80	; 0x50
 8006ffe:	2100      	movs	r1, #0
 8007000:	68b8      	ldr	r0, [r7, #8]
 8007002:	f002 faf9 	bl	80095f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	211a      	movs	r1, #26
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b25b      	sxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	da15      	bge.n	800704a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	211a      	movs	r1, #26
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	211a      	movs	r1, #26
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007044:	881a      	ldrh	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 ff2c 	bl	8008eae <USBH_AllocPipe>
 8007056:	4603      	mov	r3, r0
 8007058:	461a      	mov	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	7819      	ldrb	r1, [r3, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	7858      	ldrb	r0, [r3, #1]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	8952      	ldrh	r2, [r2, #10]
 8007076:	9202      	str	r2, [sp, #8]
 8007078:	2203      	movs	r2, #3
 800707a:	9201      	str	r2, [sp, #4]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	4623      	mov	r3, r4
 8007080:	4602      	mov	r2, r0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fee4 	bl	8008e50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f002 f9f3 	bl	800947c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007096:	2300      	movs	r3, #0
 8007098:	2200      	movs	r2, #0
 800709a:	210a      	movs	r1, #10
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fbeb 	bl	8007878 <USBH_FindInterface>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2bff      	cmp	r3, #255	; 0xff
 80070aa:	d002      	beq.n	80070b2 <USBH_CDC_InterfaceInit+0x11a>
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d901      	bls.n	80070b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0c2      	b.n	800723c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	211a      	movs	r1, #26
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	b25b      	sxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da16      	bge.n	80070fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	211a      	movs	r1, #26
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	4413      	add	r3, r2
 80070da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	211a      	movs	r1, #26
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	835a      	strh	r2, [r3, #26]
 80070fa:	e015      	b.n	8007128 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	211a      	movs	r1, #26
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	4413      	add	r3, r2
 8007108:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	211a      	movs	r1, #26
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	4413      	add	r3, r2
 800711e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007122:	881a      	ldrh	r2, [r3, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	211a      	movs	r1, #26
 800712e:	fb01 f303 	mul.w	r3, r1, r3
 8007132:	4413      	add	r3, r2
 8007134:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	b25b      	sxtb	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	da16      	bge.n	800716e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	211a      	movs	r1, #26
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	4413      	add	r3, r2
 800714c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	211a      	movs	r1, #26
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007166:	881a      	ldrh	r2, [r3, #0]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	835a      	strh	r2, [r3, #26]
 800716c:	e015      	b.n	800719a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	211a      	movs	r1, #26
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	4413      	add	r3, r2
 800717a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	211a      	movs	r1, #26
 800718a:	fb01 f303 	mul.w	r3, r1, r3
 800718e:	4413      	add	r3, r2
 8007190:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007194:	881a      	ldrh	r2, [r3, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	7b9b      	ldrb	r3, [r3, #14]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fe84 	bl	8008eae <USBH_AllocPipe>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	7bdb      	ldrb	r3, [r3, #15]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fe7a 	bl	8008eae <USBH_AllocPipe>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	7b59      	ldrb	r1, [r3, #13]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	7b98      	ldrb	r0, [r3, #14]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	8b12      	ldrh	r2, [r2, #24]
 80071da:	9202      	str	r2, [sp, #8]
 80071dc:	2202      	movs	r2, #2
 80071de:	9201      	str	r2, [sp, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4623      	mov	r3, r4
 80071e4:	4602      	mov	r2, r0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fe32 	bl	8008e50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	7b19      	ldrb	r1, [r3, #12]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	7bd8      	ldrb	r0, [r3, #15]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	8b52      	ldrh	r2, [r2, #26]
 8007204:	9202      	str	r2, [sp, #8]
 8007206:	2202      	movs	r2, #2
 8007208:	9201      	str	r2, [sp, #4]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4623      	mov	r3, r4
 800720e:	4602      	mov	r2, r0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 fe1d 	bl	8008e50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	7b5b      	ldrb	r3, [r3, #13]
 8007222:	2200      	movs	r2, #0
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f002 f928 	bl	800947c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	7b1b      	ldrb	r3, [r3, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f002 f921 	bl	800947c <USBH_LL_SetToggle>

  return USBH_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	bd90      	pop	{r4, r7, pc}

08007244 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 fe12 	bl	8008e8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fe3d 	bl	8008ef0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	7b1b      	ldrb	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00e      	beq.n	80072a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	7b1b      	ldrb	r3, [r3, #12]
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fdff 	bl	8008e8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	7b1b      	ldrb	r3, [r3, #12]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 fe2a 	bl	8008ef0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	7b5b      	ldrb	r3, [r3, #13]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00e      	beq.n	80072c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	7b5b      	ldrb	r3, [r3, #13]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fdec 	bl	8008e8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	7b5b      	ldrb	r3, [r3, #13]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fe17 	bl	8008ef0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	4618      	mov	r0, r3
 80072de:	f002 f983 	bl	80095e8 <free>
    phost->pActiveClass->pData = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e8:	2200      	movs	r2, #0
 80072ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3340      	adds	r3, #64	; 0x40
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8b1 	bl	8007476 <GetLineCoding>
 8007314:	4603      	mov	r3, r0
 8007316:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007324:	2102      	movs	r1, #2
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800732a:	7afb      	ldrb	r3, [r7, #11]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007354:	2b04      	cmp	r3, #4
 8007356:	d877      	bhi.n	8007448 <USBH_CDC_Process+0x114>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <USBH_CDC_Process+0x2c>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007375 	.word	0x08007375
 8007364:	0800737b 	.word	0x0800737b
 8007368:	080073ab 	.word	0x080073ab
 800736c:	0800741f 	.word	0x0800741f
 8007370:	0800742d 	.word	0x0800742d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
      break;
 8007378:	e06d      	b.n	8007456 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f897 	bl	80074b4 <SetLineCoding>
 8007386:	4603      	mov	r3, r0
 8007388:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007398:	e058      	b.n	800744c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d055      	beq.n	800744c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2204      	movs	r2, #4
 80073a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80073a8:	e050      	b.n	800744c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3340      	adds	r3, #64	; 0x40
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f860 	bl	8007476 <GetLineCoding>
 80073b6:	4603      	mov	r3, r0
 80073b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d126      	bne.n	800740e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d2:	791b      	ldrb	r3, [r3, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d13b      	bne.n	8007450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d133      	bne.n	8007450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d12b      	bne.n	8007450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007400:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007402:	429a      	cmp	r2, r3
 8007404:	d124      	bne.n	8007450 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f958 	bl	80076bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800740c:	e020      	b.n	8007450 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d01d      	beq.n	8007450 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2204      	movs	r2, #4
 8007418:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800741c:	e018      	b.n	8007450 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f867 	bl	80074f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8da 	bl	80075de <CDC_ProcessReception>
      break;
 800742a:	e014      	b.n	8007456 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800742c:	2100      	movs	r1, #0
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 ffef 	bl	8008412 <USBH_ClrFeature>
 8007434:	4603      	mov	r3, r0
 8007436:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007446:	e005      	b.n	8007454 <USBH_CDC_Process+0x120>

    default:
      break;
 8007448:	bf00      	nop
 800744a:	e004      	b.n	8007456 <USBH_CDC_Process+0x122>
      break;
 800744c:	bf00      	nop
 800744e:	e002      	b.n	8007456 <USBH_CDC_Process+0x122>
      break;
 8007450:	bf00      	nop
 8007452:	e000      	b.n	8007456 <USBH_CDC_Process+0x122>
      break;
 8007454:	bf00      	nop

  }

  return status;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	22a1      	movs	r2, #161	; 0xa1
 8007484:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2221      	movs	r2, #33	; 0x21
 800748a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2207      	movs	r2, #7
 800749c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2207      	movs	r2, #7
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 fa81 	bl	80089ac <USBH_CtlReq>
 80074aa:	4603      	mov	r3, r0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2221      	movs	r2, #33	; 0x21
 80074c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2207      	movs	r2, #7
 80074da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2207      	movs	r2, #7
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fa62 	bl	80089ac <USBH_CtlReq>
 80074e8:	4603      	mov	r3, r0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af02      	add	r7, sp, #8
 80074f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007504:	2300      	movs	r3, #0
 8007506:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800750e:	2b01      	cmp	r3, #1
 8007510:	d002      	beq.n	8007518 <CDC_ProcessTransmission+0x26>
 8007512:	2b02      	cmp	r3, #2
 8007514:	d023      	beq.n	800755e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007516:	e05e      	b.n	80075d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	8b12      	ldrh	r2, [r2, #24]
 8007520:	4293      	cmp	r3, r2
 8007522:	d90b      	bls.n	800753c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	69d9      	ldr	r1, [r3, #28]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8b1a      	ldrh	r2, [r3, #24]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	7b5b      	ldrb	r3, [r3, #13]
 8007530:	2001      	movs	r0, #1
 8007532:	9000      	str	r0, [sp, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 fc48 	bl	8008dca <USBH_BulkSendData>
 800753a:	e00b      	b.n	8007554 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	7b5b      	ldrb	r3, [r3, #13]
 800754a:	2001      	movs	r0, #1
 800754c:	9000      	str	r0, [sp, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fc3b 	bl	8008dca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800755c:	e03b      	b.n	80075d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	7b5b      	ldrb	r3, [r3, #13]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 ff5f 	bl	8009428 <USBH_LL_GetURBState>
 800756a:	4603      	mov	r3, r0
 800756c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d128      	bne.n	80075c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	8b12      	ldrh	r2, [r2, #24]
 800757c:	4293      	cmp	r3, r2
 800757e:	d90e      	bls.n	800759e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	8b12      	ldrh	r2, [r2, #24]
 8007588:	1a9a      	subs	r2, r3, r2
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	8b12      	ldrh	r2, [r2, #24]
 8007596:	441a      	add	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	61da      	str	r2, [r3, #28]
 800759c:	e002      	b.n	80075a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075b4:	e00e      	b.n	80075d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f868 	bl	8007694 <USBH_CDC_TransmitCallback>
      break;
 80075c4:	e006      	b.n	80075d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80075c6:	7afb      	ldrb	r3, [r7, #11]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d103      	bne.n	80075d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075d4:	bf00      	nop
  }
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d002      	beq.n	8007604 <CDC_ProcessReception+0x26>
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d00e      	beq.n	8007620 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007602:	e043      	b.n	800768c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6a19      	ldr	r1, [r3, #32]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	8b5a      	ldrh	r2, [r3, #26]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	7b1b      	ldrb	r3, [r3, #12]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fbff 	bl	8008e14 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2204      	movs	r2, #4
 800761a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800761e:	e035      	b.n	800768c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	7b1b      	ldrb	r3, [r3, #12]
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fefe 	bl	8009428 <USBH_LL_GetURBState>
 800762c:	4603      	mov	r3, r0
 800762e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007630:	7cfb      	ldrb	r3, [r7, #19]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d129      	bne.n	800768a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	7b1b      	ldrb	r3, [r3, #12]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fe61 	bl	8009304 <USBH_LL_GetLastXferSize>
 8007642:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	429a      	cmp	r2, r3
 800764c:	d016      	beq.n	800767c <CDC_ProcessReception+0x9e>
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	8b5b      	ldrh	r3, [r3, #26]
 8007652:	461a      	mov	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4293      	cmp	r3, r2
 8007658:	d910      	bls.n	800767c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	6a1a      	ldr	r2, [r3, #32]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	441a      	add	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2203      	movs	r2, #3
 8007676:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800767a:	e006      	b.n	800768a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f80f 	bl	80076a8 <USBH_CDC_ReceiveCallback>
      break;
 800768a:	bf00      	nop
  }
}
 800768c:	bf00      	nop
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80076e4:	2302      	movs	r3, #2
 80076e6:	e029      	b.n	800773c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	79fa      	ldrb	r2, [r7, #7]
 80076ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f81f 	bl	8007744 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f001 fd31 	bl	800919c <USBH_LL_Init>

  return USBH_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e009      	b.n	800776a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	33e0      	adds	r3, #224	; 0xe0
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	2200      	movs	r2, #0
 8007762:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b0f      	cmp	r3, #15
 800776e:	d9f2      	bls.n	8007756 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e009      	b.n	800778a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3301      	adds	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007790:	d3f1      	bcc.n	8007776 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2240      	movs	r2, #64	; 0x40
 80077b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d016      	beq.n	800782e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10e      	bne.n	8007828 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007810:	1c59      	adds	r1, r3, #1
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	33de      	adds	r3, #222	; 0xde
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
 8007826:	e004      	b.n	8007832 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007828:	2302      	movs	r3, #2
 800782a:	73fb      	strb	r3, [r7, #15]
 800782c:	e001      	b.n	8007832 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800782e:	2302      	movs	r3, #2
 8007830:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	429a      	cmp	r2, r3
 800785a:	d204      	bcs.n	8007866 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007864:	e001      	b.n	800786a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007866:	2302      	movs	r3, #2
 8007868:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	4608      	mov	r0, r1
 8007882:	4611      	mov	r1, r2
 8007884:	461a      	mov	r2, r3
 8007886:	4603      	mov	r3, r0
 8007888:	70fb      	strb	r3, [r7, #3]
 800788a:	460b      	mov	r3, r1
 800788c:	70bb      	strb	r3, [r7, #2]
 800788e:	4613      	mov	r3, r2
 8007890:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078a0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078a2:	e025      	b.n	80078f0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	221a      	movs	r2, #26
 80078a8:	fb02 f303 	mul.w	r3, r2, r3
 80078ac:	3308      	adds	r3, #8
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	3302      	adds	r3, #2
 80078b4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	795b      	ldrb	r3, [r3, #5]
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d002      	beq.n	80078c6 <USBH_FindInterface+0x4e>
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	2bff      	cmp	r3, #255	; 0xff
 80078c4:	d111      	bne.n	80078ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078ca:	78ba      	ldrb	r2, [r7, #2]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d002      	beq.n	80078d6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078d0:	78bb      	ldrb	r3, [r7, #2]
 80078d2:	2bff      	cmp	r3, #255	; 0xff
 80078d4:	d109      	bne.n	80078ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078da:	787a      	ldrb	r2, [r7, #1]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d002      	beq.n	80078e6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078e0:	787b      	ldrb	r3, [r7, #1]
 80078e2:	2bff      	cmp	r3, #255	; 0xff
 80078e4:	d101      	bne.n	80078ea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	e006      	b.n	80078f8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	3301      	adds	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d9d6      	bls.n	80078a4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80078f6:	23ff      	movs	r3, #255	; 0xff
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	371c      	adds	r7, #28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fc81 	bl	8009214 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007912:	2101      	movs	r1, #1
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 fd9a 	bl	800944e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af04      	add	r7, sp, #16
 800792a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800792c:	2302      	movs	r3, #2
 800792e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b01      	cmp	r3, #1
 800793e:	d102      	bne.n	8007946 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2203      	movs	r2, #3
 8007944:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b0b      	cmp	r3, #11
 800794e:	f200 81be 	bhi.w	8007cce <USBH_Process+0x3aa>
 8007952:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <USBH_Process+0x34>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	08007989 	.word	0x08007989
 800795c:	080079bb 	.word	0x080079bb
 8007960:	08007a23 	.word	0x08007a23
 8007964:	08007c69 	.word	0x08007c69
 8007968:	08007ccf 	.word	0x08007ccf
 800796c:	08007ac7 	.word	0x08007ac7
 8007970:	08007c0f 	.word	0x08007c0f
 8007974:	08007afd 	.word	0x08007afd
 8007978:	08007b1d 	.word	0x08007b1d
 800797c:	08007b3d 	.word	0x08007b3d
 8007980:	08007b81 	.word	0x08007b81
 8007984:	08007c51 	.word	0x08007c51
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 819e 	beq.w	8007cd2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800799c:	20c8      	movs	r0, #200	; 0xc8
 800799e:	f001 fd9d 	bl	80094dc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fc93 	bl	80092ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079b8:	e18b      	b.n	8007cd2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d107      	bne.n	80079d4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079d2:	e18d      	b.n	8007cf0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079de:	d914      	bls.n	8007a0a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80079e6:	3301      	adds	r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d903      	bls.n	8007a02 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	220d      	movs	r2, #13
 80079fe:	701a      	strb	r2, [r3, #0]
      break;
 8007a00:	e176      	b.n	8007cf0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	701a      	strb	r2, [r3, #0]
      break;
 8007a08:	e172      	b.n	8007cf0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a10:	f103 020a 	add.w	r2, r3, #10
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007a1a:	200a      	movs	r0, #10
 8007a1c:	f001 fd5e 	bl	80094dc <USBH_Delay>
      break;
 8007a20:	e166      	b.n	8007cf0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a32:	2104      	movs	r1, #4
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007a38:	2064      	movs	r0, #100	; 0x64
 8007a3a:	f001 fd4f 	bl	80094dc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 fc1e 	bl	8009280 <USBH_LL_GetSpeed>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2205      	movs	r2, #5
 8007a52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007a54:	2100      	movs	r1, #0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 fa29 	bl	8008eae <USBH_AllocPipe>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007a64:	2180      	movs	r1, #128	; 0x80
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fa21 	bl	8008eae <USBH_AllocPipe>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7919      	ldrb	r1, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a88:	b292      	uxth	r2, r2
 8007a8a:	9202      	str	r2, [sp, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	9201      	str	r2, [sp, #4]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4603      	mov	r3, r0
 8007a94:	2280      	movs	r2, #128	; 0x80
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f9da 	bl	8008e50 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7959      	ldrb	r1, [r3, #5]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ab0:	b292      	uxth	r2, r2
 8007ab2:	9202      	str	r2, [sp, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	9201      	str	r2, [sp, #4]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4603      	mov	r3, r0
 8007abc:	2200      	movs	r2, #0
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 f9c6 	bl	8008e50 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ac4:	e114      	b.n	8007cf0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f918 	bl	8007cfc <USBH_HandleEnum>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 80fe 	bne.w	8007cd6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d103      	bne.n	8007af4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2208      	movs	r2, #8
 8007af0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007af2:	e0f0      	b.n	8007cd6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2207      	movs	r2, #7
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e0ec      	b.n	8007cd6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80e9 	beq.w	8007cda <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b0e:	2101      	movs	r1, #1
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2208      	movs	r2, #8
 8007b18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007b1a:	e0de      	b.n	8007cda <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc2c 	bl	8008384 <USBH_SetCfg>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 80d5 	bne.w	8007cde <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2209      	movs	r2, #9
 8007b38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b3a:	e0d0      	b.n	8007cde <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc3c 	bl	80083ca <USBH_SetFeature>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d103      	bne.n	8007b66 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	220a      	movs	r2, #10
 8007b62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b64:	e0bd      	b.n	8007ce2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	f040 80b9 	bne.w	8007ce2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	220a      	movs	r2, #10
 8007b74:	701a      	strb	r2, [r3, #0]
      break;
 8007b76:	e0b4      	b.n	8007ce2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e0b0      	b.n	8007ce2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 80ad 	beq.w	8007ce6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	e016      	b.n	8007bc8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b9a:	7bfa      	ldrb	r2, [r7, #15]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	32de      	adds	r2, #222	; 0xde
 8007ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba4:	791a      	ldrb	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d108      	bne.n	8007bc2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007bb0:	7bfa      	ldrb	r2, [r7, #15]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	32de      	adds	r2, #222	; 0xde
 8007bb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007bc0:	e005      	b.n	8007bce <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	73fb      	strb	r3, [r7, #15]
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0e5      	beq.n	8007b9a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d016      	beq.n	8007c06 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d109      	bne.n	8007bfe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2206      	movs	r2, #6
 8007bee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bf6:	2103      	movs	r1, #3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bfc:	e073      	b.n	8007ce6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	220d      	movs	r2, #13
 8007c02:	701a      	strb	r2, [r3, #0]
      break;
 8007c04:	e06f      	b.n	8007ce6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	220d      	movs	r2, #13
 8007c0a:	701a      	strb	r2, [r3, #0]
      break;
 8007c0c:	e06b      	b.n	8007ce6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d017      	beq.n	8007c48 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
 8007c24:	4603      	mov	r3, r0
 8007c26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	220b      	movs	r2, #11
 8007c34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c36:	e058      	b.n	8007cea <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d154      	bne.n	8007cea <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	220d      	movs	r2, #13
 8007c44:	701a      	strb	r2, [r3, #0]
      break;
 8007c46:	e050      	b.n	8007cea <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	220d      	movs	r2, #13
 8007c4c:	701a      	strb	r2, [r3, #0]
      break;
 8007c4e:	e04c      	b.n	8007cea <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d049      	beq.n	8007cee <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
      }
      break;
 8007c66:	e042      	b.n	8007cee <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fd67 	bl	8007744 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d009      	beq.n	8007c94 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ca4:	2105      	movs	r1, #5
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff fe20 	bl	8007904 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cc4:	e014      	b.n	8007cf0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 faa4 	bl	8009214 <USBH_LL_Start>
      break;
 8007ccc:	e010      	b.n	8007cf0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007cce:	bf00      	nop
 8007cd0:	e00e      	b.n	8007cf0 <USBH_Process+0x3cc>
      break;
 8007cd2:	bf00      	nop
 8007cd4:	e00c      	b.n	8007cf0 <USBH_Process+0x3cc>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e00a      	b.n	8007cf0 <USBH_Process+0x3cc>
    break;
 8007cda:	bf00      	nop
 8007cdc:	e008      	b.n	8007cf0 <USBH_Process+0x3cc>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e006      	b.n	8007cf0 <USBH_Process+0x3cc>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e004      	b.n	8007cf0 <USBH_Process+0x3cc>
      break;
 8007ce6:	bf00      	nop
 8007ce8:	e002      	b.n	8007cf0 <USBH_Process+0x3cc>
      break;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <USBH_Process+0x3cc>
      break;
 8007cee:	bf00      	nop
  }
  return USBH_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop

08007cfc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af04      	add	r7, sp, #16
 8007d02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	2b07      	cmp	r3, #7
 8007d12:	f200 81c1 	bhi.w	8008098 <USBH_HandleEnum+0x39c>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <USBH_HandleEnum+0x20>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d3d 	.word	0x08007d3d
 8007d20:	08007dfb 	.word	0x08007dfb
 8007d24:	08007e65 	.word	0x08007e65
 8007d28:	08007ef3 	.word	0x08007ef3
 8007d2c:	08007f5d 	.word	0x08007f5d
 8007d30:	08007fcd 	.word	0x08007fcd
 8007d34:	08008013 	.word	0x08008013
 8007d38:	08008059 	.word	0x08008059
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007d3c:	2108      	movs	r1, #8
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa50 	bl	80081e4 <USBH_Get_DevDesc>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d130      	bne.n	8007db0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	7919      	ldrb	r1, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d72:	b292      	uxth	r2, r2
 8007d74:	9202      	str	r2, [sp, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	9201      	str	r2, [sp, #4]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2280      	movs	r2, #128	; 0x80
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 f865 	bl	8008e50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	7959      	ldrb	r1, [r3, #5]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	9202      	str	r2, [sp, #8]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	9201      	str	r2, [sp, #4]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	4603      	mov	r3, r0
 8007da6:	2200      	movs	r2, #0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f851 	bl	8008e50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dae:	e175      	b.n	800809c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	f040 8172 	bne.w	800809c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d903      	bls.n	8007dda <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	220d      	movs	r2, #13
 8007dd6:	701a      	strb	r2, [r3, #0]
      break;
 8007dd8:	e160      	b.n	800809c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	795b      	ldrb	r3, [r3, #5]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f885 	bl	8008ef0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	791b      	ldrb	r3, [r3, #4]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 f87f 	bl	8008ef0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
      break;
 8007df8:	e150      	b.n	800809c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007dfa:	2112      	movs	r1, #18
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9f1 	bl	80081e4 <USBH_Get_DevDesc>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e12:	e145      	b.n	80080a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	f040 8142 	bne.w	80080a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e22:	3301      	adds	r3, #1
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d903      	bls.n	8007e3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	220d      	movs	r2, #13
 8007e3a:	701a      	strb	r2, [r3, #0]
      break;
 8007e3c:	e130      	b.n	80080a0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	795b      	ldrb	r3, [r3, #5]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f853 	bl	8008ef0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f84d 	bl	8008ef0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
      break;
 8007e62:	e11d      	b.n	80080a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007e64:	2101      	movs	r1, #1
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa68 	bl	800833c <USBH_SetAddress>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d132      	bne.n	8007edc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007e76:	2002      	movs	r0, #2
 8007e78:	f001 fb30 	bl	80094dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2203      	movs	r2, #3
 8007e88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7919      	ldrb	r1, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	9202      	str	r2, [sp, #8]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	9201      	str	r2, [sp, #4]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2280      	movs	r2, #128	; 0x80
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 ffcf 	bl	8008e50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7959      	ldrb	r1, [r3, #5]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ec6:	b292      	uxth	r2, r2
 8007ec8:	9202      	str	r2, [sp, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	9201      	str	r2, [sp, #4]
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 ffbb 	bl	8008e50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007eda:	e0e3      	b.n	80080a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	f040 80e0 	bne.w	80080a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	220d      	movs	r2, #13
 8007ee8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	705a      	strb	r2, [r3, #1]
      break;
 8007ef0:	e0d8      	b.n	80080a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ef2:	2109      	movs	r1, #9
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f99d 	bl	8008234 <USBH_Get_CfgDesc>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d103      	bne.n	8007f0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2204      	movs	r2, #4
 8007f08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f0a:	e0cd      	b.n	80080a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	f040 80ca 	bne.w	80080a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d903      	bls.n	8007f36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220d      	movs	r2, #13
 8007f32:	701a      	strb	r2, [r3, #0]
      break;
 8007f34:	e0b8      	b.n	80080a8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	795b      	ldrb	r3, [r3, #5]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 ffd7 	bl	8008ef0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	791b      	ldrb	r3, [r3, #4]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 ffd1 	bl	8008ef0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0a5      	b.n	80080a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f965 	bl	8008234 <USBH_Get_CfgDesc>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2205      	movs	r2, #5
 8007f78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f7a:	e097      	b.n	80080ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	f040 8094 	bne.w	80080ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d903      	bls.n	8007fa6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	220d      	movs	r2, #13
 8007fa2:	701a      	strb	r2, [r3, #0]
      break;
 8007fa4:	e082      	b.n	80080ac <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	795b      	ldrb	r3, [r3, #5]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 ff9f 	bl	8008ef0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	791b      	ldrb	r3, [r3, #4]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 ff99 	bl	8008ef0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
      break;
 8007fca:	e06f      	b.n	80080ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d019      	beq.n	800800a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fe2:	23ff      	movs	r3, #255	; 0xff
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f949 	bl	800827c <USBH_Get_StringDesc>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2206      	movs	r2, #6
 8007ff8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ffa:	e059      	b.n	80080b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d156      	bne.n	80080b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2206      	movs	r2, #6
 8008006:	705a      	strb	r2, [r3, #1]
      break;
 8008008:	e052      	b.n	80080b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2206      	movs	r2, #6
 800800e:	705a      	strb	r2, [r3, #1]
      break;
 8008010:	e04e      	b.n	80080b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008018:	2b00      	cmp	r3, #0
 800801a:	d019      	beq.n	8008050 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008028:	23ff      	movs	r3, #255	; 0xff
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f926 	bl	800827c <USBH_Get_StringDesc>
 8008030:	4603      	mov	r3, r0
 8008032:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2207      	movs	r2, #7
 800803e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008040:	e038      	b.n	80080b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	2b03      	cmp	r3, #3
 8008046:	d135      	bne.n	80080b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2207      	movs	r2, #7
 800804c:	705a      	strb	r2, [r3, #1]
      break;
 800804e:	e031      	b.n	80080b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2207      	movs	r2, #7
 8008054:	705a      	strb	r2, [r3, #1]
      break;
 8008056:	e02d      	b.n	80080b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800805e:	2b00      	cmp	r3, #0
 8008060:	d017      	beq.n	8008092 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800806e:	23ff      	movs	r3, #255	; 0xff
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f903 	bl	800827c <USBH_Get_StringDesc>
 8008076:	4603      	mov	r3, r0
 8008078:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008084:	e018      	b.n	80080b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b03      	cmp	r3, #3
 800808a:	d115      	bne.n	80080b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
      break;
 8008090:	e012      	b.n	80080b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]
      break;
 8008096:	e00f      	b.n	80080b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008098:	bf00      	nop
 800809a:	e00e      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 800809c:	bf00      	nop
 800809e:	e00c      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 80080a0:	bf00      	nop
 80080a2:	e00a      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 80080a4:	bf00      	nop
 80080a6:	e008      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 80080a8:	bf00      	nop
 80080aa:	e006      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 80080ac:	bf00      	nop
 80080ae:	e004      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <USBH_HandleEnum+0x3be>
      break;
 80080b8:	bf00      	nop
  }
  return Status;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f804 	bl	8008106 <USBH_HandleSof>
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b0b      	cmp	r3, #11
 8008116:	d10a      	bne.n	800812e <USBH_HandleSof+0x28>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
  }
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008146:	bf00      	nop
}
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008162:	bf00      	nop
}
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f844 	bl	800924a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fe91 	bl	8008ef0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	795b      	ldrb	r3, [r3, #5]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fe8b 	bl	8008ef0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4613      	mov	r3, r2
 80081fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f864 	bl	80082d2 <USBH_GetDescriptor>
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10a      	bne.n	800822a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f203 3026 	addw	r0, r3, #806	; 0x326
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	b292      	uxth	r2, r2
 8008224:	4619      	mov	r1, r3
 8008226:	f000 f918 	bl	800845a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af02      	add	r7, sp, #8
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	331c      	adds	r3, #28
 8008244:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008246:	887b      	ldrh	r3, [r7, #2]
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008250:	2100      	movs	r1, #0
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f83d 	bl	80082d2 <USBH_GetDescriptor>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d107      	bne.n	8008272 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008262:	887b      	ldrh	r3, [r7, #2]
 8008264:	461a      	mov	r2, r3
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f987 	bl	800857c <USBH_ParseCfgDesc>
 800826e:	4603      	mov	r3, r0
 8008270:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b088      	sub	sp, #32
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	461a      	mov	r2, r3
 8008288:	460b      	mov	r3, r1
 800828a:	72fb      	strb	r3, [r7, #11]
 800828c:	4613      	mov	r3, r2
 800828e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008298:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80082a0:	893b      	ldrh	r3, [r7, #8]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	460b      	mov	r3, r1
 80082a6:	2100      	movs	r1, #0
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f812 	bl	80082d2 <USBH_GetDescriptor>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d107      	bne.n	80082c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082be:	893a      	ldrh	r2, [r7, #8]
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fb24 	bl	8008910 <USBH_ParseStringDesc>
  }

  return status;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	72fb      	strb	r3, [r7, #11]
 80082e0:	4613      	mov	r3, r2
 80082e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	789b      	ldrb	r3, [r3, #2]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d11c      	bne.n	8008326 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2206      	movs	r2, #6
 80082fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	893a      	ldrh	r2, [r7, #8]
 8008302:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008304:	893b      	ldrh	r3, [r7, #8]
 8008306:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800830a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800830e:	d104      	bne.n	800831a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f240 4209 	movw	r2, #1033	; 0x409
 8008316:	829a      	strh	r2, [r3, #20]
 8008318:	e002      	b.n	8008320 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8b3a      	ldrh	r2, [r7, #24]
 8008324:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008326:	8b3b      	ldrh	r3, [r7, #24]
 8008328:	461a      	mov	r2, r3
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fb3d 	bl	80089ac <USBH_CtlReq>
 8008332:	4603      	mov	r3, r0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	789b      	ldrb	r3, [r3, #2]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d10f      	bne.n	8008370 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2205      	movs	r2, #5
 800835a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008370:	2200      	movs	r2, #0
 8008372:	2100      	movs	r1, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fb19 	bl	80089ac <USBH_CtlReq>
 800837a:	4603      	mov	r3, r0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	789b      	ldrb	r3, [r3, #2]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10e      	bne.n	80083b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2209      	movs	r2, #9
 80083a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	887a      	ldrh	r2, [r7, #2]
 80083a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083b6:	2200      	movs	r2, #0
 80083b8:	2100      	movs	r1, #0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 faf6 	bl	80089ac <USBH_CtlReq>
 80083c0:	4603      	mov	r3, r0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	789b      	ldrb	r3, [r3, #2]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d10f      	bne.n	80083fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2203      	movs	r2, #3
 80083e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083fe:	2200      	movs	r2, #0
 8008400:	2100      	movs	r1, #0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fad2 	bl	80089ac <USBH_CtlReq>
 8008408:	4603      	mov	r3, r0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	789b      	ldrb	r3, [r3, #2]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d10f      	bne.n	8008446 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2202      	movs	r2, #2
 800842a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	b29a      	uxth	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 faae 	bl	80089ac <USBH_CtlReq>
 8008450:	4603      	mov	r3, r0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	4613      	mov	r3, r2
 8008466:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	785a      	ldrb	r2, [r3, #1]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	3302      	adds	r3, #2
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b29a      	uxth	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	3303      	adds	r3, #3
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	b29b      	uxth	r3, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	b29a      	uxth	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	791a      	ldrb	r2, [r3, #4]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	795a      	ldrb	r2, [r3, #5]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	799a      	ldrb	r2, [r3, #6]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	79da      	ldrb	r2, [r3, #7]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	79db      	ldrb	r3, [r3, #7]
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	dc11      	bgt.n	80084e0 <USBH_ParseDevDesc+0x86>
 80084bc:	2b08      	cmp	r3, #8
 80084be:	db16      	blt.n	80084ee <USBH_ParseDevDesc+0x94>
 80084c0:	3b08      	subs	r3, #8
 80084c2:	2201      	movs	r2, #1
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80084cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	bf14      	ite	ne
 80084d4:	2301      	movne	r3, #1
 80084d6:	2300      	moveq	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <USBH_ParseDevDesc+0x8a>
 80084de:	e006      	b.n	80084ee <USBH_ParseDevDesc+0x94>
 80084e0:	2b40      	cmp	r3, #64	; 0x40
 80084e2:	d104      	bne.n	80084ee <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	79da      	ldrb	r2, [r3, #7]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	71da      	strb	r2, [r3, #7]
      break;
 80084ec:	e003      	b.n	80084f6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2240      	movs	r2, #64	; 0x40
 80084f2:	71da      	strb	r2, [r3, #7]
      break;
 80084f4:	bf00      	nop
  }

  if (length > 8U)
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d939      	bls.n	8008570 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3308      	adds	r3, #8
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b29a      	uxth	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3309      	adds	r3, #9
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	b29b      	uxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	330a      	adds	r3, #10
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	b29a      	uxth	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	330b      	adds	r3, #11
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	b29b      	uxth	r3, r3
 800852c:	4313      	orrs	r3, r2
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	330c      	adds	r3, #12
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	b29a      	uxth	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	330d      	adds	r3, #13
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b29b      	uxth	r3, r3
 8008548:	4313      	orrs	r3, r2
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	7b9a      	ldrb	r2, [r3, #14]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	7bda      	ldrb	r2, [r3, #15]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	7c1a      	ldrb	r2, [r3, #16]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	7c5a      	ldrb	r2, [r3, #17]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	745a      	strb	r2, [r3, #17]
  }
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08c      	sub	sp, #48	; 0x30
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008590:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	785a      	ldrb	r2, [r3, #1]
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	3302      	adds	r3, #2
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3303      	adds	r3, #3
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	4313      	orrs	r3, r2
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d8:	bf28      	it	cs
 80085da:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80085de:	b29a      	uxth	r2, r3
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	791a      	ldrb	r2, [r3, #4]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	795a      	ldrb	r2, [r3, #5]
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	799a      	ldrb	r2, [r3, #6]
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	79da      	ldrb	r2, [r3, #7]
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	7a1a      	ldrb	r2, [r3, #8]
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b09      	cmp	r3, #9
 8008612:	d002      	beq.n	800861a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	2209      	movs	r2, #9
 8008618:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	2b09      	cmp	r3, #9
 800861e:	f240 809d 	bls.w	800875c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008622:	2309      	movs	r3, #9
 8008624:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800862a:	e081      	b.n	8008730 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800862c:	f107 0316 	add.w	r3, r7, #22
 8008630:	4619      	mov	r1, r3
 8008632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008634:	f000 f99f 	bl	8008976 <USBH_GetNextDesc>
 8008638:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	2b04      	cmp	r3, #4
 8008640:	d176      	bne.n	8008730 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b09      	cmp	r3, #9
 8008648:	d002      	beq.n	8008650 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	2209      	movs	r2, #9
 800864e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008654:	221a      	movs	r2, #26
 8008656:	fb02 f303 	mul.w	r3, r2, r3
 800865a:	3308      	adds	r3, #8
 800865c:	6a3a      	ldr	r2, [r7, #32]
 800865e:	4413      	add	r3, r2
 8008660:	3302      	adds	r3, #2
 8008662:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008666:	69f8      	ldr	r0, [r7, #28]
 8008668:	f000 f87e 	bl	8008768 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008676:	e043      	b.n	8008700 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008678:	f107 0316 	add.w	r3, r7, #22
 800867c:	4619      	mov	r1, r3
 800867e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008680:	f000 f979 	bl	8008976 <USBH_GetNextDesc>
 8008684:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	2b05      	cmp	r3, #5
 800868c:	d138      	bne.n	8008700 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	795b      	ldrb	r3, [r3, #5]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d10f      	bne.n	80086b6 <USBH_ParseCfgDesc+0x13a>
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	799b      	ldrb	r3, [r3, #6]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d10b      	bne.n	80086b6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	79db      	ldrb	r3, [r3, #7]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10f      	bne.n	80086c6 <USBH_ParseCfgDesc+0x14a>
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b09      	cmp	r3, #9
 80086ac:	d00b      	beq.n	80086c6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	2209      	movs	r2, #9
 80086b2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086b4:	e007      	b.n	80086c6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b07      	cmp	r3, #7
 80086bc:	d004      	beq.n	80086c8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	2207      	movs	r2, #7
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	e000      	b.n	80086c8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086c6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80086c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80086d0:	3201      	adds	r2, #1
 80086d2:	00d2      	lsls	r2, r2, #3
 80086d4:	211a      	movs	r1, #26
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	4413      	add	r3, r2
 80086dc:	3308      	adds	r3, #8
 80086de:	6a3a      	ldr	r2, [r7, #32]
 80086e0:	4413      	add	r3, r2
 80086e2:	3304      	adds	r3, #4
 80086e4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80086e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086e8:	69b9      	ldr	r1, [r7, #24]
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 f86b 	bl	80087c6 <USBH_ParseEPDesc>
 80086f0:	4603      	mov	r3, r0
 80086f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80086f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086fa:	3301      	adds	r3, #1
 80086fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	791b      	ldrb	r3, [r3, #4]
 8008704:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008708:	429a      	cmp	r2, r3
 800870a:	d204      	bcs.n	8008716 <USBH_ParseCfgDesc+0x19a>
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	885a      	ldrh	r2, [r3, #2]
 8008710:	8afb      	ldrh	r3, [r7, #22]
 8008712:	429a      	cmp	r2, r3
 8008714:	d8b0      	bhi.n	8008678 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800871e:	429a      	cmp	r2, r3
 8008720:	d201      	bcs.n	8008726 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008722:	2303      	movs	r3, #3
 8008724:	e01c      	b.n	8008760 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800872a:	3301      	adds	r3, #1
 800872c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008734:	2b01      	cmp	r3, #1
 8008736:	d805      	bhi.n	8008744 <USBH_ParseCfgDesc+0x1c8>
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	885a      	ldrh	r2, [r3, #2]
 800873c:	8afb      	ldrh	r3, [r7, #22]
 800873e:	429a      	cmp	r2, r3
 8008740:	f63f af74 	bhi.w	800862c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	791b      	ldrb	r3, [r3, #4]
 8008748:	2b02      	cmp	r3, #2
 800874a:	bf28      	it	cs
 800874c:	2302      	movcs	r3, #2
 800874e:	b2db      	uxtb	r3, r3
 8008750:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008754:	429a      	cmp	r2, r3
 8008756:	d201      	bcs.n	800875c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008758:	2303      	movs	r3, #3
 800875a:	e001      	b.n	8008760 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800875c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008760:	4618      	mov	r0, r3
 8008762:	3730      	adds	r7, #48	; 0x30
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	785a      	ldrb	r2, [r3, #1]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	789a      	ldrb	r2, [r3, #2]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	78da      	ldrb	r2, [r3, #3]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	791a      	ldrb	r2, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	795a      	ldrb	r2, [r3, #5]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	799a      	ldrb	r2, [r3, #6]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	79da      	ldrb	r2, [r3, #7]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	7a1a      	ldrb	r2, [r3, #8]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	721a      	strb	r2, [r3, #8]
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b087      	sub	sp, #28
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	781a      	ldrb	r2, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	785a      	ldrb	r2, [r3, #1]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	789a      	ldrb	r2, [r3, #2]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	78da      	ldrb	r2, [r3, #3]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3304      	adds	r3, #4
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3305      	adds	r3, #5
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	b29b      	uxth	r3, r3
 800880a:	4313      	orrs	r3, r2
 800880c:	b29a      	uxth	r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	799a      	ldrb	r2, [r3, #6]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	889b      	ldrh	r3, [r3, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008822:	2303      	movs	r3, #3
 8008824:	75fb      	strb	r3, [r7, #23]
 8008826:	e033      	b.n	8008890 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	889b      	ldrh	r3, [r3, #4]
 800882c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008830:	f023 0307 	bic.w	r3, r3, #7
 8008834:	b29a      	uxth	r2, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	889b      	ldrh	r3, [r3, #4]
 800883e:	b21a      	sxth	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b299      	uxth	r1, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3305      	adds	r3, #5
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	b29b      	uxth	r3, r3
 8008854:	430b      	orrs	r3, r1
 8008856:	b29b      	uxth	r3, r3
 8008858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800885c:	2b00      	cmp	r3, #0
 800885e:	d110      	bne.n	8008882 <USBH_ParseEPDesc+0xbc>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b299      	uxth	r1, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3305      	adds	r3, #5
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	021b      	lsls	r3, r3, #8
 8008872:	b29b      	uxth	r3, r3
 8008874:	430b      	orrs	r3, r1
 8008876:	b29b      	uxth	r3, r3
 8008878:	b21b      	sxth	r3, r3
 800887a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800887e:	b21b      	sxth	r3, r3
 8008880:	e001      	b.n	8008886 <USBH_ParseEPDesc+0xc0>
 8008882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008886:	4313      	orrs	r3, r2
 8008888:	b21b      	sxth	r3, r3
 800888a:	b29a      	uxth	r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008896:	2b00      	cmp	r3, #0
 8008898:	d116      	bne.n	80088c8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	78db      	ldrb	r3, [r3, #3]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d005      	beq.n	80088b2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	78db      	ldrb	r3, [r3, #3]
 80088aa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d127      	bne.n	8008902 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	799b      	ldrb	r3, [r3, #6]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <USBH_ParseEPDesc+0xfc>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	799b      	ldrb	r3, [r3, #6]
 80088be:	2b10      	cmp	r3, #16
 80088c0:	d91f      	bls.n	8008902 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80088c2:	2303      	movs	r3, #3
 80088c4:	75fb      	strb	r3, [r7, #23]
 80088c6:	e01c      	b.n	8008902 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	78db      	ldrb	r3, [r3, #3]
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d10a      	bne.n	80088ea <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	799b      	ldrb	r3, [r3, #6]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <USBH_ParseEPDesc+0x11e>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	799b      	ldrb	r3, [r3, #6]
 80088e0:	2b10      	cmp	r3, #16
 80088e2:	d90e      	bls.n	8008902 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80088e4:	2303      	movs	r3, #3
 80088e6:	75fb      	strb	r3, [r7, #23]
 80088e8:	e00b      	b.n	8008902 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	78db      	ldrb	r3, [r3, #3]
 80088ee:	f003 0303 	and.w	r3, r3, #3
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d105      	bne.n	8008902 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	799b      	ldrb	r3, [r3, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80088fe:	2303      	movs	r3, #3
 8008900:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008902:	7dfb      	ldrb	r3, [r7, #23]
}
 8008904:	4618      	mov	r0, r3
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b03      	cmp	r3, #3
 8008926:	d120      	bne.n	800896a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	1e9a      	subs	r2, r3, #2
 800892e:	88fb      	ldrh	r3, [r7, #6]
 8008930:	4293      	cmp	r3, r2
 8008932:	bf28      	it	cs
 8008934:	4613      	movcs	r3, r2
 8008936:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3302      	adds	r3, #2
 800893c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800893e:	2300      	movs	r3, #0
 8008940:	82fb      	strh	r3, [r7, #22]
 8008942:	e00b      	b.n	800895c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008944:	8afb      	ldrh	r3, [r7, #22]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3301      	adds	r3, #1
 8008954:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008956:	8afb      	ldrh	r3, [r7, #22]
 8008958:	3302      	adds	r3, #2
 800895a:	82fb      	strh	r3, [r7, #22]
 800895c:	8afa      	ldrh	r2, [r7, #22]
 800895e:	8abb      	ldrh	r3, [r7, #20]
 8008960:	429a      	cmp	r2, r3
 8008962:	d3ef      	bcc.n	8008944 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]
  }
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	881a      	ldrh	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	4413      	add	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800899e:	68fb      	ldr	r3, [r7, #12]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80089ba:	2301      	movs	r3, #1
 80089bc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	789b      	ldrb	r3, [r3, #2]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d002      	beq.n	80089cc <USBH_CtlReq+0x20>
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d00f      	beq.n	80089ea <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80089ca:	e027      	b.n	8008a1c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2201      	movs	r2, #1
 80089dc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2202      	movs	r2, #2
 80089e2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80089e4:	2301      	movs	r3, #1
 80089e6:	75fb      	strb	r3, [r7, #23]
      break;
 80089e8:	e018      	b.n	8008a1c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f81c 	bl	8008a28 <USBH_HandleControl>
 80089f0:	4603      	mov	r3, r0
 80089f2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <USBH_CtlReq+0x54>
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d106      	bne.n	8008a0e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	761a      	strb	r2, [r3, #24]
      break;
 8008a0c:	e005      	b.n	8008a1a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d102      	bne.n	8008a1a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	709a      	strb	r2, [r3, #2]
      break;
 8008a1a:	bf00      	nop
  }
  return status;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a30:	2301      	movs	r3, #1
 8008a32:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7e1b      	ldrb	r3, [r3, #24]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	2b0a      	cmp	r3, #10
 8008a40:	f200 8156 	bhi.w	8008cf0 <USBH_HandleControl+0x2c8>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <USBH_HandleControl+0x24>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a79 	.word	0x08008a79
 8008a50:	08008a93 	.word	0x08008a93
 8008a54:	08008afd 	.word	0x08008afd
 8008a58:	08008b23 	.word	0x08008b23
 8008a5c:	08008b5b 	.word	0x08008b5b
 8008a60:	08008b85 	.word	0x08008b85
 8008a64:	08008bd7 	.word	0x08008bd7
 8008a68:	08008bf9 	.word	0x08008bf9
 8008a6c:	08008c35 	.word	0x08008c35
 8008a70:	08008c5b 	.word	0x08008c5b
 8008a74:	08008c99 	.word	0x08008c99
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f103 0110 	add.w	r1, r3, #16
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	795b      	ldrb	r3, [r3, #5]
 8008a82:	461a      	mov	r2, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f943 	bl	8008d10 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	761a      	strb	r2, [r3, #24]
      break;
 8008a90:	e139      	b.n	8008d06 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	795b      	ldrb	r3, [r3, #5]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fcc5 	bl	8009428 <USBH_LL_GetURBState>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d11e      	bne.n	8008ae6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	7c1b      	ldrb	r3, [r3, #16]
 8008aac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ab0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	8adb      	ldrh	r3, [r3, #22]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008aba:	7b7b      	ldrb	r3, [r7, #13]
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d103      	bne.n	8008ac8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ac6:	e115      	b.n	8008cf4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2205      	movs	r2, #5
 8008acc:	761a      	strb	r2, [r3, #24]
      break;
 8008ace:	e111      	b.n	8008cf4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008ad0:	7b7b      	ldrb	r3, [r7, #13]
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d103      	bne.n	8008ade <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2209      	movs	r2, #9
 8008ada:	761a      	strb	r2, [r3, #24]
      break;
 8008adc:	e10a      	b.n	8008cf4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	761a      	strb	r2, [r3, #24]
      break;
 8008ae4:	e106      	b.n	8008cf4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d003      	beq.n	8008af4 <USBH_HandleControl+0xcc>
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	f040 8100 	bne.w	8008cf4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	220b      	movs	r2, #11
 8008af8:	761a      	strb	r2, [r3, #24]
      break;
 8008afa:	e0fb      	b.n	8008cf4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6899      	ldr	r1, [r3, #8]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	899a      	ldrh	r2, [r3, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	791b      	ldrb	r3, [r3, #4]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f93a 	bl	8008d8e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	761a      	strb	r2, [r3, #24]
      break;
 8008b20:	e0f1      	b.n	8008d06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	791b      	ldrb	r3, [r3, #4]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc7d 	bl	8009428 <USBH_LL_GetURBState>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d102      	bne.n	8008b3e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2209      	movs	r2, #9
 8008b3c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b05      	cmp	r3, #5
 8008b42:	d102      	bne.n	8008b4a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008b44:	2303      	movs	r3, #3
 8008b46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b48:	e0d6      	b.n	8008cf8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	f040 80d3 	bne.w	8008cf8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	220b      	movs	r2, #11
 8008b56:	761a      	strb	r2, [r3, #24]
      break;
 8008b58:	e0ce      	b.n	8008cf8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6899      	ldr	r1, [r3, #8]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	899a      	ldrh	r2, [r3, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	795b      	ldrb	r3, [r3, #5]
 8008b66:	2001      	movs	r0, #1
 8008b68:	9000      	str	r0, [sp, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f8ea 	bl	8008d44 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2206      	movs	r2, #6
 8008b80:	761a      	strb	r2, [r3, #24]
      break;
 8008b82:	e0c0      	b.n	8008d06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	795b      	ldrb	r3, [r3, #5]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fc4c 	bl	8009428 <USBH_LL_GetURBState>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d103      	bne.n	8008ba2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2207      	movs	r2, #7
 8008b9e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ba0:	e0ac      	b.n	8008cfc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	2b05      	cmp	r3, #5
 8008ba6:	d105      	bne.n	8008bb4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	220c      	movs	r2, #12
 8008bac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb2:	e0a3      	b.n	8008cfc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d103      	bne.n	8008bc2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2205      	movs	r2, #5
 8008bbe:	761a      	strb	r2, [r3, #24]
      break;
 8008bc0:	e09c      	b.n	8008cfc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	f040 8099 	bne.w	8008cfc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	220b      	movs	r2, #11
 8008bce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd4:	e092      	b.n	8008cfc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f8d5 	bl	8008d8e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2208      	movs	r2, #8
 8008bf4:	761a      	strb	r2, [r3, #24]

      break;
 8008bf6:	e086      	b.n	8008d06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	791b      	ldrb	r3, [r3, #4]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fc12 	bl	8009428 <USBH_LL_GetURBState>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d105      	bne.n	8008c1a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	220d      	movs	r2, #13
 8008c12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c18:	e072      	b.n	8008d00 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	2b04      	cmp	r3, #4
 8008c1e:	d103      	bne.n	8008c28 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	220b      	movs	r2, #11
 8008c24:	761a      	strb	r2, [r3, #24]
      break;
 8008c26:	e06b      	b.n	8008d00 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	d168      	bne.n	8008d00 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	73fb      	strb	r3, [r7, #15]
      break;
 8008c32:	e065      	b.n	8008d00 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	795b      	ldrb	r3, [r3, #5]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	9200      	str	r2, [sp, #0]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f87f 	bl	8008d44 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	220a      	movs	r2, #10
 8008c56:	761a      	strb	r2, [r3, #24]
      break;
 8008c58:	e055      	b.n	8008d06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	795b      	ldrb	r3, [r3, #5]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fbe1 	bl	8009428 <USBH_LL_GetURBState>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d105      	bne.n	8008c7c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	220d      	movs	r2, #13
 8008c78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c7a:	e043      	b.n	8008d04 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d103      	bne.n	8008c8a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2209      	movs	r2, #9
 8008c86:	761a      	strb	r2, [r3, #24]
      break;
 8008c88:	e03c      	b.n	8008d04 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d139      	bne.n	8008d04 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	220b      	movs	r2, #11
 8008c94:	761a      	strb	r2, [r3, #24]
      break;
 8008c96:	e035      	b.n	8008d04 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7e5b      	ldrb	r3, [r3, #25]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	765a      	strb	r2, [r3, #25]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7e5b      	ldrb	r3, [r3, #25]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d806      	bhi.n	8008cba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008cb8:	e025      	b.n	8008d06 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cc0:	2106      	movs	r1, #6
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	795b      	ldrb	r3, [r3, #5]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f90c 	bl	8008ef0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	791b      	ldrb	r3, [r3, #4]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f906 	bl	8008ef0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008cea:	2302      	movs	r3, #2
 8008cec:	73fb      	strb	r3, [r7, #15]
      break;
 8008cee:	e00a      	b.n	8008d06 <USBH_HandleControl+0x2de>

    default:
      break;
 8008cf0:	bf00      	nop
 8008cf2:	e008      	b.n	8008d06 <USBH_HandleControl+0x2de>
      break;
 8008cf4:	bf00      	nop
 8008cf6:	e006      	b.n	8008d06 <USBH_HandleControl+0x2de>
      break;
 8008cf8:	bf00      	nop
 8008cfa:	e004      	b.n	8008d06 <USBH_HandleControl+0x2de>
      break;
 8008cfc:	bf00      	nop
 8008cfe:	e002      	b.n	8008d06 <USBH_HandleControl+0x2de>
      break;
 8008d00:	bf00      	nop
 8008d02:	e000      	b.n	8008d06 <USBH_HandleControl+0x2de>
      break;
 8008d04:	bf00      	nop
  }

  return status;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af04      	add	r7, sp, #16
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d1e:	79f9      	ldrb	r1, [r7, #7]
 8008d20:	2300      	movs	r3, #0
 8008d22:	9303      	str	r3, [sp, #12]
 8008d24:	2308      	movs	r3, #8
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	2300      	movs	r3, #0
 8008d32:	2200      	movs	r2, #0
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fb46 	bl	80093c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af04      	add	r7, sp, #16
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	461a      	mov	r2, r3
 8008d52:	460b      	mov	r3, r1
 8008d54:	80fb      	strh	r3, [r7, #6]
 8008d56:	4613      	mov	r3, r2
 8008d58:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d68:	7979      	ldrb	r1, [r7, #5]
 8008d6a:	7e3b      	ldrb	r3, [r7, #24]
 8008d6c:	9303      	str	r3, [sp, #12]
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	9302      	str	r3, [sp, #8]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	2301      	movs	r3, #1
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 fb21 	bl	80093c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b088      	sub	sp, #32
 8008d92:	af04      	add	r7, sp, #16
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	4611      	mov	r1, r2
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	80fb      	strh	r3, [r7, #6]
 8008da0:	4613      	mov	r3, r2
 8008da2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008da4:	7979      	ldrb	r1, [r7, #5]
 8008da6:	2300      	movs	r3, #0
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	2301      	movs	r3, #1
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	2201      	movs	r2, #1
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 fb03 	bl	80093c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008dc0:	2300      	movs	r3, #0

}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b088      	sub	sp, #32
 8008dce:	af04      	add	r7, sp, #16
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	460b      	mov	r3, r1
 8008dda:	80fb      	strh	r3, [r7, #6]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dee:	7979      	ldrb	r1, [r7, #5]
 8008df0:	7e3b      	ldrb	r3, [r7, #24]
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	9302      	str	r3, [sp, #8]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	2302      	movs	r3, #2
 8008e02:	2200      	movs	r2, #0
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 fade 	bl	80093c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4611      	mov	r1, r2
 8008e20:	461a      	mov	r2, r3
 8008e22:	460b      	mov	r3, r1
 8008e24:	80fb      	strh	r3, [r7, #6]
 8008e26:	4613      	mov	r3, r2
 8008e28:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e2a:	7979      	ldrb	r1, [r7, #5]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	88fb      	ldrh	r3, [r7, #6]
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	2301      	movs	r3, #1
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	2201      	movs	r2, #1
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 fac0 	bl	80093c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af04      	add	r7, sp, #16
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	70fb      	strb	r3, [r7, #3]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70bb      	strb	r3, [r7, #2]
 8008e66:	4613      	mov	r3, r2
 8008e68:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e6a:	7878      	ldrb	r0, [r7, #1]
 8008e6c:	78ba      	ldrb	r2, [r7, #2]
 8008e6e:	78f9      	ldrb	r1, [r7, #3]
 8008e70:	8b3b      	ldrh	r3, [r7, #24]
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	7d3b      	ldrb	r3, [r7, #20]
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	7c3b      	ldrb	r3, [r7, #16]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa53 	bl	800932a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008e9a:	78fb      	ldrb	r3, [r7, #3]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa72 	bl	8009388 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f836 	bl	8008f2c <USBH_GetFreePipe>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ec4:	89fb      	ldrh	r3, [r7, #14]
 8008ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00a      	beq.n	8008ee4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	33e0      	adds	r3, #224	; 0xe0
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	440b      	add	r3, r1
 8008ee2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ee4:	89fb      	ldrh	r3, [r7, #14]
 8008ee6:	b2db      	uxtb	r3, r3
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	2b0f      	cmp	r3, #15
 8008f00:	d80d      	bhi.n	8008f1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	33e0      	adds	r3, #224	; 0xe0
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	33e0      	adds	r3, #224	; 0xe0
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
 8008f3c:	e00f      	b.n	8008f5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	33e0      	adds	r3, #224	; 0xe0
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d102      	bne.n	8008f58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	e007      	b.n	8008f68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	73fb      	strb	r3, [r7, #15]
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	2b0f      	cmp	r3, #15
 8008f62:	d9ec      	bls.n	8008f3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	490e      	ldr	r1, [pc, #56]	; (8008fb4 <MX_USB_HOST_Init+0x40>)
 8008f7c:	480e      	ldr	r0, [pc, #56]	; (8008fb8 <MX_USB_HOST_Init+0x44>)
 8008f7e:	f7fe fba7 	bl	80076d0 <USBH_Init>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008f88:	f7f8 f912 	bl	80011b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008f8c:	490b      	ldr	r1, [pc, #44]	; (8008fbc <MX_USB_HOST_Init+0x48>)
 8008f8e:	480a      	ldr	r0, [pc, #40]	; (8008fb8 <MX_USB_HOST_Init+0x44>)
 8008f90:	f7fe fc2c 	bl	80077ec <USBH_RegisterClass>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008f9a:	f7f8 f909 	bl	80011b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008f9e:	4806      	ldr	r0, [pc, #24]	; (8008fb8 <MX_USB_HOST_Init+0x44>)
 8008fa0:	f7fe fcb0 	bl	8007904 <USBH_Start>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008faa:	f7f8 f901 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008fae:	bf00      	nop
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	20000260 	.word	0x20000260
 8008fbc:	2000000c 	.word	0x2000000c

08008fc0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008fc4:	4802      	ldr	r0, [pc, #8]	; (8008fd0 <MX_USB_HOST_Process+0x10>)
 8008fc6:	f7fe fcad 	bl	8007924 <USBH_Process>
}
 8008fca:	bf00      	nop
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000260 	.word	0x20000260

08008fd4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d819      	bhi.n	800901c <USBH_UserProcess+0x48>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <USBH_UserProcess+0x1c>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	0800901d 	.word	0x0800901d
 8008ff4:	0800900d 	.word	0x0800900d
 8008ff8:	0800901d 	.word	0x0800901d
 8008ffc:	08009015 	.word	0x08009015
 8009000:	08009005 	.word	0x08009005
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009004:	4b09      	ldr	r3, [pc, #36]	; (800902c <USBH_UserProcess+0x58>)
 8009006:	2203      	movs	r2, #3
 8009008:	701a      	strb	r2, [r3, #0]
  break;
 800900a:	e008      	b.n	800901e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <USBH_UserProcess+0x58>)
 800900e:	2202      	movs	r2, #2
 8009010:	701a      	strb	r2, [r3, #0]
  break;
 8009012:	e004      	b.n	800901e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009014:	4b05      	ldr	r3, [pc, #20]	; (800902c <USBH_UserProcess+0x58>)
 8009016:	2201      	movs	r2, #1
 8009018:	701a      	strb	r2, [r3, #0]
  break;
 800901a:	e000      	b.n	800901e <USBH_UserProcess+0x4a>

  default:
  break;
 800901c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20000638 	.word	0x20000638

08009030 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	; 0x28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	605a      	str	r2, [r3, #4]
 8009042:	609a      	str	r2, [r3, #8]
 8009044:	60da      	str	r2, [r3, #12]
 8009046:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009050:	d147      	bne.n	80090e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	4a24      	ldr	r2, [pc, #144]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	6313      	str	r3, [r2, #48]	; 0x30
 8009062:	4b22      	ldr	r3, [pc, #136]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800906e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009074:	2300      	movs	r3, #0
 8009076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009078:	2300      	movs	r3, #0
 800907a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800907c:	f107 0314 	add.w	r3, r7, #20
 8009080:	4619      	mov	r1, r3
 8009082:	481b      	ldr	r0, [pc, #108]	; (80090f0 <HAL_HCD_MspInit+0xc0>)
 8009084:	f7f8 fcb6 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009088:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800908c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800908e:	2302      	movs	r3, #2
 8009090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009096:	2303      	movs	r3, #3
 8009098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800909a:	230a      	movs	r3, #10
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800909e:	f107 0314 	add.w	r3, r7, #20
 80090a2:	4619      	mov	r1, r3
 80090a4:	4812      	ldr	r0, [pc, #72]	; (80090f0 <HAL_HCD_MspInit+0xc0>)
 80090a6:	f7f8 fca5 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090aa:	4b10      	ldr	r3, [pc, #64]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	4a0f      	ldr	r2, [pc, #60]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 80090b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b4:	6353      	str	r3, [r2, #52]	; 0x34
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 80090bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090be:	4a0b      	ldr	r2, [pc, #44]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 80090c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090c4:	6453      	str	r3, [r2, #68]	; 0x44
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <HAL_HCD_MspInit+0xbc>)
 80090c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090d2:	2200      	movs	r2, #0
 80090d4:	2100      	movs	r1, #0
 80090d6:	2043      	movs	r0, #67	; 0x43
 80090d8:	f7f8 fc55 	bl	8001986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090dc:	2043      	movs	r0, #67	; 0x43
 80090de:	f7f8 fc6e 	bl	80019be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090e2:	bf00      	nop
 80090e4:	3728      	adds	r7, #40	; 0x28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40023800 	.word	0x40023800
 80090f0:	40020000 	.word	0x40020000

080090f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe ffed 	bl	80080e2 <USBH_LL_IncTimer>
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff f825 	bl	800816e <USBH_LL_Connect>
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff f82e 	bl	800819c <USBH_LL_Disconnect>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
 8009154:	4613      	mov	r3, r2
 8009156:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe ffdf 	bl	8008136 <USBH_LL_PortEnabled>
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe ffdf 	bl	8008152 <USBH_LL_PortDisabled>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d12a      	bne.n	8009204 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80091ae:	4a18      	ldr	r2, [pc, #96]	; (8009210 <USBH_LL_Init+0x74>)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a15      	ldr	r2, [pc, #84]	; (8009210 <USBH_LL_Init+0x74>)
 80091ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091be:	4b14      	ldr	r3, [pc, #80]	; (8009210 <USBH_LL_Init+0x74>)
 80091c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80091c6:	4b12      	ldr	r3, [pc, #72]	; (8009210 <USBH_LL_Init+0x74>)
 80091c8:	2208      	movs	r2, #8
 80091ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80091cc:	4b10      	ldr	r3, [pc, #64]	; (8009210 <USBH_LL_Init+0x74>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <USBH_LL_Init+0x74>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80091d8:	4b0d      	ldr	r3, [pc, #52]	; (8009210 <USBH_LL_Init+0x74>)
 80091da:	2202      	movs	r2, #2
 80091dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091de:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <USBH_LL_Init+0x74>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80091e4:	480a      	ldr	r0, [pc, #40]	; (8009210 <USBH_LL_Init+0x74>)
 80091e6:	f7f8 fda2 	bl	8001d2e <HAL_HCD_Init>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80091f0:	f7f7 ffde 	bl	80011b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80091f4:	4806      	ldr	r0, [pc, #24]	; (8009210 <USBH_LL_Init+0x74>)
 80091f6:	f7f9 f986 	bl	8002506 <HAL_HCD_GetCurrentFrame>
 80091fa:	4603      	mov	r3, r0
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7fe ff60 	bl	80080c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	2000063c 	.word	0x2000063c

08009214 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800922a:	4618      	mov	r0, r3
 800922c:	f7f9 f8f5 	bl	800241a <HAL_HCD_Start>
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009234:	7bfb      	ldrb	r3, [r7, #15]
 8009236:	4618      	mov	r0, r3
 8009238:	f000 f95c 	bl	80094f4 <USBH_Get_USB_Status>
 800923c:	4603      	mov	r3, r0
 800923e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009240:	7bbb      	ldrb	r3, [r7, #14]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009260:	4618      	mov	r0, r3
 8009262:	f7f9 f8fd 	bl	8002460 <HAL_HCD_Stop>
 8009266:	4603      	mov	r3, r0
 8009268:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f941 	bl	80094f4 <USBH_Get_USB_Status>
 8009272:	4603      	mov	r3, r0
 8009274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009276:	7bbb      	ldrb	r3, [r7, #14]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009292:	4618      	mov	r0, r3
 8009294:	f7f9 f945 	bl	8002522 <HAL_HCD_GetCurrentSpeed>
 8009298:	4603      	mov	r3, r0
 800929a:	2b02      	cmp	r3, #2
 800929c:	d00c      	beq.n	80092b8 <USBH_LL_GetSpeed+0x38>
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d80d      	bhi.n	80092be <USBH_LL_GetSpeed+0x3e>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <USBH_LL_GetSpeed+0x2c>
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d003      	beq.n	80092b2 <USBH_LL_GetSpeed+0x32>
 80092aa:	e008      	b.n	80092be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
    break;
 80092b0:	e008      	b.n	80092c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]
    break;
 80092b6:	e005      	b.n	80092c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80092b8:	2302      	movs	r3, #2
 80092ba:	73fb      	strb	r3, [r7, #15]
    break;
 80092bc:	e002      	b.n	80092c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80092be:	2301      	movs	r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]
    break;
 80092c2:	bf00      	nop
  }
  return  speed;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7f9 f8d8 	bl	800249a <HAL_HCD_ResetPort>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f8ff 	bl	80094f4 <USBH_Get_USB_Status>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7f9 f8df 	bl	80024de <HAL_HCD_HC_GetXferCount>
 8009320:	4603      	mov	r3, r0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800932a:	b590      	push	{r4, r7, lr}
 800932c:	b089      	sub	sp, #36	; 0x24
 800932e:	af04      	add	r7, sp, #16
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	4608      	mov	r0, r1
 8009334:	4611      	mov	r1, r2
 8009336:	461a      	mov	r2, r3
 8009338:	4603      	mov	r3, r0
 800933a:	70fb      	strb	r3, [r7, #3]
 800933c:	460b      	mov	r3, r1
 800933e:	70bb      	strb	r3, [r7, #2]
 8009340:	4613      	mov	r3, r2
 8009342:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009352:	787c      	ldrb	r4, [r7, #1]
 8009354:	78ba      	ldrb	r2, [r7, #2]
 8009356:	78f9      	ldrb	r1, [r7, #3]
 8009358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800935a:	9302      	str	r3, [sp, #8]
 800935c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	4623      	mov	r3, r4
 800936a:	f7f8 fd42 	bl	8001df2 <HAL_HCD_HC_Init>
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f8bd 	bl	80094f4 <USBH_Get_USB_Status>
 800937a:	4603      	mov	r3, r0
 800937c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800937e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	bd90      	pop	{r4, r7, pc}

08009388 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f8 fdb2 	bl	8001f10 <HAL_HCD_HC_Halt>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f89e 	bl	80094f4 <USBH_Get_USB_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80093c6:	b590      	push	{r4, r7, lr}
 80093c8:	b089      	sub	sp, #36	; 0x24
 80093ca:	af04      	add	r7, sp, #16
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	4608      	mov	r0, r1
 80093d0:	4611      	mov	r1, r2
 80093d2:	461a      	mov	r2, r3
 80093d4:	4603      	mov	r3, r0
 80093d6:	70fb      	strb	r3, [r7, #3]
 80093d8:	460b      	mov	r3, r1
 80093da:	70bb      	strb	r3, [r7, #2]
 80093dc:	4613      	mov	r3, r2
 80093de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80093ee:	787c      	ldrb	r4, [r7, #1]
 80093f0:	78ba      	ldrb	r2, [r7, #2]
 80093f2:	78f9      	ldrb	r1, [r7, #3]
 80093f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093fc:	9302      	str	r3, [sp, #8]
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4623      	mov	r3, r4
 800940a:	f7f8 fda5 	bl	8001f58 <HAL_HCD_HC_SubmitRequest>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f86d 	bl	80094f4 <USBH_Get_USB_Status>
 800941a:	4603      	mov	r3, r0
 800941c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800941e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	bd90      	pop	{r4, r7, pc}

08009428 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f7f9 f839 	bl	80024b6 <HAL_HCD_HC_GetURBState>
 8009444:	4603      	mov	r3, r0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009460:	2b01      	cmp	r3, #1
 8009462:	d103      	bne.n	800946c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f870 	bl	800954c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800946c:	20c8      	movs	r0, #200	; 0xc8
 800946e:	f7f8 f98b 	bl	8001788 <HAL_Delay>
  return USBH_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
 8009488:	4613      	mov	r3, r2
 800948a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009492:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	212c      	movs	r1, #44	; 0x2c
 800949a:	fb01 f303 	mul.w	r3, r1, r3
 800949e:	4413      	add	r3, r2
 80094a0:	333b      	adds	r3, #59	; 0x3b
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d009      	beq.n	80094bc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	212c      	movs	r1, #44	; 0x2c
 80094ae:	fb01 f303 	mul.w	r3, r1, r3
 80094b2:	4413      	add	r3, r2
 80094b4:	3354      	adds	r3, #84	; 0x54
 80094b6:	78ba      	ldrb	r2, [r7, #2]
 80094b8:	701a      	strb	r2, [r3, #0]
 80094ba:	e008      	b.n	80094ce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80094bc:	78fb      	ldrb	r3, [r7, #3]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	212c      	movs	r1, #44	; 0x2c
 80094c2:	fb01 f303 	mul.w	r3, r1, r3
 80094c6:	4413      	add	r3, r2
 80094c8:	3355      	adds	r3, #85	; 0x55
 80094ca:	78ba      	ldrb	r2, [r7, #2]
 80094cc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7f8 f94f 	bl	8001788 <HAL_Delay>
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	2b03      	cmp	r3, #3
 8009506:	d817      	bhi.n	8009538 <USBH_Get_USB_Status+0x44>
 8009508:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <USBH_Get_USB_Status+0x1c>)
 800950a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950e:	bf00      	nop
 8009510:	08009521 	.word	0x08009521
 8009514:	08009527 	.word	0x08009527
 8009518:	0800952d 	.word	0x0800952d
 800951c:	08009533 	.word	0x08009533
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
    break;
 8009524:	e00b      	b.n	800953e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009526:	2302      	movs	r3, #2
 8009528:	73fb      	strb	r3, [r7, #15]
    break;
 800952a:	e008      	b.n	800953e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800952c:	2301      	movs	r3, #1
 800952e:	73fb      	strb	r3, [r7, #15]
    break;
 8009530:	e005      	b.n	800953e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009532:	2302      	movs	r3, #2
 8009534:	73fb      	strb	r3, [r7, #15]
    break;
 8009536:	e002      	b.n	800953e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009538:	2302      	movs	r3, #2
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	bf00      	nop
  }
  return usb_status;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]
 8009564:	e001      	b.n	800956a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009566:	2301      	movs	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	461a      	mov	r2, r3
 800956e:	2101      	movs	r1, #1
 8009570:	4803      	ldr	r0, [pc, #12]	; (8009580 <MX_DriverVbusFS+0x34>)
 8009572:	f7f8 fbc3 	bl	8001cfc <HAL_GPIO_WritePin>
}
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	40020800 	.word	0x40020800

08009584 <__errno>:
 8009584:	4b01      	ldr	r3, [pc, #4]	; (800958c <__errno+0x8>)
 8009586:	6818      	ldr	r0, [r3, #0]
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	2000002c 	.word	0x2000002c

08009590 <__libc_init_array>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4d0d      	ldr	r5, [pc, #52]	; (80095c8 <__libc_init_array+0x38>)
 8009594:	4c0d      	ldr	r4, [pc, #52]	; (80095cc <__libc_init_array+0x3c>)
 8009596:	1b64      	subs	r4, r4, r5
 8009598:	10a4      	asrs	r4, r4, #2
 800959a:	2600      	movs	r6, #0
 800959c:	42a6      	cmp	r6, r4
 800959e:	d109      	bne.n	80095b4 <__libc_init_array+0x24>
 80095a0:	4d0b      	ldr	r5, [pc, #44]	; (80095d0 <__libc_init_array+0x40>)
 80095a2:	4c0c      	ldr	r4, [pc, #48]	; (80095d4 <__libc_init_array+0x44>)
 80095a4:	f000 f92e 	bl	8009804 <_init>
 80095a8:	1b64      	subs	r4, r4, r5
 80095aa:	10a4      	asrs	r4, r4, #2
 80095ac:	2600      	movs	r6, #0
 80095ae:	42a6      	cmp	r6, r4
 80095b0:	d105      	bne.n	80095be <__libc_init_array+0x2e>
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b8:	4798      	blx	r3
 80095ba:	3601      	adds	r6, #1
 80095bc:	e7ee      	b.n	800959c <__libc_init_array+0xc>
 80095be:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c2:	4798      	blx	r3
 80095c4:	3601      	adds	r6, #1
 80095c6:	e7f2      	b.n	80095ae <__libc_init_array+0x1e>
 80095c8:	08009840 	.word	0x08009840
 80095cc:	08009840 	.word	0x08009840
 80095d0:	08009840 	.word	0x08009840
 80095d4:	08009844 	.word	0x08009844

080095d8 <malloc>:
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <malloc+0xc>)
 80095da:	4601      	mov	r1, r0
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	f000 b87f 	b.w	80096e0 <_malloc_r>
 80095e2:	bf00      	nop
 80095e4:	2000002c 	.word	0x2000002c

080095e8 <free>:
 80095e8:	4b02      	ldr	r3, [pc, #8]	; (80095f4 <free+0xc>)
 80095ea:	4601      	mov	r1, r0
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f000 b80b 	b.w	8009608 <_free_r>
 80095f2:	bf00      	nop
 80095f4:	2000002c 	.word	0x2000002c

080095f8 <memset>:
 80095f8:	4402      	add	r2, r0
 80095fa:	4603      	mov	r3, r0
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d100      	bne.n	8009602 <memset+0xa>
 8009600:	4770      	bx	lr
 8009602:	f803 1b01 	strb.w	r1, [r3], #1
 8009606:	e7f9      	b.n	80095fc <memset+0x4>

08009608 <_free_r>:
 8009608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800960a:	2900      	cmp	r1, #0
 800960c:	d044      	beq.n	8009698 <_free_r+0x90>
 800960e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009612:	9001      	str	r0, [sp, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f1a1 0404 	sub.w	r4, r1, #4
 800961a:	bfb8      	it	lt
 800961c:	18e4      	addlt	r4, r4, r3
 800961e:	f000 f8e3 	bl	80097e8 <__malloc_lock>
 8009622:	4a1e      	ldr	r2, [pc, #120]	; (800969c <_free_r+0x94>)
 8009624:	9801      	ldr	r0, [sp, #4]
 8009626:	6813      	ldr	r3, [r2, #0]
 8009628:	b933      	cbnz	r3, 8009638 <_free_r+0x30>
 800962a:	6063      	str	r3, [r4, #4]
 800962c:	6014      	str	r4, [r2, #0]
 800962e:	b003      	add	sp, #12
 8009630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009634:	f000 b8de 	b.w	80097f4 <__malloc_unlock>
 8009638:	42a3      	cmp	r3, r4
 800963a:	d908      	bls.n	800964e <_free_r+0x46>
 800963c:	6825      	ldr	r5, [r4, #0]
 800963e:	1961      	adds	r1, r4, r5
 8009640:	428b      	cmp	r3, r1
 8009642:	bf01      	itttt	eq
 8009644:	6819      	ldreq	r1, [r3, #0]
 8009646:	685b      	ldreq	r3, [r3, #4]
 8009648:	1949      	addeq	r1, r1, r5
 800964a:	6021      	streq	r1, [r4, #0]
 800964c:	e7ed      	b.n	800962a <_free_r+0x22>
 800964e:	461a      	mov	r2, r3
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	b10b      	cbz	r3, 8009658 <_free_r+0x50>
 8009654:	42a3      	cmp	r3, r4
 8009656:	d9fa      	bls.n	800964e <_free_r+0x46>
 8009658:	6811      	ldr	r1, [r2, #0]
 800965a:	1855      	adds	r5, r2, r1
 800965c:	42a5      	cmp	r5, r4
 800965e:	d10b      	bne.n	8009678 <_free_r+0x70>
 8009660:	6824      	ldr	r4, [r4, #0]
 8009662:	4421      	add	r1, r4
 8009664:	1854      	adds	r4, r2, r1
 8009666:	42a3      	cmp	r3, r4
 8009668:	6011      	str	r1, [r2, #0]
 800966a:	d1e0      	bne.n	800962e <_free_r+0x26>
 800966c:	681c      	ldr	r4, [r3, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	6053      	str	r3, [r2, #4]
 8009672:	4421      	add	r1, r4
 8009674:	6011      	str	r1, [r2, #0]
 8009676:	e7da      	b.n	800962e <_free_r+0x26>
 8009678:	d902      	bls.n	8009680 <_free_r+0x78>
 800967a:	230c      	movs	r3, #12
 800967c:	6003      	str	r3, [r0, #0]
 800967e:	e7d6      	b.n	800962e <_free_r+0x26>
 8009680:	6825      	ldr	r5, [r4, #0]
 8009682:	1961      	adds	r1, r4, r5
 8009684:	428b      	cmp	r3, r1
 8009686:	bf04      	itt	eq
 8009688:	6819      	ldreq	r1, [r3, #0]
 800968a:	685b      	ldreq	r3, [r3, #4]
 800968c:	6063      	str	r3, [r4, #4]
 800968e:	bf04      	itt	eq
 8009690:	1949      	addeq	r1, r1, r5
 8009692:	6021      	streq	r1, [r4, #0]
 8009694:	6054      	str	r4, [r2, #4]
 8009696:	e7ca      	b.n	800962e <_free_r+0x26>
 8009698:	b003      	add	sp, #12
 800969a:	bd30      	pop	{r4, r5, pc}
 800969c:	20000940 	.word	0x20000940

080096a0 <sbrk_aligned>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	4e0e      	ldr	r6, [pc, #56]	; (80096dc <sbrk_aligned+0x3c>)
 80096a4:	460c      	mov	r4, r1
 80096a6:	6831      	ldr	r1, [r6, #0]
 80096a8:	4605      	mov	r5, r0
 80096aa:	b911      	cbnz	r1, 80096b2 <sbrk_aligned+0x12>
 80096ac:	f000 f88c 	bl	80097c8 <_sbrk_r>
 80096b0:	6030      	str	r0, [r6, #0]
 80096b2:	4621      	mov	r1, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	f000 f887 	bl	80097c8 <_sbrk_r>
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	d00a      	beq.n	80096d4 <sbrk_aligned+0x34>
 80096be:	1cc4      	adds	r4, r0, #3
 80096c0:	f024 0403 	bic.w	r4, r4, #3
 80096c4:	42a0      	cmp	r0, r4
 80096c6:	d007      	beq.n	80096d8 <sbrk_aligned+0x38>
 80096c8:	1a21      	subs	r1, r4, r0
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f87c 	bl	80097c8 <_sbrk_r>
 80096d0:	3001      	adds	r0, #1
 80096d2:	d101      	bne.n	80096d8 <sbrk_aligned+0x38>
 80096d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80096d8:	4620      	mov	r0, r4
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	20000944 	.word	0x20000944

080096e0 <_malloc_r>:
 80096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e4:	1ccd      	adds	r5, r1, #3
 80096e6:	f025 0503 	bic.w	r5, r5, #3
 80096ea:	3508      	adds	r5, #8
 80096ec:	2d0c      	cmp	r5, #12
 80096ee:	bf38      	it	cc
 80096f0:	250c      	movcc	r5, #12
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	4607      	mov	r7, r0
 80096f6:	db01      	blt.n	80096fc <_malloc_r+0x1c>
 80096f8:	42a9      	cmp	r1, r5
 80096fa:	d905      	bls.n	8009708 <_malloc_r+0x28>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	2600      	movs	r6, #0
 8009702:	4630      	mov	r0, r6
 8009704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009708:	4e2e      	ldr	r6, [pc, #184]	; (80097c4 <_malloc_r+0xe4>)
 800970a:	f000 f86d 	bl	80097e8 <__malloc_lock>
 800970e:	6833      	ldr	r3, [r6, #0]
 8009710:	461c      	mov	r4, r3
 8009712:	bb34      	cbnz	r4, 8009762 <_malloc_r+0x82>
 8009714:	4629      	mov	r1, r5
 8009716:	4638      	mov	r0, r7
 8009718:	f7ff ffc2 	bl	80096a0 <sbrk_aligned>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	4604      	mov	r4, r0
 8009720:	d14d      	bne.n	80097be <_malloc_r+0xde>
 8009722:	6834      	ldr	r4, [r6, #0]
 8009724:	4626      	mov	r6, r4
 8009726:	2e00      	cmp	r6, #0
 8009728:	d140      	bne.n	80097ac <_malloc_r+0xcc>
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	4631      	mov	r1, r6
 800972e:	4638      	mov	r0, r7
 8009730:	eb04 0803 	add.w	r8, r4, r3
 8009734:	f000 f848 	bl	80097c8 <_sbrk_r>
 8009738:	4580      	cmp	r8, r0
 800973a:	d13a      	bne.n	80097b2 <_malloc_r+0xd2>
 800973c:	6821      	ldr	r1, [r4, #0]
 800973e:	3503      	adds	r5, #3
 8009740:	1a6d      	subs	r5, r5, r1
 8009742:	f025 0503 	bic.w	r5, r5, #3
 8009746:	3508      	adds	r5, #8
 8009748:	2d0c      	cmp	r5, #12
 800974a:	bf38      	it	cc
 800974c:	250c      	movcc	r5, #12
 800974e:	4629      	mov	r1, r5
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff ffa5 	bl	80096a0 <sbrk_aligned>
 8009756:	3001      	adds	r0, #1
 8009758:	d02b      	beq.n	80097b2 <_malloc_r+0xd2>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	442b      	add	r3, r5
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	e00e      	b.n	8009780 <_malloc_r+0xa0>
 8009762:	6822      	ldr	r2, [r4, #0]
 8009764:	1b52      	subs	r2, r2, r5
 8009766:	d41e      	bmi.n	80097a6 <_malloc_r+0xc6>
 8009768:	2a0b      	cmp	r2, #11
 800976a:	d916      	bls.n	800979a <_malloc_r+0xba>
 800976c:	1961      	adds	r1, r4, r5
 800976e:	42a3      	cmp	r3, r4
 8009770:	6025      	str	r5, [r4, #0]
 8009772:	bf18      	it	ne
 8009774:	6059      	strne	r1, [r3, #4]
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	bf08      	it	eq
 800977a:	6031      	streq	r1, [r6, #0]
 800977c:	5162      	str	r2, [r4, r5]
 800977e:	604b      	str	r3, [r1, #4]
 8009780:	4638      	mov	r0, r7
 8009782:	f104 060b 	add.w	r6, r4, #11
 8009786:	f000 f835 	bl	80097f4 <__malloc_unlock>
 800978a:	f026 0607 	bic.w	r6, r6, #7
 800978e:	1d23      	adds	r3, r4, #4
 8009790:	1af2      	subs	r2, r6, r3
 8009792:	d0b6      	beq.n	8009702 <_malloc_r+0x22>
 8009794:	1b9b      	subs	r3, r3, r6
 8009796:	50a3      	str	r3, [r4, r2]
 8009798:	e7b3      	b.n	8009702 <_malloc_r+0x22>
 800979a:	6862      	ldr	r2, [r4, #4]
 800979c:	42a3      	cmp	r3, r4
 800979e:	bf0c      	ite	eq
 80097a0:	6032      	streq	r2, [r6, #0]
 80097a2:	605a      	strne	r2, [r3, #4]
 80097a4:	e7ec      	b.n	8009780 <_malloc_r+0xa0>
 80097a6:	4623      	mov	r3, r4
 80097a8:	6864      	ldr	r4, [r4, #4]
 80097aa:	e7b2      	b.n	8009712 <_malloc_r+0x32>
 80097ac:	4634      	mov	r4, r6
 80097ae:	6876      	ldr	r6, [r6, #4]
 80097b0:	e7b9      	b.n	8009726 <_malloc_r+0x46>
 80097b2:	230c      	movs	r3, #12
 80097b4:	603b      	str	r3, [r7, #0]
 80097b6:	4638      	mov	r0, r7
 80097b8:	f000 f81c 	bl	80097f4 <__malloc_unlock>
 80097bc:	e7a1      	b.n	8009702 <_malloc_r+0x22>
 80097be:	6025      	str	r5, [r4, #0]
 80097c0:	e7de      	b.n	8009780 <_malloc_r+0xa0>
 80097c2:	bf00      	nop
 80097c4:	20000940 	.word	0x20000940

080097c8 <_sbrk_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4d06      	ldr	r5, [pc, #24]	; (80097e4 <_sbrk_r+0x1c>)
 80097cc:	2300      	movs	r3, #0
 80097ce:	4604      	mov	r4, r0
 80097d0:	4608      	mov	r0, r1
 80097d2:	602b      	str	r3, [r5, #0]
 80097d4:	f7f7 fef4 	bl	80015c0 <_sbrk>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_sbrk_r+0x1a>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_sbrk_r+0x1a>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	20000948 	.word	0x20000948

080097e8 <__malloc_lock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_lock+0x8>)
 80097ea:	f000 b809 	b.w	8009800 <__retarget_lock_acquire_recursive>
 80097ee:	bf00      	nop
 80097f0:	2000094c 	.word	0x2000094c

080097f4 <__malloc_unlock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_unlock+0x8>)
 80097f6:	f000 b804 	b.w	8009802 <__retarget_lock_release_recursive>
 80097fa:	bf00      	nop
 80097fc:	2000094c 	.word	0x2000094c

08009800 <__retarget_lock_acquire_recursive>:
 8009800:	4770      	bx	lr

08009802 <__retarget_lock_release_recursive>:
 8009802:	4770      	bx	lr

08009804 <_init>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr

08009810 <_fini>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr
