
Procrastinator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080093c0  080093c0  000193c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097cc  080097cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d4  080097d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d4  080097d4  000197d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001dc  080099b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080099b8  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011228  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c0  00000000  00000000  00031434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00033cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019196  00000000  00000000  000357d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ff1  00000000  00000000  0004e96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976f0  00000000  00000000  0006195f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f904f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b0c  00000000  00000000  000f90a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093a8 	.word	0x080093a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080093a8 	.word	0x080093a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2319      	movs	r3, #25
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	463b      	mov	r3, r7
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2288      	movs	r2, #136	; 0x88
 8001014:	21ec      	movs	r1, #236	; 0xec
 8001016:	4857      	ldr	r0, [pc, #348]	; (8001174 <TrimRead+0x178>)
 8001018:	f002 fef0 	bl	8003dfc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 800101c:	463b      	mov	r3, r7
 800101e:	3319      	adds	r3, #25
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	9202      	str	r2, [sp, #8]
 8001026:	2207      	movs	r2, #7
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	22e1      	movs	r2, #225	; 0xe1
 8001030:	21ec      	movs	r1, #236	; 0xec
 8001032:	4850      	ldr	r0, [pc, #320]	; (8001174 <TrimRead+0x178>)
 8001034:	f002 fee2 	bl	8003dfc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	783b      	ldrb	r3, [r7, #0]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <TrimRead+0x17c>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b48      	ldr	r3, [pc, #288]	; (800117c <TrimRead+0x180>)
 800105c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <TrimRead+0x184>)
 800106e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b40      	ldr	r3, [pc, #256]	; (8001184 <TrimRead+0x188>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001084:	7a7b      	ldrb	r3, [r7, #9]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <TrimRead+0x18c>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <TrimRead+0x190>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <TrimRead+0x194>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <TrimRead+0x198>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7c3b      	ldrb	r3, [r7, #16]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <TrimRead+0x19c>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010de:	7cfb      	ldrb	r3, [r7, #19]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7cbb      	ldrb	r3, [r7, #18]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <TrimRead+0x1a0>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	7d3b      	ldrb	r3, [r7, #20]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <TrimRead+0x1a4>)
 8001100:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <TrimRead+0x1a8>)
 8001112:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001114:	7e3b      	ldrb	r3, [r7, #24]
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <TrimRead+0x1ac>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 800111c:	7ebb      	ldrb	r3, [r7, #26]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7e7b      	ldrb	r3, [r7, #25]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <TrimRead+0x1b0>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800112e:	7efb      	ldrb	r3, [r7, #27]
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <TrimRead+0x1b4>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001136:	7f3b      	ldrb	r3, [r7, #28]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b21a      	sxth	r2, r3
 800113c:	7f7b      	ldrb	r3, [r7, #29]
 800113e:	b21b      	sxth	r3, r3
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <TrimRead+0x1b8>)
 800114c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800114e:	7fbb      	ldrb	r3, [r7, #30]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	b21a      	sxth	r2, r3
 8001154:	7f7b      	ldrb	r3, [r7, #29]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <TrimRead+0x1bc>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <TrimRead+0x1c0>)
 800116a:	801a      	strh	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000278 	.word	0x20000278
 8001178:	20000208 	.word	0x20000208
 800117c:	20000210 	.word	0x20000210
 8001180:	20000212 	.word	0x20000212
 8001184:	2000020a 	.word	0x2000020a
 8001188:	20000214 	.word	0x20000214
 800118c:	20000216 	.word	0x20000216
 8001190:	20000218 	.word	0x20000218
 8001194:	2000021a 	.word	0x2000021a
 8001198:	2000021c 	.word	0x2000021c
 800119c:	2000021e 	.word	0x2000021e
 80011a0:	20000220 	.word	0x20000220
 80011a4:	20000222 	.word	0x20000222
 80011a8:	2000020c 	.word	0x2000020c
 80011ac:	20000224 	.word	0x20000224
 80011b0:	2000020e 	.word	0x2000020e
 80011b4:	20000226 	.word	0x20000226
 80011b8:	20000228 	.word	0x20000228
 80011bc:	2000022a 	.word	0x2000022a

080011c0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4603      	mov	r3, r0
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	460b      	mov	r3, r1
 80011d8:	717b      	strb	r3, [r7, #5]
 80011da:	4613      	mov	r3, r2
 80011dc:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011de:	f7ff ff0d 	bl	8000ffc <TrimRead>


	uint8_t datatowrite = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011ea:	23b6      	movs	r3, #182	; 0xb6
 80011ec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	22e0      	movs	r2, #224	; 0xe0
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	4858      	ldr	r0, [pc, #352]	; (8001368 <BME280_Config+0x1a8>)
 8001206:	f002 fcff 	bl	8003c08 <HAL_I2C_Mem_Write>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <BME280_Config+0x56>
	{
		return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001214:	e0a3      	b.n	800135e <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f001 fde4 	bl	8002de4 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f107 030f 	add.w	r3, r7, #15
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	22f2      	movs	r2, #242	; 0xf2
 8001234:	21ec      	movs	r1, #236	; 0xec
 8001236:	484c      	ldr	r0, [pc, #304]	; (8001368 <BME280_Config+0x1a8>)
 8001238:	f002 fce6 	bl	8003c08 <HAL_I2C_Mem_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <BME280_Config+0x88>
	{
		return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	e08a      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001248:	2064      	movs	r0, #100	; 0x64
 800124a:	f001 fdcb 	bl	8002de4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030e 	add.w	r3, r7, #14
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	22f2      	movs	r2, #242	; 0xf2
 8001262:	21ec      	movs	r1, #236	; 0xec
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <BME280_Config+0x1a8>)
 8001266:	f002 fdc9 	bl	8003dfc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800126a:	7bba      	ldrb	r2, [r7, #14]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	429a      	cmp	r2, r3
 8001270:	d002      	beq.n	8001278 <BME280_Config+0xb8>
	{
		return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001276:	e072      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001278:	f897 3020 	ldrb.w	r3, [r7, #32]
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	b25a      	sxtb	r2, r3
 8001280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	22f5      	movs	r2, #245	; 0xf5
 80012a4:	21ec      	movs	r1, #236	; 0xec
 80012a6:	4830      	ldr	r0, [pc, #192]	; (8001368 <BME280_Config+0x1a8>)
 80012a8:	f002 fcae 	bl	8003c08 <HAL_I2C_Mem_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <BME280_Config+0xf8>
	{
		return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	e052      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f001 fd93 	bl	8002de4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f107 030e 	add.w	r3, r7, #14
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	22f5      	movs	r2, #245	; 0xf5
 80012d2:	21ec      	movs	r1, #236	; 0xec
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <BME280_Config+0x1a8>)
 80012d6:	f002 fd91 	bl	8003dfc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012da:	7bba      	ldrb	r2, [r7, #14]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d002      	beq.n	80012e8 <BME280_Config+0x128>
	{
		return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e6:	e03a      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030f 	add.w	r3, r7, #15
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f4      	movs	r2, #244	; 0xf4
 8001318:	21ec      	movs	r1, #236	; 0xec
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <BME280_Config+0x1a8>)
 800131c:	f002 fc74 	bl	8003c08 <HAL_I2C_Mem_Write>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <BME280_Config+0x16c>
	{
		return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	e018      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f001 fd59 	bl	8002de4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030e 	add.w	r3, r7, #14
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	22f4      	movs	r2, #244	; 0xf4
 8001346:	21ec      	movs	r1, #236	; 0xec
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <BME280_Config+0x1a8>)
 800134a:	f002 fd57 	bl	8003dfc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	429a      	cmp	r2, r3
 8001354:	d002      	beq.n	800135c <BME280_Config+0x19c>
	{
		return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135a:	e000      	b.n	800135e <BME280_Config+0x19e>
	}

	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000278 	.word	0x20000278

0800136c <BMEReadRaw>:


int BMEReadRaw(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2301      	movs	r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <BMEReadRaw+0x8c>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	22d0      	movs	r2, #208	; 0xd0
 8001384:	21ec      	movs	r1, #236	; 0xec
 8001386:	481d      	ldr	r0, [pc, #116]	; (80013fc <BMEReadRaw+0x90>)
 8001388:	f002 fd38 	bl	8003dfc <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <BMEReadRaw+0x8c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b60      	cmp	r3, #96	; 0x60
 8001392:	d12a      	bne.n	80013ea <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2308      	movs	r3, #8
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	463b      	mov	r3, r7
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	22f7      	movs	r2, #247	; 0xf7
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <BMEReadRaw+0x90>)
 80013aa:	f002 fd27 	bl	8003dfc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013ae:	783b      	ldrb	r3, [r7, #0]
 80013b0:	031a      	lsls	r2, r3, #12
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4313      	orrs	r3, r2
 80013b8:	78ba      	ldrb	r2, [r7, #2]
 80013ba:	0912      	lsrs	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	4313      	orrs	r3, r2
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <BMEReadRaw+0x94>)
 80013c2:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	031a      	lsls	r2, r3, #12
 80013c8:	793b      	ldrb	r3, [r7, #4]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4313      	orrs	r3, r2
 80013ce:	797a      	ldrb	r2, [r7, #5]
 80013d0:	0912      	lsrs	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	4313      	orrs	r3, r2
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <BMEReadRaw+0x98>)
 80013d8:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <BMEReadRaw+0x9c>)
 80013e4:	6013      	str	r3, [r2, #0]

		return 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e001      	b.n	80013ee <BMEReadRaw+0x82>
	}

	else return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001f8 	.word	0x200001f8
 80013fc:	20000278 	.word	0x20000278
 8001400:	20000200 	.word	0x20000200
 8001404:	200001fc 	.word	0x200001fc
 8001408:	20000204 	.word	0x20000204

0800140c <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	10da      	asrs	r2, r3, #3
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <BME280_compensate_T_int32+0x78>)
 8001422:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	12db      	asrs	r3, r3, #11
 800142c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	111b      	asrs	r3, r3, #4
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <BME280_compensate_T_int32+0x74>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	1112      	asrs	r2, r2, #4
 800143c:	4910      	ldr	r1, [pc, #64]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	1a52      	subs	r2, r2, r1
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	131b      	asrs	r3, r3, #12
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <BME280_compensate_T_int32+0x7c>)
 800144a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	139b      	asrs	r3, r3, #14
 8001454:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4413      	add	r3, r2
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <BME280_compensate_T_int32+0x80>)
 800145e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <BME280_compensate_T_int32+0x80>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3380      	adds	r3, #128	; 0x80
 800146c:	121b      	asrs	r3, r3, #8
 800146e:	60fb      	str	r3, [r7, #12]
	return T;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	4618      	mov	r0, r3
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000208 	.word	0x20000208
 8001484:	20000210 	.word	0x20000210
 8001488:	20000212 	.word	0x20000212
 800148c:	2000022c 	.word	0x2000022c

08001490 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001494:	b0ca      	sub	sp, #296	; 0x128
 8001496:	af00      	add	r7, sp, #0
 8001498:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800149c:	4baf      	ldr	r3, [pc, #700]	; (800175c <BME280_compensate_P_int64+0x2cc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	17da      	asrs	r2, r3, #31
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014aa:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 80014ae:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ba:	fb03 f102 	mul.w	r1, r3, r2
 80014be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	18ca      	adds	r2, r1, r3
 80014cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d0:	fba3 8903 	umull	r8, r9, r3, r3
 80014d4:	eb02 0309 	add.w	r3, r2, r9
 80014d8:	4699      	mov	r9, r3
 80014da:	4ba1      	ldr	r3, [pc, #644]	; (8001760 <BME280_compensate_P_int64+0x2d0>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014f0:	4603      	mov	r3, r0
 80014f2:	fb03 f209 	mul.w	r2, r3, r9
 80014f6:	460b      	mov	r3, r1
 80014f8:	fb08 f303 	mul.w	r3, r8, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	4602      	mov	r2, r0
 8001500:	fba8 1202 	umull	r1, r2, r8, r2
 8001504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001508:	460a      	mov	r2, r1
 800150a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800150e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001512:	4413      	add	r3, r2
 8001514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001518:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800151c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001520:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001524:	4b8f      	ldr	r3, [pc, #572]	; (8001764 <BME280_compensate_P_int64+0x2d4>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	b21b      	sxth	r3, r3
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001532:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001536:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800153e:	462a      	mov	r2, r5
 8001540:	fb02 f203 	mul.w	r2, r2, r3
 8001544:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001548:	4621      	mov	r1, r4
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	441a      	add	r2, r3
 8001550:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001554:	4621      	mov	r1, r4
 8001556:	fba3 1301 	umull	r1, r3, r3, r1
 800155a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800155e:	460b      	mov	r3, r1
 8001560:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800157a:	462b      	mov	r3, r5
 800157c:	0459      	lsls	r1, r3, #17
 800157e:	4623      	mov	r3, r4
 8001580:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001584:	4623      	mov	r3, r4
 8001586:	0458      	lsls	r0, r3, #17
 8001588:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800158c:	1814      	adds	r4, r2, r0
 800158e:	643c      	str	r4, [r7, #64]	; 0x40
 8001590:	414b      	adcs	r3, r1
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
 8001594:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001598:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <BME280_compensate_P_int64+0x2d8>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	17da      	asrs	r2, r3, #31
 80015a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ba:	00d9      	lsls	r1, r3, #3
 80015bc:	2000      	movs	r0, #0
 80015be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015c2:	1814      	adds	r4, r2, r0
 80015c4:	63bc      	str	r4, [r7, #56]	; 0x38
 80015c6:	414b      	adcs	r3, r1
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ca:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015da:	fb03 f102 	mul.w	r1, r3, r2
 80015de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	18ca      	adds	r2, r1, r3
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f0:	fba3 1303 	umull	r1, r3, r3, r3
 80015f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015f8:	460b      	mov	r3, r1
 80015fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <BME280_compensate_P_int64+0x2dc>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b21b      	sxth	r3, r3
 8001610:	17da      	asrs	r2, r3, #31
 8001612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001616:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800161a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800161e:	462b      	mov	r3, r5
 8001620:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001624:	4642      	mov	r2, r8
 8001626:	fb02 f203 	mul.w	r2, r2, r3
 800162a:	464b      	mov	r3, r9
 800162c:	4621      	mov	r1, r4
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	4622      	mov	r2, r4
 8001636:	4641      	mov	r1, r8
 8001638:	fba2 1201 	umull	r1, r2, r2, r1
 800163c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001640:	460a      	mov	r2, r1
 8001642:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001646:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800164a:	4413      	add	r3, r2
 800164c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800165c:	4623      	mov	r3, r4
 800165e:	0a18      	lsrs	r0, r3, #8
 8001660:	462b      	mov	r3, r5
 8001662:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001666:	462b      	mov	r3, r5
 8001668:	1219      	asrs	r1, r3, #8
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <BME280_compensate_P_int64+0x2e0>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001678:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800167c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001680:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001684:	464a      	mov	r2, r9
 8001686:	fb02 f203 	mul.w	r2, r2, r3
 800168a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800168e:	4644      	mov	r4, r8
 8001690:	fb04 f303 	mul.w	r3, r4, r3
 8001694:	441a      	add	r2, r3
 8001696:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169a:	4644      	mov	r4, r8
 800169c:	fba3 4304 	umull	r4, r3, r3, r4
 80016a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016a4:	4623      	mov	r3, r4
 80016a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016c0:	464c      	mov	r4, r9
 80016c2:	0323      	lsls	r3, r4, #12
 80016c4:	4644      	mov	r4, r8
 80016c6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016ca:	4644      	mov	r4, r8
 80016cc:	0322      	lsls	r2, r4, #12
 80016ce:	1884      	adds	r4, r0, r2
 80016d0:	633c      	str	r4, [r7, #48]	; 0x30
 80016d2:	eb41 0303 	adc.w	r3, r1, r3
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
 80016d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016e4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016e8:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <BME280_compensate_P_int64+0x2e4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001700:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001704:	462b      	mov	r3, r5
 8001706:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800170a:	4642      	mov	r2, r8
 800170c:	fb02 f203 	mul.w	r2, r2, r3
 8001710:	464b      	mov	r3, r9
 8001712:	4621      	mov	r1, r4
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	4622      	mov	r2, r4
 800171c:	4641      	mov	r1, r8
 800171e:	fba2 1201 	umull	r1, r2, r2, r1
 8001722:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001726:	460a      	mov	r2, r1
 8001728:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800172c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001730:	4413      	add	r3, r2
 8001732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001742:	4629      	mov	r1, r5
 8001744:	104a      	asrs	r2, r1, #1
 8001746:	4629      	mov	r1, r5
 8001748:	17cb      	asrs	r3, r1, #31
 800174a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800174e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001752:	4313      	orrs	r3, r2
 8001754:	d110      	bne.n	8001778 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001756:	2300      	movs	r3, #0
 8001758:	e154      	b.n	8001a04 <BME280_compensate_P_int64+0x574>
 800175a:	bf00      	nop
 800175c:	2000022c 	.word	0x2000022c
 8001760:	2000021c 	.word	0x2000021c
 8001764:	2000021a 	.word	0x2000021a
 8001768:	20000218 	.word	0x20000218
 800176c:	20000216 	.word	0x20000216
 8001770:	20000214 	.word	0x20000214
 8001774:	2000020a 	.word	0x2000020a
	}
	p = 1048576-adc_P;
 8001778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800177c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
 8001784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001786:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800178a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800178e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001792:	105b      	asrs	r3, r3, #1
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001798:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800179c:	07db      	lsls	r3, r3, #31
 800179e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017aa:	4621      	mov	r1, r4
 80017ac:	1a89      	subs	r1, r1, r2
 80017ae:	67b9      	str	r1, [r7, #120]	; 0x78
 80017b0:	4629      	mov	r1, r5
 80017b2:	eb61 0303 	sbc.w	r3, r1, r3
 80017b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017b8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017bc:	4622      	mov	r2, r4
 80017be:	462b      	mov	r3, r5
 80017c0:	1891      	adds	r1, r2, r2
 80017c2:	6239      	str	r1, [r7, #32]
 80017c4:	415b      	adcs	r3, r3
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017cc:	4621      	mov	r1, r4
 80017ce:	1851      	adds	r1, r2, r1
 80017d0:	61b9      	str	r1, [r7, #24]
 80017d2:	4629      	mov	r1, r5
 80017d4:	414b      	adcs	r3, r1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017e4:	4649      	mov	r1, r9
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4641      	mov	r1, r8
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	1889      	adds	r1, r1, r2
 80017f6:	6139      	str	r1, [r7, #16]
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb43 0101 	adc.w	r1, r3, r1
 80017fe:	6179      	str	r1, [r7, #20]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800180c:	4649      	mov	r1, r9
 800180e:	008b      	lsls	r3, r1, #2
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001816:	4641      	mov	r1, r8
 8001818:	008a      	lsls	r2, r1, #2
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4603      	mov	r3, r0
 8001820:	4622      	mov	r2, r4
 8001822:	189b      	adds	r3, r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	460b      	mov	r3, r1
 8001828:	462a      	mov	r2, r5
 800182a:	eb42 0303 	adc.w	r3, r2, r3
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800183c:	4649      	mov	r1, r9
 800183e:	008b      	lsls	r3, r1, #2
 8001840:	4641      	mov	r1, r8
 8001842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001846:	4641      	mov	r1, r8
 8001848:	008a      	lsls	r2, r1, #2
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	4603      	mov	r3, r0
 8001850:	4622      	mov	r2, r4
 8001852:	189b      	adds	r3, r3, r2
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
 8001856:	462b      	mov	r3, r5
 8001858:	460a      	mov	r2, r1
 800185a:	eb42 0303 	adc.w	r3, r2, r3
 800185e:	677b      	str	r3, [r7, #116]	; 0x74
 8001860:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001864:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001868:	f7ff f9f6 	bl	8000c58 <__aeabi_ldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <BME280_compensate_P_int64+0x580>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	b21b      	sxth	r3, r3
 800187c:	17da      	asrs	r2, r3, #31
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001880:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001882:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0b50      	lsrs	r0, r2, #13
 8001890:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001894:	1359      	asrs	r1, r3, #13
 8001896:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800189a:	462b      	mov	r3, r5
 800189c:	fb00 f203 	mul.w	r2, r0, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	fb03 f301 	mul.w	r3, r3, r1
 80018a6:	4413      	add	r3, r2
 80018a8:	4622      	mov	r2, r4
 80018aa:	fba2 1200 	umull	r1, r2, r2, r0
 80018ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018b2:	460a      	mov	r2, r1
 80018b4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018bc:	4413      	add	r3, r2
 80018be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0b50      	lsrs	r0, r2, #13
 80018d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018d4:	1359      	asrs	r1, r3, #13
 80018d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018da:	462b      	mov	r3, r5
 80018dc:	fb00 f203 	mul.w	r2, r0, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	fb03 f301 	mul.w	r3, r3, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	fba2 1200 	umull	r1, r2, r2, r0
 80018ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018f2:	460a      	mov	r2, r1
 80018f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018fc:	4413      	add	r3, r2
 80018fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800190e:	4621      	mov	r1, r4
 8001910:	0e4a      	lsrs	r2, r1, #25
 8001912:	4629      	mov	r1, r5
 8001914:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001918:	4629      	mov	r1, r5
 800191a:	164b      	asrs	r3, r1, #25
 800191c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <BME280_compensate_P_int64+0x584>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	663b      	str	r3, [r7, #96]	; 0x60
 800192c:	667a      	str	r2, [r7, #100]	; 0x64
 800192e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001932:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001936:	462a      	mov	r2, r5
 8001938:	fb02 f203 	mul.w	r2, r2, r3
 800193c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001940:	4621      	mov	r1, r4
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800194c:	4621      	mov	r1, r4
 800194e:	fba2 1201 	umull	r1, r2, r2, r1
 8001952:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001956:	460a      	mov	r2, r1
 8001958:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800195c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001960:	4413      	add	r3, r2
 8001962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001972:	4621      	mov	r1, r4
 8001974:	0cca      	lsrs	r2, r1, #19
 8001976:	4629      	mov	r1, r5
 8001978:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800197c:	4629      	mov	r1, r5
 800197e:	14cb      	asrs	r3, r1, #19
 8001980:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001984:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001988:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800198c:	1884      	adds	r4, r0, r2
 800198e:	65bc      	str	r4, [r7, #88]	; 0x58
 8001990:	eb41 0303 	adc.w	r3, r1, r3
 8001994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001996:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800199a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800199e:	4621      	mov	r1, r4
 80019a0:	1889      	adds	r1, r1, r2
 80019a2:	6539      	str	r1, [r7, #80]	; 0x50
 80019a4:	4629      	mov	r1, r5
 80019a6:	eb43 0101 	adc.w	r1, r3, r1
 80019aa:	6579      	str	r1, [r7, #84]	; 0x54
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019b8:	4623      	mov	r3, r4
 80019ba:	0a18      	lsrs	r0, r3, #8
 80019bc:	462b      	mov	r3, r5
 80019be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019c2:	462b      	mov	r3, r5
 80019c4:	1219      	asrs	r1, r3, #8
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <BME280_compensate_P_int64+0x588>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019e0:	464c      	mov	r4, r9
 80019e2:	0123      	lsls	r3, r4, #4
 80019e4:	4644      	mov	r4, r8
 80019e6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019ea:	4644      	mov	r4, r8
 80019ec:	0122      	lsls	r2, r4, #4
 80019ee:	1884      	adds	r4, r0, r2
 80019f0:	603c      	str	r4, [r7, #0]
 80019f2:	eb41 0303 	adc.w	r3, r1, r3
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019fc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a10:	20000222 	.word	0x20000222
 8001a14:	20000220 	.word	0x20000220
 8001a18:	2000021e 	.word	0x2000021e

08001a1c <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <bme280_compensate_H_int32+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a2c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	039a      	lsls	r2, r3, #14
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <bme280_compensate_H_int32+0xc0>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <bme280_compensate_H_int32+0xc4>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	4619      	mov	r1, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a50:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a52:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <bme280_compensate_H_int32+0xc8>)
 8001a54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a58:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a60:	1292      	asrs	r2, r2, #10
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <bme280_compensate_H_int32+0xcc>)
 8001a64:	8809      	ldrh	r1, [r1, #0]
 8001a66:	4608      	mov	r0, r1
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	fb00 f101 	mul.w	r1, r0, r1
 8001a6e:	12c9      	asrs	r1, r1, #11
 8001a70:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a74:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a78:	1292      	asrs	r2, r2, #10
 8001a7a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a7e:	491b      	ldr	r1, [pc, #108]	; (8001aec <bme280_compensate_H_int32+0xd0>)
 8001a80:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a84:	fb01 f202 	mul.w	r2, r1, r2
 8001a88:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a8c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	13db      	asrs	r3, r3, #15
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	13d2      	asrs	r2, r2, #15
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <bme280_compensate_H_int32+0xd4>)
 8001aa4:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001aaa:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ab8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ac0:	bfa8      	it	ge
 8001ac2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001ac6:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	131b      	asrs	r3, r3, #12
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	2000022c 	.word	0x2000022c
 8001adc:	20000226 	.word	0x20000226
 8001ae0:	20000228 	.word	0x20000228
 8001ae4:	2000022a 	.word	0x2000022a
 8001ae8:	2000020e 	.word	0x2000020e
 8001aec:	20000224 	.word	0x20000224
 8001af0:	2000020c 	.word	0x2000020c

08001af4 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001af8:	f7ff fc38 	bl	800136c <BMEReadRaw>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d163      	bne.n	8001bca <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <BME280_Measure+0xf4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b0a:	d104      	bne.n	8001b16 <BME280_Measure+0x22>
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <BME280_Measure+0xf8>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e016      	b.n	8001b44 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <BME280_Measure+0xf4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc76 	bl	800140c <BME280_compensate_T_int32>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd06 	bl	8000534 <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <BME280_Measure+0xfc>)
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f83d 	bl	8000bb8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <BME280_Measure+0xf8>)
 8001b42:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <BME280_Measure+0x100>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b4c:	d104      	bne.n	8001b58 <BME280_Measure+0x64>
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <BME280_Measure+0x104>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e016      	b.n	8001b86 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <BME280_Measure+0x100>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc97 	bl	8001490 <BME280_compensate_P_int64>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcd5 	bl	8000514 <__aeabi_ui2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <BME280_Measure+0x108>)
 8001b70:	f7fe fe74 	bl	800085c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f81c 	bl	8000bb8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <BME280_Measure+0x104>)
 8001b84:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <BME280_Measure+0x10c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	d104      	bne.n	8001b9a <BME280_Measure+0xa6>
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <BME280_Measure+0x110>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001b98:	e023      	b.n	8001be2 <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <BME280_Measure+0x10c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff3c 	bl	8001a1c <bme280_compensate_H_int32>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcb4 	bl	8000514 <__aeabi_ui2d>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <BME280_Measure+0x114>)
 8001bb2:	f7fe fe53 	bl	800085c <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe fffb 	bl	8000bb8 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <BME280_Measure+0x110>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	e00b      	b.n	8001be2 <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <BME280_Measure+0x110>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <BME280_Measure+0x110>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <BME280_Measure+0x104>)
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <BME280_Measure+0x104>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <BME280_Measure+0xf8>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200001fc 	.word	0x200001fc
 8001bec:	20000318 	.word	0x20000318
 8001bf0:	40590000 	.word	0x40590000
 8001bf4:	20000200 	.word	0x20000200
 8001bf8:	2000031c 	.word	0x2000031c
 8001bfc:	40700000 	.word	0x40700000
 8001c00:	20000204 	.word	0x20000204
 8001c04:	20000320 	.word	0x20000320
 8001c08:	40900000 	.word	0x40900000

08001c0c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001c0c:	b4b0      	push	{r4, r5, r7}
 8001c0e:	b08f      	sub	sp, #60	; 0x3c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001c14:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001c20:	2307      	movs	r3, #7
 8001c22:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001c2c:	23ff      	movs	r3, #255	; 0xff
 8001c2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001c32:	2364      	movs	r3, #100	; 0x64
 8001c34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	461d      	mov	r5, r3
 8001c40:	f107 040c 	add.w	r4, r7, #12
 8001c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	373c      	adds	r7, #60	; 0x3c
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bcb0      	pop	{r4, r5, r7}
 8001c5c:	4770      	bx	lr

08001c5e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6898      	ldr	r0, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	899b      	ldrh	r3, [r3, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	f001 fe6b 	bl	800394c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f001 f8b4 	bl	8002de4 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6898      	ldr	r0, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	899b      	ldrh	r3, [r3, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4619      	mov	r1, r3
 8001c88:	f001 fe60 	bl	800394c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c8c:	2064      	movs	r0, #100	; 0x64
 8001c8e:	f001 f8a9 	bl	8002de4 <HAL_Delay>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f99f 	bl	8001fea <LoRa_read>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d107      	bne.n	8001cca <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001cba:	7bbb      	ldrb	r3, [r7, #14]
 8001cbc:	f023 0307 	bic.w	r3, r3, #7
 8001cc0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
 8001cc8:	e03e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10c      	bne.n	8001cea <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cd4:	f023 0307 	bic.w	r3, r3, #7
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	61da      	str	r2, [r3, #28]
 8001ce8:	e02e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d10c      	bne.n	8001d0a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cf4:	f023 0307 	bic.w	r3, r3, #7
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	f043 0303 	orr.w	r3, r3, #3
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	61da      	str	r2, [r3, #28]
 8001d08:	e01e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d14:	f023 0307 	bic.w	r3, r3, #7
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	f043 0305 	orr.w	r3, r3, #5
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	61da      	str	r2, [r3, #28]
 8001d28:	e00e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d10b      	bne.n	8001d48 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d34:	f023 0307 	bic.w	r3, r3, #7
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f043 0306 	orr.w	r3, r3, #6
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2206      	movs	r2, #6
 8001d46:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f965 	bl	800201e <LoRa_write>
	//HAL_Delay(10);
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	f001 fde8 	bl	800394c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6998      	ldr	r0, [r3, #24]
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	f003 fc09 	bl	800559e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001d8c:	bf00      	nop
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fff2 	bl	8005d7c <HAL_SPI_GetState>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d1f7      	bne.n	8001d8e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6998      	ldr	r0, [r3, #24]
 8001da2:	8b3a      	ldrh	r2, [r7, #24]
 8001da4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	f003 fd34 	bl	8005816 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001dae:	bf00      	nop
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 ffe1 	bl	8005d7c <HAL_SPI_GetState>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d1f7      	bne.n	8001db0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	889b      	ldrh	r3, [r3, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f001 fdbe 	bl	800394c <HAL_GPIO_WritePin>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	f001 fdaa 	bl	800394c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6998      	ldr	r0, [r3, #24]
 8001dfc:	88fa      	ldrh	r2, [r7, #6]
 8001dfe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	f003 fbcb 	bl	800559e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e08:	bf00      	nop
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 ffb4 	bl	8005d7c <HAL_SPI_GetState>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d1f7      	bne.n	8001e0a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6998      	ldr	r0, [r3, #24]
 8001e1e:	8b3a      	ldrh	r2, [r7, #24]
 8001e20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	f003 fbba 	bl	800559e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e2a:	bf00      	nop
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 ffa3 	bl	8005d7c <HAL_SPI_GetState>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d1f7      	bne.n	8001e2c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	889b      	ldrh	r3, [r3, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	4619      	mov	r1, r3
 8001e48:	f001 fd80 	bl	800394c <HAL_GPIO_WritePin>
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	04db      	lsls	r3, r3, #19
 8001e62:	115b      	asrs	r3, r3, #5
 8001e64:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2106      	movs	r1, #6
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8d3 	bl	800201e <LoRa_write>
	HAL_Delay(5);
 8001e78:	2005      	movs	r0, #5
 8001e7a:	f000 ffb3 	bl	8002de4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	461a      	mov	r2, r3
 8001e88:	2107      	movs	r1, #7
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8c7 	bl	800201e <LoRa_write>
	HAL_Delay(5);
 8001e90:	2005      	movs	r0, #5
 8001e92:	f000 ffa7 	bl	8002de4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8bc 	bl	800201e <LoRa_write>
	HAL_Delay(5);
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f000 ff9c 	bl	8002de4 <HAL_Delay>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	dd01      	ble.n	8001ec8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	dc01      	bgt.n	8001ed2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001ed2:	211e      	movs	r1, #30
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f888 	bl	8001fea <LoRa_read>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f000 ff80 	bl	8002de4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	461a      	mov	r2, r3
 8001efc:	211e      	movs	r1, #30
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f88d 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001f04:	200a      	movs	r0, #10
 8001f06:	f000 ff6d 	bl	8002de4 <HAL_Delay>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	461a      	mov	r2, r3
 8001f22:	2109      	movs	r1, #9
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f87a 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	f000 ff5a 	bl	8002de4 <HAL_Delay>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f4c:	d801      	bhi.n	8001f52 <LoRa_setOCP+0x1a>
		current = 45;
 8001f4e:	232d      	movs	r3, #45	; 0x2d
 8001f50:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	2bf0      	cmp	r3, #240	; 0xf0
 8001f56:	d901      	bls.n	8001f5c <LoRa_setOCP+0x24>
		current = 240;
 8001f58:	23f0      	movs	r3, #240	; 0xf0
 8001f5a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b78      	cmp	r3, #120	; 0x78
 8001f60:	d809      	bhi.n	8001f76 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	3b2d      	subs	r3, #45	; 0x2d
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <LoRa_setOCP+0x78>)
 8001f68:	fb82 1203 	smull	r1, r2, r2, r3
 8001f6c:	1052      	asrs	r2, r2, #1
 8001f6e:	17db      	asrs	r3, r3, #31
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e00b      	b.n	8001f8e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	2bf0      	cmp	r3, #240	; 0xf0
 8001f7a:	d808      	bhi.n	8001f8e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	331e      	adds	r3, #30
 8001f80:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoRa_setOCP+0x78>)
 8001f82:	fb82 1203 	smull	r1, r2, r2, r3
 8001f86:	1092      	asrs	r2, r2, #2
 8001f88:	17db      	asrs	r3, r3, #31
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	3320      	adds	r3, #32
 8001f92:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	461a      	mov	r2, r3
 8001f98:	210b      	movs	r1, #11
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f83f 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f000 ff1f 	bl	8002de4 <HAL_Delay>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	66666667 	.word	0x66666667

08001fb4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001fbc:	211e      	movs	r1, #30
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f813 	bl	8001fea <LoRa_read>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	f043 0307 	orr.w	r3, r3, #7
 8001fce:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	211e      	movs	r1, #30
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f821 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f000 ff01 	bl	8002de4 <HAL_Delay>
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af02      	add	r7, sp, #8
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002000:	f107 030f 	add.w	r3, r7, #15
 8002004:	f107 010e 	add.w	r1, r7, #14
 8002008:	2201      	movs	r2, #1
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fea4 	bl	8001d5c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af02      	add	r7, sp, #8
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
 800202a:	4613      	mov	r3, r2
 800202c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002034:	b2db      	uxtb	r3, r3
 8002036:	73bb      	strb	r3, [r7, #14]
	data = value;
 8002038:	78bb      	ldrb	r3, [r7, #2]
 800203a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800203c:	f107 030f 	add.w	r3, r7, #15
 8002040:	f107 010e 	add.w	r1, r7, #14
 8002044:	2201      	movs	r2, #1
 8002046:	9200      	str	r2, [sp, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fec4 	bl	8001dd8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	461a      	mov	r2, r3
 8002064:	460b      	mov	r3, r1
 8002066:	72fb      	strb	r3, [r7, #11]
 8002068:	4613      	mov	r3, r2
 800206a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002072:	b2db      	uxtb	r3, r3
 8002074:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	f001 fc63 	bl	800394c <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6998      	ldr	r0, [r3, #24]
 800208a:	f107 0117 	add.w	r1, r7, #23
 800208e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002092:	2201      	movs	r2, #1
 8002094:	f003 fa83 	bl	800559e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002098:	bf00      	nop
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fe6c 	bl	8005d7c <HAL_SPI_GetState>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d1f7      	bne.n	800209a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6998      	ldr	r0, [r3, #24]
 80020ae:	7abb      	ldrb	r3, [r7, #10]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f003 fa71 	bl	800559e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80020bc:	bf00      	nop
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 fe5a 	bl	8005d7c <HAL_SPI_GetState>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d1f7      	bne.n	80020be <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4619      	mov	r1, r3
 80020da:	f001 fc37 	bl	800394c <HAL_GPIO_WritePin>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]

	return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	460b      	mov	r3, r1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	4613      	mov	r3, r2
 8002110:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002118:	2101      	movs	r1, #1
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fdbd 	bl	8001c9a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8002120:	210e      	movs	r1, #14
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7ff ff61 	bl	8001fea <LoRa_read>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	461a      	mov	r2, r3
 8002130:	210d      	movs	r1, #13
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff ff73 	bl	800201e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	461a      	mov	r2, r3
 800213c:	2122      	movs	r1, #34	; 0x22
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ff6d 	bl	800201e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	2100      	movs	r1, #0
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff ff84 	bl	8002058 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8002150:	2103      	movs	r1, #3
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fda1 	bl	8001c9a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002158:	2112      	movs	r1, #18
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff ff45 	bl	8001fea <LoRa_read>
 8002160:	4603      	mov	r3, r0
 8002162:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	2112      	movs	r1, #18
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff ff53 	bl	800201e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8002178:	6979      	ldr	r1, [r7, #20]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff fd8d 	bl	8001c9a <LoRa_gotoMode>
			return 1;
 8002180:	2301      	movs	r3, #1
 8002182:	e00f      	b.n	80021a4 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	80bb      	strh	r3, [r7, #4]
 800218a:	88bb      	ldrh	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8002190:	6979      	ldr	r1, [r7, #20]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff fd81 	bl	8001c9a <LoRa_gotoMode>
				return 0;
 8002198:	2300      	movs	r3, #0
 800219a:	e003      	b.n	80021a4 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f000 fe21 	bl	8002de4 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80021a2:	e7d9      	b.n	8002158 <LoRa_transmit+0x5c>
	}

}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff96 	bl	80020e6 <LoRa_isvalid>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8093 	beq.w	80022e8 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fd68 	bl	8001c9a <LoRa_gotoMode>
			HAL_Delay(10);
 80021ca:	200a      	movs	r0, #10
 80021cc:	f000 fe0a 	bl	8002de4 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80021d0:	2101      	movs	r1, #1
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff09 	bl	8001fea <LoRa_read>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80021dc:	200a      	movs	r0, #10
 80021de:	f000 fe01 	bl	8002de4 <HAL_Delay>
			data = read | 0x80;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021e8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	461a      	mov	r2, r3
 80021ee:	2101      	movs	r1, #1
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff14 	bl	800201e <LoRa_write>
			HAL_Delay(100);
 80021f6:	2064      	movs	r0, #100	; 0x64
 80021f8:	f000 fdf4 	bl	8002de4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fe26 	bl	8001e54 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fe7e 	bl	8001f12 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fe8a 	bl	8001f38 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002224:	2223      	movs	r2, #35	; 0x23
 8002226:	210c      	movs	r1, #12
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fef8 	bl	800201e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fec0 	bl	8001fb4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fe39 	bl	8001eb4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	211f      	movs	r1, #31
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fee9 	bl	800201e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4413      	add	r3, r2
 8002266:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	461a      	mov	r2, r3
 800226c:	211d      	movs	r1, #29
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fed5 	bl	800201e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b29b      	uxth	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	2120      	movs	r1, #32
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fecb 	bl	800201e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	2121      	movs	r1, #33	; 0x21
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fec3 	bl	800201e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002298:	2140      	movs	r1, #64	; 0x40
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fea5 	bl	8001fea <LoRa_read>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80022aa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	461a      	mov	r2, r3
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff feb3 	bl	800201e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80022b8:	2101      	movs	r1, #1
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fced 	bl	8001c9a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80022c6:	200a      	movs	r0, #10
 80022c8:	f000 fd8c 	bl	8002de4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80022cc:	2142      	movs	r1, #66	; 0x42
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe8b 	bl	8001fea <LoRa_read>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b12      	cmp	r3, #18
 80022dc:	d101      	bne.n	80022e2 <LoRa_init+0x136>
				return LORA_OK;
 80022de:	23c8      	movs	r3, #200	; 0xc8
 80022e0:	e004      	b.n	80022ec <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80022e2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80022e6:	e001      	b.n	80022ec <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80022e8:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <MX_ADC1_Init+0x98>)
 8002308:	4a21      	ldr	r2, [pc, #132]	; (8002390 <MX_ADC1_Init+0x9c>)
 800230a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <MX_ADC1_Init+0x98>)
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <MX_ADC1_Init+0x98>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <MX_ADC1_Init+0x98>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <MX_ADC1_Init+0x98>)
 8002320:	2200      	movs	r2, #0
 8002322:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <MX_ADC1_Init+0x98>)
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_ADC1_Init+0x98>)
 800232e:	2200      	movs	r2, #0
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <MX_ADC1_Init+0x98>)
 8002334:	4a17      	ldr	r2, [pc, #92]	; (8002394 <MX_ADC1_Init+0xa0>)
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_ADC1_Init+0x98>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <MX_ADC1_Init+0x98>)
 8002340:	2201      	movs	r2, #1
 8002342:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_ADC1_Init+0x98>)
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_ADC1_Init+0x98>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002352:	480e      	ldr	r0, [pc, #56]	; (800238c <MX_ADC1_Init+0x98>)
 8002354:	f000 fd6a 	bl	8002e2c <HAL_ADC_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800235e:	f000 fa85 	bl	800286c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002362:	2301      	movs	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002366:	2301      	movs	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800236e:	463b      	mov	r3, r7
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <MX_ADC1_Init+0x98>)
 8002374:	f000 fe52 	bl	800301c <HAL_ADC_ConfigChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800237e:	f000 fa75 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000230 	.word	0x20000230
 8002390:	40012000 	.word	0x40012000
 8002394:	0f000001 	.word	0x0f000001

08002398 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_ADC_MspInit+0x7c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d127      	bne.n	800240a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_ADC_MspInit+0x80>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a15      	ldr	r2, [pc, #84]	; (8002418 <HAL_ADC_MspInit+0x80>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_ADC_MspInit+0x80>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_ADC_MspInit+0x80>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_ADC_MspInit+0x80>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_ADC_MspInit+0x80>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023f2:	2302      	movs	r3, #2
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f6:	2303      	movs	r3, #3
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <HAL_ADC_MspInit+0x84>)
 8002406:	f001 f91d 	bl	8003644 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40012000 	.word	0x40012000
 8002418:	40023800 	.word	0x40023800
 800241c:	40020000 	.word	0x40020000

08002420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <MX_GPIO_Init+0xc0>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <MX_GPIO_Init+0xc0>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <MX_GPIO_Init+0xc0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <MX_GPIO_Init+0xc0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <MX_GPIO_Init+0xc0>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <MX_GPIO_Init+0xc0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <MX_GPIO_Init+0xc0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <MX_GPIO_Init+0xc0>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_GPIO_Init+0xc0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800248a:	2201      	movs	r2, #1
 800248c:	2103      	movs	r1, #3
 800248e:	4815      	ldr	r0, [pc, #84]	; (80024e4 <MX_GPIO_Init+0xc4>)
 8002490:	f001 fa5c 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800249a:	4812      	ldr	r0, [pc, #72]	; (80024e4 <MX_GPIO_Init+0xc4>)
 800249c:	f001 fa56 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PB14 PB15 */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80024a0:	f24c 0303 	movw	r3, #49155	; 0xc003
 80024a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	4619      	mov	r1, r3
 80024b8:	480a      	ldr	r0, [pc, #40]	; (80024e4 <MX_GPIO_Init+0xc4>)
 80024ba:	f001 f8c3 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80024be:	2304      	movs	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	4619      	mov	r1, r3
 80024d2:	4804      	ldr	r0, [pc, #16]	; (80024e4 <MX_GPIO_Init+0xc4>)
 80024d4:	f001 f8b6 	bl	8003644 <HAL_GPIO_Init>

}
 80024d8:	bf00      	nop
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020400 	.word	0x40020400

080024e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_I2C1_Init+0x50>)
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <MX_I2C1_Init+0x54>)
 80024f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_I2C1_Init+0x50>)
 80024f4:	4a12      	ldr	r2, [pc, #72]	; (8002540 <MX_I2C1_Init+0x58>)
 80024f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_I2C1_Init+0x50>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <MX_I2C1_Init+0x50>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_I2C1_Init+0x50>)
 8002506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800250a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <MX_I2C1_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_I2C1_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <MX_I2C1_Init+0x50>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_I2C1_Init+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <MX_I2C1_Init+0x50>)
 8002526:	f001 fa2b 	bl	8003980 <HAL_I2C_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002530:	f000 f99c 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000278 	.word	0x20000278
 800253c:	40005400 	.word	0x40005400
 8002540:	000186a0 	.word	0x000186a0

08002544 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_I2C_MspInit+0x84>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d12c      	bne.n	80025c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_I2C_MspInit+0x88>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_I2C_MspInit+0x88>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_I2C_MspInit+0x88>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002582:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002588:	2312      	movs	r3, #18
 800258a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002594:	2304      	movs	r3, #4
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	480c      	ldr	r0, [pc, #48]	; (80025d0 <HAL_I2C_MspInit+0x8c>)
 80025a0:	f001 f850 	bl	8003644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_I2C_MspInit+0x88>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_I2C_MspInit+0x88>)
 80025ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_I2C_MspInit+0x88>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	; 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40005400 	.word	0x40005400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020400 	.word	0x40020400

080025d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025d8:	b090      	sub	sp, #64	; 0x40
 80025da:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025dc:	f000 fb90 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e0:	f000 f8dc 	bl	800279c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e4:	f7ff ff1c 	bl	8002420 <MX_GPIO_Init>
  MX_I2C1_Init();
 80025e8:	f7ff ff7e 	bl	80024e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80025ec:	f000 f944 	bl	8002878 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80025f0:	f000 faea 	bl	8002bc8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80025f4:	f7ff fe7e 	bl	80022f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80025f8:	2304      	movs	r3, #4
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2303      	movs	r3, #3
 8002602:	2201      	movs	r2, #1
 8002604:	2105      	movs	r1, #5
 8002606:	2002      	movs	r0, #2
 8002608:	f7fe fdda 	bl	80011c0 <BME280_Config>
  if(HAL_I2C_IsDeviceReady(&hi2c1, 0xEC, 2, 10)==HAL_OK){
 800260c:	230a      	movs	r3, #10
 800260e:	2202      	movs	r2, #2
 8002610:	21ec      	movs	r1, #236	; 0xec
 8002612:	4857      	ldr	r0, [pc, #348]	; (8002770 <main+0x19c>)
 8002614:	f001 fe18 	bl	8004248 <HAL_I2C_IsDeviceReady>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <main+0x56>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800261e:	2201      	movs	r2, #1
 8002620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002624:	4853      	ldr	r0, [pc, #332]	; (8002774 <main+0x1a0>)
 8002626:	f001 f991 	bl	800394c <HAL_GPIO_WritePin>
   }

  uint16_t readvalue;
    HAL_ADC_Start(&hadc1);
 800262a:	4853      	ldr	r0, [pc, #332]	; (8002778 <main+0x1a4>)
 800262c:	f000 fc42 	bl	8002eb4 <HAL_ADC_Start>
    myLoRa = newLoRa();
 8002630:	4c52      	ldr	r4, [pc, #328]	; (800277c <main+0x1a8>)
 8002632:	463b      	mov	r3, r7
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fae9 	bl	8001c0c <newLoRa>
 800263a:	4625      	mov	r5, r4
 800263c:	463c      	mov	r4, r7
 800263e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002646:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800264a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    LoRa_reset(&myLoRa);
 800264e:	484b      	ldr	r0, [pc, #300]	; (800277c <main+0x1a8>)
 8002650:	f7ff fb05 	bl	8001c5e <LoRa_reset>
    myLoRa.CS_port         = NSS_GPIO_Port;
 8002654:	4b49      	ldr	r3, [pc, #292]	; (800277c <main+0x1a8>)
 8002656:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <main+0x1ac>)
 8002658:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin          = NSS_Pin;
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <main+0x1a8>)
 800265c:	2201      	movs	r2, #1
 800265e:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port      = RST_GPIO_Port;
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <main+0x1a8>)
 8002662:	4a47      	ldr	r2, [pc, #284]	; (8002780 <main+0x1ac>)
 8002664:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin       = RST_Pin;
 8002666:	4b45      	ldr	r3, [pc, #276]	; (800277c <main+0x1a8>)
 8002668:	2202      	movs	r2, #2
 800266a:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <main+0x1a8>)
 800266e:	4a44      	ldr	r2, [pc, #272]	; (8002780 <main+0x1ac>)
 8002670:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin        = DIO0_Pin;
 8002672:	4b42      	ldr	r3, [pc, #264]	; (800277c <main+0x1a8>)
 8002674:	2204      	movs	r2, #4
 8002676:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx           = &hspi1;
 8002678:	4b40      	ldr	r3, [pc, #256]	; (800277c <main+0x1a8>)
 800267a:	4a42      	ldr	r2, [pc, #264]	; (8002784 <main+0x1b0>)
 800267c:	619a      	str	r2, [r3, #24]

    myLoRa.frequency             = 440;             // default = 433 MHz
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <main+0x1a8>)
 8002680:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8002684:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <main+0x1a8>)
 8002688:	2207      	movs	r2, #7
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <main+0x1a8>)
 8002690:	2204      	movs	r2, #4
 8002692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <main+0x1a8>)
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    myLoRa.power                 = POWER_20db;      // default = 20db
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <main+0x1a8>)
 80026a0:	22ff      	movs	r2, #255	; 0xff
 80026a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    myLoRa.overCurrentProtection = 130;             // default = 100 mA
 80026a6:	4b35      	ldr	r3, [pc, #212]	; (800277c <main+0x1a8>)
 80026a8:	2282      	movs	r2, #130	; 0x82
 80026aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    myLoRa.preamble              = 9;              // default = 8;
 80026ae:	4b33      	ldr	r3, [pc, #204]	; (800277c <main+0x1a8>)
 80026b0:	2209      	movs	r2, #9
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28

    if (LoRa_init(&myLoRa) == LORA_OK){
 80026b4:	4831      	ldr	r0, [pc, #196]	; (800277c <main+0x1a8>)
 80026b6:	f7ff fd79 	bl	80021ac <LoRa_init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2bc8      	cmp	r3, #200	; 0xc8
 80026be:	d105      	bne.n	80026cc <main+0xf8>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80026c0:	2201      	movs	r2, #1
 80026c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c6:	482e      	ldr	r0, [pc, #184]	; (8002780 <main+0x1ac>)
 80026c8:	f001 f940 	bl	800394c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (LoRa_init(&myLoRa) == LORA_OK){
 80026cc:	482b      	ldr	r0, [pc, #172]	; (800277c <main+0x1a8>)
 80026ce:	f7ff fd6d 	bl	80021ac <LoRa_init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2bc8      	cmp	r3, #200	; 0xc8
 80026d6:	d106      	bne.n	80026e6 <main+0x112>
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026de:	4828      	ldr	r0, [pc, #160]	; (8002780 <main+0x1ac>)
 80026e0:	f001 f934 	bl	800394c <HAL_GPIO_WritePin>
 80026e4:	e005      	b.n	80026f2 <main+0x11e>
	      }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ec:	4824      	ldr	r0, [pc, #144]	; (8002780 <main+0x1ac>)
 80026ee:	f001 f92d 	bl	800394c <HAL_GPIO_WritePin>
	  }
    BME280_Measure();
 80026f2:	f7ff f9ff 	bl	8001af4 <BME280_Measure>
    sprintf(buffer, "T: %.2f P: %.2f H: %.2f\n\r", Temperature, Pressure, Humidity);
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <main+0x1b4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff2c 	bl	8000558 <__aeabi_f2d>
 8002700:	4680      	mov	r8, r0
 8002702:	4689      	mov	r9, r1
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <main+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff25 	bl	8000558 <__aeabi_f2d>
 800270e:	4604      	mov	r4, r0
 8002710:	460d      	mov	r5, r1
 8002712:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <main+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff1e 	bl	8000558 <__aeabi_f2d>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002724:	e9cd 4500 	strd	r4, r5, [sp]
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	4919      	ldr	r1, [pc, #100]	; (8002794 <main+0x1c0>)
 800272e:	481a      	ldr	r0, [pc, #104]	; (8002798 <main+0x1c4>)
 8002730:	f004 fbc0 	bl	8006eb4 <siprintf>
//  readvalue = HAL_ADC_GetValue(&hadc1);
//	  stat = LoRa_init(&myLoRa);
//	  send_data = "Hello world!";
//	  sprintf(send_data, "%d", readvalue);
//
	if(LoRa_transmit(&myLoRa, (uint8_t*)buffer, strlen(buffer), 100) == 1){
 8002734:	4818      	ldr	r0, [pc, #96]	; (8002798 <main+0x1c4>)
 8002736:	f7fd fd53 	bl	80001e0 <strlen>
 800273a:	4603      	mov	r3, r0
 800273c:	b2da      	uxtb	r2, r3
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	4915      	ldr	r1, [pc, #84]	; (8002798 <main+0x1c4>)
 8002742:	480e      	ldr	r0, [pc, #56]	; (800277c <main+0x1a8>)
 8002744:	f7ff fcda 	bl	80020fc <LoRa_transmit>
 8002748:	4603      	mov	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d106      	bne.n	800275c <main+0x188>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800274e:	2201      	movs	r2, #1
 8002750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002754:	480a      	ldr	r0, [pc, #40]	; (8002780 <main+0x1ac>)
 8002756:	f001 f8f9 	bl	800394c <HAL_GPIO_WritePin>
 800275a:	e005      	b.n	8002768 <main+0x194>
	}
	else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002762:	4807      	ldr	r0, [pc, #28]	; (8002780 <main+0x1ac>)
 8002764:	f001 f8f2 	bl	800394c <HAL_GPIO_WritePin>
	}
	HAL_Delay(200);
 8002768:	20c8      	movs	r0, #200	; 0xc8
 800276a:	f000 fb3b 	bl	8002de4 <HAL_Delay>
	  if (LoRa_init(&myLoRa) == LORA_OK){
 800276e:	e7ad      	b.n	80026cc <main+0xf8>
 8002770:	20000278 	.word	0x20000278
 8002774:	40020c00 	.word	0x40020c00
 8002778:	20000230 	.word	0x20000230
 800277c:	200002ec 	.word	0x200002ec
 8002780:	40020400 	.word	0x40020400
 8002784:	20000324 	.word	0x20000324
 8002788:	20000318 	.word	0x20000318
 800278c:	2000031c 	.word	0x2000031c
 8002790:	20000320 	.word	0x20000320
 8002794:	080093c0 	.word	0x080093c0
 8002798:	200002cc 	.word	0x200002cc

0800279c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b094      	sub	sp, #80	; 0x50
 80027a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a2:	f107 0320 	add.w	r3, r7, #32
 80027a6:	2230      	movs	r2, #48	; 0x30
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 ff10 	bl	80065d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <SystemClock_Config+0xc8>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <SystemClock_Config+0xc8>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <SystemClock_Config+0xc8>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <SystemClock_Config+0xcc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a20      	ldr	r2, [pc, #128]	; (8002868 <SystemClock_Config+0xcc>)
 80027e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <SystemClock_Config+0xcc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002802:	2302      	movs	r3, #2
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800280c:	2304      	movs	r3, #4
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002810:	2348      	movs	r3, #72	; 0x48
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002814:	2302      	movs	r3, #2
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002818:	2303      	movs	r3, #3
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800281c:	f107 0320 	add.w	r3, r7, #32
 8002820:	4618      	mov	r0, r3
 8002822:	f002 f99b 	bl	8004b5c <HAL_RCC_OscConfig>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800282c:	f000 f81e 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002830:	230f      	movs	r3, #15
 8002832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002834:	2302      	movs	r3, #2
 8002836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800283c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fbfd 	bl	800504c <HAL_RCC_ClockConfig>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002858:	f000 f808 	bl	800286c <Error_Handler>
  }
}
 800285c:	bf00      	nop
 800285e:	3750      	adds	r7, #80	; 0x50
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <MX_SPI1_Init+0x64>)
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <MX_SPI1_Init+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_SPI1_Init+0x64>)
 8002884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_SPI1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <MX_SPI1_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_SPI1_Init+0x64>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_SPI1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_SPI1_Init+0x64>)
 80028a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_SPI1_Init+0x64>)
 80028ac:	2218      	movs	r2, #24
 80028ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <MX_SPI1_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_SPI1_Init+0x64>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <MX_SPI1_Init+0x64>)
 80028be:	2200      	movs	r2, #0
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_SPI1_Init+0x64>)
 80028c4:	220a      	movs	r2, #10
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <MX_SPI1_Init+0x64>)
 80028ca:	f002 fddf 	bl	800548c <HAL_SPI_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028d4:	f7ff ffca 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000324 	.word	0x20000324
 80028e0:	40013000 	.word	0x40013000

080028e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_SPI_MspInit+0x84>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d12b      	bne.n	800295e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_SPI_MspInit+0x88>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_SPI_MspInit+0x88>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800293e:	23e0      	movs	r3, #224	; 0xe0
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800294e:	2305      	movs	r3, #5
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_SPI_MspInit+0x8c>)
 800295a:	f000 fe73 	bl	8003644 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40013000 	.word	0x40013000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_MspInit+0x4c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <HAL_MspInit+0x4c>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_MspInit+0x4c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_MspInit+0x4c>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_MspInit+0x4c>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_MspInit+0x4c>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029b2:	2007      	movs	r0, #7
 80029b4:	f000 fe12 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <NMI_Handler+0x4>

080029ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <HardFault_Handler+0x4>

080029d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <MemManage_Handler+0x4>

080029d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a10:	f000 f9c8 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
	return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_kill>:

int _kill(int pid, int sig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a32:	f003 fda3 	bl	800657c <__errno>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2216      	movs	r2, #22
 8002a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_exit>:

void _exit (int status)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffe7 	bl	8002a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a5a:	e7fe      	b.n	8002a5a <_exit+0x12>

08002a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e00a      	b.n	8002a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a6e:	f3af 8000 	nop.w
 8002a72:	4601      	mov	r1, r0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	60ba      	str	r2, [r7, #8]
 8002a7a:	b2ca      	uxtb	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf0      	blt.n	8002a6e <_read+0x12>
	}

return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e009      	b.n	8002abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	60ba      	str	r2, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dbf1      	blt.n	8002aa8 <_write+0x12>
	}
	return len;
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_close>:

int _close(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af6:	605a      	str	r2, [r3, #4]
	return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_isatty>:

int _isatty(int file)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b0e:	2301      	movs	r3, #1
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
	return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <_sbrk+0x5c>)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <_sbrk+0x60>)
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <_sbrk+0x64>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <_sbrk+0x68>)
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b68:	f003 fd08 	bl	800657c <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	220c      	movs	r2, #12
 8002b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b76:	e009      	b.n	8002b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <_sbrk+0x64>)
 8002b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20020000 	.word	0x20020000
 8002b98:	00000400 	.word	0x00000400
 8002b9c:	2000037c 	.word	0x2000037c
 8002ba0:	200003d8 	.word	0x200003d8

08002ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <SystemInit+0x20>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <SystemInit+0x20>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <MX_USART2_UART_Init+0x50>)
 8002bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002bee:	220c      	movs	r2, #12
 8002bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bfe:	4805      	ldr	r0, [pc, #20]	; (8002c14 <MX_USART2_UART_Init+0x4c>)
 8002c00:	f003 f9fa 	bl	8005ff8 <HAL_UART_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c0a:	f7ff fe2f 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000380 	.word	0x20000380
 8002c18:	40004400 	.word	0x40004400

08002c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_UART_MspInit+0x84>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12b      	bne.n	8002c96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c76:	230c      	movs	r3, #12
 8002c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c86:	2307      	movs	r3, #7
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <HAL_UART_MspInit+0x8c>)
 8002c92:	f000 fcd7 	bl	8003644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000

08002cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cb2:	490e      	ldr	r1, [pc, #56]	; (8002cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cc8:	4c0b      	ldr	r4, [pc, #44]	; (8002cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cd6:	f7ff ff65 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cda:	f003 fc55 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cde:	f7ff fc79 	bl	80025d4 <main>
  bx  lr    
 8002ce2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002cf0:	080097dc 	.word	0x080097dc
  ldr r2, =_sbss
 8002cf4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002cf8:	200003d8 	.word	0x200003d8

08002cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <HAL_Init+0x40>)
 8002d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_Init+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_Init+0x40>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_Init+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_Init+0x40>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f000 fc57 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f000 f808 	bl	8002d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d34:	f7ff fe1e 	bl	8002974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x54>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_InitTick+0x58>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fc61 	bl	800362a <HAL_SYSTICK_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00e      	b.n	8002d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d80a      	bhi.n	8002d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d80:	f000 fc37 	bl	80035f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d84:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_InitTick+0x5c>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000008 	.word	0x20000008
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x20>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000008 	.word	0x20000008
 8002dc8:	200003c4 	.word	0x200003c4

08002dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_GetTick+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	200003c4 	.word	0x200003c4

08002de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff ffee 	bl	8002dcc <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dfc:	d005      	beq.n	8002e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_Delay+0x44>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e0a:	bf00      	nop
 8002e0c:	f7ff ffde 	bl	8002dcc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8f7      	bhi.n	8002e0c <HAL_Delay+0x28>
  {
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000008 	.word	0x20000008

08002e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e033      	b.n	8002eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff faa4 	bl	8002398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e72:	f023 0302 	bic.w	r3, r3, #2
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9fe 	bl	8003280 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
 8002e9a:	e001      	b.n	8002ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_Start+0x1a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e097      	b.n	8002ffe <HAL_ADC_Start+0x14a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d018      	beq.n	8002f16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ef4:	4b45      	ldr	r3, [pc, #276]	; (800300c <HAL_ADC_Start+0x158>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a45      	ldr	r2, [pc, #276]	; (8003010 <HAL_ADC_Start+0x15c>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0c9a      	lsrs	r2, r3, #18
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d15f      	bne.n	8002fe4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d106      	bne.n	8002f72 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	f023 0206 	bic.w	r2, r3, #6
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
 8002f70:	e002      	b.n	8002f78 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_ADC_Start+0x160>)
 8002f82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d129      	bne.n	8002ffc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	e020      	b.n	8002ffc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	; (8003018 <HAL_ADC_Start+0x164>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d11b      	bne.n	8002ffc <HAL_ADC_Start+0x148>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d114      	bne.n	8002ffc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	e00b      	b.n	8002ffc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f043 0210 	orr.w	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000
 8003010:	431bde83 	.word	0x431bde83
 8003014:	40012300 	.word	0x40012300
 8003018:	40012000 	.word	0x40012000

0800301c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1c>
 8003034:	2302      	movs	r3, #2
 8003036:	e113      	b.n	8003260 <HAL_ADC_ConfigChannel+0x244>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b09      	cmp	r3, #9
 8003046:	d925      	bls.n	8003094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68d9      	ldr	r1, [r3, #12]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	3b1e      	subs	r3, #30
 800305e:	2207      	movs	r2, #7
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43da      	mvns	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	400a      	ands	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68d9      	ldr	r1, [r3, #12]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	4618      	mov	r0, r3
 8003080:	4603      	mov	r3, r0
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4403      	add	r3, r0
 8003086:	3b1e      	subs	r3, #30
 8003088:	409a      	lsls	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e022      	b.n	80030da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	2207      	movs	r2, #7
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	400a      	ands	r2, r1
 80030b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6919      	ldr	r1, [r3, #16]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4403      	add	r3, r0
 80030d0:	409a      	lsls	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d824      	bhi.n	800312c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	3b05      	subs	r3, #5
 80030f4:	221f      	movs	r2, #31
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	400a      	ands	r2, r1
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	4618      	mov	r0, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	3b05      	subs	r3, #5
 800311e:	fa00 f203 	lsl.w	r2, r0, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34
 800312a:	e04c      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d824      	bhi.n	800317e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	3b23      	subs	r3, #35	; 0x23
 8003146:	221f      	movs	r2, #31
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43da      	mvns	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	400a      	ands	r2, r1
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	4618      	mov	r0, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3b23      	subs	r3, #35	; 0x23
 8003170:	fa00 f203 	lsl.w	r2, r0, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
 800317c:	e023      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	3b41      	subs	r3, #65	; 0x41
 8003190:	221f      	movs	r2, #31
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43da      	mvns	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	400a      	ands	r2, r1
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	3b41      	subs	r3, #65	; 0x41
 80031ba:	fa00 f203 	lsl.w	r2, r0, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_ADC_ConfigChannel+0x250>)
 80031c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a28      	ldr	r2, [pc, #160]	; (8003270 <HAL_ADC_ConfigChannel+0x254>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10f      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d8>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d10b      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_ADC_ConfigChannel+0x254>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12b      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_ADC_ConfigChannel+0x258>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x1f4>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b11      	cmp	r3, #17
 800320e:	d122      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_ADC_ConfigChannel+0x258>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_ADC_ConfigChannel+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_ADC_ConfigChannel+0x260>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9a      	lsrs	r2, r3, #18
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003248:	e002      	b.n	8003250 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f9      	bne.n	800324a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40012300 	.word	0x40012300
 8003270:	40012000 	.word	0x40012000
 8003274:	10000012 	.word	0x10000012
 8003278:	20000000 	.word	0x20000000
 800327c:	431bde83 	.word	0x431bde83

08003280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003288:	4b79      	ldr	r3, [pc, #484]	; (8003470 <ADC_Init+0x1f0>)
 800328a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	021a      	lsls	r2, r3, #8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	4a58      	ldr	r2, [pc, #352]	; (8003474 <ADC_Init+0x1f4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	e00f      	b.n	800337e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800336c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800337c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0202 	bic.w	r2, r2, #2
 800338c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6899      	ldr	r1, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	005a      	lsls	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	3b01      	subs	r3, #1
 80033d8:	035a      	lsls	r2, r3, #13
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	e007      	b.n	80033f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	3b01      	subs	r3, #1
 8003410:	051a      	lsls	r2, r3, #20
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003436:	025a      	lsls	r2, r3, #9
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	029a      	lsls	r2, r3, #10
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012300 	.word	0x40012300
 8003474:	0f000001 	.word	0x0f000001

08003478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003494:	4013      	ands	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034aa:	4a04      	ldr	r2, [pc, #16]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	60d3      	str	r3, [r2, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__NVIC_GetPriorityGrouping+0x18>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	f003 0307 	and.w	r3, r3, #7
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	6039      	str	r1, [r7, #0]
 80034e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	db0a      	blt.n	8003506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	490c      	ldr	r1, [pc, #48]	; (8003528 <__NVIC_SetPriority+0x4c>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	0112      	lsls	r2, r2, #4
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	440b      	add	r3, r1
 8003500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003504:	e00a      	b.n	800351c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4908      	ldr	r1, [pc, #32]	; (800352c <__NVIC_SetPriority+0x50>)
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	3b04      	subs	r3, #4
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	440b      	add	r3, r1
 800351a:	761a      	strb	r2, [r3, #24]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000e100 	.word	0xe000e100
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003530:	b480      	push	{r7}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f1c3 0307 	rsb	r3, r3, #7
 800354a:	2b04      	cmp	r3, #4
 800354c:	bf28      	it	cs
 800354e:	2304      	movcs	r3, #4
 8003550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3304      	adds	r3, #4
 8003556:	2b06      	cmp	r3, #6
 8003558:	d902      	bls.n	8003560 <NVIC_EncodePriority+0x30>
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3b03      	subs	r3, #3
 800355e:	e000      	b.n	8003562 <NVIC_EncodePriority+0x32>
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43da      	mvns	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	401a      	ands	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	43d9      	mvns	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	4313      	orrs	r3, r2
         );
}
 800358a:	4618      	mov	r0, r3
 800358c:	3724      	adds	r7, #36	; 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a8:	d301      	bcc.n	80035ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00f      	b.n	80035ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <SysTick_Config+0x40>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b6:	210f      	movs	r1, #15
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035bc:	f7ff ff8e 	bl	80034dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SysTick_Config+0x40>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <SysTick_Config+0x40>)
 80035c8:	2207      	movs	r2, #7
 80035ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	e000e010 	.word	0xe000e010

080035dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff47 	bl	8003478 <__NVIC_SetPriorityGrouping>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003604:	f7ff ff5c 	bl	80034c0 <__NVIC_GetPriorityGrouping>
 8003608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff ff8e 	bl	8003530 <NVIC_EncodePriority>
 8003614:	4602      	mov	r2, r0
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff5d 	bl	80034dc <__NVIC_SetPriority>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffb0 	bl	8003598 <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e159      	b.n	8003914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003660:	2201      	movs	r2, #1
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	f040 8148 	bne.w	800390e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d005      	beq.n	8003696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003692:	2b02      	cmp	r3, #2
 8003694:	d130      	bne.n	80036f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b03      	cmp	r3, #3
 8003702:	d017      	beq.n	8003734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d123      	bne.n	8003788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	08da      	lsrs	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3208      	adds	r2, #8
 8003748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	69b9      	ldr	r1, [r7, #24]
 8003784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a2 	beq.w	800390e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	4b57      	ldr	r3, [pc, #348]	; (800392c <HAL_GPIO_Init+0x2e8>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	4a56      	ldr	r2, [pc, #344]	; (800392c <HAL_GPIO_Init+0x2e8>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d8:	6453      	str	r3, [r2, #68]	; 0x44
 80037da:	4b54      	ldr	r3, [pc, #336]	; (800392c <HAL_GPIO_Init+0x2e8>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e6:	4a52      	ldr	r2, [pc, #328]	; (8003930 <HAL_GPIO_Init+0x2ec>)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	089b      	lsrs	r3, r3, #2
 80037ec:	3302      	adds	r3, #2
 80037ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a49      	ldr	r2, [pc, #292]	; (8003934 <HAL_GPIO_Init+0x2f0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d019      	beq.n	8003846 <HAL_GPIO_Init+0x202>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a48      	ldr	r2, [pc, #288]	; (8003938 <HAL_GPIO_Init+0x2f4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_GPIO_Init+0x1fe>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a47      	ldr	r2, [pc, #284]	; (800393c <HAL_GPIO_Init+0x2f8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00d      	beq.n	800383e <HAL_GPIO_Init+0x1fa>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a46      	ldr	r2, [pc, #280]	; (8003940 <HAL_GPIO_Init+0x2fc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <HAL_GPIO_Init+0x1f6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a45      	ldr	r2, [pc, #276]	; (8003944 <HAL_GPIO_Init+0x300>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <HAL_GPIO_Init+0x1f2>
 8003832:	2304      	movs	r3, #4
 8003834:	e008      	b.n	8003848 <HAL_GPIO_Init+0x204>
 8003836:	2307      	movs	r3, #7
 8003838:	e006      	b.n	8003848 <HAL_GPIO_Init+0x204>
 800383a:	2303      	movs	r3, #3
 800383c:	e004      	b.n	8003848 <HAL_GPIO_Init+0x204>
 800383e:	2302      	movs	r3, #2
 8003840:	e002      	b.n	8003848 <HAL_GPIO_Init+0x204>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_GPIO_Init+0x204>
 8003846:	2300      	movs	r3, #0
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	f002 0203 	and.w	r2, r2, #3
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	4093      	lsls	r3, r2
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003858:	4935      	ldr	r1, [pc, #212]	; (8003930 <HAL_GPIO_Init+0x2ec>)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	3302      	adds	r3, #2
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003866:	4b38      	ldr	r3, [pc, #224]	; (8003948 <HAL_GPIO_Init+0x304>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388a:	4a2f      	ldr	r2, [pc, #188]	; (8003948 <HAL_GPIO_Init+0x304>)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_GPIO_Init+0x304>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b4:	4a24      	ldr	r2, [pc, #144]	; (8003948 <HAL_GPIO_Init+0x304>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_GPIO_Init+0x304>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038de:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_GPIO_Init+0x304>)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <HAL_GPIO_Init+0x304>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003908:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <HAL_GPIO_Init+0x304>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	f67f aea2 	bls.w	8003660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	40013800 	.word	0x40013800
 8003934:	40020000 	.word	0x40020000
 8003938:	40020400 	.word	0x40020400
 800393c:	40020800 	.word	0x40020800
 8003940:	40020c00 	.word	0x40020c00
 8003944:	40021000 	.word	0x40021000
 8003948:	40013c00 	.word	0x40013c00

0800394c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
 8003958:	4613      	mov	r3, r2
 800395a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800395c:	787b      	ldrb	r3, [r7, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003968:	e003      	b.n	8003972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	041a      	lsls	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	619a      	str	r2, [r3, #24]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e12b      	b.n	8003bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe fdcc 	bl	8002544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e4:	f001 fd2a 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80039e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a81      	ldr	r2, [pc, #516]	; (8003bf4 <HAL_I2C_Init+0x274>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d807      	bhi.n	8003a04 <HAL_I2C_Init+0x84>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a80      	ldr	r2, [pc, #512]	; (8003bf8 <HAL_I2C_Init+0x278>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	bf94      	ite	ls
 80039fc:	2301      	movls	r3, #1
 80039fe:	2300      	movhi	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e006      	b.n	8003a12 <HAL_I2C_Init+0x92>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a7d      	ldr	r2, [pc, #500]	; (8003bfc <HAL_I2C_Init+0x27c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bf94      	ite	ls
 8003a0c:	2301      	movls	r3, #1
 8003a0e:	2300      	movhi	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0e7      	b.n	8003bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a78      	ldr	r2, [pc, #480]	; (8003c00 <HAL_I2C_Init+0x280>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	0c9b      	lsrs	r3, r3, #18
 8003a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_I2C_Init+0x274>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d802      	bhi.n	8003a54 <HAL_I2C_Init+0xd4>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3301      	adds	r3, #1
 8003a52:	e009      	b.n	8003a68 <HAL_I2C_Init+0xe8>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	4a69      	ldr	r2, [pc, #420]	; (8003c04 <HAL_I2C_Init+0x284>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	3301      	adds	r3, #1
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	495c      	ldr	r1, [pc, #368]	; (8003bf4 <HAL_I2C_Init+0x274>)
 8003a84:	428b      	cmp	r3, r1
 8003a86:	d819      	bhi.n	8003abc <HAL_I2C_Init+0x13c>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e59      	subs	r1, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a96:	1c59      	adds	r1, r3, #1
 8003a98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_I2C_Init+0x138>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1e59      	subs	r1, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	e051      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	e04f      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <HAL_I2C_Init+0x168>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	440b      	add	r3, r1
 8003ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e012      	b.n	8003b0e <HAL_I2C_Init+0x18e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	0099      	lsls	r1, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Init+0x196>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e022      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10e      	bne.n	8003b3c <HAL_I2C_Init+0x1bc>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1e58      	subs	r0, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6859      	ldr	r1, [r3, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	440b      	add	r3, r1
 8003b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3a:	e00f      	b.n	8003b5c <HAL_I2C_Init+0x1dc>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1e58      	subs	r0, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	0099      	lsls	r1, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6809      	ldr	r1, [r1, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6911      	ldr	r1, [r2, #16]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	4311      	orrs	r1, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	000186a0 	.word	0x000186a0
 8003bf8:	001e847f 	.word	0x001e847f
 8003bfc:	003d08ff 	.word	0x003d08ff
 8003c00:	431bde83 	.word	0x431bde83
 8003c04:	10624dd3 	.word	0x10624dd3

08003c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c22:	f7ff f8d3 	bl	8002dcc <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	f040 80d9 	bne.w	8003de8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2319      	movs	r3, #25
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	496d      	ldr	r1, [pc, #436]	; (8003df4 <HAL_I2C_Mem_Write+0x1ec>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fdad 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0cc      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2C_Mem_Write+0x56>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0c5      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d007      	beq.n	8003c84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2221      	movs	r2, #33	; 0x21
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a4d      	ldr	r2, [pc, #308]	; (8003df8 <HAL_I2C_Mem_Write+0x1f0>)
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cc6:	88f8      	ldrh	r0, [r7, #6]
 8003cc8:	893a      	ldrh	r2, [r7, #8]
 8003cca:	8979      	ldrh	r1, [r7, #10]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fbe4 	bl	80044a4 <I2C_RequestMemoryWrite>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d052      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e081      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fe2e 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d107      	bne.n	8003d0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e06b      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11b      	bne.n	8003d88 <HAL_I2C_Mem_Write+0x180>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1aa      	bne.n	8003ce6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fe1a 	bl	80049ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d107      	bne.n	8003db8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e016      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000

08003dfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	; 0x30
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e16:	f7fe ffd9 	bl	8002dcc <HAL_GetTick>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	f040 8208 	bne.w	800423a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2319      	movs	r3, #25
 8003e30:	2201      	movs	r2, #1
 8003e32:	497b      	ldr	r1, [pc, #492]	; (8004020 <HAL_I2C_Mem_Read+0x224>)
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fcb3 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
 8003e42:	e1fb      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x56>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e1f4      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d007      	beq.n	8003e78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2222      	movs	r2, #34	; 0x22
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a5b      	ldr	r2, [pc, #364]	; (8004024 <HAL_I2C_Mem_Read+0x228>)
 8003eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eba:	88f8      	ldrh	r0, [r7, #6]
 8003ebc:	893a      	ldrh	r2, [r7, #8]
 8003ebe:	8979      	ldrh	r1, [r7, #10]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4603      	mov	r3, r0
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fb80 	bl	80045d0 <I2C_RequestMemoryRead>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1b0      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d113      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e184      	b.n	8004214 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d11b      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e164      	b.n	8004214 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d11b      	bne.n	8003f8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	e144      	b.n	8004214 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fa0:	e138      	b.n	8004214 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	f200 80f1 	bhi.w	800418e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d123      	bne.n	8003ffc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fd49 	bl	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e139      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffa:	e10b      	b.n	8004214 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b02      	cmp	r3, #2
 8004002:	d14e      	bne.n	80040a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	2200      	movs	r2, #0
 800400c:	4906      	ldr	r1, [pc, #24]	; (8004028 <HAL_I2C_Mem_Read+0x22c>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fbc6 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e10e      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000
 8004028:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a0:	e0b8      	b.n	8004214 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2200      	movs	r2, #0
 80040aa:	4966      	ldr	r1, [pc, #408]	; (8004244 <HAL_I2C_Mem_Read+0x448>)
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fb77 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0bf      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	2200      	movs	r2, #0
 8004106:	494f      	ldr	r1, [pc, #316]	; (8004244 <HAL_I2C_Mem_Read+0x448>)
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fb49 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e091      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800418c:	e042      	b.n	8004214 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fc5c 	bl	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e04c      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d118      	bne.n	8004214 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	f47f aec2 	bne.w	8003fa2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800423a:	2302      	movs	r3, #2
  }
}
 800423c:	4618      	mov	r0, r3
 800423e:	3728      	adds	r7, #40	; 0x28
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	00010004 	.word	0x00010004

08004248 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	460b      	mov	r3, r1
 8004256:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004258:	f7fe fdb8 	bl	8002dcc <HAL_GetTick>
 800425c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	f040 8111 	bne.w	8004492 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2319      	movs	r3, #25
 8004276:	2201      	movs	r2, #1
 8004278:	4988      	ldr	r1, [pc, #544]	; (800449c <HAL_I2C_IsDeviceReady+0x254>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fa90 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	e104      	b.n	8004494 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_I2C_IsDeviceReady+0x50>
 8004294:	2302      	movs	r3, #2
 8004296:	e0fd      	b.n	8004494 <HAL_I2C_IsDeviceReady+0x24c>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d007      	beq.n	80042be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2224      	movs	r2, #36	; 0x24
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a70      	ldr	r2, [pc, #448]	; (80044a0 <HAL_I2C_IsDeviceReady+0x258>)
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fa4e 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004318:	d103      	bne.n	8004322 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e0b6      	b.n	8004494 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004334:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004336:	f7fe fd49 	bl	8002dcc <HAL_GetTick>
 800433a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800436a:	e025      	b.n	80043b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800436c:	f7fe fd2e 	bl	8002dcc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <HAL_I2C_IsDeviceReady+0x13a>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	22a0      	movs	r2, #160	; 0xa0
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2ba0      	cmp	r3, #160	; 0xa0
 80043c2:	d005      	beq.n	80043d0 <HAL_I2C_IsDeviceReady+0x188>
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <HAL_I2C_IsDeviceReady+0x188>
 80043ca:	7dbb      	ldrb	r3, [r7, #22]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0cd      	beq.n	800436c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d129      	bne.n	800443a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2319      	movs	r3, #25
 8004412:	2201      	movs	r2, #1
 8004414:	4921      	ldr	r1, [pc, #132]	; (800449c <HAL_I2C_IsDeviceReady+0x254>)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f9c2 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e036      	b.n	8004494 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e02c      	b.n	8004494 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004448:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004452:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2319      	movs	r3, #25
 800445a:	2201      	movs	r2, #1
 800445c:	490f      	ldr	r1, [pc, #60]	; (800449c <HAL_I2C_IsDeviceReady+0x254>)
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f99e 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e012      	b.n	8004494 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3301      	adds	r3, #1
 8004472:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	f4ff af32 	bcc.w	80042e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	00100002 	.word	0x00100002
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f960 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d103      	bne.n	80044fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e05f      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	492d      	ldr	r1, [pc, #180]	; (80045cc <I2C_RequestMemoryWrite+0x128>)
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f998 	bl	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e04c      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004540:	6a39      	ldr	r1, [r7, #32]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa02 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b04      	cmp	r3, #4
 8004554:	d107      	bne.n	8004566 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e02b      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	611a      	str	r2, [r3, #16]
 800457a:	e021      	b.n	80045c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800457c:	893b      	ldrh	r3, [r7, #8]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	b29b      	uxth	r3, r3
 8004582:	b2da      	uxtb	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	6a39      	ldr	r1, [r7, #32]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f9dc 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d107      	bne.n	80045b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e005      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b6:	893b      	ldrh	r3, [r7, #8]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	00010002 	.word	0x00010002

080045d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004608:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	2200      	movs	r2, #0
 8004612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f8c2 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004630:	d103      	bne.n	800463a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0aa      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800464c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	4952      	ldr	r1, [pc, #328]	; (800479c <I2C_RequestMemoryRead+0x1cc>)
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f8fa 	bl	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e097      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	6a39      	ldr	r1, [r7, #32]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f964 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b04      	cmp	r3, #4
 8004690:	d107      	bne.n	80046a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e076      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ac:	893b      	ldrh	r3, [r7, #8]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]
 80046b6:	e021      	b.n	80046fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046b8:	893b      	ldrh	r3, [r7, #8]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	6a39      	ldr	r1, [r7, #32]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f93e 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d107      	bne.n	80046ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e050      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046f2:	893b      	ldrh	r3, [r7, #8]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	6a39      	ldr	r1, [r7, #32]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f923 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b04      	cmp	r3, #4
 8004712:	d107      	bne.n	8004724 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e035      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004736:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2200      	movs	r2, #0
 8004740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f82b 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475e:	d103      	bne.n	8004768 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e013      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800476c:	897b      	ldrh	r3, [r7, #10]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	6a3a      	ldr	r2, [r7, #32]
 8004780:	4906      	ldr	r1, [pc, #24]	; (800479c <I2C_RequestMemoryRead+0x1cc>)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f863 	bl	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	00010002 	.word	0x00010002

080047a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b0:	e025      	b.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b8:	d021      	beq.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe fb07 	bl	8002dcc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d116      	bne.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e023      	b.n	8004846 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10d      	bne.n	8004824 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	43da      	mvns	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	e00c      	b.n	800483e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	429a      	cmp	r2, r3
 8004842:	d0b6      	beq.n	80047b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800485c:	e051      	b.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d123      	bne.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004886:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f043 0204 	orr.w	r2, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e046      	b.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048bc:	d021      	beq.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fe fa85 	bl	8002dcc <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e020      	b.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e00b      	b.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	43da      	mvns	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d18d      	bne.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004958:	e02d      	b.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f8ce 	bl	8004afc <I2C_IsAcknowledgeFailed>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e02d      	b.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004970:	d021      	beq.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004972:	f7fe fa2b 	bl	8002dcc <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e007      	b.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d1ca      	bne.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049da:	e02d      	b.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f88d 	bl	8004afc <I2C_IsAcknowledgeFailed>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e02d      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f2:	d021      	beq.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f4:	f7fe f9ea 	bl	8002dcc <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e007      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d1ca      	bne.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a5c:	e042      	b.n	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d119      	bne.n	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0210 	mvn.w	r2, #16
 8004a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e029      	b.n	8004af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa0:	f7fe f994 	bl	8002dcc <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d116      	bne.n	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f043 0220 	orr.w	r2, r3, #32
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e007      	b.n	8004af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d1b5      	bne.n	8004a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d11b      	bne.n	8004b4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	f043 0204 	orr.w	r2, r3, #4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e267      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d075      	beq.n	8004c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d00c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b86:	4b85      	ldr	r3, [pc, #532]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d112      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b92:	4b82      	ldr	r3, [pc, #520]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	4b7e      	ldr	r3, [pc, #504]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d05b      	beq.n	8004c64 <HAL_RCC_OscConfig+0x108>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d157      	bne.n	8004c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e242      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x74>
 8004bc2:	4b76      	ldr	r3, [pc, #472]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a75      	ldr	r2, [pc, #468]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e01d      	b.n	8004c0c <HAL_RCC_OscConfig+0xb0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x98>
 8004bda:	4b70      	ldr	r3, [pc, #448]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6f      	ldr	r2, [pc, #444]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	4b6d      	ldr	r3, [pc, #436]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6c      	ldr	r2, [pc, #432]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e00b      	b.n	8004c0c <HAL_RCC_OscConfig+0xb0>
 8004bf4:	4b69      	ldr	r3, [pc, #420]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a68      	ldr	r2, [pc, #416]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4b66      	ldr	r3, [pc, #408]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a65      	ldr	r2, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d013      	beq.n	8004c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fe f8da 	bl	8002dcc <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fe f8d6 	bl	8002dcc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e207      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b5b      	ldr	r3, [pc, #364]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0xc0>
 8004c3a:	e014      	b.n	8004c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fe f8c6 	bl	8002dcc <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fe f8c2 	bl	8002dcc <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	; 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1f3      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	4b51      	ldr	r3, [pc, #324]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0xe8>
 8004c62:	e000      	b.n	8004c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d063      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c72:	4b4a      	ldr	r3, [pc, #296]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7e:	4b47      	ldr	r3, [pc, #284]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d11c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c8a:	4b44      	ldr	r3, [pc, #272]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d116      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c96:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_RCC_OscConfig+0x152>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d001      	beq.n	8004cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e1c7      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cae:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4937      	ldr	r1, [pc, #220]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	e03a      	b.n	8004d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ccc:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <HAL_RCC_OscConfig+0x244>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fe f87b 	bl	8002dcc <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cda:	f7fe f877 	bl	8002dcc <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e1a8      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf8:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4925      	ldr	r1, [pc, #148]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	600b      	str	r3, [r1, #0]
 8004d0c:	e015      	b.n	8004d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <HAL_RCC_OscConfig+0x244>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fe f85a 	bl	8002dcc <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1c:	f7fe f856 	bl	8002dcc <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e187      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2e:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d036      	beq.n	8004db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <HAL_RCC_OscConfig+0x248>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fe f83a 	bl	8002dcc <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d5c:	f7fe f836 	bl	8002dcc <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e167      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_RCC_OscConfig+0x240>)
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x200>
 8004d7a:	e01b      	b.n	8004db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_OscConfig+0x248>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d82:	f7fe f823 	bl	8002dcc <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d88:	e00e      	b.n	8004da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d8a:	f7fe f81f 	bl	8002dcc <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d907      	bls.n	8004da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e150      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	42470000 	.word	0x42470000
 8004da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da8:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ea      	bne.n	8004d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8097 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc6:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	4b7d      	ldr	r3, [pc, #500]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	4a7c      	ldr	r2, [pc, #496]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	6413      	str	r3, [r2, #64]	; 0x40
 8004de2:	4b7a      	ldr	r3, [pc, #488]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	4b77      	ldr	r3, [pc, #476]	; (8004fd0 <HAL_RCC_OscConfig+0x474>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d118      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfe:	4b74      	ldr	r3, [pc, #464]	; (8004fd0 <HAL_RCC_OscConfig+0x474>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a73      	ldr	r2, [pc, #460]	; (8004fd0 <HAL_RCC_OscConfig+0x474>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0a:	f7fd ffdf 	bl	8002dcc <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e12:	f7fd ffdb 	bl	8002dcc <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e10c      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <HAL_RCC_OscConfig+0x474>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x2ea>
 8004e38:	4b64      	ldr	r3, [pc, #400]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	4a63      	ldr	r2, [pc, #396]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6713      	str	r3, [r2, #112]	; 0x70
 8004e44:	e01c      	b.n	8004e80 <HAL_RCC_OscConfig+0x324>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x30c>
 8004e4e:	4b5f      	ldr	r3, [pc, #380]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a5e      	ldr	r2, [pc, #376]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e54:	f043 0304 	orr.w	r3, r3, #4
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5a:	4b5c      	ldr	r3, [pc, #368]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a5b      	ldr	r2, [pc, #364]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70
 8004e66:	e00b      	b.n	8004e80 <HAL_RCC_OscConfig+0x324>
 8004e68:	4b58      	ldr	r3, [pc, #352]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	4a57      	ldr	r2, [pc, #348]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	6713      	str	r3, [r2, #112]	; 0x70
 8004e74:	4b55      	ldr	r3, [pc, #340]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	4a54      	ldr	r2, [pc, #336]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004e7a:	f023 0304 	bic.w	r3, r3, #4
 8004e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fd ffa0 	bl	8002dcc <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e90:	f7fd ff9c 	bl	8002dcc <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e0cb      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea6:	4b49      	ldr	r3, [pc, #292]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0ee      	beq.n	8004e90 <HAL_RCC_OscConfig+0x334>
 8004eb2:	e014      	b.n	8004ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb4:	f7fd ff8a 	bl	8002dcc <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fd ff86 	bl	8002dcc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0b5      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed2:	4b3e      	ldr	r3, [pc, #248]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ee      	bne.n	8004ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee4:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	4a38      	ldr	r2, [pc, #224]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80a1 	beq.w	800503c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004efa:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d05c      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d141      	bne.n	8004f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0e:	4b31      	ldr	r3, [pc, #196]	; (8004fd4 <HAL_RCC_OscConfig+0x478>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f14:	f7fd ff5a 	bl	8002dcc <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f1c:	f7fd ff56 	bl	8002dcc <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e087      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2e:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	019b      	lsls	r3, r3, #6
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	3b01      	subs	r3, #1
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	061b      	lsls	r3, r3, #24
 8004f5e:	491b      	ldr	r1, [pc, #108]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f64:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <HAL_RCC_OscConfig+0x478>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fd ff2f 	bl	8002dcc <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f72:	f7fd ff2b 	bl	8002dcc <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e05c      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x416>
 8004f90:	e054      	b.n	800503c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <HAL_RCC_OscConfig+0x478>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fd ff18 	bl	8002dcc <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fd ff14 	bl	8002dcc <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e045      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCC_OscConfig+0x470>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x444>
 8004fbe:	e03d      	b.n	800503c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e038      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fd8:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <HAL_RCC_OscConfig+0x4ec>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d028      	beq.n	8005038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d121      	bne.n	8005038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d11a      	bne.n	8005038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005008:	4013      	ands	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800500e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005010:	4293      	cmp	r3, r2
 8005012:	d111      	bne.n	8005038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	3b01      	subs	r3, #1
 8005022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d107      	bne.n	8005038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800

0800504c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0cc      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005060:	4b68      	ldr	r3, [pc, #416]	; (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d90c      	bls.n	8005088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b65      	ldr	r3, [pc, #404]	; (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b63      	ldr	r3, [pc, #396]	; (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0b8      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a0:	4b59      	ldr	r3, [pc, #356]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a58      	ldr	r2, [pc, #352]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b8:	4b53      	ldr	r3, [pc, #332]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a52      	ldr	r2, [pc, #328]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	494d      	ldr	r1, [pc, #308]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d044      	beq.n	800516c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d119      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d003      	beq.n	800510a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005106:	2b03      	cmp	r3, #3
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510a:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e06f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511a:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e067      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512a:	4b37      	ldr	r3, [pc, #220]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 0203 	bic.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4934      	ldr	r1, [pc, #208]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800513c:	f7fd fe46 	bl	8002dcc <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	e00a      	b.n	800515a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005144:	f7fd fe42 	bl	8002dcc <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e04f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 020c 	and.w	r2, r3, #12
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	429a      	cmp	r2, r3
 800516a:	d1eb      	bne.n	8005144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800516c:	4b25      	ldr	r3, [pc, #148]	; (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d20c      	bcs.n	8005194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b22      	ldr	r3, [pc, #136]	; (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e032      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4916      	ldr	r1, [pc, #88]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	490e      	ldr	r1, [pc, #56]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d2:	f000 f821 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	490a      	ldr	r1, [pc, #40]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	5ccb      	ldrb	r3, [r1, r3]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fd fda6 	bl	8002d44 <HAL_InitTick>

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40023c00 	.word	0x40023c00
 8005208:	40023800 	.word	0x40023800
 800520c:	080093dc 	.word	0x080093dc
 8005210:	20000000 	.word	0x20000000
 8005214:	20000004 	.word	0x20000004

08005218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800521c:	b094      	sub	sp, #80	; 0x50
 800521e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	647b      	str	r3, [r7, #68]	; 0x44
 8005224:	2300      	movs	r3, #0
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005228:	2300      	movs	r3, #0
 800522a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005230:	4b79      	ldr	r3, [pc, #484]	; (8005418 <HAL_RCC_GetSysClockFreq+0x200>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 030c 	and.w	r3, r3, #12
 8005238:	2b08      	cmp	r3, #8
 800523a:	d00d      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0x40>
 800523c:	2b08      	cmp	r3, #8
 800523e:	f200 80e1 	bhi.w	8005404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x34>
 8005246:	2b04      	cmp	r3, #4
 8005248:	d003      	beq.n	8005252 <HAL_RCC_GetSysClockFreq+0x3a>
 800524a:	e0db      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800524c:	4b73      	ldr	r3, [pc, #460]	; (800541c <HAL_RCC_GetSysClockFreq+0x204>)
 800524e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005250:	e0db      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005252:	4b73      	ldr	r3, [pc, #460]	; (8005420 <HAL_RCC_GetSysClockFreq+0x208>)
 8005254:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005256:	e0d8      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005258:	4b6f      	ldr	r3, [pc, #444]	; (8005418 <HAL_RCC_GetSysClockFreq+0x200>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005262:	4b6d      	ldr	r3, [pc, #436]	; (8005418 <HAL_RCC_GetSysClockFreq+0x200>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d063      	beq.n	8005336 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526e:	4b6a      	ldr	r3, [pc, #424]	; (8005418 <HAL_RCC_GetSysClockFreq+0x200>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	2200      	movs	r2, #0
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
 8005278:	63fa      	str	r2, [r7, #60]	; 0x3c
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005280:	633b      	str	r3, [r7, #48]	; 0x30
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
 8005286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	f04f 0000 	mov.w	r0, #0
 8005292:	f04f 0100 	mov.w	r1, #0
 8005296:	0159      	lsls	r1, r3, #5
 8005298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800529c:	0150      	lsls	r0, r2, #5
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4621      	mov	r1, r4
 80052a4:	1a51      	subs	r1, r2, r1
 80052a6:	6139      	str	r1, [r7, #16]
 80052a8:	4629      	mov	r1, r5
 80052aa:	eb63 0301 	sbc.w	r3, r3, r1
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052bc:	4659      	mov	r1, fp
 80052be:	018b      	lsls	r3, r1, #6
 80052c0:	4651      	mov	r1, sl
 80052c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052c6:	4651      	mov	r1, sl
 80052c8:	018a      	lsls	r2, r1, #6
 80052ca:	4651      	mov	r1, sl
 80052cc:	ebb2 0801 	subs.w	r8, r2, r1
 80052d0:	4659      	mov	r1, fp
 80052d2:	eb63 0901 	sbc.w	r9, r3, r1
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ea:	4690      	mov	r8, r2
 80052ec:	4699      	mov	r9, r3
 80052ee:	4623      	mov	r3, r4
 80052f0:	eb18 0303 	adds.w	r3, r8, r3
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	462b      	mov	r3, r5
 80052f8:	eb49 0303 	adc.w	r3, r9, r3
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800530a:	4629      	mov	r1, r5
 800530c:	024b      	lsls	r3, r1, #9
 800530e:	4621      	mov	r1, r4
 8005310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005314:	4621      	mov	r1, r4
 8005316:	024a      	lsls	r2, r1, #9
 8005318:	4610      	mov	r0, r2
 800531a:	4619      	mov	r1, r3
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	2200      	movs	r2, #0
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
 8005322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005328:	f7fb fce6 	bl	8000cf8 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4613      	mov	r3, r2
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	e058      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005336:	4b38      	ldr	r3, [pc, #224]	; (8005418 <HAL_RCC_GetSysClockFreq+0x200>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	099b      	lsrs	r3, r3, #6
 800533c:	2200      	movs	r2, #0
 800533e:	4618      	mov	r0, r3
 8005340:	4611      	mov	r1, r2
 8005342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	2300      	movs	r3, #0
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
 800534c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005350:	4642      	mov	r2, r8
 8005352:	464b      	mov	r3, r9
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	0159      	lsls	r1, r3, #5
 800535e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005362:	0150      	lsls	r0, r2, #5
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4641      	mov	r1, r8
 800536a:	ebb2 0a01 	subs.w	sl, r2, r1
 800536e:	4649      	mov	r1, r9
 8005370:	eb63 0b01 	sbc.w	fp, r3, r1
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005388:	ebb2 040a 	subs.w	r4, r2, sl
 800538c:	eb63 050b 	sbc.w	r5, r3, fp
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	00eb      	lsls	r3, r5, #3
 800539a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800539e:	00e2      	lsls	r2, r4, #3
 80053a0:	4614      	mov	r4, r2
 80053a2:	461d      	mov	r5, r3
 80053a4:	4643      	mov	r3, r8
 80053a6:	18e3      	adds	r3, r4, r3
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	464b      	mov	r3, r9
 80053ac:	eb45 0303 	adc.w	r3, r5, r3
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053be:	4629      	mov	r1, r5
 80053c0:	028b      	lsls	r3, r1, #10
 80053c2:	4621      	mov	r1, r4
 80053c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053c8:	4621      	mov	r1, r4
 80053ca:	028a      	lsls	r2, r1, #10
 80053cc:	4610      	mov	r0, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d2:	2200      	movs	r2, #0
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	61fa      	str	r2, [r7, #28]
 80053d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053dc:	f7fb fc8c 	bl	8000cf8 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4613      	mov	r3, r2
 80053e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	3301      	adds	r3, #1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005402:	e002      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_GetSysClockFreq+0x204>)
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800540a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800540c:	4618      	mov	r0, r3
 800540e:	3750      	adds	r7, #80	; 0x50
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800
 800541c:	00f42400 	.word	0x00f42400
 8005420:	007a1200 	.word	0x007a1200

08005424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000000 	.word	0x20000000

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b05      	ldr	r3, [pc, #20]	; (800545c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a9b      	lsrs	r3, r3, #10
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4903      	ldr	r1, [pc, #12]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40023800 	.word	0x40023800
 8005460:	080093ec 	.word	0x080093ec

08005464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005468:	f7ff ffdc 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0b5b      	lsrs	r3, r3, #13
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4903      	ldr	r1, [pc, #12]	; (8005488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40023800 	.word	0x40023800
 8005488:	080093ec 	.word	0x080093ec

0800548c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e07b      	b.n	8005596 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ae:	d009      	beq.n	80054c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	61da      	str	r2, [r3, #28]
 80054b6:	e005      	b.n	80054c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fd fa00 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	ea42 0103 	orr.w	r1, r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	f003 0104 	and.w	r1, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f003 0210 	and.w	r2, r3, #16
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005584:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b088      	sub	sp, #32
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_SPI_Transmit+0x22>
 80055bc:	2302      	movs	r3, #2
 80055be:	e126      	b.n	800580e <HAL_SPI_Transmit+0x270>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055c8:	f7fd fc00 	bl	8002dcc <HAL_GetTick>
 80055cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e2:	e10b      	b.n	80057fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Transmit+0x52>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f4:	e102      	b.n	80057fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2203      	movs	r2, #3
 80055fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563c:	d10f      	bne.n	800565e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d007      	beq.n	800567c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005684:	d14b      	bne.n	800571e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Transmit+0xf6>
 800568e:	8afb      	ldrh	r3, [r7, #22]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d13e      	bne.n	8005712 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056b8:	e02b      	b.n	8005712 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d112      	bne.n	80056ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80056ec:	e011      	b.n	8005712 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ee:	f7fd fb6d 	bl	8002dcc <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d803      	bhi.n	8005706 <HAL_SPI_Transmit+0x168>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005704:	d102      	bne.n	800570c <HAL_SPI_Transmit+0x16e>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005710:	e074      	b.n	80057fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ce      	bne.n	80056ba <HAL_SPI_Transmit+0x11c>
 800571c:	e04c      	b.n	80057b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_SPI_Transmit+0x18e>
 8005726:	8afb      	ldrh	r3, [r7, #22]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d140      	bne.n	80057ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	7812      	ldrb	r2, [r2, #0]
 8005738:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005752:	e02c      	b.n	80057ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b02      	cmp	r3, #2
 8005760:	d113      	bne.n	800578a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	86da      	strh	r2, [r3, #54]	; 0x36
 8005788:	e011      	b.n	80057ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578a:	f7fd fb1f 	bl	8002dcc <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d803      	bhi.n	80057a2 <HAL_SPI_Transmit+0x204>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_Transmit+0x20a>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ac:	e026      	b.n	80057fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1cd      	bne.n	8005754 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fbd9 	bl	8005f74 <SPI_EndRxTxTransaction>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e000      	b.n	80057fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80057fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800580c:	7ffb      	ldrb	r3, [r7, #31]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b088      	sub	sp, #32
 800581a:	af02      	add	r7, sp, #8
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005832:	d112      	bne.n	800585a <HAL_SPI_Receive+0x44>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10e      	bne.n	800585a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2204      	movs	r2, #4
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f8f1 	bl	8005a38 <HAL_SPI_TransmitReceive>
 8005856:	4603      	mov	r3, r0
 8005858:	e0ea      	b.n	8005a30 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_SPI_Receive+0x52>
 8005864:	2302      	movs	r3, #2
 8005866:	e0e3      	b.n	8005a30 <HAL_SPI_Receive+0x21a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005870:	f7fd faac 	bl	8002dcc <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d002      	beq.n	8005888 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005882:	2302      	movs	r3, #2
 8005884:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005886:	e0ca      	b.n	8005a1e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Receive+0x7e>
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005898:	e0c1      	b.n	8005a1e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2204      	movs	r2, #4
 800589e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e0:	d10f      	bne.n	8005902 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005900:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d007      	beq.n	8005920 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d162      	bne.n	80059ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005928:	e02e      	b.n	8005988 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d115      	bne.n	8005964 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f103 020c 	add.w	r2, r3, #12
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005962:	e011      	b.n	8005988 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005964:	f7fd fa32 	bl	8002dcc <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d803      	bhi.n	800597c <HAL_SPI_Receive+0x166>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Receive+0x16c>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005986:	e04a      	b.n	8005a1e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1cb      	bne.n	800592a <HAL_SPI_Receive+0x114>
 8005992:	e031      	b.n	80059f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d113      	bne.n	80059ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	b292      	uxth	r2, r2
 80059ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	1c9a      	adds	r2, r3, #2
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c8:	e011      	b.n	80059ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ca:	f7fd f9ff 	bl	8002dcc <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d803      	bhi.n	80059e2 <HAL_SPI_Receive+0x1cc>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e0:	d102      	bne.n	80059e8 <HAL_SPI_Receive+0x1d2>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d102      	bne.n	80059ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059ec:	e017      	b.n	8005a1e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1cd      	bne.n	8005994 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fa53 	bl	8005ea8 <SPI_EndRxTransaction>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
 8005a1a:	e000      	b.n	8005a1e <HAL_SPI_Receive+0x208>
  }

error :
 8005a1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08c      	sub	sp, #48	; 0x30
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a46:	2301      	movs	r3, #1
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x26>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e18a      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x33c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a66:	f7fd f9b1 	bl	8002dcc <HAL_GetTick>
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d00f      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x70>
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8e:	d107      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x68>
 8005a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d003      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aa6:	e15b      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x82>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x82>
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac0:	e14e      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d003      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2205      	movs	r2, #5
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	887a      	ldrh	r2, [r7, #2]
 8005ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	887a      	ldrh	r2, [r7, #2]
 8005afe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d007      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b32:	d178      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_TransmitReceive+0x10a>
 8005b3c:	8b7b      	ldrh	r3, [r7, #26]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d166      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	881a      	ldrh	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b66:	e053      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d11b      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x176>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d016      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x176>
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d113      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	1c9a      	adds	r2, r3, #2
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d119      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x1b8>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d014      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	1c9a      	adds	r2, r3, #2
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bec:	2301      	movs	r3, #1
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bf0:	f7fd f8ec 	bl	8002dcc <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d807      	bhi.n	8005c10 <HAL_SPI_TransmitReceive+0x1d8>
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c06:	d003      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c0e:	e0a7      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1a6      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x130>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1a1      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x130>
 8005c24:	e07c      	b.n	8005d20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x1fc>
 8005c2e:	8b7b      	ldrh	r3, [r7, #26]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d16b      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c5a:	e057      	b.n	8005d0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d11c      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x26c>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d017      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0x26c>
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d114      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d119      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x2ae>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d014      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ce6:	f7fd f871 	bl	8002dcc <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d803      	bhi.n	8005cfe <HAL_SPI_TransmitReceive+0x2c6>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfc:	d102      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x2cc>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d0a:	e029      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1a2      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x224>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d19d      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f925 	bl	8005f74 <SPI_EndRxTxTransaction>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d006      	beq.n	8005d3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d3c:	e010      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	e000      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3730      	adds	r7, #48	; 0x30
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d8a:	b2db      	uxtb	r3, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005da8:	f7fd f810 	bl	8002dcc <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005db8:	f7fd f808 	bl	8002dcc <HAL_GetTick>
 8005dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dbe:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	015b      	lsls	r3, r3, #5
 8005dc4:	0d1b      	lsrs	r3, r3, #20
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dce:	e054      	b.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd6:	d050      	beq.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dd8:	f7fc fff8 	bl	8002dcc <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d902      	bls.n	8005dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d13d      	bne.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e06:	d111      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e10:	d004      	beq.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1a:	d107      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e34:	d10f      	bne.n	8005e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e017      	b.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d19b      	bne.n	8005dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000000 	.word	0x20000000

08005ea8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebc:	d111      	bne.n	8005ee2 <SPI_EndRxTransaction+0x3a>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec6:	d004      	beq.n	8005ed2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed0:	d107      	bne.n	8005ee2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eea:	d12a      	bne.n	8005f42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d012      	beq.n	8005f1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff ff49 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02d      	beq.n	8005f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e026      	b.n	8005f6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2200      	movs	r2, #0
 8005f24:	2101      	movs	r1, #1
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff ff36 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e013      	b.n	8005f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff ff23 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e000      	b.n	8005f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f80:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <SPI_EndRxTxTransaction+0x7c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <SPI_EndRxTxTransaction+0x80>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	0d5b      	lsrs	r3, r3, #21
 8005f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f90:	fb02 f303 	mul.w	r3, r2, r3
 8005f94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f9e:	d112      	bne.n	8005fc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2180      	movs	r1, #128	; 0x80
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fef4 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d016      	beq.n	8005fe4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	f043 0220 	orr.w	r2, r3, #32
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e00f      	b.n	8005fe6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d0f2      	beq.n	8005fc6 <SPI_EndRxTxTransaction+0x52>
 8005fe0:	e000      	b.n	8005fe4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005fe2:	bf00      	nop
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000000 	.word	0x20000000
 8005ff4:	165e9f81 	.word	0x165e9f81

08005ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e03f      	b.n	800608a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc fdfc 	bl	8002c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	; 0x24
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800603a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f829 	bl	8006094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006098:	b0c0      	sub	sp, #256	; 0x100
 800609a:	af00      	add	r7, sp, #0
 800609c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	68d9      	ldr	r1, [r3, #12]
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	ea40 0301 	orr.w	r3, r0, r1
 80060bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060ec:	f021 010c 	bic.w	r1, r1, #12
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060fa:	430b      	orrs	r3, r1
 80060fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610e:	6999      	ldr	r1, [r3, #24]
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	ea40 0301 	orr.w	r3, r0, r1
 800611a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b8f      	ldr	r3, [pc, #572]	; (8006360 <UART_SetConfig+0x2cc>)
 8006124:	429a      	cmp	r2, r3
 8006126:	d005      	beq.n	8006134 <UART_SetConfig+0xa0>
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b8d      	ldr	r3, [pc, #564]	; (8006364 <UART_SetConfig+0x2d0>)
 8006130:	429a      	cmp	r2, r3
 8006132:	d104      	bne.n	800613e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006134:	f7ff f996 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006138:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800613c:	e003      	b.n	8006146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800613e:	f7ff f97d 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006142:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006150:	f040 810c 	bne.w	800636c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006158:	2200      	movs	r2, #0
 800615a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800615e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006166:	4622      	mov	r2, r4
 8006168:	462b      	mov	r3, r5
 800616a:	1891      	adds	r1, r2, r2
 800616c:	65b9      	str	r1, [r7, #88]	; 0x58
 800616e:	415b      	adcs	r3, r3
 8006170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006176:	4621      	mov	r1, r4
 8006178:	eb12 0801 	adds.w	r8, r2, r1
 800617c:	4629      	mov	r1, r5
 800617e:	eb43 0901 	adc.w	r9, r3, r1
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800618e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006196:	4690      	mov	r8, r2
 8006198:	4699      	mov	r9, r3
 800619a:	4623      	mov	r3, r4
 800619c:	eb18 0303 	adds.w	r3, r8, r3
 80061a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061a4:	462b      	mov	r3, r5
 80061a6:	eb49 0303 	adc.w	r3, r9, r3
 80061aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061c2:	460b      	mov	r3, r1
 80061c4:	18db      	adds	r3, r3, r3
 80061c6:	653b      	str	r3, [r7, #80]	; 0x50
 80061c8:	4613      	mov	r3, r2
 80061ca:	eb42 0303 	adc.w	r3, r2, r3
 80061ce:	657b      	str	r3, [r7, #84]	; 0x54
 80061d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061d8:	f7fa fd8e 	bl	8000cf8 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4b61      	ldr	r3, [pc, #388]	; (8006368 <UART_SetConfig+0x2d4>)
 80061e2:	fba3 2302 	umull	r2, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	011c      	lsls	r4, r3, #4
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	1891      	adds	r1, r2, r2
 8006202:	64b9      	str	r1, [r7, #72]	; 0x48
 8006204:	415b      	adcs	r3, r3
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800620c:	4641      	mov	r1, r8
 800620e:	eb12 0a01 	adds.w	sl, r2, r1
 8006212:	4649      	mov	r1, r9
 8006214:	eb43 0b01 	adc.w	fp, r3, r1
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800622c:	4692      	mov	sl, r2
 800622e:	469b      	mov	fp, r3
 8006230:	4643      	mov	r3, r8
 8006232:	eb1a 0303 	adds.w	r3, sl, r3
 8006236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800623a:	464b      	mov	r3, r9
 800623c:	eb4b 0303 	adc.w	r3, fp, r3
 8006240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006250:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006258:	460b      	mov	r3, r1
 800625a:	18db      	adds	r3, r3, r3
 800625c:	643b      	str	r3, [r7, #64]	; 0x40
 800625e:	4613      	mov	r3, r2
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	647b      	str	r3, [r7, #68]	; 0x44
 8006266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800626a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800626e:	f7fa fd43 	bl	8000cf8 <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4611      	mov	r1, r2
 8006278:	4b3b      	ldr	r3, [pc, #236]	; (8006368 <UART_SetConfig+0x2d4>)
 800627a:	fba3 2301 	umull	r2, r3, r3, r1
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2264      	movs	r2, #100	; 0x64
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	1acb      	subs	r3, r1, r3
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800628e:	4b36      	ldr	r3, [pc, #216]	; (8006368 <UART_SetConfig+0x2d4>)
 8006290:	fba3 2302 	umull	r2, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800629c:	441c      	add	r4, r3
 800629e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062b8:	415b      	adcs	r3, r3
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062c0:	4641      	mov	r1, r8
 80062c2:	1851      	adds	r1, r2, r1
 80062c4:	6339      	str	r1, [r7, #48]	; 0x30
 80062c6:	4649      	mov	r1, r9
 80062c8:	414b      	adcs	r3, r1
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062d8:	4659      	mov	r1, fp
 80062da:	00cb      	lsls	r3, r1, #3
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e2:	4651      	mov	r1, sl
 80062e4:	00ca      	lsls	r2, r1, #3
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	4642      	mov	r2, r8
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f4:	464b      	mov	r3, r9
 80062f6:	460a      	mov	r2, r1
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800630c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006314:	460b      	mov	r3, r1
 8006316:	18db      	adds	r3, r3, r3
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
 800631a:	4613      	mov	r3, r2
 800631c:	eb42 0303 	adc.w	r3, r2, r3
 8006320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800632a:	f7fa fce5 	bl	8000cf8 <__aeabi_uldivmod>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <UART_SetConfig+0x2d4>)
 8006334:	fba3 1302 	umull	r1, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	2164      	movs	r1, #100	; 0x64
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	3332      	adds	r3, #50	; 0x32
 8006346:	4a08      	ldr	r2, [pc, #32]	; (8006368 <UART_SetConfig+0x2d4>)
 8006348:	fba2 2303 	umull	r2, r3, r2, r3
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f003 0207 	and.w	r2, r3, #7
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4422      	add	r2, r4
 800635a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800635c:	e105      	b.n	800656a <UART_SetConfig+0x4d6>
 800635e:	bf00      	nop
 8006360:	40011000 	.word	0x40011000
 8006364:	40011400 	.word	0x40011400
 8006368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800636c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006370:	2200      	movs	r2, #0
 8006372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006376:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800637a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800637e:	4642      	mov	r2, r8
 8006380:	464b      	mov	r3, r9
 8006382:	1891      	adds	r1, r2, r2
 8006384:	6239      	str	r1, [r7, #32]
 8006386:	415b      	adcs	r3, r3
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
 800638a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800638e:	4641      	mov	r1, r8
 8006390:	1854      	adds	r4, r2, r1
 8006392:	4649      	mov	r1, r9
 8006394:	eb43 0501 	adc.w	r5, r3, r1
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	00eb      	lsls	r3, r5, #3
 80063a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a6:	00e2      	lsls	r2, r4, #3
 80063a8:	4614      	mov	r4, r2
 80063aa:	461d      	mov	r5, r3
 80063ac:	4643      	mov	r3, r8
 80063ae:	18e3      	adds	r3, r4, r3
 80063b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063b4:	464b      	mov	r3, r9
 80063b6:	eb45 0303 	adc.w	r3, r5, r3
 80063ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063da:	4629      	mov	r1, r5
 80063dc:	008b      	lsls	r3, r1, #2
 80063de:	4621      	mov	r1, r4
 80063e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063e4:	4621      	mov	r1, r4
 80063e6:	008a      	lsls	r2, r1, #2
 80063e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063ec:	f7fa fc84 	bl	8000cf8 <__aeabi_uldivmod>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4b60      	ldr	r3, [pc, #384]	; (8006578 <UART_SetConfig+0x4e4>)
 80063f6:	fba3 2302 	umull	r2, r3, r3, r2
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	011c      	lsls	r4, r3, #4
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006408:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800640c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	1891      	adds	r1, r2, r2
 8006416:	61b9      	str	r1, [r7, #24]
 8006418:	415b      	adcs	r3, r3
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006420:	4641      	mov	r1, r8
 8006422:	1851      	adds	r1, r2, r1
 8006424:	6139      	str	r1, [r7, #16]
 8006426:	4649      	mov	r1, r9
 8006428:	414b      	adcs	r3, r1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006438:	4659      	mov	r1, fp
 800643a:	00cb      	lsls	r3, r1, #3
 800643c:	4651      	mov	r1, sl
 800643e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006442:	4651      	mov	r1, sl
 8006444:	00ca      	lsls	r2, r1, #3
 8006446:	4610      	mov	r0, r2
 8006448:	4619      	mov	r1, r3
 800644a:	4603      	mov	r3, r0
 800644c:	4642      	mov	r2, r8
 800644e:	189b      	adds	r3, r3, r2
 8006450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006454:	464b      	mov	r3, r9
 8006456:	460a      	mov	r2, r1
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	67bb      	str	r3, [r7, #120]	; 0x78
 800646a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006478:	4649      	mov	r1, r9
 800647a:	008b      	lsls	r3, r1, #2
 800647c:	4641      	mov	r1, r8
 800647e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006482:	4641      	mov	r1, r8
 8006484:	008a      	lsls	r2, r1, #2
 8006486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800648a:	f7fa fc35 	bl	8000cf8 <__aeabi_uldivmod>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4b39      	ldr	r3, [pc, #228]	; (8006578 <UART_SetConfig+0x4e4>)
 8006494:	fba3 1302 	umull	r1, r3, r3, r2
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	2164      	movs	r1, #100	; 0x64
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	3332      	adds	r3, #50	; 0x32
 80064a6:	4a34      	ldr	r2, [pc, #208]	; (8006578 <UART_SetConfig+0x4e4>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b2:	441c      	add	r4, r3
 80064b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b8:	2200      	movs	r2, #0
 80064ba:	673b      	str	r3, [r7, #112]	; 0x70
 80064bc:	677a      	str	r2, [r7, #116]	; 0x74
 80064be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064c2:	4642      	mov	r2, r8
 80064c4:	464b      	mov	r3, r9
 80064c6:	1891      	adds	r1, r2, r2
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	415b      	adcs	r3, r3
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064d2:	4641      	mov	r1, r8
 80064d4:	1851      	adds	r1, r2, r1
 80064d6:	6039      	str	r1, [r7, #0]
 80064d8:	4649      	mov	r1, r9
 80064da:	414b      	adcs	r3, r1
 80064dc:	607b      	str	r3, [r7, #4]
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064ea:	4659      	mov	r1, fp
 80064ec:	00cb      	lsls	r3, r1, #3
 80064ee:	4651      	mov	r1, sl
 80064f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f4:	4651      	mov	r1, sl
 80064f6:	00ca      	lsls	r2, r1, #3
 80064f8:	4610      	mov	r0, r2
 80064fa:	4619      	mov	r1, r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	4642      	mov	r2, r8
 8006500:	189b      	adds	r3, r3, r2
 8006502:	66bb      	str	r3, [r7, #104]	; 0x68
 8006504:	464b      	mov	r3, r9
 8006506:	460a      	mov	r2, r1
 8006508:	eb42 0303 	adc.w	r3, r2, r3
 800650c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	663b      	str	r3, [r7, #96]	; 0x60
 8006518:	667a      	str	r2, [r7, #100]	; 0x64
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006526:	4649      	mov	r1, r9
 8006528:	008b      	lsls	r3, r1, #2
 800652a:	4641      	mov	r1, r8
 800652c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006530:	4641      	mov	r1, r8
 8006532:	008a      	lsls	r2, r1, #2
 8006534:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006538:	f7fa fbde 	bl	8000cf8 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <UART_SetConfig+0x4e4>)
 8006542:	fba3 1302 	umull	r1, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	2164      	movs	r1, #100	; 0x64
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	3332      	adds	r3, #50	; 0x32
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <UART_SetConfig+0x4e4>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4422      	add	r2, r4
 8006568:	609a      	str	r2, [r3, #8]
}
 800656a:	bf00      	nop
 800656c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006570:	46bd      	mov	sp, r7
 8006572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006576:	bf00      	nop
 8006578:	51eb851f 	.word	0x51eb851f

0800657c <__errno>:
 800657c:	4b01      	ldr	r3, [pc, #4]	; (8006584 <__errno+0x8>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	2000000c 	.word	0x2000000c

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	; (80065c0 <__libc_init_array+0x38>)
 800658c:	4c0d      	ldr	r4, [pc, #52]	; (80065c4 <__libc_init_array+0x3c>)
 800658e:	1b64      	subs	r4, r4, r5
 8006590:	10a4      	asrs	r4, r4, #2
 8006592:	2600      	movs	r6, #0
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	; (80065c8 <__libc_init_array+0x40>)
 800659a:	4c0c      	ldr	r4, [pc, #48]	; (80065cc <__libc_init_array+0x44>)
 800659c:	f002 ff04 	bl	80093a8 <_init>
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	2600      	movs	r6, #0
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	4798      	blx	r3
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	4798      	blx	r3
 80065bc:	3601      	adds	r6, #1
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	080097d4 	.word	0x080097d4
 80065c4:	080097d4 	.word	0x080097d4
 80065c8:	080097d4 	.word	0x080097d4
 80065cc:	080097d8 	.word	0x080097d8

080065d0 <memset>:
 80065d0:	4402      	add	r2, r0
 80065d2:	4603      	mov	r3, r0
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d100      	bne.n	80065da <memset+0xa>
 80065d8:	4770      	bx	lr
 80065da:	f803 1b01 	strb.w	r1, [r3], #1
 80065de:	e7f9      	b.n	80065d4 <memset+0x4>

080065e0 <__cvt>:
 80065e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e4:	ec55 4b10 	vmov	r4, r5, d0
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	460e      	mov	r6, r1
 80065ec:	4619      	mov	r1, r3
 80065ee:	462b      	mov	r3, r5
 80065f0:	bfbb      	ittet	lt
 80065f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065f6:	461d      	movlt	r5, r3
 80065f8:	2300      	movge	r3, #0
 80065fa:	232d      	movlt	r3, #45	; 0x2d
 80065fc:	700b      	strb	r3, [r1, #0]
 80065fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006604:	4691      	mov	r9, r2
 8006606:	f023 0820 	bic.w	r8, r3, #32
 800660a:	bfbc      	itt	lt
 800660c:	4622      	movlt	r2, r4
 800660e:	4614      	movlt	r4, r2
 8006610:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006614:	d005      	beq.n	8006622 <__cvt+0x42>
 8006616:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800661a:	d100      	bne.n	800661e <__cvt+0x3e>
 800661c:	3601      	adds	r6, #1
 800661e:	2102      	movs	r1, #2
 8006620:	e000      	b.n	8006624 <__cvt+0x44>
 8006622:	2103      	movs	r1, #3
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	ab02      	add	r3, sp, #8
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	ec45 4b10 	vmov	d0, r4, r5
 8006630:	4653      	mov	r3, sl
 8006632:	4632      	mov	r2, r6
 8006634:	f000 fcec 	bl	8007010 <_dtoa_r>
 8006638:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800663c:	4607      	mov	r7, r0
 800663e:	d102      	bne.n	8006646 <__cvt+0x66>
 8006640:	f019 0f01 	tst.w	r9, #1
 8006644:	d022      	beq.n	800668c <__cvt+0xac>
 8006646:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800664a:	eb07 0906 	add.w	r9, r7, r6
 800664e:	d110      	bne.n	8006672 <__cvt+0x92>
 8006650:	783b      	ldrb	r3, [r7, #0]
 8006652:	2b30      	cmp	r3, #48	; 0x30
 8006654:	d10a      	bne.n	800666c <__cvt+0x8c>
 8006656:	2200      	movs	r2, #0
 8006658:	2300      	movs	r3, #0
 800665a:	4620      	mov	r0, r4
 800665c:	4629      	mov	r1, r5
 800665e:	f7fa fa3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006662:	b918      	cbnz	r0, 800666c <__cvt+0x8c>
 8006664:	f1c6 0601 	rsb	r6, r6, #1
 8006668:	f8ca 6000 	str.w	r6, [sl]
 800666c:	f8da 3000 	ldr.w	r3, [sl]
 8006670:	4499      	add	r9, r3
 8006672:	2200      	movs	r2, #0
 8006674:	2300      	movs	r3, #0
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	f7fa fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800667e:	b108      	cbz	r0, 8006684 <__cvt+0xa4>
 8006680:	f8cd 900c 	str.w	r9, [sp, #12]
 8006684:	2230      	movs	r2, #48	; 0x30
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	454b      	cmp	r3, r9
 800668a:	d307      	bcc.n	800669c <__cvt+0xbc>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006690:	1bdb      	subs	r3, r3, r7
 8006692:	4638      	mov	r0, r7
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	b004      	add	sp, #16
 8006698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669c:	1c59      	adds	r1, r3, #1
 800669e:	9103      	str	r1, [sp, #12]
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e7f0      	b.n	8006686 <__cvt+0xa6>

080066a4 <__exponent>:
 80066a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066a6:	4603      	mov	r3, r0
 80066a8:	2900      	cmp	r1, #0
 80066aa:	bfb8      	it	lt
 80066ac:	4249      	neglt	r1, r1
 80066ae:	f803 2b02 	strb.w	r2, [r3], #2
 80066b2:	bfb4      	ite	lt
 80066b4:	222d      	movlt	r2, #45	; 0x2d
 80066b6:	222b      	movge	r2, #43	; 0x2b
 80066b8:	2909      	cmp	r1, #9
 80066ba:	7042      	strb	r2, [r0, #1]
 80066bc:	dd2a      	ble.n	8006714 <__exponent+0x70>
 80066be:	f10d 0407 	add.w	r4, sp, #7
 80066c2:	46a4      	mov	ip, r4
 80066c4:	270a      	movs	r7, #10
 80066c6:	46a6      	mov	lr, r4
 80066c8:	460a      	mov	r2, r1
 80066ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80066ce:	fb07 1516 	mls	r5, r7, r6, r1
 80066d2:	3530      	adds	r5, #48	; 0x30
 80066d4:	2a63      	cmp	r2, #99	; 0x63
 80066d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80066da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066de:	4631      	mov	r1, r6
 80066e0:	dcf1      	bgt.n	80066c6 <__exponent+0x22>
 80066e2:	3130      	adds	r1, #48	; 0x30
 80066e4:	f1ae 0502 	sub.w	r5, lr, #2
 80066e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066ec:	1c44      	adds	r4, r0, #1
 80066ee:	4629      	mov	r1, r5
 80066f0:	4561      	cmp	r1, ip
 80066f2:	d30a      	bcc.n	800670a <__exponent+0x66>
 80066f4:	f10d 0209 	add.w	r2, sp, #9
 80066f8:	eba2 020e 	sub.w	r2, r2, lr
 80066fc:	4565      	cmp	r5, ip
 80066fe:	bf88      	it	hi
 8006700:	2200      	movhi	r2, #0
 8006702:	4413      	add	r3, r2
 8006704:	1a18      	subs	r0, r3, r0
 8006706:	b003      	add	sp, #12
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800670e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006712:	e7ed      	b.n	80066f0 <__exponent+0x4c>
 8006714:	2330      	movs	r3, #48	; 0x30
 8006716:	3130      	adds	r1, #48	; 0x30
 8006718:	7083      	strb	r3, [r0, #2]
 800671a:	70c1      	strb	r1, [r0, #3]
 800671c:	1d03      	adds	r3, r0, #4
 800671e:	e7f1      	b.n	8006704 <__exponent+0x60>

08006720 <_printf_float>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	ed2d 8b02 	vpush	{d8}
 8006728:	b08d      	sub	sp, #52	; 0x34
 800672a:	460c      	mov	r4, r1
 800672c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006730:	4616      	mov	r6, r2
 8006732:	461f      	mov	r7, r3
 8006734:	4605      	mov	r5, r0
 8006736:	f001 fa59 	bl	8007bec <_localeconv_r>
 800673a:	f8d0 a000 	ldr.w	sl, [r0]
 800673e:	4650      	mov	r0, sl
 8006740:	f7f9 fd4e 	bl	80001e0 <strlen>
 8006744:	2300      	movs	r3, #0
 8006746:	930a      	str	r3, [sp, #40]	; 0x28
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	f8d8 3000 	ldr.w	r3, [r8]
 8006750:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006754:	3307      	adds	r3, #7
 8006756:	f023 0307 	bic.w	r3, r3, #7
 800675a:	f103 0208 	add.w	r2, r3, #8
 800675e:	f8c8 2000 	str.w	r2, [r8]
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800676a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800676e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006772:	9307      	str	r3, [sp, #28]
 8006774:	f8cd 8018 	str.w	r8, [sp, #24]
 8006778:	ee08 0a10 	vmov	s16, r0
 800677c:	4b9f      	ldr	r3, [pc, #636]	; (80069fc <_printf_float+0x2dc>)
 800677e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006786:	f7fa f9d9 	bl	8000b3c <__aeabi_dcmpun>
 800678a:	bb88      	cbnz	r0, 80067f0 <_printf_float+0xd0>
 800678c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006790:	4b9a      	ldr	r3, [pc, #616]	; (80069fc <_printf_float+0x2dc>)
 8006792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006796:	f7fa f9b3 	bl	8000b00 <__aeabi_dcmple>
 800679a:	bb48      	cbnz	r0, 80067f0 <_printf_float+0xd0>
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	4640      	mov	r0, r8
 80067a2:	4649      	mov	r1, r9
 80067a4:	f7fa f9a2 	bl	8000aec <__aeabi_dcmplt>
 80067a8:	b110      	cbz	r0, 80067b0 <_printf_float+0x90>
 80067aa:	232d      	movs	r3, #45	; 0x2d
 80067ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b0:	4b93      	ldr	r3, [pc, #588]	; (8006a00 <_printf_float+0x2e0>)
 80067b2:	4894      	ldr	r0, [pc, #592]	; (8006a04 <_printf_float+0x2e4>)
 80067b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067b8:	bf94      	ite	ls
 80067ba:	4698      	movls	r8, r3
 80067bc:	4680      	movhi	r8, r0
 80067be:	2303      	movs	r3, #3
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	9b05      	ldr	r3, [sp, #20]
 80067c4:	f023 0204 	bic.w	r2, r3, #4
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	f04f 0900 	mov.w	r9, #0
 80067ce:	9700      	str	r7, [sp, #0]
 80067d0:	4633      	mov	r3, r6
 80067d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80067d4:	4621      	mov	r1, r4
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 f9d8 	bl	8006b8c <_printf_common>
 80067dc:	3001      	adds	r0, #1
 80067de:	f040 8090 	bne.w	8006902 <_printf_float+0x1e2>
 80067e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e6:	b00d      	add	sp, #52	; 0x34
 80067e8:	ecbd 8b02 	vpop	{d8}
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	4649      	mov	r1, r9
 80067f8:	f7fa f9a0 	bl	8000b3c <__aeabi_dcmpun>
 80067fc:	b140      	cbz	r0, 8006810 <_printf_float+0xf0>
 80067fe:	464b      	mov	r3, r9
 8006800:	2b00      	cmp	r3, #0
 8006802:	bfbc      	itt	lt
 8006804:	232d      	movlt	r3, #45	; 0x2d
 8006806:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800680a:	487f      	ldr	r0, [pc, #508]	; (8006a08 <_printf_float+0x2e8>)
 800680c:	4b7f      	ldr	r3, [pc, #508]	; (8006a0c <_printf_float+0x2ec>)
 800680e:	e7d1      	b.n	80067b4 <_printf_float+0x94>
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006816:	9206      	str	r2, [sp, #24]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	d13f      	bne.n	800689c <_printf_float+0x17c>
 800681c:	2306      	movs	r3, #6
 800681e:	6063      	str	r3, [r4, #4]
 8006820:	9b05      	ldr	r3, [sp, #20]
 8006822:	6861      	ldr	r1, [r4, #4]
 8006824:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006828:	2300      	movs	r3, #0
 800682a:	9303      	str	r3, [sp, #12]
 800682c:	ab0a      	add	r3, sp, #40	; 0x28
 800682e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006832:	ab09      	add	r3, sp, #36	; 0x24
 8006834:	ec49 8b10 	vmov	d0, r8, r9
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	6022      	str	r2, [r4, #0]
 800683c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006840:	4628      	mov	r0, r5
 8006842:	f7ff fecd 	bl	80065e0 <__cvt>
 8006846:	9b06      	ldr	r3, [sp, #24]
 8006848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800684a:	2b47      	cmp	r3, #71	; 0x47
 800684c:	4680      	mov	r8, r0
 800684e:	d108      	bne.n	8006862 <_printf_float+0x142>
 8006850:	1cc8      	adds	r0, r1, #3
 8006852:	db02      	blt.n	800685a <_printf_float+0x13a>
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	4299      	cmp	r1, r3
 8006858:	dd41      	ble.n	80068de <_printf_float+0x1be>
 800685a:	f1ab 0b02 	sub.w	fp, fp, #2
 800685e:	fa5f fb8b 	uxtb.w	fp, fp
 8006862:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006866:	d820      	bhi.n	80068aa <_printf_float+0x18a>
 8006868:	3901      	subs	r1, #1
 800686a:	465a      	mov	r2, fp
 800686c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006870:	9109      	str	r1, [sp, #36]	; 0x24
 8006872:	f7ff ff17 	bl	80066a4 <__exponent>
 8006876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006878:	1813      	adds	r3, r2, r0
 800687a:	2a01      	cmp	r2, #1
 800687c:	4681      	mov	r9, r0
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	dc02      	bgt.n	8006888 <_printf_float+0x168>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	07d2      	lsls	r2, r2, #31
 8006886:	d501      	bpl.n	800688c <_printf_float+0x16c>
 8006888:	3301      	adds	r3, #1
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006890:	2b00      	cmp	r3, #0
 8006892:	d09c      	beq.n	80067ce <_printf_float+0xae>
 8006894:	232d      	movs	r3, #45	; 0x2d
 8006896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689a:	e798      	b.n	80067ce <_printf_float+0xae>
 800689c:	9a06      	ldr	r2, [sp, #24]
 800689e:	2a47      	cmp	r2, #71	; 0x47
 80068a0:	d1be      	bne.n	8006820 <_printf_float+0x100>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1bc      	bne.n	8006820 <_printf_float+0x100>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e7b9      	b.n	800681e <_printf_float+0xfe>
 80068aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068ae:	d118      	bne.n	80068e2 <_printf_float+0x1c2>
 80068b0:	2900      	cmp	r1, #0
 80068b2:	6863      	ldr	r3, [r4, #4]
 80068b4:	dd0b      	ble.n	80068ce <_printf_float+0x1ae>
 80068b6:	6121      	str	r1, [r4, #16]
 80068b8:	b913      	cbnz	r3, 80068c0 <_printf_float+0x1a0>
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	07d0      	lsls	r0, r2, #31
 80068be:	d502      	bpl.n	80068c6 <_printf_float+0x1a6>
 80068c0:	3301      	adds	r3, #1
 80068c2:	440b      	add	r3, r1
 80068c4:	6123      	str	r3, [r4, #16]
 80068c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068c8:	f04f 0900 	mov.w	r9, #0
 80068cc:	e7de      	b.n	800688c <_printf_float+0x16c>
 80068ce:	b913      	cbnz	r3, 80068d6 <_printf_float+0x1b6>
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	07d2      	lsls	r2, r2, #31
 80068d4:	d501      	bpl.n	80068da <_printf_float+0x1ba>
 80068d6:	3302      	adds	r3, #2
 80068d8:	e7f4      	b.n	80068c4 <_printf_float+0x1a4>
 80068da:	2301      	movs	r3, #1
 80068dc:	e7f2      	b.n	80068c4 <_printf_float+0x1a4>
 80068de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e4:	4299      	cmp	r1, r3
 80068e6:	db05      	blt.n	80068f4 <_printf_float+0x1d4>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	6121      	str	r1, [r4, #16]
 80068ec:	07d8      	lsls	r0, r3, #31
 80068ee:	d5ea      	bpl.n	80068c6 <_printf_float+0x1a6>
 80068f0:	1c4b      	adds	r3, r1, #1
 80068f2:	e7e7      	b.n	80068c4 <_printf_float+0x1a4>
 80068f4:	2900      	cmp	r1, #0
 80068f6:	bfd4      	ite	le
 80068f8:	f1c1 0202 	rsble	r2, r1, #2
 80068fc:	2201      	movgt	r2, #1
 80068fe:	4413      	add	r3, r2
 8006900:	e7e0      	b.n	80068c4 <_printf_float+0x1a4>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	055a      	lsls	r2, r3, #21
 8006906:	d407      	bmi.n	8006918 <_printf_float+0x1f8>
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	4642      	mov	r2, r8
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	47b8      	blx	r7
 8006912:	3001      	adds	r0, #1
 8006914:	d12c      	bne.n	8006970 <_printf_float+0x250>
 8006916:	e764      	b.n	80067e2 <_printf_float+0xc2>
 8006918:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800691c:	f240 80e0 	bls.w	8006ae0 <_printf_float+0x3c0>
 8006920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006924:	2200      	movs	r2, #0
 8006926:	2300      	movs	r3, #0
 8006928:	f7fa f8d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800692c:	2800      	cmp	r0, #0
 800692e:	d034      	beq.n	800699a <_printf_float+0x27a>
 8006930:	4a37      	ldr	r2, [pc, #220]	; (8006a10 <_printf_float+0x2f0>)
 8006932:	2301      	movs	r3, #1
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af51 	beq.w	80067e2 <_printf_float+0xc2>
 8006940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006944:	429a      	cmp	r2, r3
 8006946:	db02      	blt.n	800694e <_printf_float+0x22e>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	07d8      	lsls	r0, r3, #31
 800694c:	d510      	bpl.n	8006970 <_printf_float+0x250>
 800694e:	ee18 3a10 	vmov	r3, s16
 8006952:	4652      	mov	r2, sl
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af41 	beq.w	80067e2 <_printf_float+0xc2>
 8006960:	f04f 0800 	mov.w	r8, #0
 8006964:	f104 091a 	add.w	r9, r4, #26
 8006968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696a:	3b01      	subs	r3, #1
 800696c:	4543      	cmp	r3, r8
 800696e:	dc09      	bgt.n	8006984 <_printf_float+0x264>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	079b      	lsls	r3, r3, #30
 8006974:	f100 8105 	bmi.w	8006b82 <_printf_float+0x462>
 8006978:	68e0      	ldr	r0, [r4, #12]
 800697a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800697c:	4298      	cmp	r0, r3
 800697e:	bfb8      	it	lt
 8006980:	4618      	movlt	r0, r3
 8006982:	e730      	b.n	80067e6 <_printf_float+0xc6>
 8006984:	2301      	movs	r3, #1
 8006986:	464a      	mov	r2, r9
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	47b8      	blx	r7
 800698e:	3001      	adds	r0, #1
 8006990:	f43f af27 	beq.w	80067e2 <_printf_float+0xc2>
 8006994:	f108 0801 	add.w	r8, r8, #1
 8006998:	e7e6      	b.n	8006968 <_printf_float+0x248>
 800699a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	dc39      	bgt.n	8006a14 <_printf_float+0x2f4>
 80069a0:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <_printf_float+0x2f0>)
 80069a2:	2301      	movs	r3, #1
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f af19 	beq.w	80067e2 <_printf_float+0xc2>
 80069b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b4:	4313      	orrs	r3, r2
 80069b6:	d102      	bne.n	80069be <_printf_float+0x29e>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	07d9      	lsls	r1, r3, #31
 80069bc:	d5d8      	bpl.n	8006970 <_printf_float+0x250>
 80069be:	ee18 3a10 	vmov	r3, s16
 80069c2:	4652      	mov	r2, sl
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f af09 	beq.w	80067e2 <_printf_float+0xc2>
 80069d0:	f04f 0900 	mov.w	r9, #0
 80069d4:	f104 0a1a 	add.w	sl, r4, #26
 80069d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069da:	425b      	negs	r3, r3
 80069dc:	454b      	cmp	r3, r9
 80069de:	dc01      	bgt.n	80069e4 <_printf_float+0x2c4>
 80069e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e2:	e792      	b.n	800690a <_printf_float+0x1ea>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4652      	mov	r2, sl
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	f43f aef7 	beq.w	80067e2 <_printf_float+0xc2>
 80069f4:	f109 0901 	add.w	r9, r9, #1
 80069f8:	e7ee      	b.n	80069d8 <_printf_float+0x2b8>
 80069fa:	bf00      	nop
 80069fc:	7fefffff 	.word	0x7fefffff
 8006a00:	080093f8 	.word	0x080093f8
 8006a04:	080093fc 	.word	0x080093fc
 8006a08:	08009404 	.word	0x08009404
 8006a0c:	08009400 	.word	0x08009400
 8006a10:	08009408 	.word	0x08009408
 8006a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	bfa8      	it	ge
 8006a1c:	461a      	movge	r2, r3
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	4691      	mov	r9, r2
 8006a22:	dc37      	bgt.n	8006a94 <_printf_float+0x374>
 8006a24:	f04f 0b00 	mov.w	fp, #0
 8006a28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a2c:	f104 021a 	add.w	r2, r4, #26
 8006a30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a32:	9305      	str	r3, [sp, #20]
 8006a34:	eba3 0309 	sub.w	r3, r3, r9
 8006a38:	455b      	cmp	r3, fp
 8006a3a:	dc33      	bgt.n	8006aa4 <_printf_float+0x384>
 8006a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a40:	429a      	cmp	r2, r3
 8006a42:	db3b      	blt.n	8006abc <_printf_float+0x39c>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	07da      	lsls	r2, r3, #31
 8006a48:	d438      	bmi.n	8006abc <_printf_float+0x39c>
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4c:	9a05      	ldr	r2, [sp, #20]
 8006a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a50:	1a9a      	subs	r2, r3, r2
 8006a52:	eba3 0901 	sub.w	r9, r3, r1
 8006a56:	4591      	cmp	r9, r2
 8006a58:	bfa8      	it	ge
 8006a5a:	4691      	movge	r9, r2
 8006a5c:	f1b9 0f00 	cmp.w	r9, #0
 8006a60:	dc35      	bgt.n	8006ace <_printf_float+0x3ae>
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a6a:	f104 0a1a 	add.w	sl, r4, #26
 8006a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	eba3 0309 	sub.w	r3, r3, r9
 8006a78:	4543      	cmp	r3, r8
 8006a7a:	f77f af79 	ble.w	8006970 <_printf_float+0x250>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4652      	mov	r2, sl
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f aeaa 	beq.w	80067e2 <_printf_float+0xc2>
 8006a8e:	f108 0801 	add.w	r8, r8, #1
 8006a92:	e7ec      	b.n	8006a6e <_printf_float+0x34e>
 8006a94:	4613      	mov	r3, r2
 8006a96:	4631      	mov	r1, r6
 8006a98:	4642      	mov	r2, r8
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d1c0      	bne.n	8006a24 <_printf_float+0x304>
 8006aa2:	e69e      	b.n	80067e2 <_printf_float+0xc2>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	9205      	str	r2, [sp, #20]
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f ae97 	beq.w	80067e2 <_printf_float+0xc2>
 8006ab4:	9a05      	ldr	r2, [sp, #20]
 8006ab6:	f10b 0b01 	add.w	fp, fp, #1
 8006aba:	e7b9      	b.n	8006a30 <_printf_float+0x310>
 8006abc:	ee18 3a10 	vmov	r3, s16
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d1be      	bne.n	8006a4a <_printf_float+0x32a>
 8006acc:	e689      	b.n	80067e2 <_printf_float+0xc2>
 8006ace:	9a05      	ldr	r2, [sp, #20]
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	4442      	add	r2, r8
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	d1c1      	bne.n	8006a62 <_printf_float+0x342>
 8006ade:	e680      	b.n	80067e2 <_printf_float+0xc2>
 8006ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae2:	2a01      	cmp	r2, #1
 8006ae4:	dc01      	bgt.n	8006aea <_printf_float+0x3ca>
 8006ae6:	07db      	lsls	r3, r3, #31
 8006ae8:	d538      	bpl.n	8006b5c <_printf_float+0x43c>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4642      	mov	r2, r8
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	f43f ae74 	beq.w	80067e2 <_printf_float+0xc2>
 8006afa:	ee18 3a10 	vmov	r3, s16
 8006afe:	4652      	mov	r2, sl
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	f43f ae6b 	beq.w	80067e2 <_printf_float+0xc2>
 8006b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b10:	2200      	movs	r2, #0
 8006b12:	2300      	movs	r3, #0
 8006b14:	f7f9 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b18:	b9d8      	cbnz	r0, 8006b52 <_printf_float+0x432>
 8006b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1c:	f108 0201 	add.w	r2, r8, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d10e      	bne.n	8006b4a <_printf_float+0x42a>
 8006b2c:	e659      	b.n	80067e2 <_printf_float+0xc2>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4652      	mov	r2, sl
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f ae52 	beq.w	80067e2 <_printf_float+0xc2>
 8006b3e:	f108 0801 	add.w	r8, r8, #1
 8006b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b44:	3b01      	subs	r3, #1
 8006b46:	4543      	cmp	r3, r8
 8006b48:	dcf1      	bgt.n	8006b2e <_printf_float+0x40e>
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b50:	e6dc      	b.n	800690c <_printf_float+0x1ec>
 8006b52:	f04f 0800 	mov.w	r8, #0
 8006b56:	f104 0a1a 	add.w	sl, r4, #26
 8006b5a:	e7f2      	b.n	8006b42 <_printf_float+0x422>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4642      	mov	r2, r8
 8006b60:	e7df      	b.n	8006b22 <_printf_float+0x402>
 8006b62:	2301      	movs	r3, #1
 8006b64:	464a      	mov	r2, r9
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f ae38 	beq.w	80067e2 <_printf_float+0xc2>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b7a:	1a5b      	subs	r3, r3, r1
 8006b7c:	4543      	cmp	r3, r8
 8006b7e:	dcf0      	bgt.n	8006b62 <_printf_float+0x442>
 8006b80:	e6fa      	b.n	8006978 <_printf_float+0x258>
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	f104 0919 	add.w	r9, r4, #25
 8006b8a:	e7f4      	b.n	8006b76 <_printf_float+0x456>

08006b8c <_printf_common>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	4616      	mov	r6, r2
 8006b92:	4699      	mov	r9, r3
 8006b94:	688a      	ldr	r2, [r1, #8]
 8006b96:	690b      	ldr	r3, [r1, #16]
 8006b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfb8      	it	lt
 8006ba0:	4613      	movlt	r3, r2
 8006ba2:	6033      	str	r3, [r6, #0]
 8006ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ba8:	4607      	mov	r7, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	b10a      	cbz	r2, 8006bb2 <_printf_common+0x26>
 8006bae:	3301      	adds	r3, #1
 8006bb0:	6033      	str	r3, [r6, #0]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	0699      	lsls	r1, r3, #26
 8006bb6:	bf42      	ittt	mi
 8006bb8:	6833      	ldrmi	r3, [r6, #0]
 8006bba:	3302      	addmi	r3, #2
 8006bbc:	6033      	strmi	r3, [r6, #0]
 8006bbe:	6825      	ldr	r5, [r4, #0]
 8006bc0:	f015 0506 	ands.w	r5, r5, #6
 8006bc4:	d106      	bne.n	8006bd4 <_printf_common+0x48>
 8006bc6:	f104 0a19 	add.w	sl, r4, #25
 8006bca:	68e3      	ldr	r3, [r4, #12]
 8006bcc:	6832      	ldr	r2, [r6, #0]
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dc26      	bgt.n	8006c22 <_printf_common+0x96>
 8006bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bd8:	1e13      	subs	r3, r2, #0
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	bf18      	it	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	0692      	lsls	r2, r2, #26
 8006be2:	d42b      	bmi.n	8006c3c <_printf_common+0xb0>
 8006be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d01e      	beq.n	8006c30 <_printf_common+0xa4>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	68e5      	ldr	r5, [r4, #12]
 8006bf6:	6832      	ldr	r2, [r6, #0]
 8006bf8:	f003 0306 	and.w	r3, r3, #6
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	bf08      	it	eq
 8006c00:	1aad      	subeq	r5, r5, r2
 8006c02:	68a3      	ldr	r3, [r4, #8]
 8006c04:	6922      	ldr	r2, [r4, #16]
 8006c06:	bf0c      	ite	eq
 8006c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c0c:	2500      	movne	r5, #0
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	bfc4      	itt	gt
 8006c12:	1a9b      	subgt	r3, r3, r2
 8006c14:	18ed      	addgt	r5, r5, r3
 8006c16:	2600      	movs	r6, #0
 8006c18:	341a      	adds	r4, #26
 8006c1a:	42b5      	cmp	r5, r6
 8006c1c:	d11a      	bne.n	8006c54 <_printf_common+0xc8>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e008      	b.n	8006c34 <_printf_common+0xa8>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4652      	mov	r2, sl
 8006c26:	4649      	mov	r1, r9
 8006c28:	4638      	mov	r0, r7
 8006c2a:	47c0      	blx	r8
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d103      	bne.n	8006c38 <_printf_common+0xac>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c38:	3501      	adds	r5, #1
 8006c3a:	e7c6      	b.n	8006bca <_printf_common+0x3e>
 8006c3c:	18e1      	adds	r1, r4, r3
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	2030      	movs	r0, #48	; 0x30
 8006c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c46:	4422      	add	r2, r4
 8006c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c50:	3302      	adds	r3, #2
 8006c52:	e7c7      	b.n	8006be4 <_printf_common+0x58>
 8006c54:	2301      	movs	r3, #1
 8006c56:	4622      	mov	r2, r4
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	47c0      	blx	r8
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d0e6      	beq.n	8006c30 <_printf_common+0xa4>
 8006c62:	3601      	adds	r6, #1
 8006c64:	e7d9      	b.n	8006c1a <_printf_common+0x8e>
	...

08006c68 <_printf_i>:
 8006c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	7e0f      	ldrb	r7, [r1, #24]
 8006c6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c70:	2f78      	cmp	r7, #120	; 0x78
 8006c72:	4691      	mov	r9, r2
 8006c74:	4680      	mov	r8, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	469a      	mov	sl, r3
 8006c7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c7e:	d807      	bhi.n	8006c90 <_printf_i+0x28>
 8006c80:	2f62      	cmp	r7, #98	; 0x62
 8006c82:	d80a      	bhi.n	8006c9a <_printf_i+0x32>
 8006c84:	2f00      	cmp	r7, #0
 8006c86:	f000 80d8 	beq.w	8006e3a <_printf_i+0x1d2>
 8006c8a:	2f58      	cmp	r7, #88	; 0x58
 8006c8c:	f000 80a3 	beq.w	8006dd6 <_printf_i+0x16e>
 8006c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c98:	e03a      	b.n	8006d10 <_printf_i+0xa8>
 8006c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c9e:	2b15      	cmp	r3, #21
 8006ca0:	d8f6      	bhi.n	8006c90 <_printf_i+0x28>
 8006ca2:	a101      	add	r1, pc, #4	; (adr r1, 8006ca8 <_printf_i+0x40>)
 8006ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ca8:	08006d01 	.word	0x08006d01
 8006cac:	08006d15 	.word	0x08006d15
 8006cb0:	08006c91 	.word	0x08006c91
 8006cb4:	08006c91 	.word	0x08006c91
 8006cb8:	08006c91 	.word	0x08006c91
 8006cbc:	08006c91 	.word	0x08006c91
 8006cc0:	08006d15 	.word	0x08006d15
 8006cc4:	08006c91 	.word	0x08006c91
 8006cc8:	08006c91 	.word	0x08006c91
 8006ccc:	08006c91 	.word	0x08006c91
 8006cd0:	08006c91 	.word	0x08006c91
 8006cd4:	08006e21 	.word	0x08006e21
 8006cd8:	08006d45 	.word	0x08006d45
 8006cdc:	08006e03 	.word	0x08006e03
 8006ce0:	08006c91 	.word	0x08006c91
 8006ce4:	08006c91 	.word	0x08006c91
 8006ce8:	08006e43 	.word	0x08006e43
 8006cec:	08006c91 	.word	0x08006c91
 8006cf0:	08006d45 	.word	0x08006d45
 8006cf4:	08006c91 	.word	0x08006c91
 8006cf8:	08006c91 	.word	0x08006c91
 8006cfc:	08006e0b 	.word	0x08006e0b
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	602a      	str	r2, [r5, #0]
 8006d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0a3      	b.n	8006e5c <_printf_i+0x1f4>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	6829      	ldr	r1, [r5, #0]
 8006d18:	0606      	lsls	r6, r0, #24
 8006d1a:	f101 0304 	add.w	r3, r1, #4
 8006d1e:	d50a      	bpl.n	8006d36 <_printf_i+0xce>
 8006d20:	680e      	ldr	r6, [r1, #0]
 8006d22:	602b      	str	r3, [r5, #0]
 8006d24:	2e00      	cmp	r6, #0
 8006d26:	da03      	bge.n	8006d30 <_printf_i+0xc8>
 8006d28:	232d      	movs	r3, #45	; 0x2d
 8006d2a:	4276      	negs	r6, r6
 8006d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d30:	485e      	ldr	r0, [pc, #376]	; (8006eac <_printf_i+0x244>)
 8006d32:	230a      	movs	r3, #10
 8006d34:	e019      	b.n	8006d6a <_printf_i+0x102>
 8006d36:	680e      	ldr	r6, [r1, #0]
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d3e:	bf18      	it	ne
 8006d40:	b236      	sxthne	r6, r6
 8006d42:	e7ef      	b.n	8006d24 <_printf_i+0xbc>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	6820      	ldr	r0, [r4, #0]
 8006d48:	1d19      	adds	r1, r3, #4
 8006d4a:	6029      	str	r1, [r5, #0]
 8006d4c:	0601      	lsls	r1, r0, #24
 8006d4e:	d501      	bpl.n	8006d54 <_printf_i+0xec>
 8006d50:	681e      	ldr	r6, [r3, #0]
 8006d52:	e002      	b.n	8006d5a <_printf_i+0xf2>
 8006d54:	0646      	lsls	r6, r0, #25
 8006d56:	d5fb      	bpl.n	8006d50 <_printf_i+0xe8>
 8006d58:	881e      	ldrh	r6, [r3, #0]
 8006d5a:	4854      	ldr	r0, [pc, #336]	; (8006eac <_printf_i+0x244>)
 8006d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d5e:	bf0c      	ite	eq
 8006d60:	2308      	moveq	r3, #8
 8006d62:	230a      	movne	r3, #10
 8006d64:	2100      	movs	r1, #0
 8006d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d6a:	6865      	ldr	r5, [r4, #4]
 8006d6c:	60a5      	str	r5, [r4, #8]
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	bfa2      	ittt	ge
 8006d72:	6821      	ldrge	r1, [r4, #0]
 8006d74:	f021 0104 	bicge.w	r1, r1, #4
 8006d78:	6021      	strge	r1, [r4, #0]
 8006d7a:	b90e      	cbnz	r6, 8006d80 <_printf_i+0x118>
 8006d7c:	2d00      	cmp	r5, #0
 8006d7e:	d04d      	beq.n	8006e1c <_printf_i+0x1b4>
 8006d80:	4615      	mov	r5, r2
 8006d82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d86:	fb03 6711 	mls	r7, r3, r1, r6
 8006d8a:	5dc7      	ldrb	r7, [r0, r7]
 8006d8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d90:	4637      	mov	r7, r6
 8006d92:	42bb      	cmp	r3, r7
 8006d94:	460e      	mov	r6, r1
 8006d96:	d9f4      	bls.n	8006d82 <_printf_i+0x11a>
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d10b      	bne.n	8006db4 <_printf_i+0x14c>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	07de      	lsls	r6, r3, #31
 8006da0:	d508      	bpl.n	8006db4 <_printf_i+0x14c>
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	6861      	ldr	r1, [r4, #4]
 8006da6:	4299      	cmp	r1, r3
 8006da8:	bfde      	ittt	le
 8006daa:	2330      	movle	r3, #48	; 0x30
 8006dac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006db0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006db4:	1b52      	subs	r2, r2, r5
 8006db6:	6122      	str	r2, [r4, #16]
 8006db8:	f8cd a000 	str.w	sl, [sp]
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	aa03      	add	r2, sp, #12
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f7ff fee2 	bl	8006b8c <_printf_common>
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d14c      	bne.n	8006e66 <_printf_i+0x1fe>
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd0:	b004      	add	sp, #16
 8006dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd6:	4835      	ldr	r0, [pc, #212]	; (8006eac <_printf_i+0x244>)
 8006dd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ddc:	6829      	ldr	r1, [r5, #0]
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006de4:	6029      	str	r1, [r5, #0]
 8006de6:	061d      	lsls	r5, r3, #24
 8006de8:	d514      	bpl.n	8006e14 <_printf_i+0x1ac>
 8006dea:	07df      	lsls	r7, r3, #31
 8006dec:	bf44      	itt	mi
 8006dee:	f043 0320 	orrmi.w	r3, r3, #32
 8006df2:	6023      	strmi	r3, [r4, #0]
 8006df4:	b91e      	cbnz	r6, 8006dfe <_printf_i+0x196>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f023 0320 	bic.w	r3, r3, #32
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	2310      	movs	r3, #16
 8006e00:	e7b0      	b.n	8006d64 <_printf_i+0xfc>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	f043 0320 	orr.w	r3, r3, #32
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	2378      	movs	r3, #120	; 0x78
 8006e0c:	4828      	ldr	r0, [pc, #160]	; (8006eb0 <_printf_i+0x248>)
 8006e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e12:	e7e3      	b.n	8006ddc <_printf_i+0x174>
 8006e14:	0659      	lsls	r1, r3, #25
 8006e16:	bf48      	it	mi
 8006e18:	b2b6      	uxthmi	r6, r6
 8006e1a:	e7e6      	b.n	8006dea <_printf_i+0x182>
 8006e1c:	4615      	mov	r5, r2
 8006e1e:	e7bb      	b.n	8006d98 <_printf_i+0x130>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	6826      	ldr	r6, [r4, #0]
 8006e24:	6961      	ldr	r1, [r4, #20]
 8006e26:	1d18      	adds	r0, r3, #4
 8006e28:	6028      	str	r0, [r5, #0]
 8006e2a:	0635      	lsls	r5, r6, #24
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	d501      	bpl.n	8006e34 <_printf_i+0x1cc>
 8006e30:	6019      	str	r1, [r3, #0]
 8006e32:	e002      	b.n	8006e3a <_printf_i+0x1d2>
 8006e34:	0670      	lsls	r0, r6, #25
 8006e36:	d5fb      	bpl.n	8006e30 <_printf_i+0x1c8>
 8006e38:	8019      	strh	r1, [r3, #0]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	4615      	mov	r5, r2
 8006e40:	e7ba      	b.n	8006db8 <_printf_i+0x150>
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	1d1a      	adds	r2, r3, #4
 8006e46:	602a      	str	r2, [r5, #0]
 8006e48:	681d      	ldr	r5, [r3, #0]
 8006e4a:	6862      	ldr	r2, [r4, #4]
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7f9 f9ce 	bl	80001f0 <memchr>
 8006e54:	b108      	cbz	r0, 8006e5a <_printf_i+0x1f2>
 8006e56:	1b40      	subs	r0, r0, r5
 8006e58:	6060      	str	r0, [r4, #4]
 8006e5a:	6863      	ldr	r3, [r4, #4]
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e64:	e7a8      	b.n	8006db8 <_printf_i+0x150>
 8006e66:	6923      	ldr	r3, [r4, #16]
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	47d0      	blx	sl
 8006e70:	3001      	adds	r0, #1
 8006e72:	d0ab      	beq.n	8006dcc <_printf_i+0x164>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	079b      	lsls	r3, r3, #30
 8006e78:	d413      	bmi.n	8006ea2 <_printf_i+0x23a>
 8006e7a:	68e0      	ldr	r0, [r4, #12]
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	4298      	cmp	r0, r3
 8006e80:	bfb8      	it	lt
 8006e82:	4618      	movlt	r0, r3
 8006e84:	e7a4      	b.n	8006dd0 <_printf_i+0x168>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	47d0      	blx	sl
 8006e90:	3001      	adds	r0, #1
 8006e92:	d09b      	beq.n	8006dcc <_printf_i+0x164>
 8006e94:	3501      	adds	r5, #1
 8006e96:	68e3      	ldr	r3, [r4, #12]
 8006e98:	9903      	ldr	r1, [sp, #12]
 8006e9a:	1a5b      	subs	r3, r3, r1
 8006e9c:	42ab      	cmp	r3, r5
 8006e9e:	dcf2      	bgt.n	8006e86 <_printf_i+0x21e>
 8006ea0:	e7eb      	b.n	8006e7a <_printf_i+0x212>
 8006ea2:	2500      	movs	r5, #0
 8006ea4:	f104 0619 	add.w	r6, r4, #25
 8006ea8:	e7f5      	b.n	8006e96 <_printf_i+0x22e>
 8006eaa:	bf00      	nop
 8006eac:	0800940a 	.word	0x0800940a
 8006eb0:	0800941b 	.word	0x0800941b

08006eb4 <siprintf>:
 8006eb4:	b40e      	push	{r1, r2, r3}
 8006eb6:	b500      	push	{lr}
 8006eb8:	b09c      	sub	sp, #112	; 0x70
 8006eba:	ab1d      	add	r3, sp, #116	; 0x74
 8006ebc:	9002      	str	r0, [sp, #8]
 8006ebe:	9006      	str	r0, [sp, #24]
 8006ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ec4:	4809      	ldr	r0, [pc, #36]	; (8006eec <siprintf+0x38>)
 8006ec6:	9107      	str	r1, [sp, #28]
 8006ec8:	9104      	str	r1, [sp, #16]
 8006eca:	4909      	ldr	r1, [pc, #36]	; (8006ef0 <siprintf+0x3c>)
 8006ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed0:	9105      	str	r1, [sp, #20]
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	a902      	add	r1, sp, #8
 8006ed8:	f001 fb78 	bl	80085cc <_svfiprintf_r>
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	b01c      	add	sp, #112	; 0x70
 8006ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee8:	b003      	add	sp, #12
 8006eea:	4770      	bx	lr
 8006eec:	2000000c 	.word	0x2000000c
 8006ef0:	ffff0208 	.word	0xffff0208

08006ef4 <quorem>:
 8006ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef8:	6903      	ldr	r3, [r0, #16]
 8006efa:	690c      	ldr	r4, [r1, #16]
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	4607      	mov	r7, r0
 8006f00:	f2c0 8081 	blt.w	8007006 <quorem+0x112>
 8006f04:	3c01      	subs	r4, #1
 8006f06:	f101 0814 	add.w	r8, r1, #20
 8006f0a:	f100 0514 	add.w	r5, r0, #20
 8006f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f28:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f2c:	d331      	bcc.n	8006f92 <quorem+0x9e>
 8006f2e:	f04f 0e00 	mov.w	lr, #0
 8006f32:	4640      	mov	r0, r8
 8006f34:	46ac      	mov	ip, r5
 8006f36:	46f2      	mov	sl, lr
 8006f38:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f3c:	b293      	uxth	r3, r2
 8006f3e:	fb06 e303 	mla	r3, r6, r3, lr
 8006f42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ebaa 0303 	sub.w	r3, sl, r3
 8006f4c:	f8dc a000 	ldr.w	sl, [ip]
 8006f50:	0c12      	lsrs	r2, r2, #16
 8006f52:	fa13 f38a 	uxtah	r3, r3, sl
 8006f56:	fb06 e202 	mla	r2, r6, r2, lr
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f62:	b292      	uxth	r2, r2
 8006f64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f70:	4581      	cmp	r9, r0
 8006f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f76:	f84c 3b04 	str.w	r3, [ip], #4
 8006f7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f7e:	d2db      	bcs.n	8006f38 <quorem+0x44>
 8006f80:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f84:	b92b      	cbnz	r3, 8006f92 <quorem+0x9e>
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	429d      	cmp	r5, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	d32e      	bcc.n	8006fee <quorem+0xfa>
 8006f90:	613c      	str	r4, [r7, #16]
 8006f92:	4638      	mov	r0, r7
 8006f94:	f001 f8c6 	bl	8008124 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	db24      	blt.n	8006fe6 <quorem+0xf2>
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f04f 0c00 	mov.w	ip, #0
 8006fa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fa8:	f8d0 e000 	ldr.w	lr, [r0]
 8006fac:	b293      	uxth	r3, r2
 8006fae:	ebac 0303 	sub.w	r3, ip, r3
 8006fb2:	0c12      	lsrs	r2, r2, #16
 8006fb4:	fa13 f38e 	uxtah	r3, r3, lr
 8006fb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fc6:	45c1      	cmp	r9, r8
 8006fc8:	f840 3b04 	str.w	r3, [r0], #4
 8006fcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fd0:	d2e8      	bcs.n	8006fa4 <quorem+0xb0>
 8006fd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fda:	b922      	cbnz	r2, 8006fe6 <quorem+0xf2>
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	429d      	cmp	r5, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	d30a      	bcc.n	8006ffa <quorem+0x106>
 8006fe4:	613c      	str	r4, [r7, #16]
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	b003      	add	sp, #12
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d1cc      	bne.n	8006f90 <quorem+0x9c>
 8006ff6:	3c01      	subs	r4, #1
 8006ff8:	e7c7      	b.n	8006f8a <quorem+0x96>
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	d1f0      	bne.n	8006fe4 <quorem+0xf0>
 8007002:	3c01      	subs	r4, #1
 8007004:	e7eb      	b.n	8006fde <quorem+0xea>
 8007006:	2000      	movs	r0, #0
 8007008:	e7ee      	b.n	8006fe8 <quorem+0xf4>
 800700a:	0000      	movs	r0, r0
 800700c:	0000      	movs	r0, r0
	...

08007010 <_dtoa_r>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	ed2d 8b04 	vpush	{d8-d9}
 8007018:	ec57 6b10 	vmov	r6, r7, d0
 800701c:	b093      	sub	sp, #76	; 0x4c
 800701e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007020:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007024:	9106      	str	r1, [sp, #24]
 8007026:	ee10 aa10 	vmov	sl, s0
 800702a:	4604      	mov	r4, r0
 800702c:	9209      	str	r2, [sp, #36]	; 0x24
 800702e:	930c      	str	r3, [sp, #48]	; 0x30
 8007030:	46bb      	mov	fp, r7
 8007032:	b975      	cbnz	r5, 8007052 <_dtoa_r+0x42>
 8007034:	2010      	movs	r0, #16
 8007036:	f000 fddd 	bl	8007bf4 <malloc>
 800703a:	4602      	mov	r2, r0
 800703c:	6260      	str	r0, [r4, #36]	; 0x24
 800703e:	b920      	cbnz	r0, 800704a <_dtoa_r+0x3a>
 8007040:	4ba7      	ldr	r3, [pc, #668]	; (80072e0 <_dtoa_r+0x2d0>)
 8007042:	21ea      	movs	r1, #234	; 0xea
 8007044:	48a7      	ldr	r0, [pc, #668]	; (80072e4 <_dtoa_r+0x2d4>)
 8007046:	f001 fbd1 	bl	80087ec <__assert_func>
 800704a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800704e:	6005      	str	r5, [r0, #0]
 8007050:	60c5      	str	r5, [r0, #12]
 8007052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007054:	6819      	ldr	r1, [r3, #0]
 8007056:	b151      	cbz	r1, 800706e <_dtoa_r+0x5e>
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	604a      	str	r2, [r1, #4]
 800705c:	2301      	movs	r3, #1
 800705e:	4093      	lsls	r3, r2
 8007060:	608b      	str	r3, [r1, #8]
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fe1c 	bl	8007ca0 <_Bfree>
 8007068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	1e3b      	subs	r3, r7, #0
 8007070:	bfaa      	itet	ge
 8007072:	2300      	movge	r3, #0
 8007074:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007078:	f8c8 3000 	strge.w	r3, [r8]
 800707c:	4b9a      	ldr	r3, [pc, #616]	; (80072e8 <_dtoa_r+0x2d8>)
 800707e:	bfbc      	itt	lt
 8007080:	2201      	movlt	r2, #1
 8007082:	f8c8 2000 	strlt.w	r2, [r8]
 8007086:	ea33 030b 	bics.w	r3, r3, fp
 800708a:	d11b      	bne.n	80070c4 <_dtoa_r+0xb4>
 800708c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800708e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007098:	4333      	orrs	r3, r6
 800709a:	f000 8592 	beq.w	8007bc2 <_dtoa_r+0xbb2>
 800709e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a0:	b963      	cbnz	r3, 80070bc <_dtoa_r+0xac>
 80070a2:	4b92      	ldr	r3, [pc, #584]	; (80072ec <_dtoa_r+0x2dc>)
 80070a4:	e022      	b.n	80070ec <_dtoa_r+0xdc>
 80070a6:	4b92      	ldr	r3, [pc, #584]	; (80072f0 <_dtoa_r+0x2e0>)
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	3308      	adds	r3, #8
 80070ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	9801      	ldr	r0, [sp, #4]
 80070b2:	b013      	add	sp, #76	; 0x4c
 80070b4:	ecbd 8b04 	vpop	{d8-d9}
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	4b8b      	ldr	r3, [pc, #556]	; (80072ec <_dtoa_r+0x2dc>)
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	3303      	adds	r3, #3
 80070c2:	e7f3      	b.n	80070ac <_dtoa_r+0x9c>
 80070c4:	2200      	movs	r2, #0
 80070c6:	2300      	movs	r3, #0
 80070c8:	4650      	mov	r0, sl
 80070ca:	4659      	mov	r1, fp
 80070cc:	f7f9 fd04 	bl	8000ad8 <__aeabi_dcmpeq>
 80070d0:	ec4b ab19 	vmov	d9, sl, fp
 80070d4:	4680      	mov	r8, r0
 80070d6:	b158      	cbz	r0, 80070f0 <_dtoa_r+0xe0>
 80070d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070da:	2301      	movs	r3, #1
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 856b 	beq.w	8007bbc <_dtoa_r+0xbac>
 80070e6:	4883      	ldr	r0, [pc, #524]	; (80072f4 <_dtoa_r+0x2e4>)
 80070e8:	6018      	str	r0, [r3, #0]
 80070ea:	1e43      	subs	r3, r0, #1
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	e7df      	b.n	80070b0 <_dtoa_r+0xa0>
 80070f0:	ec4b ab10 	vmov	d0, sl, fp
 80070f4:	aa10      	add	r2, sp, #64	; 0x40
 80070f6:	a911      	add	r1, sp, #68	; 0x44
 80070f8:	4620      	mov	r0, r4
 80070fa:	f001 f8b9 	bl	8008270 <__d2b>
 80070fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007102:	ee08 0a10 	vmov	s16, r0
 8007106:	2d00      	cmp	r5, #0
 8007108:	f000 8084 	beq.w	8007214 <_dtoa_r+0x204>
 800710c:	ee19 3a90 	vmov	r3, s19
 8007110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007114:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007118:	4656      	mov	r6, sl
 800711a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800711e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007122:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007126:	4b74      	ldr	r3, [pc, #464]	; (80072f8 <_dtoa_r+0x2e8>)
 8007128:	2200      	movs	r2, #0
 800712a:	4630      	mov	r0, r6
 800712c:	4639      	mov	r1, r7
 800712e:	f7f9 f8b3 	bl	8000298 <__aeabi_dsub>
 8007132:	a365      	add	r3, pc, #404	; (adr r3, 80072c8 <_dtoa_r+0x2b8>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f7f9 fa66 	bl	8000608 <__aeabi_dmul>
 800713c:	a364      	add	r3, pc, #400	; (adr r3, 80072d0 <_dtoa_r+0x2c0>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 f8ab 	bl	800029c <__adddf3>
 8007146:	4606      	mov	r6, r0
 8007148:	4628      	mov	r0, r5
 800714a:	460f      	mov	r7, r1
 800714c:	f7f9 f9f2 	bl	8000534 <__aeabi_i2d>
 8007150:	a361      	add	r3, pc, #388	; (adr r3, 80072d8 <_dtoa_r+0x2c8>)
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f7f9 fa57 	bl	8000608 <__aeabi_dmul>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 f89b 	bl	800029c <__adddf3>
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	f7f9 fcfd 	bl	8000b68 <__aeabi_d2iz>
 800716e:	2200      	movs	r2, #0
 8007170:	9000      	str	r0, [sp, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800717c:	b150      	cbz	r0, 8007194 <_dtoa_r+0x184>
 800717e:	9800      	ldr	r0, [sp, #0]
 8007180:	f7f9 f9d8 	bl	8000534 <__aeabi_i2d>
 8007184:	4632      	mov	r2, r6
 8007186:	463b      	mov	r3, r7
 8007188:	f7f9 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800718c:	b910      	cbnz	r0, 8007194 <_dtoa_r+0x184>
 800718e:	9b00      	ldr	r3, [sp, #0]
 8007190:	3b01      	subs	r3, #1
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	9b00      	ldr	r3, [sp, #0]
 8007196:	2b16      	cmp	r3, #22
 8007198:	d85a      	bhi.n	8007250 <_dtoa_r+0x240>
 800719a:	9a00      	ldr	r2, [sp, #0]
 800719c:	4b57      	ldr	r3, [pc, #348]	; (80072fc <_dtoa_r+0x2ec>)
 800719e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	ec51 0b19 	vmov	r0, r1, d9
 80071aa:	f7f9 fc9f 	bl	8000aec <__aeabi_dcmplt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d050      	beq.n	8007254 <_dtoa_r+0x244>
 80071b2:	9b00      	ldr	r3, [sp, #0]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80071bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071be:	1b5d      	subs	r5, r3, r5
 80071c0:	1e6b      	subs	r3, r5, #1
 80071c2:	9305      	str	r3, [sp, #20]
 80071c4:	bf45      	ittet	mi
 80071c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80071ca:	9304      	strmi	r3, [sp, #16]
 80071cc:	2300      	movpl	r3, #0
 80071ce:	2300      	movmi	r3, #0
 80071d0:	bf4c      	ite	mi
 80071d2:	9305      	strmi	r3, [sp, #20]
 80071d4:	9304      	strpl	r3, [sp, #16]
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	db3d      	blt.n	8007258 <_dtoa_r+0x248>
 80071dc:	9b05      	ldr	r3, [sp, #20]
 80071de:	9a00      	ldr	r2, [sp, #0]
 80071e0:	920a      	str	r2, [sp, #40]	; 0x28
 80071e2:	4413      	add	r3, r2
 80071e4:	9305      	str	r3, [sp, #20]
 80071e6:	2300      	movs	r3, #0
 80071e8:	9307      	str	r3, [sp, #28]
 80071ea:	9b06      	ldr	r3, [sp, #24]
 80071ec:	2b09      	cmp	r3, #9
 80071ee:	f200 8089 	bhi.w	8007304 <_dtoa_r+0x2f4>
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	bfc4      	itt	gt
 80071f6:	3b04      	subgt	r3, #4
 80071f8:	9306      	strgt	r3, [sp, #24]
 80071fa:	9b06      	ldr	r3, [sp, #24]
 80071fc:	f1a3 0302 	sub.w	r3, r3, #2
 8007200:	bfcc      	ite	gt
 8007202:	2500      	movgt	r5, #0
 8007204:	2501      	movle	r5, #1
 8007206:	2b03      	cmp	r3, #3
 8007208:	f200 8087 	bhi.w	800731a <_dtoa_r+0x30a>
 800720c:	e8df f003 	tbb	[pc, r3]
 8007210:	59383a2d 	.word	0x59383a2d
 8007214:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007218:	441d      	add	r5, r3
 800721a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800721e:	2b20      	cmp	r3, #32
 8007220:	bfc1      	itttt	gt
 8007222:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007226:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800722a:	fa0b f303 	lslgt.w	r3, fp, r3
 800722e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007232:	bfda      	itte	le
 8007234:	f1c3 0320 	rsble	r3, r3, #32
 8007238:	fa06 f003 	lslle.w	r0, r6, r3
 800723c:	4318      	orrgt	r0, r3
 800723e:	f7f9 f969 	bl	8000514 <__aeabi_ui2d>
 8007242:	2301      	movs	r3, #1
 8007244:	4606      	mov	r6, r0
 8007246:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800724a:	3d01      	subs	r5, #1
 800724c:	930e      	str	r3, [sp, #56]	; 0x38
 800724e:	e76a      	b.n	8007126 <_dtoa_r+0x116>
 8007250:	2301      	movs	r3, #1
 8007252:	e7b2      	b.n	80071ba <_dtoa_r+0x1aa>
 8007254:	900b      	str	r0, [sp, #44]	; 0x2c
 8007256:	e7b1      	b.n	80071bc <_dtoa_r+0x1ac>
 8007258:	9b04      	ldr	r3, [sp, #16]
 800725a:	9a00      	ldr	r2, [sp, #0]
 800725c:	1a9b      	subs	r3, r3, r2
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	4253      	negs	r3, r2
 8007262:	9307      	str	r3, [sp, #28]
 8007264:	2300      	movs	r3, #0
 8007266:	930a      	str	r3, [sp, #40]	; 0x28
 8007268:	e7bf      	b.n	80071ea <_dtoa_r+0x1da>
 800726a:	2300      	movs	r3, #0
 800726c:	9308      	str	r3, [sp, #32]
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	dc55      	bgt.n	8007320 <_dtoa_r+0x310>
 8007274:	2301      	movs	r3, #1
 8007276:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800727a:	461a      	mov	r2, r3
 800727c:	9209      	str	r2, [sp, #36]	; 0x24
 800727e:	e00c      	b.n	800729a <_dtoa_r+0x28a>
 8007280:	2301      	movs	r3, #1
 8007282:	e7f3      	b.n	800726c <_dtoa_r+0x25c>
 8007284:	2300      	movs	r3, #0
 8007286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007288:	9308      	str	r3, [sp, #32]
 800728a:	9b00      	ldr	r3, [sp, #0]
 800728c:	4413      	add	r3, r2
 800728e:	9302      	str	r3, [sp, #8]
 8007290:	3301      	adds	r3, #1
 8007292:	2b01      	cmp	r3, #1
 8007294:	9303      	str	r3, [sp, #12]
 8007296:	bfb8      	it	lt
 8007298:	2301      	movlt	r3, #1
 800729a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800729c:	2200      	movs	r2, #0
 800729e:	6042      	str	r2, [r0, #4]
 80072a0:	2204      	movs	r2, #4
 80072a2:	f102 0614 	add.w	r6, r2, #20
 80072a6:	429e      	cmp	r6, r3
 80072a8:	6841      	ldr	r1, [r0, #4]
 80072aa:	d93d      	bls.n	8007328 <_dtoa_r+0x318>
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 fcb7 	bl	8007c20 <_Balloc>
 80072b2:	9001      	str	r0, [sp, #4]
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d13b      	bne.n	8007330 <_dtoa_r+0x320>
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <_dtoa_r+0x2f0>)
 80072ba:	4602      	mov	r2, r0
 80072bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072c0:	e6c0      	b.n	8007044 <_dtoa_r+0x34>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e7df      	b.n	8007286 <_dtoa_r+0x276>
 80072c6:	bf00      	nop
 80072c8:	636f4361 	.word	0x636f4361
 80072cc:	3fd287a7 	.word	0x3fd287a7
 80072d0:	8b60c8b3 	.word	0x8b60c8b3
 80072d4:	3fc68a28 	.word	0x3fc68a28
 80072d8:	509f79fb 	.word	0x509f79fb
 80072dc:	3fd34413 	.word	0x3fd34413
 80072e0:	08009439 	.word	0x08009439
 80072e4:	08009450 	.word	0x08009450
 80072e8:	7ff00000 	.word	0x7ff00000
 80072ec:	08009435 	.word	0x08009435
 80072f0:	0800942c 	.word	0x0800942c
 80072f4:	08009409 	.word	0x08009409
 80072f8:	3ff80000 	.word	0x3ff80000
 80072fc:	08009540 	.word	0x08009540
 8007300:	080094ab 	.word	0x080094ab
 8007304:	2501      	movs	r5, #1
 8007306:	2300      	movs	r3, #0
 8007308:	9306      	str	r3, [sp, #24]
 800730a:	9508      	str	r5, [sp, #32]
 800730c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007310:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007314:	2200      	movs	r2, #0
 8007316:	2312      	movs	r3, #18
 8007318:	e7b0      	b.n	800727c <_dtoa_r+0x26c>
 800731a:	2301      	movs	r3, #1
 800731c:	9308      	str	r3, [sp, #32]
 800731e:	e7f5      	b.n	800730c <_dtoa_r+0x2fc>
 8007320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007322:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007326:	e7b8      	b.n	800729a <_dtoa_r+0x28a>
 8007328:	3101      	adds	r1, #1
 800732a:	6041      	str	r1, [r0, #4]
 800732c:	0052      	lsls	r2, r2, #1
 800732e:	e7b8      	b.n	80072a2 <_dtoa_r+0x292>
 8007330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007332:	9a01      	ldr	r2, [sp, #4]
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	2b0e      	cmp	r3, #14
 800733a:	f200 809d 	bhi.w	8007478 <_dtoa_r+0x468>
 800733e:	2d00      	cmp	r5, #0
 8007340:	f000 809a 	beq.w	8007478 <_dtoa_r+0x468>
 8007344:	9b00      	ldr	r3, [sp, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	dd32      	ble.n	80073b0 <_dtoa_r+0x3a0>
 800734a:	4ab7      	ldr	r2, [pc, #732]	; (8007628 <_dtoa_r+0x618>)
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007358:	9b00      	ldr	r3, [sp, #0]
 800735a:	05d8      	lsls	r0, r3, #23
 800735c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007360:	d516      	bpl.n	8007390 <_dtoa_r+0x380>
 8007362:	4bb2      	ldr	r3, [pc, #712]	; (800762c <_dtoa_r+0x61c>)
 8007364:	ec51 0b19 	vmov	r0, r1, d9
 8007368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800736c:	f7f9 fa76 	bl	800085c <__aeabi_ddiv>
 8007370:	f007 070f 	and.w	r7, r7, #15
 8007374:	4682      	mov	sl, r0
 8007376:	468b      	mov	fp, r1
 8007378:	2503      	movs	r5, #3
 800737a:	4eac      	ldr	r6, [pc, #688]	; (800762c <_dtoa_r+0x61c>)
 800737c:	b957      	cbnz	r7, 8007394 <_dtoa_r+0x384>
 800737e:	4642      	mov	r2, r8
 8007380:	464b      	mov	r3, r9
 8007382:	4650      	mov	r0, sl
 8007384:	4659      	mov	r1, fp
 8007386:	f7f9 fa69 	bl	800085c <__aeabi_ddiv>
 800738a:	4682      	mov	sl, r0
 800738c:	468b      	mov	fp, r1
 800738e:	e028      	b.n	80073e2 <_dtoa_r+0x3d2>
 8007390:	2502      	movs	r5, #2
 8007392:	e7f2      	b.n	800737a <_dtoa_r+0x36a>
 8007394:	07f9      	lsls	r1, r7, #31
 8007396:	d508      	bpl.n	80073aa <_dtoa_r+0x39a>
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073a0:	f7f9 f932 	bl	8000608 <__aeabi_dmul>
 80073a4:	3501      	adds	r5, #1
 80073a6:	4680      	mov	r8, r0
 80073a8:	4689      	mov	r9, r1
 80073aa:	107f      	asrs	r7, r7, #1
 80073ac:	3608      	adds	r6, #8
 80073ae:	e7e5      	b.n	800737c <_dtoa_r+0x36c>
 80073b0:	f000 809b 	beq.w	80074ea <_dtoa_r+0x4da>
 80073b4:	9b00      	ldr	r3, [sp, #0]
 80073b6:	4f9d      	ldr	r7, [pc, #628]	; (800762c <_dtoa_r+0x61c>)
 80073b8:	425e      	negs	r6, r3
 80073ba:	4b9b      	ldr	r3, [pc, #620]	; (8007628 <_dtoa_r+0x618>)
 80073bc:	f006 020f 	and.w	r2, r6, #15
 80073c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	ec51 0b19 	vmov	r0, r1, d9
 80073cc:	f7f9 f91c 	bl	8000608 <__aeabi_dmul>
 80073d0:	1136      	asrs	r6, r6, #4
 80073d2:	4682      	mov	sl, r0
 80073d4:	468b      	mov	fp, r1
 80073d6:	2300      	movs	r3, #0
 80073d8:	2502      	movs	r5, #2
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d17a      	bne.n	80074d4 <_dtoa_r+0x4c4>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1d3      	bne.n	800738a <_dtoa_r+0x37a>
 80073e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8082 	beq.w	80074ee <_dtoa_r+0x4de>
 80073ea:	4b91      	ldr	r3, [pc, #580]	; (8007630 <_dtoa_r+0x620>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	4650      	mov	r0, sl
 80073f0:	4659      	mov	r1, fp
 80073f2:	f7f9 fb7b 	bl	8000aec <__aeabi_dcmplt>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d079      	beq.n	80074ee <_dtoa_r+0x4de>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d076      	beq.n	80074ee <_dtoa_r+0x4de>
 8007400:	9b02      	ldr	r3, [sp, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd36      	ble.n	8007474 <_dtoa_r+0x464>
 8007406:	9b00      	ldr	r3, [sp, #0]
 8007408:	4650      	mov	r0, sl
 800740a:	4659      	mov	r1, fp
 800740c:	1e5f      	subs	r7, r3, #1
 800740e:	2200      	movs	r2, #0
 8007410:	4b88      	ldr	r3, [pc, #544]	; (8007634 <_dtoa_r+0x624>)
 8007412:	f7f9 f8f9 	bl	8000608 <__aeabi_dmul>
 8007416:	9e02      	ldr	r6, [sp, #8]
 8007418:	4682      	mov	sl, r0
 800741a:	468b      	mov	fp, r1
 800741c:	3501      	adds	r5, #1
 800741e:	4628      	mov	r0, r5
 8007420:	f7f9 f888 	bl	8000534 <__aeabi_i2d>
 8007424:	4652      	mov	r2, sl
 8007426:	465b      	mov	r3, fp
 8007428:	f7f9 f8ee 	bl	8000608 <__aeabi_dmul>
 800742c:	4b82      	ldr	r3, [pc, #520]	; (8007638 <_dtoa_r+0x628>)
 800742e:	2200      	movs	r2, #0
 8007430:	f7f8 ff34 	bl	800029c <__adddf3>
 8007434:	46d0      	mov	r8, sl
 8007436:	46d9      	mov	r9, fp
 8007438:	4682      	mov	sl, r0
 800743a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800743e:	2e00      	cmp	r6, #0
 8007440:	d158      	bne.n	80074f4 <_dtoa_r+0x4e4>
 8007442:	4b7e      	ldr	r3, [pc, #504]	; (800763c <_dtoa_r+0x62c>)
 8007444:	2200      	movs	r2, #0
 8007446:	4640      	mov	r0, r8
 8007448:	4649      	mov	r1, r9
 800744a:	f7f8 ff25 	bl	8000298 <__aeabi_dsub>
 800744e:	4652      	mov	r2, sl
 8007450:	465b      	mov	r3, fp
 8007452:	4680      	mov	r8, r0
 8007454:	4689      	mov	r9, r1
 8007456:	f7f9 fb67 	bl	8000b28 <__aeabi_dcmpgt>
 800745a:	2800      	cmp	r0, #0
 800745c:	f040 8295 	bne.w	800798a <_dtoa_r+0x97a>
 8007460:	4652      	mov	r2, sl
 8007462:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007466:	4640      	mov	r0, r8
 8007468:	4649      	mov	r1, r9
 800746a:	f7f9 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	f040 8289 	bne.w	8007986 <_dtoa_r+0x976>
 8007474:	ec5b ab19 	vmov	sl, fp, d9
 8007478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800747a:	2b00      	cmp	r3, #0
 800747c:	f2c0 8148 	blt.w	8007710 <_dtoa_r+0x700>
 8007480:	9a00      	ldr	r2, [sp, #0]
 8007482:	2a0e      	cmp	r2, #14
 8007484:	f300 8144 	bgt.w	8007710 <_dtoa_r+0x700>
 8007488:	4b67      	ldr	r3, [pc, #412]	; (8007628 <_dtoa_r+0x618>)
 800748a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800748e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	f280 80d5 	bge.w	8007644 <_dtoa_r+0x634>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f300 80d1 	bgt.w	8007644 <_dtoa_r+0x634>
 80074a2:	f040 826f 	bne.w	8007984 <_dtoa_r+0x974>
 80074a6:	4b65      	ldr	r3, [pc, #404]	; (800763c <_dtoa_r+0x62c>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	4640      	mov	r0, r8
 80074ac:	4649      	mov	r1, r9
 80074ae:	f7f9 f8ab 	bl	8000608 <__aeabi_dmul>
 80074b2:	4652      	mov	r2, sl
 80074b4:	465b      	mov	r3, fp
 80074b6:	f7f9 fb2d 	bl	8000b14 <__aeabi_dcmpge>
 80074ba:	9e03      	ldr	r6, [sp, #12]
 80074bc:	4637      	mov	r7, r6
 80074be:	2800      	cmp	r0, #0
 80074c0:	f040 8245 	bne.w	800794e <_dtoa_r+0x93e>
 80074c4:	9d01      	ldr	r5, [sp, #4]
 80074c6:	2331      	movs	r3, #49	; 0x31
 80074c8:	f805 3b01 	strb.w	r3, [r5], #1
 80074cc:	9b00      	ldr	r3, [sp, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	e240      	b.n	8007956 <_dtoa_r+0x946>
 80074d4:	07f2      	lsls	r2, r6, #31
 80074d6:	d505      	bpl.n	80074e4 <_dtoa_r+0x4d4>
 80074d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074dc:	f7f9 f894 	bl	8000608 <__aeabi_dmul>
 80074e0:	3501      	adds	r5, #1
 80074e2:	2301      	movs	r3, #1
 80074e4:	1076      	asrs	r6, r6, #1
 80074e6:	3708      	adds	r7, #8
 80074e8:	e777      	b.n	80073da <_dtoa_r+0x3ca>
 80074ea:	2502      	movs	r5, #2
 80074ec:	e779      	b.n	80073e2 <_dtoa_r+0x3d2>
 80074ee:	9f00      	ldr	r7, [sp, #0]
 80074f0:	9e03      	ldr	r6, [sp, #12]
 80074f2:	e794      	b.n	800741e <_dtoa_r+0x40e>
 80074f4:	9901      	ldr	r1, [sp, #4]
 80074f6:	4b4c      	ldr	r3, [pc, #304]	; (8007628 <_dtoa_r+0x618>)
 80074f8:	4431      	add	r1, r6
 80074fa:	910d      	str	r1, [sp, #52]	; 0x34
 80074fc:	9908      	ldr	r1, [sp, #32]
 80074fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007502:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007506:	2900      	cmp	r1, #0
 8007508:	d043      	beq.n	8007592 <_dtoa_r+0x582>
 800750a:	494d      	ldr	r1, [pc, #308]	; (8007640 <_dtoa_r+0x630>)
 800750c:	2000      	movs	r0, #0
 800750e:	f7f9 f9a5 	bl	800085c <__aeabi_ddiv>
 8007512:	4652      	mov	r2, sl
 8007514:	465b      	mov	r3, fp
 8007516:	f7f8 febf 	bl	8000298 <__aeabi_dsub>
 800751a:	9d01      	ldr	r5, [sp, #4]
 800751c:	4682      	mov	sl, r0
 800751e:	468b      	mov	fp, r1
 8007520:	4649      	mov	r1, r9
 8007522:	4640      	mov	r0, r8
 8007524:	f7f9 fb20 	bl	8000b68 <__aeabi_d2iz>
 8007528:	4606      	mov	r6, r0
 800752a:	f7f9 f803 	bl	8000534 <__aeabi_i2d>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	f7f8 feaf 	bl	8000298 <__aeabi_dsub>
 800753a:	3630      	adds	r6, #48	; 0x30
 800753c:	f805 6b01 	strb.w	r6, [r5], #1
 8007540:	4652      	mov	r2, sl
 8007542:	465b      	mov	r3, fp
 8007544:	4680      	mov	r8, r0
 8007546:	4689      	mov	r9, r1
 8007548:	f7f9 fad0 	bl	8000aec <__aeabi_dcmplt>
 800754c:	2800      	cmp	r0, #0
 800754e:	d163      	bne.n	8007618 <_dtoa_r+0x608>
 8007550:	4642      	mov	r2, r8
 8007552:	464b      	mov	r3, r9
 8007554:	4936      	ldr	r1, [pc, #216]	; (8007630 <_dtoa_r+0x620>)
 8007556:	2000      	movs	r0, #0
 8007558:	f7f8 fe9e 	bl	8000298 <__aeabi_dsub>
 800755c:	4652      	mov	r2, sl
 800755e:	465b      	mov	r3, fp
 8007560:	f7f9 fac4 	bl	8000aec <__aeabi_dcmplt>
 8007564:	2800      	cmp	r0, #0
 8007566:	f040 80b5 	bne.w	80076d4 <_dtoa_r+0x6c4>
 800756a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800756c:	429d      	cmp	r5, r3
 800756e:	d081      	beq.n	8007474 <_dtoa_r+0x464>
 8007570:	4b30      	ldr	r3, [pc, #192]	; (8007634 <_dtoa_r+0x624>)
 8007572:	2200      	movs	r2, #0
 8007574:	4650      	mov	r0, sl
 8007576:	4659      	mov	r1, fp
 8007578:	f7f9 f846 	bl	8000608 <__aeabi_dmul>
 800757c:	4b2d      	ldr	r3, [pc, #180]	; (8007634 <_dtoa_r+0x624>)
 800757e:	4682      	mov	sl, r0
 8007580:	468b      	mov	fp, r1
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	2200      	movs	r2, #0
 8007588:	f7f9 f83e 	bl	8000608 <__aeabi_dmul>
 800758c:	4680      	mov	r8, r0
 800758e:	4689      	mov	r9, r1
 8007590:	e7c6      	b.n	8007520 <_dtoa_r+0x510>
 8007592:	4650      	mov	r0, sl
 8007594:	4659      	mov	r1, fp
 8007596:	f7f9 f837 	bl	8000608 <__aeabi_dmul>
 800759a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800759c:	9d01      	ldr	r5, [sp, #4]
 800759e:	930f      	str	r3, [sp, #60]	; 0x3c
 80075a0:	4682      	mov	sl, r0
 80075a2:	468b      	mov	fp, r1
 80075a4:	4649      	mov	r1, r9
 80075a6:	4640      	mov	r0, r8
 80075a8:	f7f9 fade 	bl	8000b68 <__aeabi_d2iz>
 80075ac:	4606      	mov	r6, r0
 80075ae:	f7f8 ffc1 	bl	8000534 <__aeabi_i2d>
 80075b2:	3630      	adds	r6, #48	; 0x30
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f8 fe6c 	bl	8000298 <__aeabi_dsub>
 80075c0:	f805 6b01 	strb.w	r6, [r5], #1
 80075c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c6:	429d      	cmp	r5, r3
 80075c8:	4680      	mov	r8, r0
 80075ca:	4689      	mov	r9, r1
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	d124      	bne.n	800761c <_dtoa_r+0x60c>
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <_dtoa_r+0x630>)
 80075d4:	4650      	mov	r0, sl
 80075d6:	4659      	mov	r1, fp
 80075d8:	f7f8 fe60 	bl	800029c <__adddf3>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4640      	mov	r0, r8
 80075e2:	4649      	mov	r1, r9
 80075e4:	f7f9 faa0 	bl	8000b28 <__aeabi_dcmpgt>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d173      	bne.n	80076d4 <_dtoa_r+0x6c4>
 80075ec:	4652      	mov	r2, sl
 80075ee:	465b      	mov	r3, fp
 80075f0:	4913      	ldr	r1, [pc, #76]	; (8007640 <_dtoa_r+0x630>)
 80075f2:	2000      	movs	r0, #0
 80075f4:	f7f8 fe50 	bl	8000298 <__aeabi_dsub>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4640      	mov	r0, r8
 80075fe:	4649      	mov	r1, r9
 8007600:	f7f9 fa74 	bl	8000aec <__aeabi_dcmplt>
 8007604:	2800      	cmp	r0, #0
 8007606:	f43f af35 	beq.w	8007474 <_dtoa_r+0x464>
 800760a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800760c:	1e6b      	subs	r3, r5, #1
 800760e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007610:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007614:	2b30      	cmp	r3, #48	; 0x30
 8007616:	d0f8      	beq.n	800760a <_dtoa_r+0x5fa>
 8007618:	9700      	str	r7, [sp, #0]
 800761a:	e049      	b.n	80076b0 <_dtoa_r+0x6a0>
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <_dtoa_r+0x624>)
 800761e:	f7f8 fff3 	bl	8000608 <__aeabi_dmul>
 8007622:	4680      	mov	r8, r0
 8007624:	4689      	mov	r9, r1
 8007626:	e7bd      	b.n	80075a4 <_dtoa_r+0x594>
 8007628:	08009540 	.word	0x08009540
 800762c:	08009518 	.word	0x08009518
 8007630:	3ff00000 	.word	0x3ff00000
 8007634:	40240000 	.word	0x40240000
 8007638:	401c0000 	.word	0x401c0000
 800763c:	40140000 	.word	0x40140000
 8007640:	3fe00000 	.word	0x3fe00000
 8007644:	9d01      	ldr	r5, [sp, #4]
 8007646:	4656      	mov	r6, sl
 8007648:	465f      	mov	r7, fp
 800764a:	4642      	mov	r2, r8
 800764c:	464b      	mov	r3, r9
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7f9 f903 	bl	800085c <__aeabi_ddiv>
 8007656:	f7f9 fa87 	bl	8000b68 <__aeabi_d2iz>
 800765a:	4682      	mov	sl, r0
 800765c:	f7f8 ff6a 	bl	8000534 <__aeabi_i2d>
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	f7f8 ffd0 	bl	8000608 <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007674:	f7f8 fe10 	bl	8000298 <__aeabi_dsub>
 8007678:	f805 6b01 	strb.w	r6, [r5], #1
 800767c:	9e01      	ldr	r6, [sp, #4]
 800767e:	9f03      	ldr	r7, [sp, #12]
 8007680:	1bae      	subs	r6, r5, r6
 8007682:	42b7      	cmp	r7, r6
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	d135      	bne.n	80076f6 <_dtoa_r+0x6e6>
 800768a:	f7f8 fe07 	bl	800029c <__adddf3>
 800768e:	4642      	mov	r2, r8
 8007690:	464b      	mov	r3, r9
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	f7f9 fa47 	bl	8000b28 <__aeabi_dcmpgt>
 800769a:	b9d0      	cbnz	r0, 80076d2 <_dtoa_r+0x6c2>
 800769c:	4642      	mov	r2, r8
 800769e:	464b      	mov	r3, r9
 80076a0:	4630      	mov	r0, r6
 80076a2:	4639      	mov	r1, r7
 80076a4:	f7f9 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 80076a8:	b110      	cbz	r0, 80076b0 <_dtoa_r+0x6a0>
 80076aa:	f01a 0f01 	tst.w	sl, #1
 80076ae:	d110      	bne.n	80076d2 <_dtoa_r+0x6c2>
 80076b0:	4620      	mov	r0, r4
 80076b2:	ee18 1a10 	vmov	r1, s16
 80076b6:	f000 faf3 	bl	8007ca0 <_Bfree>
 80076ba:	2300      	movs	r3, #0
 80076bc:	9800      	ldr	r0, [sp, #0]
 80076be:	702b      	strb	r3, [r5, #0]
 80076c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076c2:	3001      	adds	r0, #1
 80076c4:	6018      	str	r0, [r3, #0]
 80076c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f43f acf1 	beq.w	80070b0 <_dtoa_r+0xa0>
 80076ce:	601d      	str	r5, [r3, #0]
 80076d0:	e4ee      	b.n	80070b0 <_dtoa_r+0xa0>
 80076d2:	9f00      	ldr	r7, [sp, #0]
 80076d4:	462b      	mov	r3, r5
 80076d6:	461d      	mov	r5, r3
 80076d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076dc:	2a39      	cmp	r2, #57	; 0x39
 80076de:	d106      	bne.n	80076ee <_dtoa_r+0x6de>
 80076e0:	9a01      	ldr	r2, [sp, #4]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d1f7      	bne.n	80076d6 <_dtoa_r+0x6c6>
 80076e6:	9901      	ldr	r1, [sp, #4]
 80076e8:	2230      	movs	r2, #48	; 0x30
 80076ea:	3701      	adds	r7, #1
 80076ec:	700a      	strb	r2, [r1, #0]
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	3201      	adds	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e790      	b.n	8007618 <_dtoa_r+0x608>
 80076f6:	4ba6      	ldr	r3, [pc, #664]	; (8007990 <_dtoa_r+0x980>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	f7f8 ff85 	bl	8000608 <__aeabi_dmul>
 80076fe:	2200      	movs	r2, #0
 8007700:	2300      	movs	r3, #0
 8007702:	4606      	mov	r6, r0
 8007704:	460f      	mov	r7, r1
 8007706:	f7f9 f9e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800770a:	2800      	cmp	r0, #0
 800770c:	d09d      	beq.n	800764a <_dtoa_r+0x63a>
 800770e:	e7cf      	b.n	80076b0 <_dtoa_r+0x6a0>
 8007710:	9a08      	ldr	r2, [sp, #32]
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 80d7 	beq.w	80078c6 <_dtoa_r+0x8b6>
 8007718:	9a06      	ldr	r2, [sp, #24]
 800771a:	2a01      	cmp	r2, #1
 800771c:	f300 80ba 	bgt.w	8007894 <_dtoa_r+0x884>
 8007720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007722:	2a00      	cmp	r2, #0
 8007724:	f000 80b2 	beq.w	800788c <_dtoa_r+0x87c>
 8007728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800772c:	9e07      	ldr	r6, [sp, #28]
 800772e:	9d04      	ldr	r5, [sp, #16]
 8007730:	9a04      	ldr	r2, [sp, #16]
 8007732:	441a      	add	r2, r3
 8007734:	9204      	str	r2, [sp, #16]
 8007736:	9a05      	ldr	r2, [sp, #20]
 8007738:	2101      	movs	r1, #1
 800773a:	441a      	add	r2, r3
 800773c:	4620      	mov	r0, r4
 800773e:	9205      	str	r2, [sp, #20]
 8007740:	f000 fb66 	bl	8007e10 <__i2b>
 8007744:	4607      	mov	r7, r0
 8007746:	2d00      	cmp	r5, #0
 8007748:	dd0c      	ble.n	8007764 <_dtoa_r+0x754>
 800774a:	9b05      	ldr	r3, [sp, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	dd09      	ble.n	8007764 <_dtoa_r+0x754>
 8007750:	42ab      	cmp	r3, r5
 8007752:	9a04      	ldr	r2, [sp, #16]
 8007754:	bfa8      	it	ge
 8007756:	462b      	movge	r3, r5
 8007758:	1ad2      	subs	r2, r2, r3
 800775a:	9204      	str	r2, [sp, #16]
 800775c:	9a05      	ldr	r2, [sp, #20]
 800775e:	1aed      	subs	r5, r5, r3
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	9b07      	ldr	r3, [sp, #28]
 8007766:	b31b      	cbz	r3, 80077b0 <_dtoa_r+0x7a0>
 8007768:	9b08      	ldr	r3, [sp, #32]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80af 	beq.w	80078ce <_dtoa_r+0x8be>
 8007770:	2e00      	cmp	r6, #0
 8007772:	dd13      	ble.n	800779c <_dtoa_r+0x78c>
 8007774:	4639      	mov	r1, r7
 8007776:	4632      	mov	r2, r6
 8007778:	4620      	mov	r0, r4
 800777a:	f000 fc09 	bl	8007f90 <__pow5mult>
 800777e:	ee18 2a10 	vmov	r2, s16
 8007782:	4601      	mov	r1, r0
 8007784:	4607      	mov	r7, r0
 8007786:	4620      	mov	r0, r4
 8007788:	f000 fb58 	bl	8007e3c <__multiply>
 800778c:	ee18 1a10 	vmov	r1, s16
 8007790:	4680      	mov	r8, r0
 8007792:	4620      	mov	r0, r4
 8007794:	f000 fa84 	bl	8007ca0 <_Bfree>
 8007798:	ee08 8a10 	vmov	s16, r8
 800779c:	9b07      	ldr	r3, [sp, #28]
 800779e:	1b9a      	subs	r2, r3, r6
 80077a0:	d006      	beq.n	80077b0 <_dtoa_r+0x7a0>
 80077a2:	ee18 1a10 	vmov	r1, s16
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fbf2 	bl	8007f90 <__pow5mult>
 80077ac:	ee08 0a10 	vmov	s16, r0
 80077b0:	2101      	movs	r1, #1
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 fb2c 	bl	8007e10 <__i2b>
 80077b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	4606      	mov	r6, r0
 80077be:	f340 8088 	ble.w	80078d2 <_dtoa_r+0x8c2>
 80077c2:	461a      	mov	r2, r3
 80077c4:	4601      	mov	r1, r0
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fbe2 	bl	8007f90 <__pow5mult>
 80077cc:	9b06      	ldr	r3, [sp, #24]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	4606      	mov	r6, r0
 80077d2:	f340 8081 	ble.w	80078d8 <_dtoa_r+0x8c8>
 80077d6:	f04f 0800 	mov.w	r8, #0
 80077da:	6933      	ldr	r3, [r6, #16]
 80077dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077e0:	6918      	ldr	r0, [r3, #16]
 80077e2:	f000 fac5 	bl	8007d70 <__hi0bits>
 80077e6:	f1c0 0020 	rsb	r0, r0, #32
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	4418      	add	r0, r3
 80077ee:	f010 001f 	ands.w	r0, r0, #31
 80077f2:	f000 8092 	beq.w	800791a <_dtoa_r+0x90a>
 80077f6:	f1c0 0320 	rsb	r3, r0, #32
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	f340 808a 	ble.w	8007914 <_dtoa_r+0x904>
 8007800:	f1c0 001c 	rsb	r0, r0, #28
 8007804:	9b04      	ldr	r3, [sp, #16]
 8007806:	4403      	add	r3, r0
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	9b05      	ldr	r3, [sp, #20]
 800780c:	4403      	add	r3, r0
 800780e:	4405      	add	r5, r0
 8007810:	9305      	str	r3, [sp, #20]
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	dd07      	ble.n	8007828 <_dtoa_r+0x818>
 8007818:	ee18 1a10 	vmov	r1, s16
 800781c:	461a      	mov	r2, r3
 800781e:	4620      	mov	r0, r4
 8007820:	f000 fc10 	bl	8008044 <__lshift>
 8007824:	ee08 0a10 	vmov	s16, r0
 8007828:	9b05      	ldr	r3, [sp, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	dd05      	ble.n	800783a <_dtoa_r+0x82a>
 800782e:	4631      	mov	r1, r6
 8007830:	461a      	mov	r2, r3
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fc06 	bl	8008044 <__lshift>
 8007838:	4606      	mov	r6, r0
 800783a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d06e      	beq.n	800791e <_dtoa_r+0x90e>
 8007840:	ee18 0a10 	vmov	r0, s16
 8007844:	4631      	mov	r1, r6
 8007846:	f000 fc6d 	bl	8008124 <__mcmp>
 800784a:	2800      	cmp	r0, #0
 800784c:	da67      	bge.n	800791e <_dtoa_r+0x90e>
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	3b01      	subs	r3, #1
 8007852:	ee18 1a10 	vmov	r1, s16
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	220a      	movs	r2, #10
 800785a:	2300      	movs	r3, #0
 800785c:	4620      	mov	r0, r4
 800785e:	f000 fa41 	bl	8007ce4 <__multadd>
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	ee08 0a10 	vmov	s16, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 81b1 	beq.w	8007bd0 <_dtoa_r+0xbc0>
 800786e:	2300      	movs	r3, #0
 8007870:	4639      	mov	r1, r7
 8007872:	220a      	movs	r2, #10
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fa35 	bl	8007ce4 <__multadd>
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	4607      	mov	r7, r0
 8007880:	f300 808e 	bgt.w	80079a0 <_dtoa_r+0x990>
 8007884:	9b06      	ldr	r3, [sp, #24]
 8007886:	2b02      	cmp	r3, #2
 8007888:	dc51      	bgt.n	800792e <_dtoa_r+0x91e>
 800788a:	e089      	b.n	80079a0 <_dtoa_r+0x990>
 800788c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800788e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007892:	e74b      	b.n	800772c <_dtoa_r+0x71c>
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	1e5e      	subs	r6, r3, #1
 8007898:	9b07      	ldr	r3, [sp, #28]
 800789a:	42b3      	cmp	r3, r6
 800789c:	bfbf      	itttt	lt
 800789e:	9b07      	ldrlt	r3, [sp, #28]
 80078a0:	9607      	strlt	r6, [sp, #28]
 80078a2:	1af2      	sublt	r2, r6, r3
 80078a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078a6:	bfb6      	itet	lt
 80078a8:	189b      	addlt	r3, r3, r2
 80078aa:	1b9e      	subge	r6, r3, r6
 80078ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	bfb8      	it	lt
 80078b2:	2600      	movlt	r6, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfb7      	itett	lt
 80078b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078c0:	1a9d      	sublt	r5, r3, r2
 80078c2:	2300      	movlt	r3, #0
 80078c4:	e734      	b.n	8007730 <_dtoa_r+0x720>
 80078c6:	9e07      	ldr	r6, [sp, #28]
 80078c8:	9d04      	ldr	r5, [sp, #16]
 80078ca:	9f08      	ldr	r7, [sp, #32]
 80078cc:	e73b      	b.n	8007746 <_dtoa_r+0x736>
 80078ce:	9a07      	ldr	r2, [sp, #28]
 80078d0:	e767      	b.n	80077a2 <_dtoa_r+0x792>
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	dc18      	bgt.n	800790a <_dtoa_r+0x8fa>
 80078d8:	f1ba 0f00 	cmp.w	sl, #0
 80078dc:	d115      	bne.n	800790a <_dtoa_r+0x8fa>
 80078de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e2:	b993      	cbnz	r3, 800790a <_dtoa_r+0x8fa>
 80078e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078e8:	0d1b      	lsrs	r3, r3, #20
 80078ea:	051b      	lsls	r3, r3, #20
 80078ec:	b183      	cbz	r3, 8007910 <_dtoa_r+0x900>
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	3301      	adds	r3, #1
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	9b05      	ldr	r3, [sp, #20]
 80078f6:	3301      	adds	r3, #1
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	f04f 0801 	mov.w	r8, #1
 80078fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007900:	2b00      	cmp	r3, #0
 8007902:	f47f af6a 	bne.w	80077da <_dtoa_r+0x7ca>
 8007906:	2001      	movs	r0, #1
 8007908:	e76f      	b.n	80077ea <_dtoa_r+0x7da>
 800790a:	f04f 0800 	mov.w	r8, #0
 800790e:	e7f6      	b.n	80078fe <_dtoa_r+0x8ee>
 8007910:	4698      	mov	r8, r3
 8007912:	e7f4      	b.n	80078fe <_dtoa_r+0x8ee>
 8007914:	f43f af7d 	beq.w	8007812 <_dtoa_r+0x802>
 8007918:	4618      	mov	r0, r3
 800791a:	301c      	adds	r0, #28
 800791c:	e772      	b.n	8007804 <_dtoa_r+0x7f4>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc37      	bgt.n	8007994 <_dtoa_r+0x984>
 8007924:	9b06      	ldr	r3, [sp, #24]
 8007926:	2b02      	cmp	r3, #2
 8007928:	dd34      	ble.n	8007994 <_dtoa_r+0x984>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	9302      	str	r3, [sp, #8]
 800792e:	9b02      	ldr	r3, [sp, #8]
 8007930:	b96b      	cbnz	r3, 800794e <_dtoa_r+0x93e>
 8007932:	4631      	mov	r1, r6
 8007934:	2205      	movs	r2, #5
 8007936:	4620      	mov	r0, r4
 8007938:	f000 f9d4 	bl	8007ce4 <__multadd>
 800793c:	4601      	mov	r1, r0
 800793e:	4606      	mov	r6, r0
 8007940:	ee18 0a10 	vmov	r0, s16
 8007944:	f000 fbee 	bl	8008124 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	f73f adbb 	bgt.w	80074c4 <_dtoa_r+0x4b4>
 800794e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007950:	9d01      	ldr	r5, [sp, #4]
 8007952:	43db      	mvns	r3, r3
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	f04f 0800 	mov.w	r8, #0
 800795a:	4631      	mov	r1, r6
 800795c:	4620      	mov	r0, r4
 800795e:	f000 f99f 	bl	8007ca0 <_Bfree>
 8007962:	2f00      	cmp	r7, #0
 8007964:	f43f aea4 	beq.w	80076b0 <_dtoa_r+0x6a0>
 8007968:	f1b8 0f00 	cmp.w	r8, #0
 800796c:	d005      	beq.n	800797a <_dtoa_r+0x96a>
 800796e:	45b8      	cmp	r8, r7
 8007970:	d003      	beq.n	800797a <_dtoa_r+0x96a>
 8007972:	4641      	mov	r1, r8
 8007974:	4620      	mov	r0, r4
 8007976:	f000 f993 	bl	8007ca0 <_Bfree>
 800797a:	4639      	mov	r1, r7
 800797c:	4620      	mov	r0, r4
 800797e:	f000 f98f 	bl	8007ca0 <_Bfree>
 8007982:	e695      	b.n	80076b0 <_dtoa_r+0x6a0>
 8007984:	2600      	movs	r6, #0
 8007986:	4637      	mov	r7, r6
 8007988:	e7e1      	b.n	800794e <_dtoa_r+0x93e>
 800798a:	9700      	str	r7, [sp, #0]
 800798c:	4637      	mov	r7, r6
 800798e:	e599      	b.n	80074c4 <_dtoa_r+0x4b4>
 8007990:	40240000 	.word	0x40240000
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80ca 	beq.w	8007b30 <_dtoa_r+0xb20>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	dd05      	ble.n	80079b0 <_dtoa_r+0x9a0>
 80079a4:	4639      	mov	r1, r7
 80079a6:	462a      	mov	r2, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fb4b 	bl	8008044 <__lshift>
 80079ae:	4607      	mov	r7, r0
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	d05b      	beq.n	8007a6e <_dtoa_r+0xa5e>
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 f931 	bl	8007c20 <_Balloc>
 80079be:	4605      	mov	r5, r0
 80079c0:	b928      	cbnz	r0, 80079ce <_dtoa_r+0x9be>
 80079c2:	4b87      	ldr	r3, [pc, #540]	; (8007be0 <_dtoa_r+0xbd0>)
 80079c4:	4602      	mov	r2, r0
 80079c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ca:	f7ff bb3b 	b.w	8007044 <_dtoa_r+0x34>
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	3202      	adds	r2, #2
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	f107 010c 	add.w	r1, r7, #12
 80079d8:	300c      	adds	r0, #12
 80079da:	f000 f913 	bl	8007c04 <memcpy>
 80079de:	2201      	movs	r2, #1
 80079e0:	4629      	mov	r1, r5
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fb2e 	bl	8008044 <__lshift>
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	f103 0901 	add.w	r9, r3, #1
 80079ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	9305      	str	r3, [sp, #20]
 80079f6:	f00a 0301 	and.w	r3, sl, #1
 80079fa:	46b8      	mov	r8, r7
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	4607      	mov	r7, r0
 8007a00:	4631      	mov	r1, r6
 8007a02:	ee18 0a10 	vmov	r0, s16
 8007a06:	f7ff fa75 	bl	8006ef4 <quorem>
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	9002      	str	r0, [sp, #8]
 8007a0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a12:	ee18 0a10 	vmov	r0, s16
 8007a16:	f000 fb85 	bl	8008124 <__mcmp>
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	9003      	str	r0, [sp, #12]
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fb9b 	bl	800815c <__mdiff>
 8007a26:	68c2      	ldr	r2, [r0, #12]
 8007a28:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	bb02      	cbnz	r2, 8007a72 <_dtoa_r+0xa62>
 8007a30:	4601      	mov	r1, r0
 8007a32:	ee18 0a10 	vmov	r0, s16
 8007a36:	f000 fb75 	bl	8008124 <__mcmp>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	4620      	mov	r0, r4
 8007a40:	9207      	str	r2, [sp, #28]
 8007a42:	f000 f92d 	bl	8007ca0 <_Bfree>
 8007a46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a4a:	ea43 0102 	orr.w	r1, r3, r2
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	430b      	orrs	r3, r1
 8007a52:	464d      	mov	r5, r9
 8007a54:	d10f      	bne.n	8007a76 <_dtoa_r+0xa66>
 8007a56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a5a:	d02a      	beq.n	8007ab2 <_dtoa_r+0xaa2>
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dd02      	ble.n	8007a68 <_dtoa_r+0xa58>
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a68:	f88b a000 	strb.w	sl, [fp]
 8007a6c:	e775      	b.n	800795a <_dtoa_r+0x94a>
 8007a6e:	4638      	mov	r0, r7
 8007a70:	e7ba      	b.n	80079e8 <_dtoa_r+0x9d8>
 8007a72:	2201      	movs	r2, #1
 8007a74:	e7e2      	b.n	8007a3c <_dtoa_r+0xa2c>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db04      	blt.n	8007a86 <_dtoa_r+0xa76>
 8007a7c:	9906      	ldr	r1, [sp, #24]
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	9904      	ldr	r1, [sp, #16]
 8007a82:	430b      	orrs	r3, r1
 8007a84:	d122      	bne.n	8007acc <_dtoa_r+0xabc>
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	ddee      	ble.n	8007a68 <_dtoa_r+0xa58>
 8007a8a:	ee18 1a10 	vmov	r1, s16
 8007a8e:	2201      	movs	r2, #1
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fad7 	bl	8008044 <__lshift>
 8007a96:	4631      	mov	r1, r6
 8007a98:	ee08 0a10 	vmov	s16, r0
 8007a9c:	f000 fb42 	bl	8008124 <__mcmp>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	dc03      	bgt.n	8007aac <_dtoa_r+0xa9c>
 8007aa4:	d1e0      	bne.n	8007a68 <_dtoa_r+0xa58>
 8007aa6:	f01a 0f01 	tst.w	sl, #1
 8007aaa:	d0dd      	beq.n	8007a68 <_dtoa_r+0xa58>
 8007aac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ab0:	d1d7      	bne.n	8007a62 <_dtoa_r+0xa52>
 8007ab2:	2339      	movs	r3, #57	; 0x39
 8007ab4:	f88b 3000 	strb.w	r3, [fp]
 8007ab8:	462b      	mov	r3, r5
 8007aba:	461d      	mov	r5, r3
 8007abc:	3b01      	subs	r3, #1
 8007abe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ac2:	2a39      	cmp	r2, #57	; 0x39
 8007ac4:	d071      	beq.n	8007baa <_dtoa_r+0xb9a>
 8007ac6:	3201      	adds	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	e746      	b.n	800795a <_dtoa_r+0x94a>
 8007acc:	2a00      	cmp	r2, #0
 8007ace:	dd07      	ble.n	8007ae0 <_dtoa_r+0xad0>
 8007ad0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ad4:	d0ed      	beq.n	8007ab2 <_dtoa_r+0xaa2>
 8007ad6:	f10a 0301 	add.w	r3, sl, #1
 8007ada:	f88b 3000 	strb.w	r3, [fp]
 8007ade:	e73c      	b.n	800795a <_dtoa_r+0x94a>
 8007ae0:	9b05      	ldr	r3, [sp, #20]
 8007ae2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ae6:	4599      	cmp	r9, r3
 8007ae8:	d047      	beq.n	8007b7a <_dtoa_r+0xb6a>
 8007aea:	ee18 1a10 	vmov	r1, s16
 8007aee:	2300      	movs	r3, #0
 8007af0:	220a      	movs	r2, #10
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 f8f6 	bl	8007ce4 <__multadd>
 8007af8:	45b8      	cmp	r8, r7
 8007afa:	ee08 0a10 	vmov	s16, r0
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	f04f 020a 	mov.w	r2, #10
 8007b06:	4641      	mov	r1, r8
 8007b08:	4620      	mov	r0, r4
 8007b0a:	d106      	bne.n	8007b1a <_dtoa_r+0xb0a>
 8007b0c:	f000 f8ea 	bl	8007ce4 <__multadd>
 8007b10:	4680      	mov	r8, r0
 8007b12:	4607      	mov	r7, r0
 8007b14:	f109 0901 	add.w	r9, r9, #1
 8007b18:	e772      	b.n	8007a00 <_dtoa_r+0x9f0>
 8007b1a:	f000 f8e3 	bl	8007ce4 <__multadd>
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4680      	mov	r8, r0
 8007b22:	2300      	movs	r3, #0
 8007b24:	220a      	movs	r2, #10
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 f8dc 	bl	8007ce4 <__multadd>
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	e7f1      	b.n	8007b14 <_dtoa_r+0xb04>
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	9d01      	ldr	r5, [sp, #4]
 8007b36:	ee18 0a10 	vmov	r0, s16
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	f7ff f9da 	bl	8006ef4 <quorem>
 8007b40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	f805 ab01 	strb.w	sl, [r5], #1
 8007b4a:	1aea      	subs	r2, r5, r3
 8007b4c:	9b02      	ldr	r3, [sp, #8]
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	dd09      	ble.n	8007b66 <_dtoa_r+0xb56>
 8007b52:	ee18 1a10 	vmov	r1, s16
 8007b56:	2300      	movs	r3, #0
 8007b58:	220a      	movs	r2, #10
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 f8c2 	bl	8007ce4 <__multadd>
 8007b60:	ee08 0a10 	vmov	s16, r0
 8007b64:	e7e7      	b.n	8007b36 <_dtoa_r+0xb26>
 8007b66:	9b02      	ldr	r3, [sp, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bfc8      	it	gt
 8007b6c:	461d      	movgt	r5, r3
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	bfd8      	it	le
 8007b72:	2501      	movle	r5, #1
 8007b74:	441d      	add	r5, r3
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	ee18 1a10 	vmov	r1, s16
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fa5f 	bl	8008044 <__lshift>
 8007b86:	4631      	mov	r1, r6
 8007b88:	ee08 0a10 	vmov	s16, r0
 8007b8c:	f000 faca 	bl	8008124 <__mcmp>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	dc91      	bgt.n	8007ab8 <_dtoa_r+0xaa8>
 8007b94:	d102      	bne.n	8007b9c <_dtoa_r+0xb8c>
 8007b96:	f01a 0f01 	tst.w	sl, #1
 8007b9a:	d18d      	bne.n	8007ab8 <_dtoa_r+0xaa8>
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ba4:	2a30      	cmp	r2, #48	; 0x30
 8007ba6:	d0fa      	beq.n	8007b9e <_dtoa_r+0xb8e>
 8007ba8:	e6d7      	b.n	800795a <_dtoa_r+0x94a>
 8007baa:	9a01      	ldr	r2, [sp, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d184      	bne.n	8007aba <_dtoa_r+0xaaa>
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	2331      	movs	r3, #49	; 0x31
 8007bb8:	7013      	strb	r3, [r2, #0]
 8007bba:	e6ce      	b.n	800795a <_dtoa_r+0x94a>
 8007bbc:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <_dtoa_r+0xbd4>)
 8007bbe:	f7ff ba95 	b.w	80070ec <_dtoa_r+0xdc>
 8007bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f47f aa6e 	bne.w	80070a6 <_dtoa_r+0x96>
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <_dtoa_r+0xbd8>)
 8007bcc:	f7ff ba8e 	b.w	80070ec <_dtoa_r+0xdc>
 8007bd0:	9b02      	ldr	r3, [sp, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dcae      	bgt.n	8007b34 <_dtoa_r+0xb24>
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	f73f aea8 	bgt.w	800792e <_dtoa_r+0x91e>
 8007bde:	e7a9      	b.n	8007b34 <_dtoa_r+0xb24>
 8007be0:	080094ab 	.word	0x080094ab
 8007be4:	08009408 	.word	0x08009408
 8007be8:	0800942c 	.word	0x0800942c

08007bec <_localeconv_r>:
 8007bec:	4800      	ldr	r0, [pc, #0]	; (8007bf0 <_localeconv_r+0x4>)
 8007bee:	4770      	bx	lr
 8007bf0:	20000160 	.word	0x20000160

08007bf4 <malloc>:
 8007bf4:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <malloc+0xc>)
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	f000 bc17 	b.w	800842c <_malloc_r>
 8007bfe:	bf00      	nop
 8007c00:	2000000c 	.word	0x2000000c

08007c04 <memcpy>:
 8007c04:	440a      	add	r2, r1
 8007c06:	4291      	cmp	r1, r2
 8007c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c0c:	d100      	bne.n	8007c10 <memcpy+0xc>
 8007c0e:	4770      	bx	lr
 8007c10:	b510      	push	{r4, lr}
 8007c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	d1f9      	bne.n	8007c12 <memcpy+0xe>
 8007c1e:	bd10      	pop	{r4, pc}

08007c20 <_Balloc>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c24:	4604      	mov	r4, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	b976      	cbnz	r6, 8007c48 <_Balloc+0x28>
 8007c2a:	2010      	movs	r0, #16
 8007c2c:	f7ff ffe2 	bl	8007bf4 <malloc>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6260      	str	r0, [r4, #36]	; 0x24
 8007c34:	b920      	cbnz	r0, 8007c40 <_Balloc+0x20>
 8007c36:	4b18      	ldr	r3, [pc, #96]	; (8007c98 <_Balloc+0x78>)
 8007c38:	4818      	ldr	r0, [pc, #96]	; (8007c9c <_Balloc+0x7c>)
 8007c3a:	2166      	movs	r1, #102	; 0x66
 8007c3c:	f000 fdd6 	bl	80087ec <__assert_func>
 8007c40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c44:	6006      	str	r6, [r0, #0]
 8007c46:	60c6      	str	r6, [r0, #12]
 8007c48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c4a:	68f3      	ldr	r3, [r6, #12]
 8007c4c:	b183      	cbz	r3, 8007c70 <_Balloc+0x50>
 8007c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c56:	b9b8      	cbnz	r0, 8007c88 <_Balloc+0x68>
 8007c58:	2101      	movs	r1, #1
 8007c5a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c5e:	1d72      	adds	r2, r6, #5
 8007c60:	0092      	lsls	r2, r2, #2
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fb60 	bl	8008328 <_calloc_r>
 8007c68:	b160      	cbz	r0, 8007c84 <_Balloc+0x64>
 8007c6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c6e:	e00e      	b.n	8007c8e <_Balloc+0x6e>
 8007c70:	2221      	movs	r2, #33	; 0x21
 8007c72:	2104      	movs	r1, #4
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 fb57 	bl	8008328 <_calloc_r>
 8007c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c7c:	60f0      	str	r0, [r6, #12]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e4      	bne.n	8007c4e <_Balloc+0x2e>
 8007c84:	2000      	movs	r0, #0
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	6802      	ldr	r2, [r0, #0]
 8007c8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c94:	e7f7      	b.n	8007c86 <_Balloc+0x66>
 8007c96:	bf00      	nop
 8007c98:	08009439 	.word	0x08009439
 8007c9c:	080094bc 	.word	0x080094bc

08007ca0 <_Bfree>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	b976      	cbnz	r6, 8007cc8 <_Bfree+0x28>
 8007caa:	2010      	movs	r0, #16
 8007cac:	f7ff ffa2 	bl	8007bf4 <malloc>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	6268      	str	r0, [r5, #36]	; 0x24
 8007cb4:	b920      	cbnz	r0, 8007cc0 <_Bfree+0x20>
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <_Bfree+0x3c>)
 8007cb8:	4809      	ldr	r0, [pc, #36]	; (8007ce0 <_Bfree+0x40>)
 8007cba:	218a      	movs	r1, #138	; 0x8a
 8007cbc:	f000 fd96 	bl	80087ec <__assert_func>
 8007cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cc4:	6006      	str	r6, [r0, #0]
 8007cc6:	60c6      	str	r6, [r0, #12]
 8007cc8:	b13c      	cbz	r4, 8007cda <_Bfree+0x3a>
 8007cca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ccc:	6862      	ldr	r2, [r4, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cd4:	6021      	str	r1, [r4, #0]
 8007cd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	08009439 	.word	0x08009439
 8007ce0:	080094bc 	.word	0x080094bc

08007ce4 <__multadd>:
 8007ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce8:	690d      	ldr	r5, [r1, #16]
 8007cea:	4607      	mov	r7, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	461e      	mov	r6, r3
 8007cf0:	f101 0c14 	add.w	ip, r1, #20
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cfa:	b299      	uxth	r1, r3
 8007cfc:	fb02 6101 	mla	r1, r2, r1, r6
 8007d00:	0c1e      	lsrs	r6, r3, #16
 8007d02:	0c0b      	lsrs	r3, r1, #16
 8007d04:	fb02 3306 	mla	r3, r2, r6, r3
 8007d08:	b289      	uxth	r1, r1
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d10:	4285      	cmp	r5, r0
 8007d12:	f84c 1b04 	str.w	r1, [ip], #4
 8007d16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d1a:	dcec      	bgt.n	8007cf6 <__multadd+0x12>
 8007d1c:	b30e      	cbz	r6, 8007d62 <__multadd+0x7e>
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	42ab      	cmp	r3, r5
 8007d22:	dc19      	bgt.n	8007d58 <__multadd+0x74>
 8007d24:	6861      	ldr	r1, [r4, #4]
 8007d26:	4638      	mov	r0, r7
 8007d28:	3101      	adds	r1, #1
 8007d2a:	f7ff ff79 	bl	8007c20 <_Balloc>
 8007d2e:	4680      	mov	r8, r0
 8007d30:	b928      	cbnz	r0, 8007d3e <__multadd+0x5a>
 8007d32:	4602      	mov	r2, r0
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <__multadd+0x84>)
 8007d36:	480d      	ldr	r0, [pc, #52]	; (8007d6c <__multadd+0x88>)
 8007d38:	21b5      	movs	r1, #181	; 0xb5
 8007d3a:	f000 fd57 	bl	80087ec <__assert_func>
 8007d3e:	6922      	ldr	r2, [r4, #16]
 8007d40:	3202      	adds	r2, #2
 8007d42:	f104 010c 	add.w	r1, r4, #12
 8007d46:	0092      	lsls	r2, r2, #2
 8007d48:	300c      	adds	r0, #12
 8007d4a:	f7ff ff5b 	bl	8007c04 <memcpy>
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4638      	mov	r0, r7
 8007d52:	f7ff ffa5 	bl	8007ca0 <_Bfree>
 8007d56:	4644      	mov	r4, r8
 8007d58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d5c:	3501      	adds	r5, #1
 8007d5e:	615e      	str	r6, [r3, #20]
 8007d60:	6125      	str	r5, [r4, #16]
 8007d62:	4620      	mov	r0, r4
 8007d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d68:	080094ab 	.word	0x080094ab
 8007d6c:	080094bc 	.word	0x080094bc

08007d70 <__hi0bits>:
 8007d70:	0c03      	lsrs	r3, r0, #16
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	b9d3      	cbnz	r3, 8007dac <__hi0bits+0x3c>
 8007d76:	0400      	lsls	r0, r0, #16
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d7e:	bf04      	itt	eq
 8007d80:	0200      	lsleq	r0, r0, #8
 8007d82:	3308      	addeq	r3, #8
 8007d84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d88:	bf04      	itt	eq
 8007d8a:	0100      	lsleq	r0, r0, #4
 8007d8c:	3304      	addeq	r3, #4
 8007d8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d92:	bf04      	itt	eq
 8007d94:	0080      	lsleq	r0, r0, #2
 8007d96:	3302      	addeq	r3, #2
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	db05      	blt.n	8007da8 <__hi0bits+0x38>
 8007d9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007da0:	f103 0301 	add.w	r3, r3, #1
 8007da4:	bf08      	it	eq
 8007da6:	2320      	moveq	r3, #32
 8007da8:	4618      	mov	r0, r3
 8007daa:	4770      	bx	lr
 8007dac:	2300      	movs	r3, #0
 8007dae:	e7e4      	b.n	8007d7a <__hi0bits+0xa>

08007db0 <__lo0bits>:
 8007db0:	6803      	ldr	r3, [r0, #0]
 8007db2:	f013 0207 	ands.w	r2, r3, #7
 8007db6:	4601      	mov	r1, r0
 8007db8:	d00b      	beq.n	8007dd2 <__lo0bits+0x22>
 8007dba:	07da      	lsls	r2, r3, #31
 8007dbc:	d423      	bmi.n	8007e06 <__lo0bits+0x56>
 8007dbe:	0798      	lsls	r0, r3, #30
 8007dc0:	bf49      	itett	mi
 8007dc2:	085b      	lsrmi	r3, r3, #1
 8007dc4:	089b      	lsrpl	r3, r3, #2
 8007dc6:	2001      	movmi	r0, #1
 8007dc8:	600b      	strmi	r3, [r1, #0]
 8007dca:	bf5c      	itt	pl
 8007dcc:	600b      	strpl	r3, [r1, #0]
 8007dce:	2002      	movpl	r0, #2
 8007dd0:	4770      	bx	lr
 8007dd2:	b298      	uxth	r0, r3
 8007dd4:	b9a8      	cbnz	r0, 8007e02 <__lo0bits+0x52>
 8007dd6:	0c1b      	lsrs	r3, r3, #16
 8007dd8:	2010      	movs	r0, #16
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	b90a      	cbnz	r2, 8007de2 <__lo0bits+0x32>
 8007dde:	3008      	adds	r0, #8
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	071a      	lsls	r2, r3, #28
 8007de4:	bf04      	itt	eq
 8007de6:	091b      	lsreq	r3, r3, #4
 8007de8:	3004      	addeq	r0, #4
 8007dea:	079a      	lsls	r2, r3, #30
 8007dec:	bf04      	itt	eq
 8007dee:	089b      	lsreq	r3, r3, #2
 8007df0:	3002      	addeq	r0, #2
 8007df2:	07da      	lsls	r2, r3, #31
 8007df4:	d403      	bmi.n	8007dfe <__lo0bits+0x4e>
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	f100 0001 	add.w	r0, r0, #1
 8007dfc:	d005      	beq.n	8007e0a <__lo0bits+0x5a>
 8007dfe:	600b      	str	r3, [r1, #0]
 8007e00:	4770      	bx	lr
 8007e02:	4610      	mov	r0, r2
 8007e04:	e7e9      	b.n	8007dda <__lo0bits+0x2a>
 8007e06:	2000      	movs	r0, #0
 8007e08:	4770      	bx	lr
 8007e0a:	2020      	movs	r0, #32
 8007e0c:	4770      	bx	lr
	...

08007e10 <__i2b>:
 8007e10:	b510      	push	{r4, lr}
 8007e12:	460c      	mov	r4, r1
 8007e14:	2101      	movs	r1, #1
 8007e16:	f7ff ff03 	bl	8007c20 <_Balloc>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	b928      	cbnz	r0, 8007e2a <__i2b+0x1a>
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <__i2b+0x24>)
 8007e20:	4805      	ldr	r0, [pc, #20]	; (8007e38 <__i2b+0x28>)
 8007e22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e26:	f000 fce1 	bl	80087ec <__assert_func>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	6144      	str	r4, [r0, #20]
 8007e2e:	6103      	str	r3, [r0, #16]
 8007e30:	bd10      	pop	{r4, pc}
 8007e32:	bf00      	nop
 8007e34:	080094ab 	.word	0x080094ab
 8007e38:	080094bc 	.word	0x080094bc

08007e3c <__multiply>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	4691      	mov	r9, r2
 8007e42:	690a      	ldr	r2, [r1, #16]
 8007e44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	bfb8      	it	lt
 8007e4c:	460b      	movlt	r3, r1
 8007e4e:	460c      	mov	r4, r1
 8007e50:	bfbc      	itt	lt
 8007e52:	464c      	movlt	r4, r9
 8007e54:	4699      	movlt	r9, r3
 8007e56:	6927      	ldr	r7, [r4, #16]
 8007e58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e5c:	68a3      	ldr	r3, [r4, #8]
 8007e5e:	6861      	ldr	r1, [r4, #4]
 8007e60:	eb07 060a 	add.w	r6, r7, sl
 8007e64:	42b3      	cmp	r3, r6
 8007e66:	b085      	sub	sp, #20
 8007e68:	bfb8      	it	lt
 8007e6a:	3101      	addlt	r1, #1
 8007e6c:	f7ff fed8 	bl	8007c20 <_Balloc>
 8007e70:	b930      	cbnz	r0, 8007e80 <__multiply+0x44>
 8007e72:	4602      	mov	r2, r0
 8007e74:	4b44      	ldr	r3, [pc, #272]	; (8007f88 <__multiply+0x14c>)
 8007e76:	4845      	ldr	r0, [pc, #276]	; (8007f8c <__multiply+0x150>)
 8007e78:	f240 115d 	movw	r1, #349	; 0x15d
 8007e7c:	f000 fcb6 	bl	80087ec <__assert_func>
 8007e80:	f100 0514 	add.w	r5, r0, #20
 8007e84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e88:	462b      	mov	r3, r5
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4543      	cmp	r3, r8
 8007e8e:	d321      	bcc.n	8007ed4 <__multiply+0x98>
 8007e90:	f104 0314 	add.w	r3, r4, #20
 8007e94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e98:	f109 0314 	add.w	r3, r9, #20
 8007e9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ea0:	9202      	str	r2, [sp, #8]
 8007ea2:	1b3a      	subs	r2, r7, r4
 8007ea4:	3a15      	subs	r2, #21
 8007ea6:	f022 0203 	bic.w	r2, r2, #3
 8007eaa:	3204      	adds	r2, #4
 8007eac:	f104 0115 	add.w	r1, r4, #21
 8007eb0:	428f      	cmp	r7, r1
 8007eb2:	bf38      	it	cc
 8007eb4:	2204      	movcc	r2, #4
 8007eb6:	9201      	str	r2, [sp, #4]
 8007eb8:	9a02      	ldr	r2, [sp, #8]
 8007eba:	9303      	str	r3, [sp, #12]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d80c      	bhi.n	8007eda <__multiply+0x9e>
 8007ec0:	2e00      	cmp	r6, #0
 8007ec2:	dd03      	ble.n	8007ecc <__multiply+0x90>
 8007ec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d05a      	beq.n	8007f82 <__multiply+0x146>
 8007ecc:	6106      	str	r6, [r0, #16]
 8007ece:	b005      	add	sp, #20
 8007ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed4:	f843 2b04 	str.w	r2, [r3], #4
 8007ed8:	e7d8      	b.n	8007e8c <__multiply+0x50>
 8007eda:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ede:	f1ba 0f00 	cmp.w	sl, #0
 8007ee2:	d024      	beq.n	8007f2e <__multiply+0xf2>
 8007ee4:	f104 0e14 	add.w	lr, r4, #20
 8007ee8:	46a9      	mov	r9, r5
 8007eea:	f04f 0c00 	mov.w	ip, #0
 8007eee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ef2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ef6:	fa1f fb82 	uxth.w	fp, r2
 8007efa:	b289      	uxth	r1, r1
 8007efc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f04:	f8d9 2000 	ldr.w	r2, [r9]
 8007f08:	4461      	add	r1, ip
 8007f0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f16:	b289      	uxth	r1, r1
 8007f18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f1c:	4577      	cmp	r7, lr
 8007f1e:	f849 1b04 	str.w	r1, [r9], #4
 8007f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f26:	d8e2      	bhi.n	8007eee <__multiply+0xb2>
 8007f28:	9a01      	ldr	r2, [sp, #4]
 8007f2a:	f845 c002 	str.w	ip, [r5, r2]
 8007f2e:	9a03      	ldr	r2, [sp, #12]
 8007f30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f34:	3304      	adds	r3, #4
 8007f36:	f1b9 0f00 	cmp.w	r9, #0
 8007f3a:	d020      	beq.n	8007f7e <__multiply+0x142>
 8007f3c:	6829      	ldr	r1, [r5, #0]
 8007f3e:	f104 0c14 	add.w	ip, r4, #20
 8007f42:	46ae      	mov	lr, r5
 8007f44:	f04f 0a00 	mov.w	sl, #0
 8007f48:	f8bc b000 	ldrh.w	fp, [ip]
 8007f4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f50:	fb09 220b 	mla	r2, r9, fp, r2
 8007f54:	4492      	add	sl, r2
 8007f56:	b289      	uxth	r1, r1
 8007f58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007f60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f64:	f8be 1000 	ldrh.w	r1, [lr]
 8007f68:	0c12      	lsrs	r2, r2, #16
 8007f6a:	fb09 1102 	mla	r1, r9, r2, r1
 8007f6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f72:	4567      	cmp	r7, ip
 8007f74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f78:	d8e6      	bhi.n	8007f48 <__multiply+0x10c>
 8007f7a:	9a01      	ldr	r2, [sp, #4]
 8007f7c:	50a9      	str	r1, [r5, r2]
 8007f7e:	3504      	adds	r5, #4
 8007f80:	e79a      	b.n	8007eb8 <__multiply+0x7c>
 8007f82:	3e01      	subs	r6, #1
 8007f84:	e79c      	b.n	8007ec0 <__multiply+0x84>
 8007f86:	bf00      	nop
 8007f88:	080094ab 	.word	0x080094ab
 8007f8c:	080094bc 	.word	0x080094bc

08007f90 <__pow5mult>:
 8007f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f94:	4615      	mov	r5, r2
 8007f96:	f012 0203 	ands.w	r2, r2, #3
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	d007      	beq.n	8007fb0 <__pow5mult+0x20>
 8007fa0:	4c25      	ldr	r4, [pc, #148]	; (8008038 <__pow5mult+0xa8>)
 8007fa2:	3a01      	subs	r2, #1
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007faa:	f7ff fe9b 	bl	8007ce4 <__multadd>
 8007fae:	4607      	mov	r7, r0
 8007fb0:	10ad      	asrs	r5, r5, #2
 8007fb2:	d03d      	beq.n	8008030 <__pow5mult+0xa0>
 8007fb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fb6:	b97c      	cbnz	r4, 8007fd8 <__pow5mult+0x48>
 8007fb8:	2010      	movs	r0, #16
 8007fba:	f7ff fe1b 	bl	8007bf4 <malloc>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fc2:	b928      	cbnz	r0, 8007fd0 <__pow5mult+0x40>
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	; (800803c <__pow5mult+0xac>)
 8007fc6:	481e      	ldr	r0, [pc, #120]	; (8008040 <__pow5mult+0xb0>)
 8007fc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fcc:	f000 fc0e 	bl	80087ec <__assert_func>
 8007fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fd4:	6004      	str	r4, [r0, #0]
 8007fd6:	60c4      	str	r4, [r0, #12]
 8007fd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fe0:	b94c      	cbnz	r4, 8007ff6 <__pow5mult+0x66>
 8007fe2:	f240 2171 	movw	r1, #625	; 0x271
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7ff ff12 	bl	8007e10 <__i2b>
 8007fec:	2300      	movs	r3, #0
 8007fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	f04f 0900 	mov.w	r9, #0
 8007ffa:	07eb      	lsls	r3, r5, #31
 8007ffc:	d50a      	bpl.n	8008014 <__pow5mult+0x84>
 8007ffe:	4639      	mov	r1, r7
 8008000:	4622      	mov	r2, r4
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff ff1a 	bl	8007e3c <__multiply>
 8008008:	4639      	mov	r1, r7
 800800a:	4680      	mov	r8, r0
 800800c:	4630      	mov	r0, r6
 800800e:	f7ff fe47 	bl	8007ca0 <_Bfree>
 8008012:	4647      	mov	r7, r8
 8008014:	106d      	asrs	r5, r5, #1
 8008016:	d00b      	beq.n	8008030 <__pow5mult+0xa0>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	b938      	cbnz	r0, 800802c <__pow5mult+0x9c>
 800801c:	4622      	mov	r2, r4
 800801e:	4621      	mov	r1, r4
 8008020:	4630      	mov	r0, r6
 8008022:	f7ff ff0b 	bl	8007e3c <__multiply>
 8008026:	6020      	str	r0, [r4, #0]
 8008028:	f8c0 9000 	str.w	r9, [r0]
 800802c:	4604      	mov	r4, r0
 800802e:	e7e4      	b.n	8007ffa <__pow5mult+0x6a>
 8008030:	4638      	mov	r0, r7
 8008032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008036:	bf00      	nop
 8008038:	08009608 	.word	0x08009608
 800803c:	08009439 	.word	0x08009439
 8008040:	080094bc 	.word	0x080094bc

08008044 <__lshift>:
 8008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	460c      	mov	r4, r1
 800804a:	6849      	ldr	r1, [r1, #4]
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	4607      	mov	r7, r0
 8008056:	4691      	mov	r9, r2
 8008058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800805c:	f108 0601 	add.w	r6, r8, #1
 8008060:	42b3      	cmp	r3, r6
 8008062:	db0b      	blt.n	800807c <__lshift+0x38>
 8008064:	4638      	mov	r0, r7
 8008066:	f7ff fddb 	bl	8007c20 <_Balloc>
 800806a:	4605      	mov	r5, r0
 800806c:	b948      	cbnz	r0, 8008082 <__lshift+0x3e>
 800806e:	4602      	mov	r2, r0
 8008070:	4b2a      	ldr	r3, [pc, #168]	; (800811c <__lshift+0xd8>)
 8008072:	482b      	ldr	r0, [pc, #172]	; (8008120 <__lshift+0xdc>)
 8008074:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008078:	f000 fbb8 	bl	80087ec <__assert_func>
 800807c:	3101      	adds	r1, #1
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	e7ee      	b.n	8008060 <__lshift+0x1c>
 8008082:	2300      	movs	r3, #0
 8008084:	f100 0114 	add.w	r1, r0, #20
 8008088:	f100 0210 	add.w	r2, r0, #16
 800808c:	4618      	mov	r0, r3
 800808e:	4553      	cmp	r3, sl
 8008090:	db37      	blt.n	8008102 <__lshift+0xbe>
 8008092:	6920      	ldr	r0, [r4, #16]
 8008094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008098:	f104 0314 	add.w	r3, r4, #20
 800809c:	f019 091f 	ands.w	r9, r9, #31
 80080a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080a8:	d02f      	beq.n	800810a <__lshift+0xc6>
 80080aa:	f1c9 0e20 	rsb	lr, r9, #32
 80080ae:	468a      	mov	sl, r1
 80080b0:	f04f 0c00 	mov.w	ip, #0
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	fa02 f209 	lsl.w	r2, r2, r9
 80080ba:	ea42 020c 	orr.w	r2, r2, ip
 80080be:	f84a 2b04 	str.w	r2, [sl], #4
 80080c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c6:	4298      	cmp	r0, r3
 80080c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080cc:	d8f2      	bhi.n	80080b4 <__lshift+0x70>
 80080ce:	1b03      	subs	r3, r0, r4
 80080d0:	3b15      	subs	r3, #21
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	3304      	adds	r3, #4
 80080d8:	f104 0215 	add.w	r2, r4, #21
 80080dc:	4290      	cmp	r0, r2
 80080de:	bf38      	it	cc
 80080e0:	2304      	movcc	r3, #4
 80080e2:	f841 c003 	str.w	ip, [r1, r3]
 80080e6:	f1bc 0f00 	cmp.w	ip, #0
 80080ea:	d001      	beq.n	80080f0 <__lshift+0xac>
 80080ec:	f108 0602 	add.w	r6, r8, #2
 80080f0:	3e01      	subs	r6, #1
 80080f2:	4638      	mov	r0, r7
 80080f4:	612e      	str	r6, [r5, #16]
 80080f6:	4621      	mov	r1, r4
 80080f8:	f7ff fdd2 	bl	8007ca0 <_Bfree>
 80080fc:	4628      	mov	r0, r5
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	f842 0f04 	str.w	r0, [r2, #4]!
 8008106:	3301      	adds	r3, #1
 8008108:	e7c1      	b.n	800808e <__lshift+0x4a>
 800810a:	3904      	subs	r1, #4
 800810c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008110:	f841 2f04 	str.w	r2, [r1, #4]!
 8008114:	4298      	cmp	r0, r3
 8008116:	d8f9      	bhi.n	800810c <__lshift+0xc8>
 8008118:	e7ea      	b.n	80080f0 <__lshift+0xac>
 800811a:	bf00      	nop
 800811c:	080094ab 	.word	0x080094ab
 8008120:	080094bc 	.word	0x080094bc

08008124 <__mcmp>:
 8008124:	b530      	push	{r4, r5, lr}
 8008126:	6902      	ldr	r2, [r0, #16]
 8008128:	690c      	ldr	r4, [r1, #16]
 800812a:	1b12      	subs	r2, r2, r4
 800812c:	d10e      	bne.n	800814c <__mcmp+0x28>
 800812e:	f100 0314 	add.w	r3, r0, #20
 8008132:	3114      	adds	r1, #20
 8008134:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008138:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800813c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008140:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008144:	42a5      	cmp	r5, r4
 8008146:	d003      	beq.n	8008150 <__mcmp+0x2c>
 8008148:	d305      	bcc.n	8008156 <__mcmp+0x32>
 800814a:	2201      	movs	r2, #1
 800814c:	4610      	mov	r0, r2
 800814e:	bd30      	pop	{r4, r5, pc}
 8008150:	4283      	cmp	r3, r0
 8008152:	d3f3      	bcc.n	800813c <__mcmp+0x18>
 8008154:	e7fa      	b.n	800814c <__mcmp+0x28>
 8008156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800815a:	e7f7      	b.n	800814c <__mcmp+0x28>

0800815c <__mdiff>:
 800815c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	460c      	mov	r4, r1
 8008162:	4606      	mov	r6, r0
 8008164:	4611      	mov	r1, r2
 8008166:	4620      	mov	r0, r4
 8008168:	4690      	mov	r8, r2
 800816a:	f7ff ffdb 	bl	8008124 <__mcmp>
 800816e:	1e05      	subs	r5, r0, #0
 8008170:	d110      	bne.n	8008194 <__mdiff+0x38>
 8008172:	4629      	mov	r1, r5
 8008174:	4630      	mov	r0, r6
 8008176:	f7ff fd53 	bl	8007c20 <_Balloc>
 800817a:	b930      	cbnz	r0, 800818a <__mdiff+0x2e>
 800817c:	4b3a      	ldr	r3, [pc, #232]	; (8008268 <__mdiff+0x10c>)
 800817e:	4602      	mov	r2, r0
 8008180:	f240 2132 	movw	r1, #562	; 0x232
 8008184:	4839      	ldr	r0, [pc, #228]	; (800826c <__mdiff+0x110>)
 8008186:	f000 fb31 	bl	80087ec <__assert_func>
 800818a:	2301      	movs	r3, #1
 800818c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008194:	bfa4      	itt	ge
 8008196:	4643      	movge	r3, r8
 8008198:	46a0      	movge	r8, r4
 800819a:	4630      	mov	r0, r6
 800819c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081a0:	bfa6      	itte	ge
 80081a2:	461c      	movge	r4, r3
 80081a4:	2500      	movge	r5, #0
 80081a6:	2501      	movlt	r5, #1
 80081a8:	f7ff fd3a 	bl	8007c20 <_Balloc>
 80081ac:	b920      	cbnz	r0, 80081b8 <__mdiff+0x5c>
 80081ae:	4b2e      	ldr	r3, [pc, #184]	; (8008268 <__mdiff+0x10c>)
 80081b0:	4602      	mov	r2, r0
 80081b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081b6:	e7e5      	b.n	8008184 <__mdiff+0x28>
 80081b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081bc:	6926      	ldr	r6, [r4, #16]
 80081be:	60c5      	str	r5, [r0, #12]
 80081c0:	f104 0914 	add.w	r9, r4, #20
 80081c4:	f108 0514 	add.w	r5, r8, #20
 80081c8:	f100 0e14 	add.w	lr, r0, #20
 80081cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081d4:	f108 0210 	add.w	r2, r8, #16
 80081d8:	46f2      	mov	sl, lr
 80081da:	2100      	movs	r1, #0
 80081dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80081e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081e4:	fa1f f883 	uxth.w	r8, r3
 80081e8:	fa11 f18b 	uxtah	r1, r1, fp
 80081ec:	0c1b      	lsrs	r3, r3, #16
 80081ee:	eba1 0808 	sub.w	r8, r1, r8
 80081f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081fa:	fa1f f888 	uxth.w	r8, r8
 80081fe:	1419      	asrs	r1, r3, #16
 8008200:	454e      	cmp	r6, r9
 8008202:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008206:	f84a 3b04 	str.w	r3, [sl], #4
 800820a:	d8e7      	bhi.n	80081dc <__mdiff+0x80>
 800820c:	1b33      	subs	r3, r6, r4
 800820e:	3b15      	subs	r3, #21
 8008210:	f023 0303 	bic.w	r3, r3, #3
 8008214:	3304      	adds	r3, #4
 8008216:	3415      	adds	r4, #21
 8008218:	42a6      	cmp	r6, r4
 800821a:	bf38      	it	cc
 800821c:	2304      	movcc	r3, #4
 800821e:	441d      	add	r5, r3
 8008220:	4473      	add	r3, lr
 8008222:	469e      	mov	lr, r3
 8008224:	462e      	mov	r6, r5
 8008226:	4566      	cmp	r6, ip
 8008228:	d30e      	bcc.n	8008248 <__mdiff+0xec>
 800822a:	f10c 0203 	add.w	r2, ip, #3
 800822e:	1b52      	subs	r2, r2, r5
 8008230:	f022 0203 	bic.w	r2, r2, #3
 8008234:	3d03      	subs	r5, #3
 8008236:	45ac      	cmp	ip, r5
 8008238:	bf38      	it	cc
 800823a:	2200      	movcc	r2, #0
 800823c:	441a      	add	r2, r3
 800823e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008242:	b17b      	cbz	r3, 8008264 <__mdiff+0x108>
 8008244:	6107      	str	r7, [r0, #16]
 8008246:	e7a3      	b.n	8008190 <__mdiff+0x34>
 8008248:	f856 8b04 	ldr.w	r8, [r6], #4
 800824c:	fa11 f288 	uxtah	r2, r1, r8
 8008250:	1414      	asrs	r4, r2, #16
 8008252:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008256:	b292      	uxth	r2, r2
 8008258:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800825c:	f84e 2b04 	str.w	r2, [lr], #4
 8008260:	1421      	asrs	r1, r4, #16
 8008262:	e7e0      	b.n	8008226 <__mdiff+0xca>
 8008264:	3f01      	subs	r7, #1
 8008266:	e7ea      	b.n	800823e <__mdiff+0xe2>
 8008268:	080094ab 	.word	0x080094ab
 800826c:	080094bc 	.word	0x080094bc

08008270 <__d2b>:
 8008270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008274:	4689      	mov	r9, r1
 8008276:	2101      	movs	r1, #1
 8008278:	ec57 6b10 	vmov	r6, r7, d0
 800827c:	4690      	mov	r8, r2
 800827e:	f7ff fccf 	bl	8007c20 <_Balloc>
 8008282:	4604      	mov	r4, r0
 8008284:	b930      	cbnz	r0, 8008294 <__d2b+0x24>
 8008286:	4602      	mov	r2, r0
 8008288:	4b25      	ldr	r3, [pc, #148]	; (8008320 <__d2b+0xb0>)
 800828a:	4826      	ldr	r0, [pc, #152]	; (8008324 <__d2b+0xb4>)
 800828c:	f240 310a 	movw	r1, #778	; 0x30a
 8008290:	f000 faac 	bl	80087ec <__assert_func>
 8008294:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800829c:	bb35      	cbnz	r5, 80082ec <__d2b+0x7c>
 800829e:	2e00      	cmp	r6, #0
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	d028      	beq.n	80082f6 <__d2b+0x86>
 80082a4:	4668      	mov	r0, sp
 80082a6:	9600      	str	r6, [sp, #0]
 80082a8:	f7ff fd82 	bl	8007db0 <__lo0bits>
 80082ac:	9900      	ldr	r1, [sp, #0]
 80082ae:	b300      	cbz	r0, 80082f2 <__d2b+0x82>
 80082b0:	9a01      	ldr	r2, [sp, #4]
 80082b2:	f1c0 0320 	rsb	r3, r0, #32
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	430b      	orrs	r3, r1
 80082bc:	40c2      	lsrs	r2, r0
 80082be:	6163      	str	r3, [r4, #20]
 80082c0:	9201      	str	r2, [sp, #4]
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	61a3      	str	r3, [r4, #24]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bf14      	ite	ne
 80082ca:	2202      	movne	r2, #2
 80082cc:	2201      	moveq	r2, #1
 80082ce:	6122      	str	r2, [r4, #16]
 80082d0:	b1d5      	cbz	r5, 8008308 <__d2b+0x98>
 80082d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082d6:	4405      	add	r5, r0
 80082d8:	f8c9 5000 	str.w	r5, [r9]
 80082dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082e0:	f8c8 0000 	str.w	r0, [r8]
 80082e4:	4620      	mov	r0, r4
 80082e6:	b003      	add	sp, #12
 80082e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f0:	e7d5      	b.n	800829e <__d2b+0x2e>
 80082f2:	6161      	str	r1, [r4, #20]
 80082f4:	e7e5      	b.n	80082c2 <__d2b+0x52>
 80082f6:	a801      	add	r0, sp, #4
 80082f8:	f7ff fd5a 	bl	8007db0 <__lo0bits>
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	6163      	str	r3, [r4, #20]
 8008300:	2201      	movs	r2, #1
 8008302:	6122      	str	r2, [r4, #16]
 8008304:	3020      	adds	r0, #32
 8008306:	e7e3      	b.n	80082d0 <__d2b+0x60>
 8008308:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800830c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008310:	f8c9 0000 	str.w	r0, [r9]
 8008314:	6918      	ldr	r0, [r3, #16]
 8008316:	f7ff fd2b 	bl	8007d70 <__hi0bits>
 800831a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800831e:	e7df      	b.n	80082e0 <__d2b+0x70>
 8008320:	080094ab 	.word	0x080094ab
 8008324:	080094bc 	.word	0x080094bc

08008328 <_calloc_r>:
 8008328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800832a:	fba1 2402 	umull	r2, r4, r1, r2
 800832e:	b94c      	cbnz	r4, 8008344 <_calloc_r+0x1c>
 8008330:	4611      	mov	r1, r2
 8008332:	9201      	str	r2, [sp, #4]
 8008334:	f000 f87a 	bl	800842c <_malloc_r>
 8008338:	9a01      	ldr	r2, [sp, #4]
 800833a:	4605      	mov	r5, r0
 800833c:	b930      	cbnz	r0, 800834c <_calloc_r+0x24>
 800833e:	4628      	mov	r0, r5
 8008340:	b003      	add	sp, #12
 8008342:	bd30      	pop	{r4, r5, pc}
 8008344:	220c      	movs	r2, #12
 8008346:	6002      	str	r2, [r0, #0]
 8008348:	2500      	movs	r5, #0
 800834a:	e7f8      	b.n	800833e <_calloc_r+0x16>
 800834c:	4621      	mov	r1, r4
 800834e:	f7fe f93f 	bl	80065d0 <memset>
 8008352:	e7f4      	b.n	800833e <_calloc_r+0x16>

08008354 <_free_r>:
 8008354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008356:	2900      	cmp	r1, #0
 8008358:	d044      	beq.n	80083e4 <_free_r+0x90>
 800835a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835e:	9001      	str	r0, [sp, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f1a1 0404 	sub.w	r4, r1, #4
 8008366:	bfb8      	it	lt
 8008368:	18e4      	addlt	r4, r4, r3
 800836a:	f000 fa9b 	bl	80088a4 <__malloc_lock>
 800836e:	4a1e      	ldr	r2, [pc, #120]	; (80083e8 <_free_r+0x94>)
 8008370:	9801      	ldr	r0, [sp, #4]
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	b933      	cbnz	r3, 8008384 <_free_r+0x30>
 8008376:	6063      	str	r3, [r4, #4]
 8008378:	6014      	str	r4, [r2, #0]
 800837a:	b003      	add	sp, #12
 800837c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008380:	f000 ba96 	b.w	80088b0 <__malloc_unlock>
 8008384:	42a3      	cmp	r3, r4
 8008386:	d908      	bls.n	800839a <_free_r+0x46>
 8008388:	6825      	ldr	r5, [r4, #0]
 800838a:	1961      	adds	r1, r4, r5
 800838c:	428b      	cmp	r3, r1
 800838e:	bf01      	itttt	eq
 8008390:	6819      	ldreq	r1, [r3, #0]
 8008392:	685b      	ldreq	r3, [r3, #4]
 8008394:	1949      	addeq	r1, r1, r5
 8008396:	6021      	streq	r1, [r4, #0]
 8008398:	e7ed      	b.n	8008376 <_free_r+0x22>
 800839a:	461a      	mov	r2, r3
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	b10b      	cbz	r3, 80083a4 <_free_r+0x50>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d9fa      	bls.n	800839a <_free_r+0x46>
 80083a4:	6811      	ldr	r1, [r2, #0]
 80083a6:	1855      	adds	r5, r2, r1
 80083a8:	42a5      	cmp	r5, r4
 80083aa:	d10b      	bne.n	80083c4 <_free_r+0x70>
 80083ac:	6824      	ldr	r4, [r4, #0]
 80083ae:	4421      	add	r1, r4
 80083b0:	1854      	adds	r4, r2, r1
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	6011      	str	r1, [r2, #0]
 80083b6:	d1e0      	bne.n	800837a <_free_r+0x26>
 80083b8:	681c      	ldr	r4, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	4421      	add	r1, r4
 80083c0:	6011      	str	r1, [r2, #0]
 80083c2:	e7da      	b.n	800837a <_free_r+0x26>
 80083c4:	d902      	bls.n	80083cc <_free_r+0x78>
 80083c6:	230c      	movs	r3, #12
 80083c8:	6003      	str	r3, [r0, #0]
 80083ca:	e7d6      	b.n	800837a <_free_r+0x26>
 80083cc:	6825      	ldr	r5, [r4, #0]
 80083ce:	1961      	adds	r1, r4, r5
 80083d0:	428b      	cmp	r3, r1
 80083d2:	bf04      	itt	eq
 80083d4:	6819      	ldreq	r1, [r3, #0]
 80083d6:	685b      	ldreq	r3, [r3, #4]
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	bf04      	itt	eq
 80083dc:	1949      	addeq	r1, r1, r5
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	6054      	str	r4, [r2, #4]
 80083e2:	e7ca      	b.n	800837a <_free_r+0x26>
 80083e4:	b003      	add	sp, #12
 80083e6:	bd30      	pop	{r4, r5, pc}
 80083e8:	200003c8 	.word	0x200003c8

080083ec <sbrk_aligned>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4e0e      	ldr	r6, [pc, #56]	; (8008428 <sbrk_aligned+0x3c>)
 80083f0:	460c      	mov	r4, r1
 80083f2:	6831      	ldr	r1, [r6, #0]
 80083f4:	4605      	mov	r5, r0
 80083f6:	b911      	cbnz	r1, 80083fe <sbrk_aligned+0x12>
 80083f8:	f000 f9e8 	bl	80087cc <_sbrk_r>
 80083fc:	6030      	str	r0, [r6, #0]
 80083fe:	4621      	mov	r1, r4
 8008400:	4628      	mov	r0, r5
 8008402:	f000 f9e3 	bl	80087cc <_sbrk_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d00a      	beq.n	8008420 <sbrk_aligned+0x34>
 800840a:	1cc4      	adds	r4, r0, #3
 800840c:	f024 0403 	bic.w	r4, r4, #3
 8008410:	42a0      	cmp	r0, r4
 8008412:	d007      	beq.n	8008424 <sbrk_aligned+0x38>
 8008414:	1a21      	subs	r1, r4, r0
 8008416:	4628      	mov	r0, r5
 8008418:	f000 f9d8 	bl	80087cc <_sbrk_r>
 800841c:	3001      	adds	r0, #1
 800841e:	d101      	bne.n	8008424 <sbrk_aligned+0x38>
 8008420:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008424:	4620      	mov	r0, r4
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	200003cc 	.word	0x200003cc

0800842c <_malloc_r>:
 800842c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008430:	1ccd      	adds	r5, r1, #3
 8008432:	f025 0503 	bic.w	r5, r5, #3
 8008436:	3508      	adds	r5, #8
 8008438:	2d0c      	cmp	r5, #12
 800843a:	bf38      	it	cc
 800843c:	250c      	movcc	r5, #12
 800843e:	2d00      	cmp	r5, #0
 8008440:	4607      	mov	r7, r0
 8008442:	db01      	blt.n	8008448 <_malloc_r+0x1c>
 8008444:	42a9      	cmp	r1, r5
 8008446:	d905      	bls.n	8008454 <_malloc_r+0x28>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	2600      	movs	r6, #0
 800844e:	4630      	mov	r0, r6
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008454:	4e2e      	ldr	r6, [pc, #184]	; (8008510 <_malloc_r+0xe4>)
 8008456:	f000 fa25 	bl	80088a4 <__malloc_lock>
 800845a:	6833      	ldr	r3, [r6, #0]
 800845c:	461c      	mov	r4, r3
 800845e:	bb34      	cbnz	r4, 80084ae <_malloc_r+0x82>
 8008460:	4629      	mov	r1, r5
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ffc2 	bl	80083ec <sbrk_aligned>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	4604      	mov	r4, r0
 800846c:	d14d      	bne.n	800850a <_malloc_r+0xde>
 800846e:	6834      	ldr	r4, [r6, #0]
 8008470:	4626      	mov	r6, r4
 8008472:	2e00      	cmp	r6, #0
 8008474:	d140      	bne.n	80084f8 <_malloc_r+0xcc>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	4631      	mov	r1, r6
 800847a:	4638      	mov	r0, r7
 800847c:	eb04 0803 	add.w	r8, r4, r3
 8008480:	f000 f9a4 	bl	80087cc <_sbrk_r>
 8008484:	4580      	cmp	r8, r0
 8008486:	d13a      	bne.n	80084fe <_malloc_r+0xd2>
 8008488:	6821      	ldr	r1, [r4, #0]
 800848a:	3503      	adds	r5, #3
 800848c:	1a6d      	subs	r5, r5, r1
 800848e:	f025 0503 	bic.w	r5, r5, #3
 8008492:	3508      	adds	r5, #8
 8008494:	2d0c      	cmp	r5, #12
 8008496:	bf38      	it	cc
 8008498:	250c      	movcc	r5, #12
 800849a:	4629      	mov	r1, r5
 800849c:	4638      	mov	r0, r7
 800849e:	f7ff ffa5 	bl	80083ec <sbrk_aligned>
 80084a2:	3001      	adds	r0, #1
 80084a4:	d02b      	beq.n	80084fe <_malloc_r+0xd2>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	442b      	add	r3, r5
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	e00e      	b.n	80084cc <_malloc_r+0xa0>
 80084ae:	6822      	ldr	r2, [r4, #0]
 80084b0:	1b52      	subs	r2, r2, r5
 80084b2:	d41e      	bmi.n	80084f2 <_malloc_r+0xc6>
 80084b4:	2a0b      	cmp	r2, #11
 80084b6:	d916      	bls.n	80084e6 <_malloc_r+0xba>
 80084b8:	1961      	adds	r1, r4, r5
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	6025      	str	r5, [r4, #0]
 80084be:	bf18      	it	ne
 80084c0:	6059      	strne	r1, [r3, #4]
 80084c2:	6863      	ldr	r3, [r4, #4]
 80084c4:	bf08      	it	eq
 80084c6:	6031      	streq	r1, [r6, #0]
 80084c8:	5162      	str	r2, [r4, r5]
 80084ca:	604b      	str	r3, [r1, #4]
 80084cc:	4638      	mov	r0, r7
 80084ce:	f104 060b 	add.w	r6, r4, #11
 80084d2:	f000 f9ed 	bl	80088b0 <__malloc_unlock>
 80084d6:	f026 0607 	bic.w	r6, r6, #7
 80084da:	1d23      	adds	r3, r4, #4
 80084dc:	1af2      	subs	r2, r6, r3
 80084de:	d0b6      	beq.n	800844e <_malloc_r+0x22>
 80084e0:	1b9b      	subs	r3, r3, r6
 80084e2:	50a3      	str	r3, [r4, r2]
 80084e4:	e7b3      	b.n	800844e <_malloc_r+0x22>
 80084e6:	6862      	ldr	r2, [r4, #4]
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	bf0c      	ite	eq
 80084ec:	6032      	streq	r2, [r6, #0]
 80084ee:	605a      	strne	r2, [r3, #4]
 80084f0:	e7ec      	b.n	80084cc <_malloc_r+0xa0>
 80084f2:	4623      	mov	r3, r4
 80084f4:	6864      	ldr	r4, [r4, #4]
 80084f6:	e7b2      	b.n	800845e <_malloc_r+0x32>
 80084f8:	4634      	mov	r4, r6
 80084fa:	6876      	ldr	r6, [r6, #4]
 80084fc:	e7b9      	b.n	8008472 <_malloc_r+0x46>
 80084fe:	230c      	movs	r3, #12
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	4638      	mov	r0, r7
 8008504:	f000 f9d4 	bl	80088b0 <__malloc_unlock>
 8008508:	e7a1      	b.n	800844e <_malloc_r+0x22>
 800850a:	6025      	str	r5, [r4, #0]
 800850c:	e7de      	b.n	80084cc <_malloc_r+0xa0>
 800850e:	bf00      	nop
 8008510:	200003c8 	.word	0x200003c8

08008514 <__ssputs_r>:
 8008514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008518:	688e      	ldr	r6, [r1, #8]
 800851a:	429e      	cmp	r6, r3
 800851c:	4682      	mov	sl, r0
 800851e:	460c      	mov	r4, r1
 8008520:	4690      	mov	r8, r2
 8008522:	461f      	mov	r7, r3
 8008524:	d838      	bhi.n	8008598 <__ssputs_r+0x84>
 8008526:	898a      	ldrh	r2, [r1, #12]
 8008528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800852c:	d032      	beq.n	8008594 <__ssputs_r+0x80>
 800852e:	6825      	ldr	r5, [r4, #0]
 8008530:	6909      	ldr	r1, [r1, #16]
 8008532:	eba5 0901 	sub.w	r9, r5, r1
 8008536:	6965      	ldr	r5, [r4, #20]
 8008538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800853c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008540:	3301      	adds	r3, #1
 8008542:	444b      	add	r3, r9
 8008544:	106d      	asrs	r5, r5, #1
 8008546:	429d      	cmp	r5, r3
 8008548:	bf38      	it	cc
 800854a:	461d      	movcc	r5, r3
 800854c:	0553      	lsls	r3, r2, #21
 800854e:	d531      	bpl.n	80085b4 <__ssputs_r+0xa0>
 8008550:	4629      	mov	r1, r5
 8008552:	f7ff ff6b 	bl	800842c <_malloc_r>
 8008556:	4606      	mov	r6, r0
 8008558:	b950      	cbnz	r0, 8008570 <__ssputs_r+0x5c>
 800855a:	230c      	movs	r3, #12
 800855c:	f8ca 3000 	str.w	r3, [sl]
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800856c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008570:	6921      	ldr	r1, [r4, #16]
 8008572:	464a      	mov	r2, r9
 8008574:	f7ff fb46 	bl	8007c04 <memcpy>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800857e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	6126      	str	r6, [r4, #16]
 8008586:	6165      	str	r5, [r4, #20]
 8008588:	444e      	add	r6, r9
 800858a:	eba5 0509 	sub.w	r5, r5, r9
 800858e:	6026      	str	r6, [r4, #0]
 8008590:	60a5      	str	r5, [r4, #8]
 8008592:	463e      	mov	r6, r7
 8008594:	42be      	cmp	r6, r7
 8008596:	d900      	bls.n	800859a <__ssputs_r+0x86>
 8008598:	463e      	mov	r6, r7
 800859a:	6820      	ldr	r0, [r4, #0]
 800859c:	4632      	mov	r2, r6
 800859e:	4641      	mov	r1, r8
 80085a0:	f000 f966 	bl	8008870 <memmove>
 80085a4:	68a3      	ldr	r3, [r4, #8]
 80085a6:	1b9b      	subs	r3, r3, r6
 80085a8:	60a3      	str	r3, [r4, #8]
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	4433      	add	r3, r6
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7db      	b.n	800856c <__ssputs_r+0x58>
 80085b4:	462a      	mov	r2, r5
 80085b6:	f000 f981 	bl	80088bc <_realloc_r>
 80085ba:	4606      	mov	r6, r0
 80085bc:	2800      	cmp	r0, #0
 80085be:	d1e1      	bne.n	8008584 <__ssputs_r+0x70>
 80085c0:	6921      	ldr	r1, [r4, #16]
 80085c2:	4650      	mov	r0, sl
 80085c4:	f7ff fec6 	bl	8008354 <_free_r>
 80085c8:	e7c7      	b.n	800855a <__ssputs_r+0x46>
	...

080085cc <_svfiprintf_r>:
 80085cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	4698      	mov	r8, r3
 80085d2:	898b      	ldrh	r3, [r1, #12]
 80085d4:	061b      	lsls	r3, r3, #24
 80085d6:	b09d      	sub	sp, #116	; 0x74
 80085d8:	4607      	mov	r7, r0
 80085da:	460d      	mov	r5, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	d50e      	bpl.n	80085fe <_svfiprintf_r+0x32>
 80085e0:	690b      	ldr	r3, [r1, #16]
 80085e2:	b963      	cbnz	r3, 80085fe <_svfiprintf_r+0x32>
 80085e4:	2140      	movs	r1, #64	; 0x40
 80085e6:	f7ff ff21 	bl	800842c <_malloc_r>
 80085ea:	6028      	str	r0, [r5, #0]
 80085ec:	6128      	str	r0, [r5, #16]
 80085ee:	b920      	cbnz	r0, 80085fa <_svfiprintf_r+0x2e>
 80085f0:	230c      	movs	r3, #12
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f8:	e0d1      	b.n	800879e <_svfiprintf_r+0x1d2>
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	616b      	str	r3, [r5, #20]
 80085fe:	2300      	movs	r3, #0
 8008600:	9309      	str	r3, [sp, #36]	; 0x24
 8008602:	2320      	movs	r3, #32
 8008604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008608:	f8cd 800c 	str.w	r8, [sp, #12]
 800860c:	2330      	movs	r3, #48	; 0x30
 800860e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087b8 <_svfiprintf_r+0x1ec>
 8008612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008616:	f04f 0901 	mov.w	r9, #1
 800861a:	4623      	mov	r3, r4
 800861c:	469a      	mov	sl, r3
 800861e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008622:	b10a      	cbz	r2, 8008628 <_svfiprintf_r+0x5c>
 8008624:	2a25      	cmp	r2, #37	; 0x25
 8008626:	d1f9      	bne.n	800861c <_svfiprintf_r+0x50>
 8008628:	ebba 0b04 	subs.w	fp, sl, r4
 800862c:	d00b      	beq.n	8008646 <_svfiprintf_r+0x7a>
 800862e:	465b      	mov	r3, fp
 8008630:	4622      	mov	r2, r4
 8008632:	4629      	mov	r1, r5
 8008634:	4638      	mov	r0, r7
 8008636:	f7ff ff6d 	bl	8008514 <__ssputs_r>
 800863a:	3001      	adds	r0, #1
 800863c:	f000 80aa 	beq.w	8008794 <_svfiprintf_r+0x1c8>
 8008640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008642:	445a      	add	r2, fp
 8008644:	9209      	str	r2, [sp, #36]	; 0x24
 8008646:	f89a 3000 	ldrb.w	r3, [sl]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 80a2 	beq.w	8008794 <_svfiprintf_r+0x1c8>
 8008650:	2300      	movs	r3, #0
 8008652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800865a:	f10a 0a01 	add.w	sl, sl, #1
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	9307      	str	r3, [sp, #28]
 8008662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008666:	931a      	str	r3, [sp, #104]	; 0x68
 8008668:	4654      	mov	r4, sl
 800866a:	2205      	movs	r2, #5
 800866c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008670:	4851      	ldr	r0, [pc, #324]	; (80087b8 <_svfiprintf_r+0x1ec>)
 8008672:	f7f7 fdbd 	bl	80001f0 <memchr>
 8008676:	9a04      	ldr	r2, [sp, #16]
 8008678:	b9d8      	cbnz	r0, 80086b2 <_svfiprintf_r+0xe6>
 800867a:	06d0      	lsls	r0, r2, #27
 800867c:	bf44      	itt	mi
 800867e:	2320      	movmi	r3, #32
 8008680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008684:	0711      	lsls	r1, r2, #28
 8008686:	bf44      	itt	mi
 8008688:	232b      	movmi	r3, #43	; 0x2b
 800868a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800868e:	f89a 3000 	ldrb.w	r3, [sl]
 8008692:	2b2a      	cmp	r3, #42	; 0x2a
 8008694:	d015      	beq.n	80086c2 <_svfiprintf_r+0xf6>
 8008696:	9a07      	ldr	r2, [sp, #28]
 8008698:	4654      	mov	r4, sl
 800869a:	2000      	movs	r0, #0
 800869c:	f04f 0c0a 	mov.w	ip, #10
 80086a0:	4621      	mov	r1, r4
 80086a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a6:	3b30      	subs	r3, #48	; 0x30
 80086a8:	2b09      	cmp	r3, #9
 80086aa:	d94e      	bls.n	800874a <_svfiprintf_r+0x17e>
 80086ac:	b1b0      	cbz	r0, 80086dc <_svfiprintf_r+0x110>
 80086ae:	9207      	str	r2, [sp, #28]
 80086b0:	e014      	b.n	80086dc <_svfiprintf_r+0x110>
 80086b2:	eba0 0308 	sub.w	r3, r0, r8
 80086b6:	fa09 f303 	lsl.w	r3, r9, r3
 80086ba:	4313      	orrs	r3, r2
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	46a2      	mov	sl, r4
 80086c0:	e7d2      	b.n	8008668 <_svfiprintf_r+0x9c>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	1d19      	adds	r1, r3, #4
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	9103      	str	r1, [sp, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bfbb      	ittet	lt
 80086ce:	425b      	neglt	r3, r3
 80086d0:	f042 0202 	orrlt.w	r2, r2, #2
 80086d4:	9307      	strge	r3, [sp, #28]
 80086d6:	9307      	strlt	r3, [sp, #28]
 80086d8:	bfb8      	it	lt
 80086da:	9204      	strlt	r2, [sp, #16]
 80086dc:	7823      	ldrb	r3, [r4, #0]
 80086de:	2b2e      	cmp	r3, #46	; 0x2e
 80086e0:	d10c      	bne.n	80086fc <_svfiprintf_r+0x130>
 80086e2:	7863      	ldrb	r3, [r4, #1]
 80086e4:	2b2a      	cmp	r3, #42	; 0x2a
 80086e6:	d135      	bne.n	8008754 <_svfiprintf_r+0x188>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	1d1a      	adds	r2, r3, #4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	9203      	str	r2, [sp, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bfb8      	it	lt
 80086f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086f8:	3402      	adds	r4, #2
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087c8 <_svfiprintf_r+0x1fc>
 8008700:	7821      	ldrb	r1, [r4, #0]
 8008702:	2203      	movs	r2, #3
 8008704:	4650      	mov	r0, sl
 8008706:	f7f7 fd73 	bl	80001f0 <memchr>
 800870a:	b140      	cbz	r0, 800871e <_svfiprintf_r+0x152>
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	eba0 000a 	sub.w	r0, r0, sl
 8008712:	fa03 f000 	lsl.w	r0, r3, r0
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	4303      	orrs	r3, r0
 800871a:	3401      	adds	r4, #1
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008722:	4826      	ldr	r0, [pc, #152]	; (80087bc <_svfiprintf_r+0x1f0>)
 8008724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008728:	2206      	movs	r2, #6
 800872a:	f7f7 fd61 	bl	80001f0 <memchr>
 800872e:	2800      	cmp	r0, #0
 8008730:	d038      	beq.n	80087a4 <_svfiprintf_r+0x1d8>
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <_svfiprintf_r+0x1f4>)
 8008734:	bb1b      	cbnz	r3, 800877e <_svfiprintf_r+0x1b2>
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	3307      	adds	r3, #7
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	3308      	adds	r3, #8
 8008740:	9303      	str	r3, [sp, #12]
 8008742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008744:	4433      	add	r3, r6
 8008746:	9309      	str	r3, [sp, #36]	; 0x24
 8008748:	e767      	b.n	800861a <_svfiprintf_r+0x4e>
 800874a:	fb0c 3202 	mla	r2, ip, r2, r3
 800874e:	460c      	mov	r4, r1
 8008750:	2001      	movs	r0, #1
 8008752:	e7a5      	b.n	80086a0 <_svfiprintf_r+0xd4>
 8008754:	2300      	movs	r3, #0
 8008756:	3401      	adds	r4, #1
 8008758:	9305      	str	r3, [sp, #20]
 800875a:	4619      	mov	r1, r3
 800875c:	f04f 0c0a 	mov.w	ip, #10
 8008760:	4620      	mov	r0, r4
 8008762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008766:	3a30      	subs	r2, #48	; 0x30
 8008768:	2a09      	cmp	r2, #9
 800876a:	d903      	bls.n	8008774 <_svfiprintf_r+0x1a8>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0c5      	beq.n	80086fc <_svfiprintf_r+0x130>
 8008770:	9105      	str	r1, [sp, #20]
 8008772:	e7c3      	b.n	80086fc <_svfiprintf_r+0x130>
 8008774:	fb0c 2101 	mla	r1, ip, r1, r2
 8008778:	4604      	mov	r4, r0
 800877a:	2301      	movs	r3, #1
 800877c:	e7f0      	b.n	8008760 <_svfiprintf_r+0x194>
 800877e:	ab03      	add	r3, sp, #12
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	462a      	mov	r2, r5
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <_svfiprintf_r+0x1f8>)
 8008786:	a904      	add	r1, sp, #16
 8008788:	4638      	mov	r0, r7
 800878a:	f7fd ffc9 	bl	8006720 <_printf_float>
 800878e:	1c42      	adds	r2, r0, #1
 8008790:	4606      	mov	r6, r0
 8008792:	d1d6      	bne.n	8008742 <_svfiprintf_r+0x176>
 8008794:	89ab      	ldrh	r3, [r5, #12]
 8008796:	065b      	lsls	r3, r3, #25
 8008798:	f53f af2c 	bmi.w	80085f4 <_svfiprintf_r+0x28>
 800879c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800879e:	b01d      	add	sp, #116	; 0x74
 80087a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a4:	ab03      	add	r3, sp, #12
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	462a      	mov	r2, r5
 80087aa:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <_svfiprintf_r+0x1f8>)
 80087ac:	a904      	add	r1, sp, #16
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7fe fa5a 	bl	8006c68 <_printf_i>
 80087b4:	e7eb      	b.n	800878e <_svfiprintf_r+0x1c2>
 80087b6:	bf00      	nop
 80087b8:	08009614 	.word	0x08009614
 80087bc:	0800961e 	.word	0x0800961e
 80087c0:	08006721 	.word	0x08006721
 80087c4:	08008515 	.word	0x08008515
 80087c8:	0800961a 	.word	0x0800961a

080087cc <_sbrk_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d06      	ldr	r5, [pc, #24]	; (80087e8 <_sbrk_r+0x1c>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	f7fa f9ae 	bl	8002b38 <_sbrk>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_sbrk_r+0x1a>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_sbrk_r+0x1a>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	200003d0 	.word	0x200003d0

080087ec <__assert_func>:
 80087ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087ee:	4614      	mov	r4, r2
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b09      	ldr	r3, [pc, #36]	; (8008818 <__assert_func+0x2c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4605      	mov	r5, r0
 80087f8:	68d8      	ldr	r0, [r3, #12]
 80087fa:	b14c      	cbz	r4, 8008810 <__assert_func+0x24>
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <__assert_func+0x30>)
 80087fe:	9100      	str	r1, [sp, #0]
 8008800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008804:	4906      	ldr	r1, [pc, #24]	; (8008820 <__assert_func+0x34>)
 8008806:	462b      	mov	r3, r5
 8008808:	f000 f80e 	bl	8008828 <fiprintf>
 800880c:	f000 faac 	bl	8008d68 <abort>
 8008810:	4b04      	ldr	r3, [pc, #16]	; (8008824 <__assert_func+0x38>)
 8008812:	461c      	mov	r4, r3
 8008814:	e7f3      	b.n	80087fe <__assert_func+0x12>
 8008816:	bf00      	nop
 8008818:	2000000c 	.word	0x2000000c
 800881c:	08009625 	.word	0x08009625
 8008820:	08009632 	.word	0x08009632
 8008824:	08009660 	.word	0x08009660

08008828 <fiprintf>:
 8008828:	b40e      	push	{r1, r2, r3}
 800882a:	b503      	push	{r0, r1, lr}
 800882c:	4601      	mov	r1, r0
 800882e:	ab03      	add	r3, sp, #12
 8008830:	4805      	ldr	r0, [pc, #20]	; (8008848 <fiprintf+0x20>)
 8008832:	f853 2b04 	ldr.w	r2, [r3], #4
 8008836:	6800      	ldr	r0, [r0, #0]
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	f000 f897 	bl	800896c <_vfiprintf_r>
 800883e:	b002      	add	sp, #8
 8008840:	f85d eb04 	ldr.w	lr, [sp], #4
 8008844:	b003      	add	sp, #12
 8008846:	4770      	bx	lr
 8008848:	2000000c 	.word	0x2000000c

0800884c <__ascii_mbtowc>:
 800884c:	b082      	sub	sp, #8
 800884e:	b901      	cbnz	r1, 8008852 <__ascii_mbtowc+0x6>
 8008850:	a901      	add	r1, sp, #4
 8008852:	b142      	cbz	r2, 8008866 <__ascii_mbtowc+0x1a>
 8008854:	b14b      	cbz	r3, 800886a <__ascii_mbtowc+0x1e>
 8008856:	7813      	ldrb	r3, [r2, #0]
 8008858:	600b      	str	r3, [r1, #0]
 800885a:	7812      	ldrb	r2, [r2, #0]
 800885c:	1e10      	subs	r0, r2, #0
 800885e:	bf18      	it	ne
 8008860:	2001      	movne	r0, #1
 8008862:	b002      	add	sp, #8
 8008864:	4770      	bx	lr
 8008866:	4610      	mov	r0, r2
 8008868:	e7fb      	b.n	8008862 <__ascii_mbtowc+0x16>
 800886a:	f06f 0001 	mvn.w	r0, #1
 800886e:	e7f8      	b.n	8008862 <__ascii_mbtowc+0x16>

08008870 <memmove>:
 8008870:	4288      	cmp	r0, r1
 8008872:	b510      	push	{r4, lr}
 8008874:	eb01 0402 	add.w	r4, r1, r2
 8008878:	d902      	bls.n	8008880 <memmove+0x10>
 800887a:	4284      	cmp	r4, r0
 800887c:	4623      	mov	r3, r4
 800887e:	d807      	bhi.n	8008890 <memmove+0x20>
 8008880:	1e43      	subs	r3, r0, #1
 8008882:	42a1      	cmp	r1, r4
 8008884:	d008      	beq.n	8008898 <memmove+0x28>
 8008886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800888a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800888e:	e7f8      	b.n	8008882 <memmove+0x12>
 8008890:	4402      	add	r2, r0
 8008892:	4601      	mov	r1, r0
 8008894:	428a      	cmp	r2, r1
 8008896:	d100      	bne.n	800889a <memmove+0x2a>
 8008898:	bd10      	pop	{r4, pc}
 800889a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800889e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088a2:	e7f7      	b.n	8008894 <memmove+0x24>

080088a4 <__malloc_lock>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__malloc_lock+0x8>)
 80088a6:	f000 bc1f 	b.w	80090e8 <__retarget_lock_acquire_recursive>
 80088aa:	bf00      	nop
 80088ac:	200003d4 	.word	0x200003d4

080088b0 <__malloc_unlock>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__malloc_unlock+0x8>)
 80088b2:	f000 bc1a 	b.w	80090ea <__retarget_lock_release_recursive>
 80088b6:	bf00      	nop
 80088b8:	200003d4 	.word	0x200003d4

080088bc <_realloc_r>:
 80088bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	4680      	mov	r8, r0
 80088c2:	4614      	mov	r4, r2
 80088c4:	460e      	mov	r6, r1
 80088c6:	b921      	cbnz	r1, 80088d2 <_realloc_r+0x16>
 80088c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088cc:	4611      	mov	r1, r2
 80088ce:	f7ff bdad 	b.w	800842c <_malloc_r>
 80088d2:	b92a      	cbnz	r2, 80088e0 <_realloc_r+0x24>
 80088d4:	f7ff fd3e 	bl	8008354 <_free_r>
 80088d8:	4625      	mov	r5, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	f000 fc6a 	bl	80091b8 <_malloc_usable_size_r>
 80088e4:	4284      	cmp	r4, r0
 80088e6:	4607      	mov	r7, r0
 80088e8:	d802      	bhi.n	80088f0 <_realloc_r+0x34>
 80088ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088ee:	d812      	bhi.n	8008916 <_realloc_r+0x5a>
 80088f0:	4621      	mov	r1, r4
 80088f2:	4640      	mov	r0, r8
 80088f4:	f7ff fd9a 	bl	800842c <_malloc_r>
 80088f8:	4605      	mov	r5, r0
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0ed      	beq.n	80088da <_realloc_r+0x1e>
 80088fe:	42bc      	cmp	r4, r7
 8008900:	4622      	mov	r2, r4
 8008902:	4631      	mov	r1, r6
 8008904:	bf28      	it	cs
 8008906:	463a      	movcs	r2, r7
 8008908:	f7ff f97c 	bl	8007c04 <memcpy>
 800890c:	4631      	mov	r1, r6
 800890e:	4640      	mov	r0, r8
 8008910:	f7ff fd20 	bl	8008354 <_free_r>
 8008914:	e7e1      	b.n	80088da <_realloc_r+0x1e>
 8008916:	4635      	mov	r5, r6
 8008918:	e7df      	b.n	80088da <_realloc_r+0x1e>

0800891a <__sfputc_r>:
 800891a:	6893      	ldr	r3, [r2, #8]
 800891c:	3b01      	subs	r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	b410      	push	{r4}
 8008922:	6093      	str	r3, [r2, #8]
 8008924:	da08      	bge.n	8008938 <__sfputc_r+0x1e>
 8008926:	6994      	ldr	r4, [r2, #24]
 8008928:	42a3      	cmp	r3, r4
 800892a:	db01      	blt.n	8008930 <__sfputc_r+0x16>
 800892c:	290a      	cmp	r1, #10
 800892e:	d103      	bne.n	8008938 <__sfputc_r+0x1e>
 8008930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008934:	f000 b94a 	b.w	8008bcc <__swbuf_r>
 8008938:	6813      	ldr	r3, [r2, #0]
 800893a:	1c58      	adds	r0, r3, #1
 800893c:	6010      	str	r0, [r2, #0]
 800893e:	7019      	strb	r1, [r3, #0]
 8008940:	4608      	mov	r0, r1
 8008942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008946:	4770      	bx	lr

08008948 <__sfputs_r>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	4606      	mov	r6, r0
 800894c:	460f      	mov	r7, r1
 800894e:	4614      	mov	r4, r2
 8008950:	18d5      	adds	r5, r2, r3
 8008952:	42ac      	cmp	r4, r5
 8008954:	d101      	bne.n	800895a <__sfputs_r+0x12>
 8008956:	2000      	movs	r0, #0
 8008958:	e007      	b.n	800896a <__sfputs_r+0x22>
 800895a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895e:	463a      	mov	r2, r7
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff ffda 	bl	800891a <__sfputc_r>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d1f3      	bne.n	8008952 <__sfputs_r+0xa>
 800896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800896c <_vfiprintf_r>:
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	460d      	mov	r5, r1
 8008972:	b09d      	sub	sp, #116	; 0x74
 8008974:	4614      	mov	r4, r2
 8008976:	4698      	mov	r8, r3
 8008978:	4606      	mov	r6, r0
 800897a:	b118      	cbz	r0, 8008984 <_vfiprintf_r+0x18>
 800897c:	6983      	ldr	r3, [r0, #24]
 800897e:	b90b      	cbnz	r3, 8008984 <_vfiprintf_r+0x18>
 8008980:	f000 fb14 	bl	8008fac <__sinit>
 8008984:	4b89      	ldr	r3, [pc, #548]	; (8008bac <_vfiprintf_r+0x240>)
 8008986:	429d      	cmp	r5, r3
 8008988:	d11b      	bne.n	80089c2 <_vfiprintf_r+0x56>
 800898a:	6875      	ldr	r5, [r6, #4]
 800898c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800898e:	07d9      	lsls	r1, r3, #31
 8008990:	d405      	bmi.n	800899e <_vfiprintf_r+0x32>
 8008992:	89ab      	ldrh	r3, [r5, #12]
 8008994:	059a      	lsls	r2, r3, #22
 8008996:	d402      	bmi.n	800899e <_vfiprintf_r+0x32>
 8008998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800899a:	f000 fba5 	bl	80090e8 <__retarget_lock_acquire_recursive>
 800899e:	89ab      	ldrh	r3, [r5, #12]
 80089a0:	071b      	lsls	r3, r3, #28
 80089a2:	d501      	bpl.n	80089a8 <_vfiprintf_r+0x3c>
 80089a4:	692b      	ldr	r3, [r5, #16]
 80089a6:	b9eb      	cbnz	r3, 80089e4 <_vfiprintf_r+0x78>
 80089a8:	4629      	mov	r1, r5
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f96e 	bl	8008c8c <__swsetup_r>
 80089b0:	b1c0      	cbz	r0, 80089e4 <_vfiprintf_r+0x78>
 80089b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089b4:	07dc      	lsls	r4, r3, #31
 80089b6:	d50e      	bpl.n	80089d6 <_vfiprintf_r+0x6a>
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089bc:	b01d      	add	sp, #116	; 0x74
 80089be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c2:	4b7b      	ldr	r3, [pc, #492]	; (8008bb0 <_vfiprintf_r+0x244>)
 80089c4:	429d      	cmp	r5, r3
 80089c6:	d101      	bne.n	80089cc <_vfiprintf_r+0x60>
 80089c8:	68b5      	ldr	r5, [r6, #8]
 80089ca:	e7df      	b.n	800898c <_vfiprintf_r+0x20>
 80089cc:	4b79      	ldr	r3, [pc, #484]	; (8008bb4 <_vfiprintf_r+0x248>)
 80089ce:	429d      	cmp	r5, r3
 80089d0:	bf08      	it	eq
 80089d2:	68f5      	ldreq	r5, [r6, #12]
 80089d4:	e7da      	b.n	800898c <_vfiprintf_r+0x20>
 80089d6:	89ab      	ldrh	r3, [r5, #12]
 80089d8:	0598      	lsls	r0, r3, #22
 80089da:	d4ed      	bmi.n	80089b8 <_vfiprintf_r+0x4c>
 80089dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089de:	f000 fb84 	bl	80090ea <__retarget_lock_release_recursive>
 80089e2:	e7e9      	b.n	80089b8 <_vfiprintf_r+0x4c>
 80089e4:	2300      	movs	r3, #0
 80089e6:	9309      	str	r3, [sp, #36]	; 0x24
 80089e8:	2320      	movs	r3, #32
 80089ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80089f2:	2330      	movs	r3, #48	; 0x30
 80089f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bb8 <_vfiprintf_r+0x24c>
 80089f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089fc:	f04f 0901 	mov.w	r9, #1
 8008a00:	4623      	mov	r3, r4
 8008a02:	469a      	mov	sl, r3
 8008a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a08:	b10a      	cbz	r2, 8008a0e <_vfiprintf_r+0xa2>
 8008a0a:	2a25      	cmp	r2, #37	; 0x25
 8008a0c:	d1f9      	bne.n	8008a02 <_vfiprintf_r+0x96>
 8008a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a12:	d00b      	beq.n	8008a2c <_vfiprintf_r+0xc0>
 8008a14:	465b      	mov	r3, fp
 8008a16:	4622      	mov	r2, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff ff94 	bl	8008948 <__sfputs_r>
 8008a20:	3001      	adds	r0, #1
 8008a22:	f000 80aa 	beq.w	8008b7a <_vfiprintf_r+0x20e>
 8008a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a28:	445a      	add	r2, fp
 8008a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 80a2 	beq.w	8008b7a <_vfiprintf_r+0x20e>
 8008a36:	2300      	movs	r3, #0
 8008a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a40:	f10a 0a01 	add.w	sl, sl, #1
 8008a44:	9304      	str	r3, [sp, #16]
 8008a46:	9307      	str	r3, [sp, #28]
 8008a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a4e:	4654      	mov	r4, sl
 8008a50:	2205      	movs	r2, #5
 8008a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a56:	4858      	ldr	r0, [pc, #352]	; (8008bb8 <_vfiprintf_r+0x24c>)
 8008a58:	f7f7 fbca 	bl	80001f0 <memchr>
 8008a5c:	9a04      	ldr	r2, [sp, #16]
 8008a5e:	b9d8      	cbnz	r0, 8008a98 <_vfiprintf_r+0x12c>
 8008a60:	06d1      	lsls	r1, r2, #27
 8008a62:	bf44      	itt	mi
 8008a64:	2320      	movmi	r3, #32
 8008a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6a:	0713      	lsls	r3, r2, #28
 8008a6c:	bf44      	itt	mi
 8008a6e:	232b      	movmi	r3, #43	; 0x2b
 8008a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a74:	f89a 3000 	ldrb.w	r3, [sl]
 8008a78:	2b2a      	cmp	r3, #42	; 0x2a
 8008a7a:	d015      	beq.n	8008aa8 <_vfiprintf_r+0x13c>
 8008a7c:	9a07      	ldr	r2, [sp, #28]
 8008a7e:	4654      	mov	r4, sl
 8008a80:	2000      	movs	r0, #0
 8008a82:	f04f 0c0a 	mov.w	ip, #10
 8008a86:	4621      	mov	r1, r4
 8008a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a8c:	3b30      	subs	r3, #48	; 0x30
 8008a8e:	2b09      	cmp	r3, #9
 8008a90:	d94e      	bls.n	8008b30 <_vfiprintf_r+0x1c4>
 8008a92:	b1b0      	cbz	r0, 8008ac2 <_vfiprintf_r+0x156>
 8008a94:	9207      	str	r2, [sp, #28]
 8008a96:	e014      	b.n	8008ac2 <_vfiprintf_r+0x156>
 8008a98:	eba0 0308 	sub.w	r3, r0, r8
 8008a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	46a2      	mov	sl, r4
 8008aa6:	e7d2      	b.n	8008a4e <_vfiprintf_r+0xe2>
 8008aa8:	9b03      	ldr	r3, [sp, #12]
 8008aaa:	1d19      	adds	r1, r3, #4
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	9103      	str	r1, [sp, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	bfbb      	ittet	lt
 8008ab4:	425b      	neglt	r3, r3
 8008ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8008aba:	9307      	strge	r3, [sp, #28]
 8008abc:	9307      	strlt	r3, [sp, #28]
 8008abe:	bfb8      	it	lt
 8008ac0:	9204      	strlt	r2, [sp, #16]
 8008ac2:	7823      	ldrb	r3, [r4, #0]
 8008ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ac6:	d10c      	bne.n	8008ae2 <_vfiprintf_r+0x176>
 8008ac8:	7863      	ldrb	r3, [r4, #1]
 8008aca:	2b2a      	cmp	r3, #42	; 0x2a
 8008acc:	d135      	bne.n	8008b3a <_vfiprintf_r+0x1ce>
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	1d1a      	adds	r2, r3, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	9203      	str	r2, [sp, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfb8      	it	lt
 8008ada:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ade:	3402      	adds	r4, #2
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bc8 <_vfiprintf_r+0x25c>
 8008ae6:	7821      	ldrb	r1, [r4, #0]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	4650      	mov	r0, sl
 8008aec:	f7f7 fb80 	bl	80001f0 <memchr>
 8008af0:	b140      	cbz	r0, 8008b04 <_vfiprintf_r+0x198>
 8008af2:	2340      	movs	r3, #64	; 0x40
 8008af4:	eba0 000a 	sub.w	r0, r0, sl
 8008af8:	fa03 f000 	lsl.w	r0, r3, r0
 8008afc:	9b04      	ldr	r3, [sp, #16]
 8008afe:	4303      	orrs	r3, r0
 8008b00:	3401      	adds	r4, #1
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b08:	482c      	ldr	r0, [pc, #176]	; (8008bbc <_vfiprintf_r+0x250>)
 8008b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b0e:	2206      	movs	r2, #6
 8008b10:	f7f7 fb6e 	bl	80001f0 <memchr>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d03f      	beq.n	8008b98 <_vfiprintf_r+0x22c>
 8008b18:	4b29      	ldr	r3, [pc, #164]	; (8008bc0 <_vfiprintf_r+0x254>)
 8008b1a:	bb1b      	cbnz	r3, 8008b64 <_vfiprintf_r+0x1f8>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	3307      	adds	r3, #7
 8008b20:	f023 0307 	bic.w	r3, r3, #7
 8008b24:	3308      	adds	r3, #8
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2a:	443b      	add	r3, r7
 8008b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2e:	e767      	b.n	8008a00 <_vfiprintf_r+0x94>
 8008b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b34:	460c      	mov	r4, r1
 8008b36:	2001      	movs	r0, #1
 8008b38:	e7a5      	b.n	8008a86 <_vfiprintf_r+0x11a>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	3401      	adds	r4, #1
 8008b3e:	9305      	str	r3, [sp, #20]
 8008b40:	4619      	mov	r1, r3
 8008b42:	f04f 0c0a 	mov.w	ip, #10
 8008b46:	4620      	mov	r0, r4
 8008b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b4c:	3a30      	subs	r2, #48	; 0x30
 8008b4e:	2a09      	cmp	r2, #9
 8008b50:	d903      	bls.n	8008b5a <_vfiprintf_r+0x1ee>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0c5      	beq.n	8008ae2 <_vfiprintf_r+0x176>
 8008b56:	9105      	str	r1, [sp, #20]
 8008b58:	e7c3      	b.n	8008ae2 <_vfiprintf_r+0x176>
 8008b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b5e:	4604      	mov	r4, r0
 8008b60:	2301      	movs	r3, #1
 8008b62:	e7f0      	b.n	8008b46 <_vfiprintf_r+0x1da>
 8008b64:	ab03      	add	r3, sp, #12
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	462a      	mov	r2, r5
 8008b6a:	4b16      	ldr	r3, [pc, #88]	; (8008bc4 <_vfiprintf_r+0x258>)
 8008b6c:	a904      	add	r1, sp, #16
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7fd fdd6 	bl	8006720 <_printf_float>
 8008b74:	4607      	mov	r7, r0
 8008b76:	1c78      	adds	r0, r7, #1
 8008b78:	d1d6      	bne.n	8008b28 <_vfiprintf_r+0x1bc>
 8008b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b7c:	07d9      	lsls	r1, r3, #31
 8008b7e:	d405      	bmi.n	8008b8c <_vfiprintf_r+0x220>
 8008b80:	89ab      	ldrh	r3, [r5, #12]
 8008b82:	059a      	lsls	r2, r3, #22
 8008b84:	d402      	bmi.n	8008b8c <_vfiprintf_r+0x220>
 8008b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b88:	f000 faaf 	bl	80090ea <__retarget_lock_release_recursive>
 8008b8c:	89ab      	ldrh	r3, [r5, #12]
 8008b8e:	065b      	lsls	r3, r3, #25
 8008b90:	f53f af12 	bmi.w	80089b8 <_vfiprintf_r+0x4c>
 8008b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b96:	e711      	b.n	80089bc <_vfiprintf_r+0x50>
 8008b98:	ab03      	add	r3, sp, #12
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	462a      	mov	r2, r5
 8008b9e:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <_vfiprintf_r+0x258>)
 8008ba0:	a904      	add	r1, sp, #16
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7fe f860 	bl	8006c68 <_printf_i>
 8008ba8:	e7e4      	b.n	8008b74 <_vfiprintf_r+0x208>
 8008baa:	bf00      	nop
 8008bac:	0800978c 	.word	0x0800978c
 8008bb0:	080097ac 	.word	0x080097ac
 8008bb4:	0800976c 	.word	0x0800976c
 8008bb8:	08009614 	.word	0x08009614
 8008bbc:	0800961e 	.word	0x0800961e
 8008bc0:	08006721 	.word	0x08006721
 8008bc4:	08008949 	.word	0x08008949
 8008bc8:	0800961a 	.word	0x0800961a

08008bcc <__swbuf_r>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	460e      	mov	r6, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	b118      	cbz	r0, 8008bde <__swbuf_r+0x12>
 8008bd6:	6983      	ldr	r3, [r0, #24]
 8008bd8:	b90b      	cbnz	r3, 8008bde <__swbuf_r+0x12>
 8008bda:	f000 f9e7 	bl	8008fac <__sinit>
 8008bde:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <__swbuf_r+0x98>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d12b      	bne.n	8008c3c <__swbuf_r+0x70>
 8008be4:	686c      	ldr	r4, [r5, #4]
 8008be6:	69a3      	ldr	r3, [r4, #24]
 8008be8:	60a3      	str	r3, [r4, #8]
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	071a      	lsls	r2, r3, #28
 8008bee:	d52f      	bpl.n	8008c50 <__swbuf_r+0x84>
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	b36b      	cbz	r3, 8008c50 <__swbuf_r+0x84>
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	6820      	ldr	r0, [r4, #0]
 8008bf8:	1ac0      	subs	r0, r0, r3
 8008bfa:	6963      	ldr	r3, [r4, #20]
 8008bfc:	b2f6      	uxtb	r6, r6
 8008bfe:	4283      	cmp	r3, r0
 8008c00:	4637      	mov	r7, r6
 8008c02:	dc04      	bgt.n	8008c0e <__swbuf_r+0x42>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 f93c 	bl	8008e84 <_fflush_r>
 8008c0c:	bb30      	cbnz	r0, 8008c5c <__swbuf_r+0x90>
 8008c0e:	68a3      	ldr	r3, [r4, #8]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	60a3      	str	r3, [r4, #8]
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	701e      	strb	r6, [r3, #0]
 8008c1c:	6963      	ldr	r3, [r4, #20]
 8008c1e:	3001      	adds	r0, #1
 8008c20:	4283      	cmp	r3, r0
 8008c22:	d004      	beq.n	8008c2e <__swbuf_r+0x62>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	07db      	lsls	r3, r3, #31
 8008c28:	d506      	bpl.n	8008c38 <__swbuf_r+0x6c>
 8008c2a:	2e0a      	cmp	r6, #10
 8008c2c:	d104      	bne.n	8008c38 <__swbuf_r+0x6c>
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 f927 	bl	8008e84 <_fflush_r>
 8008c36:	b988      	cbnz	r0, 8008c5c <__swbuf_r+0x90>
 8008c38:	4638      	mov	r0, r7
 8008c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <__swbuf_r+0x9c>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	d101      	bne.n	8008c46 <__swbuf_r+0x7a>
 8008c42:	68ac      	ldr	r4, [r5, #8]
 8008c44:	e7cf      	b.n	8008be6 <__swbuf_r+0x1a>
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <__swbuf_r+0xa0>)
 8008c48:	429c      	cmp	r4, r3
 8008c4a:	bf08      	it	eq
 8008c4c:	68ec      	ldreq	r4, [r5, #12]
 8008c4e:	e7ca      	b.n	8008be6 <__swbuf_r+0x1a>
 8008c50:	4621      	mov	r1, r4
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f81a 	bl	8008c8c <__swsetup_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d0cb      	beq.n	8008bf4 <__swbuf_r+0x28>
 8008c5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c60:	e7ea      	b.n	8008c38 <__swbuf_r+0x6c>
 8008c62:	bf00      	nop
 8008c64:	0800978c 	.word	0x0800978c
 8008c68:	080097ac 	.word	0x080097ac
 8008c6c:	0800976c 	.word	0x0800976c

08008c70 <__ascii_wctomb>:
 8008c70:	b149      	cbz	r1, 8008c86 <__ascii_wctomb+0x16>
 8008c72:	2aff      	cmp	r2, #255	; 0xff
 8008c74:	bf85      	ittet	hi
 8008c76:	238a      	movhi	r3, #138	; 0x8a
 8008c78:	6003      	strhi	r3, [r0, #0]
 8008c7a:	700a      	strbls	r2, [r1, #0]
 8008c7c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008c80:	bf98      	it	ls
 8008c82:	2001      	movls	r0, #1
 8008c84:	4770      	bx	lr
 8008c86:	4608      	mov	r0, r1
 8008c88:	4770      	bx	lr
	...

08008c8c <__swsetup_r>:
 8008c8c:	4b32      	ldr	r3, [pc, #200]	; (8008d58 <__swsetup_r+0xcc>)
 8008c8e:	b570      	push	{r4, r5, r6, lr}
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	4606      	mov	r6, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	b125      	cbz	r5, 8008ca2 <__swsetup_r+0x16>
 8008c98:	69ab      	ldr	r3, [r5, #24]
 8008c9a:	b913      	cbnz	r3, 8008ca2 <__swsetup_r+0x16>
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 f985 	bl	8008fac <__sinit>
 8008ca2:	4b2e      	ldr	r3, [pc, #184]	; (8008d5c <__swsetup_r+0xd0>)
 8008ca4:	429c      	cmp	r4, r3
 8008ca6:	d10f      	bne.n	8008cc8 <__swsetup_r+0x3c>
 8008ca8:	686c      	ldr	r4, [r5, #4]
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cb0:	0719      	lsls	r1, r3, #28
 8008cb2:	d42c      	bmi.n	8008d0e <__swsetup_r+0x82>
 8008cb4:	06dd      	lsls	r5, r3, #27
 8008cb6:	d411      	bmi.n	8008cdc <__swsetup_r+0x50>
 8008cb8:	2309      	movs	r3, #9
 8008cba:	6033      	str	r3, [r6, #0]
 8008cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc6:	e03e      	b.n	8008d46 <__swsetup_r+0xba>
 8008cc8:	4b25      	ldr	r3, [pc, #148]	; (8008d60 <__swsetup_r+0xd4>)
 8008cca:	429c      	cmp	r4, r3
 8008ccc:	d101      	bne.n	8008cd2 <__swsetup_r+0x46>
 8008cce:	68ac      	ldr	r4, [r5, #8]
 8008cd0:	e7eb      	b.n	8008caa <__swsetup_r+0x1e>
 8008cd2:	4b24      	ldr	r3, [pc, #144]	; (8008d64 <__swsetup_r+0xd8>)
 8008cd4:	429c      	cmp	r4, r3
 8008cd6:	bf08      	it	eq
 8008cd8:	68ec      	ldreq	r4, [r5, #12]
 8008cda:	e7e6      	b.n	8008caa <__swsetup_r+0x1e>
 8008cdc:	0758      	lsls	r0, r3, #29
 8008cde:	d512      	bpl.n	8008d06 <__swsetup_r+0x7a>
 8008ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ce2:	b141      	cbz	r1, 8008cf6 <__swsetup_r+0x6a>
 8008ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ce8:	4299      	cmp	r1, r3
 8008cea:	d002      	beq.n	8008cf2 <__swsetup_r+0x66>
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff fb31 	bl	8008354 <_free_r>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cfc:	81a3      	strh	r3, [r4, #12]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6063      	str	r3, [r4, #4]
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f043 0308 	orr.w	r3, r3, #8
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	b94b      	cbnz	r3, 8008d26 <__swsetup_r+0x9a>
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d1c:	d003      	beq.n	8008d26 <__swsetup_r+0x9a>
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4630      	mov	r0, r6
 8008d22:	f000 fa09 	bl	8009138 <__smakebuf_r>
 8008d26:	89a0      	ldrh	r0, [r4, #12]
 8008d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d2c:	f010 0301 	ands.w	r3, r0, #1
 8008d30:	d00a      	beq.n	8008d48 <__swsetup_r+0xbc>
 8008d32:	2300      	movs	r3, #0
 8008d34:	60a3      	str	r3, [r4, #8]
 8008d36:	6963      	ldr	r3, [r4, #20]
 8008d38:	425b      	negs	r3, r3
 8008d3a:	61a3      	str	r3, [r4, #24]
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	b943      	cbnz	r3, 8008d52 <__swsetup_r+0xc6>
 8008d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d44:	d1ba      	bne.n	8008cbc <__swsetup_r+0x30>
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	0781      	lsls	r1, r0, #30
 8008d4a:	bf58      	it	pl
 8008d4c:	6963      	ldrpl	r3, [r4, #20]
 8008d4e:	60a3      	str	r3, [r4, #8]
 8008d50:	e7f4      	b.n	8008d3c <__swsetup_r+0xb0>
 8008d52:	2000      	movs	r0, #0
 8008d54:	e7f7      	b.n	8008d46 <__swsetup_r+0xba>
 8008d56:	bf00      	nop
 8008d58:	2000000c 	.word	0x2000000c
 8008d5c:	0800978c 	.word	0x0800978c
 8008d60:	080097ac 	.word	0x080097ac
 8008d64:	0800976c 	.word	0x0800976c

08008d68 <abort>:
 8008d68:	b508      	push	{r3, lr}
 8008d6a:	2006      	movs	r0, #6
 8008d6c:	f000 fa54 	bl	8009218 <raise>
 8008d70:	2001      	movs	r0, #1
 8008d72:	f7f9 fe69 	bl	8002a48 <_exit>
	...

08008d78 <__sflush_r>:
 8008d78:	898a      	ldrh	r2, [r1, #12]
 8008d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7e:	4605      	mov	r5, r0
 8008d80:	0710      	lsls	r0, r2, #28
 8008d82:	460c      	mov	r4, r1
 8008d84:	d458      	bmi.n	8008e38 <__sflush_r+0xc0>
 8008d86:	684b      	ldr	r3, [r1, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dc05      	bgt.n	8008d98 <__sflush_r+0x20>
 8008d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dc02      	bgt.n	8008d98 <__sflush_r+0x20>
 8008d92:	2000      	movs	r0, #0
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9a:	2e00      	cmp	r6, #0
 8008d9c:	d0f9      	beq.n	8008d92 <__sflush_r+0x1a>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008da4:	682f      	ldr	r7, [r5, #0]
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	d032      	beq.n	8008e10 <__sflush_r+0x98>
 8008daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	075a      	lsls	r2, r3, #29
 8008db0:	d505      	bpl.n	8008dbe <__sflush_r+0x46>
 8008db2:	6863      	ldr	r3, [r4, #4]
 8008db4:	1ac0      	subs	r0, r0, r3
 8008db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008db8:	b10b      	cbz	r3, 8008dbe <__sflush_r+0x46>
 8008dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dbc:	1ac0      	subs	r0, r0, r3
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dc4:	6a21      	ldr	r1, [r4, #32]
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	47b0      	blx	r6
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	d106      	bne.n	8008dde <__sflush_r+0x66>
 8008dd0:	6829      	ldr	r1, [r5, #0]
 8008dd2:	291d      	cmp	r1, #29
 8008dd4:	d82c      	bhi.n	8008e30 <__sflush_r+0xb8>
 8008dd6:	4a2a      	ldr	r2, [pc, #168]	; (8008e80 <__sflush_r+0x108>)
 8008dd8:	40ca      	lsrs	r2, r1
 8008dda:	07d6      	lsls	r6, r2, #31
 8008ddc:	d528      	bpl.n	8008e30 <__sflush_r+0xb8>
 8008dde:	2200      	movs	r2, #0
 8008de0:	6062      	str	r2, [r4, #4]
 8008de2:	04d9      	lsls	r1, r3, #19
 8008de4:	6922      	ldr	r2, [r4, #16]
 8008de6:	6022      	str	r2, [r4, #0]
 8008de8:	d504      	bpl.n	8008df4 <__sflush_r+0x7c>
 8008dea:	1c42      	adds	r2, r0, #1
 8008dec:	d101      	bne.n	8008df2 <__sflush_r+0x7a>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b903      	cbnz	r3, 8008df4 <__sflush_r+0x7c>
 8008df2:	6560      	str	r0, [r4, #84]	; 0x54
 8008df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008df6:	602f      	str	r7, [r5, #0]
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	d0ca      	beq.n	8008d92 <__sflush_r+0x1a>
 8008dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e00:	4299      	cmp	r1, r3
 8008e02:	d002      	beq.n	8008e0a <__sflush_r+0x92>
 8008e04:	4628      	mov	r0, r5
 8008e06:	f7ff faa5 	bl	8008354 <_free_r>
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008e0e:	e7c1      	b.n	8008d94 <__sflush_r+0x1c>
 8008e10:	6a21      	ldr	r1, [r4, #32]
 8008e12:	2301      	movs	r3, #1
 8008e14:	4628      	mov	r0, r5
 8008e16:	47b0      	blx	r6
 8008e18:	1c41      	adds	r1, r0, #1
 8008e1a:	d1c7      	bne.n	8008dac <__sflush_r+0x34>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0c4      	beq.n	8008dac <__sflush_r+0x34>
 8008e22:	2b1d      	cmp	r3, #29
 8008e24:	d001      	beq.n	8008e2a <__sflush_r+0xb2>
 8008e26:	2b16      	cmp	r3, #22
 8008e28:	d101      	bne.n	8008e2e <__sflush_r+0xb6>
 8008e2a:	602f      	str	r7, [r5, #0]
 8008e2c:	e7b1      	b.n	8008d92 <__sflush_r+0x1a>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	e7ad      	b.n	8008d94 <__sflush_r+0x1c>
 8008e38:	690f      	ldr	r7, [r1, #16]
 8008e3a:	2f00      	cmp	r7, #0
 8008e3c:	d0a9      	beq.n	8008d92 <__sflush_r+0x1a>
 8008e3e:	0793      	lsls	r3, r2, #30
 8008e40:	680e      	ldr	r6, [r1, #0]
 8008e42:	bf08      	it	eq
 8008e44:	694b      	ldreq	r3, [r1, #20]
 8008e46:	600f      	str	r7, [r1, #0]
 8008e48:	bf18      	it	ne
 8008e4a:	2300      	movne	r3, #0
 8008e4c:	eba6 0807 	sub.w	r8, r6, r7
 8008e50:	608b      	str	r3, [r1, #8]
 8008e52:	f1b8 0f00 	cmp.w	r8, #0
 8008e56:	dd9c      	ble.n	8008d92 <__sflush_r+0x1a>
 8008e58:	6a21      	ldr	r1, [r4, #32]
 8008e5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e5c:	4643      	mov	r3, r8
 8008e5e:	463a      	mov	r2, r7
 8008e60:	4628      	mov	r0, r5
 8008e62:	47b0      	blx	r6
 8008e64:	2800      	cmp	r0, #0
 8008e66:	dc06      	bgt.n	8008e76 <__sflush_r+0xfe>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e6e:	81a3      	strh	r3, [r4, #12]
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e74:	e78e      	b.n	8008d94 <__sflush_r+0x1c>
 8008e76:	4407      	add	r7, r0
 8008e78:	eba8 0800 	sub.w	r8, r8, r0
 8008e7c:	e7e9      	b.n	8008e52 <__sflush_r+0xda>
 8008e7e:	bf00      	nop
 8008e80:	20400001 	.word	0x20400001

08008e84 <_fflush_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	690b      	ldr	r3, [r1, #16]
 8008e88:	4605      	mov	r5, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	b913      	cbnz	r3, 8008e94 <_fflush_r+0x10>
 8008e8e:	2500      	movs	r5, #0
 8008e90:	4628      	mov	r0, r5
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	b118      	cbz	r0, 8008e9e <_fflush_r+0x1a>
 8008e96:	6983      	ldr	r3, [r0, #24]
 8008e98:	b90b      	cbnz	r3, 8008e9e <_fflush_r+0x1a>
 8008e9a:	f000 f887 	bl	8008fac <__sinit>
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <_fflush_r+0x6c>)
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	d11b      	bne.n	8008edc <_fflush_r+0x58>
 8008ea4:	686c      	ldr	r4, [r5, #4]
 8008ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0ef      	beq.n	8008e8e <_fflush_r+0xa>
 8008eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008eb0:	07d0      	lsls	r0, r2, #31
 8008eb2:	d404      	bmi.n	8008ebe <_fflush_r+0x3a>
 8008eb4:	0599      	lsls	r1, r3, #22
 8008eb6:	d402      	bmi.n	8008ebe <_fflush_r+0x3a>
 8008eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eba:	f000 f915 	bl	80090e8 <__retarget_lock_acquire_recursive>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	f7ff ff59 	bl	8008d78 <__sflush_r>
 8008ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec8:	07da      	lsls	r2, r3, #31
 8008eca:	4605      	mov	r5, r0
 8008ecc:	d4e0      	bmi.n	8008e90 <_fflush_r+0xc>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	059b      	lsls	r3, r3, #22
 8008ed2:	d4dd      	bmi.n	8008e90 <_fflush_r+0xc>
 8008ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ed6:	f000 f908 	bl	80090ea <__retarget_lock_release_recursive>
 8008eda:	e7d9      	b.n	8008e90 <_fflush_r+0xc>
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <_fflush_r+0x70>)
 8008ede:	429c      	cmp	r4, r3
 8008ee0:	d101      	bne.n	8008ee6 <_fflush_r+0x62>
 8008ee2:	68ac      	ldr	r4, [r5, #8]
 8008ee4:	e7df      	b.n	8008ea6 <_fflush_r+0x22>
 8008ee6:	4b04      	ldr	r3, [pc, #16]	; (8008ef8 <_fflush_r+0x74>)
 8008ee8:	429c      	cmp	r4, r3
 8008eea:	bf08      	it	eq
 8008eec:	68ec      	ldreq	r4, [r5, #12]
 8008eee:	e7da      	b.n	8008ea6 <_fflush_r+0x22>
 8008ef0:	0800978c 	.word	0x0800978c
 8008ef4:	080097ac 	.word	0x080097ac
 8008ef8:	0800976c 	.word	0x0800976c

08008efc <std>:
 8008efc:	2300      	movs	r3, #0
 8008efe:	b510      	push	{r4, lr}
 8008f00:	4604      	mov	r4, r0
 8008f02:	e9c0 3300 	strd	r3, r3, [r0]
 8008f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f0a:	6083      	str	r3, [r0, #8]
 8008f0c:	8181      	strh	r1, [r0, #12]
 8008f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8008f10:	81c2      	strh	r2, [r0, #14]
 8008f12:	6183      	str	r3, [r0, #24]
 8008f14:	4619      	mov	r1, r3
 8008f16:	2208      	movs	r2, #8
 8008f18:	305c      	adds	r0, #92	; 0x5c
 8008f1a:	f7fd fb59 	bl	80065d0 <memset>
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <std+0x38>)
 8008f20:	6263      	str	r3, [r4, #36]	; 0x24
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <std+0x3c>)
 8008f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <std+0x40>)
 8008f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <std+0x44>)
 8008f2c:	6224      	str	r4, [r4, #32]
 8008f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	bf00      	nop
 8008f34:	08009251 	.word	0x08009251
 8008f38:	08009273 	.word	0x08009273
 8008f3c:	080092ab 	.word	0x080092ab
 8008f40:	080092cf 	.word	0x080092cf

08008f44 <_cleanup_r>:
 8008f44:	4901      	ldr	r1, [pc, #4]	; (8008f4c <_cleanup_r+0x8>)
 8008f46:	f000 b8af 	b.w	80090a8 <_fwalk_reent>
 8008f4a:	bf00      	nop
 8008f4c:	08008e85 	.word	0x08008e85

08008f50 <__sfmoreglue>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	2268      	movs	r2, #104	; 0x68
 8008f54:	1e4d      	subs	r5, r1, #1
 8008f56:	4355      	muls	r5, r2
 8008f58:	460e      	mov	r6, r1
 8008f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f5e:	f7ff fa65 	bl	800842c <_malloc_r>
 8008f62:	4604      	mov	r4, r0
 8008f64:	b140      	cbz	r0, 8008f78 <__sfmoreglue+0x28>
 8008f66:	2100      	movs	r1, #0
 8008f68:	e9c0 1600 	strd	r1, r6, [r0]
 8008f6c:	300c      	adds	r0, #12
 8008f6e:	60a0      	str	r0, [r4, #8]
 8008f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f74:	f7fd fb2c 	bl	80065d0 <memset>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}

08008f7c <__sfp_lock_acquire>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sfp_lock_acquire+0x8>)
 8008f7e:	f000 b8b3 	b.w	80090e8 <__retarget_lock_acquire_recursive>
 8008f82:	bf00      	nop
 8008f84:	200003d5 	.word	0x200003d5

08008f88 <__sfp_lock_release>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sfp_lock_release+0x8>)
 8008f8a:	f000 b8ae 	b.w	80090ea <__retarget_lock_release_recursive>
 8008f8e:	bf00      	nop
 8008f90:	200003d5 	.word	0x200003d5

08008f94 <__sinit_lock_acquire>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__sinit_lock_acquire+0x8>)
 8008f96:	f000 b8a7 	b.w	80090e8 <__retarget_lock_acquire_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	200003d6 	.word	0x200003d6

08008fa0 <__sinit_lock_release>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__sinit_lock_release+0x8>)
 8008fa2:	f000 b8a2 	b.w	80090ea <__retarget_lock_release_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	200003d6 	.word	0x200003d6

08008fac <__sinit>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	4604      	mov	r4, r0
 8008fb0:	f7ff fff0 	bl	8008f94 <__sinit_lock_acquire>
 8008fb4:	69a3      	ldr	r3, [r4, #24]
 8008fb6:	b11b      	cbz	r3, 8008fc0 <__sinit+0x14>
 8008fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fbc:	f7ff bff0 	b.w	8008fa0 <__sinit_lock_release>
 8008fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8008fc6:	4b13      	ldr	r3, [pc, #76]	; (8009014 <__sinit+0x68>)
 8008fc8:	4a13      	ldr	r2, [pc, #76]	; (8009018 <__sinit+0x6c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	bf04      	itt	eq
 8008fd2:	2301      	moveq	r3, #1
 8008fd4:	61a3      	streq	r3, [r4, #24]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 f820 	bl	800901c <__sfp>
 8008fdc:	6060      	str	r0, [r4, #4]
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 f81c 	bl	800901c <__sfp>
 8008fe4:	60a0      	str	r0, [r4, #8]
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 f818 	bl	800901c <__sfp>
 8008fec:	2200      	movs	r2, #0
 8008fee:	60e0      	str	r0, [r4, #12]
 8008ff0:	2104      	movs	r1, #4
 8008ff2:	6860      	ldr	r0, [r4, #4]
 8008ff4:	f7ff ff82 	bl	8008efc <std>
 8008ff8:	68a0      	ldr	r0, [r4, #8]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	2109      	movs	r1, #9
 8008ffe:	f7ff ff7d 	bl	8008efc <std>
 8009002:	68e0      	ldr	r0, [r4, #12]
 8009004:	2202      	movs	r2, #2
 8009006:	2112      	movs	r1, #18
 8009008:	f7ff ff78 	bl	8008efc <std>
 800900c:	2301      	movs	r3, #1
 800900e:	61a3      	str	r3, [r4, #24]
 8009010:	e7d2      	b.n	8008fb8 <__sinit+0xc>
 8009012:	bf00      	nop
 8009014:	080093f4 	.word	0x080093f4
 8009018:	08008f45 	.word	0x08008f45

0800901c <__sfp>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	4607      	mov	r7, r0
 8009020:	f7ff ffac 	bl	8008f7c <__sfp_lock_acquire>
 8009024:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <__sfp+0x84>)
 8009026:	681e      	ldr	r6, [r3, #0]
 8009028:	69b3      	ldr	r3, [r6, #24]
 800902a:	b913      	cbnz	r3, 8009032 <__sfp+0x16>
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff ffbd 	bl	8008fac <__sinit>
 8009032:	3648      	adds	r6, #72	; 0x48
 8009034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009038:	3b01      	subs	r3, #1
 800903a:	d503      	bpl.n	8009044 <__sfp+0x28>
 800903c:	6833      	ldr	r3, [r6, #0]
 800903e:	b30b      	cbz	r3, 8009084 <__sfp+0x68>
 8009040:	6836      	ldr	r6, [r6, #0]
 8009042:	e7f7      	b.n	8009034 <__sfp+0x18>
 8009044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009048:	b9d5      	cbnz	r5, 8009080 <__sfp+0x64>
 800904a:	4b16      	ldr	r3, [pc, #88]	; (80090a4 <__sfp+0x88>)
 800904c:	60e3      	str	r3, [r4, #12]
 800904e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009052:	6665      	str	r5, [r4, #100]	; 0x64
 8009054:	f000 f847 	bl	80090e6 <__retarget_lock_init_recursive>
 8009058:	f7ff ff96 	bl	8008f88 <__sfp_lock_release>
 800905c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009064:	6025      	str	r5, [r4, #0]
 8009066:	61a5      	str	r5, [r4, #24]
 8009068:	2208      	movs	r2, #8
 800906a:	4629      	mov	r1, r5
 800906c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009070:	f7fd faae 	bl	80065d0 <memset>
 8009074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800907c:	4620      	mov	r0, r4
 800907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009080:	3468      	adds	r4, #104	; 0x68
 8009082:	e7d9      	b.n	8009038 <__sfp+0x1c>
 8009084:	2104      	movs	r1, #4
 8009086:	4638      	mov	r0, r7
 8009088:	f7ff ff62 	bl	8008f50 <__sfmoreglue>
 800908c:	4604      	mov	r4, r0
 800908e:	6030      	str	r0, [r6, #0]
 8009090:	2800      	cmp	r0, #0
 8009092:	d1d5      	bne.n	8009040 <__sfp+0x24>
 8009094:	f7ff ff78 	bl	8008f88 <__sfp_lock_release>
 8009098:	230c      	movs	r3, #12
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	e7ee      	b.n	800907c <__sfp+0x60>
 800909e:	bf00      	nop
 80090a0:	080093f4 	.word	0x080093f4
 80090a4:	ffff0001 	.word	0xffff0001

080090a8 <_fwalk_reent>:
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ac:	4606      	mov	r6, r0
 80090ae:	4688      	mov	r8, r1
 80090b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090b4:	2700      	movs	r7, #0
 80090b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090ba:	f1b9 0901 	subs.w	r9, r9, #1
 80090be:	d505      	bpl.n	80090cc <_fwalk_reent+0x24>
 80090c0:	6824      	ldr	r4, [r4, #0]
 80090c2:	2c00      	cmp	r4, #0
 80090c4:	d1f7      	bne.n	80090b6 <_fwalk_reent+0xe>
 80090c6:	4638      	mov	r0, r7
 80090c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090cc:	89ab      	ldrh	r3, [r5, #12]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d907      	bls.n	80090e2 <_fwalk_reent+0x3a>
 80090d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090d6:	3301      	adds	r3, #1
 80090d8:	d003      	beq.n	80090e2 <_fwalk_reent+0x3a>
 80090da:	4629      	mov	r1, r5
 80090dc:	4630      	mov	r0, r6
 80090de:	47c0      	blx	r8
 80090e0:	4307      	orrs	r7, r0
 80090e2:	3568      	adds	r5, #104	; 0x68
 80090e4:	e7e9      	b.n	80090ba <_fwalk_reent+0x12>

080090e6 <__retarget_lock_init_recursive>:
 80090e6:	4770      	bx	lr

080090e8 <__retarget_lock_acquire_recursive>:
 80090e8:	4770      	bx	lr

080090ea <__retarget_lock_release_recursive>:
 80090ea:	4770      	bx	lr

080090ec <__swhatbuf_r>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	460e      	mov	r6, r1
 80090f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f4:	2900      	cmp	r1, #0
 80090f6:	b096      	sub	sp, #88	; 0x58
 80090f8:	4614      	mov	r4, r2
 80090fa:	461d      	mov	r5, r3
 80090fc:	da08      	bge.n	8009110 <__swhatbuf_r+0x24>
 80090fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	602a      	str	r2, [r5, #0]
 8009106:	061a      	lsls	r2, r3, #24
 8009108:	d410      	bmi.n	800912c <__swhatbuf_r+0x40>
 800910a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800910e:	e00e      	b.n	800912e <__swhatbuf_r+0x42>
 8009110:	466a      	mov	r2, sp
 8009112:	f000 f903 	bl	800931c <_fstat_r>
 8009116:	2800      	cmp	r0, #0
 8009118:	dbf1      	blt.n	80090fe <__swhatbuf_r+0x12>
 800911a:	9a01      	ldr	r2, [sp, #4]
 800911c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009124:	425a      	negs	r2, r3
 8009126:	415a      	adcs	r2, r3
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	e7ee      	b.n	800910a <__swhatbuf_r+0x1e>
 800912c:	2340      	movs	r3, #64	; 0x40
 800912e:	2000      	movs	r0, #0
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	b016      	add	sp, #88	; 0x58
 8009134:	bd70      	pop	{r4, r5, r6, pc}
	...

08009138 <__smakebuf_r>:
 8009138:	898b      	ldrh	r3, [r1, #12]
 800913a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800913c:	079d      	lsls	r5, r3, #30
 800913e:	4606      	mov	r6, r0
 8009140:	460c      	mov	r4, r1
 8009142:	d507      	bpl.n	8009154 <__smakebuf_r+0x1c>
 8009144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	2301      	movs	r3, #1
 800914e:	6163      	str	r3, [r4, #20]
 8009150:	b002      	add	sp, #8
 8009152:	bd70      	pop	{r4, r5, r6, pc}
 8009154:	ab01      	add	r3, sp, #4
 8009156:	466a      	mov	r2, sp
 8009158:	f7ff ffc8 	bl	80090ec <__swhatbuf_r>
 800915c:	9900      	ldr	r1, [sp, #0]
 800915e:	4605      	mov	r5, r0
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff f963 	bl	800842c <_malloc_r>
 8009166:	b948      	cbnz	r0, 800917c <__smakebuf_r+0x44>
 8009168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800916c:	059a      	lsls	r2, r3, #22
 800916e:	d4ef      	bmi.n	8009150 <__smakebuf_r+0x18>
 8009170:	f023 0303 	bic.w	r3, r3, #3
 8009174:	f043 0302 	orr.w	r3, r3, #2
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	e7e3      	b.n	8009144 <__smakebuf_r+0xc>
 800917c:	4b0d      	ldr	r3, [pc, #52]	; (80091b4 <__smakebuf_r+0x7c>)
 800917e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	6020      	str	r0, [r4, #0]
 8009184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	9b00      	ldr	r3, [sp, #0]
 800918c:	6163      	str	r3, [r4, #20]
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	6120      	str	r0, [r4, #16]
 8009192:	b15b      	cbz	r3, 80091ac <__smakebuf_r+0x74>
 8009194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009198:	4630      	mov	r0, r6
 800919a:	f000 f8d1 	bl	8009340 <_isatty_r>
 800919e:	b128      	cbz	r0, 80091ac <__smakebuf_r+0x74>
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	f043 0301 	orr.w	r3, r3, #1
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	89a0      	ldrh	r0, [r4, #12]
 80091ae:	4305      	orrs	r5, r0
 80091b0:	81a5      	strh	r5, [r4, #12]
 80091b2:	e7cd      	b.n	8009150 <__smakebuf_r+0x18>
 80091b4:	08008f45 	.word	0x08008f45

080091b8 <_malloc_usable_size_r>:
 80091b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091bc:	1f18      	subs	r0, r3, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bfbc      	itt	lt
 80091c2:	580b      	ldrlt	r3, [r1, r0]
 80091c4:	18c0      	addlt	r0, r0, r3
 80091c6:	4770      	bx	lr

080091c8 <_raise_r>:
 80091c8:	291f      	cmp	r1, #31
 80091ca:	b538      	push	{r3, r4, r5, lr}
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	d904      	bls.n	80091dc <_raise_r+0x14>
 80091d2:	2316      	movs	r3, #22
 80091d4:	6003      	str	r3, [r0, #0]
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091de:	b112      	cbz	r2, 80091e6 <_raise_r+0x1e>
 80091e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091e4:	b94b      	cbnz	r3, 80091fa <_raise_r+0x32>
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f830 	bl	800924c <_getpid_r>
 80091ec:	462a      	mov	r2, r5
 80091ee:	4601      	mov	r1, r0
 80091f0:	4620      	mov	r0, r4
 80091f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f6:	f000 b817 	b.w	8009228 <_kill_r>
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d00a      	beq.n	8009214 <_raise_r+0x4c>
 80091fe:	1c59      	adds	r1, r3, #1
 8009200:	d103      	bne.n	800920a <_raise_r+0x42>
 8009202:	2316      	movs	r3, #22
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	2001      	movs	r0, #1
 8009208:	e7e7      	b.n	80091da <_raise_r+0x12>
 800920a:	2400      	movs	r4, #0
 800920c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009210:	4628      	mov	r0, r5
 8009212:	4798      	blx	r3
 8009214:	2000      	movs	r0, #0
 8009216:	e7e0      	b.n	80091da <_raise_r+0x12>

08009218 <raise>:
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <raise+0xc>)
 800921a:	4601      	mov	r1, r0
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	f7ff bfd3 	b.w	80091c8 <_raise_r>
 8009222:	bf00      	nop
 8009224:	2000000c 	.word	0x2000000c

08009228 <_kill_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	; (8009248 <_kill_r+0x20>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	4611      	mov	r1, r2
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f7f9 fbf7 	bl	8002a28 <_kill>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d102      	bne.n	8009244 <_kill_r+0x1c>
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b103      	cbz	r3, 8009244 <_kill_r+0x1c>
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	bd38      	pop	{r3, r4, r5, pc}
 8009246:	bf00      	nop
 8009248:	200003d0 	.word	0x200003d0

0800924c <_getpid_r>:
 800924c:	f7f9 bbe4 	b.w	8002a18 <_getpid>

08009250 <__sread>:
 8009250:	b510      	push	{r4, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	f000 f894 	bl	8009384 <_read_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	bfab      	itete	ge
 8009260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009262:	89a3      	ldrhlt	r3, [r4, #12]
 8009264:	181b      	addge	r3, r3, r0
 8009266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800926a:	bfac      	ite	ge
 800926c:	6563      	strge	r3, [r4, #84]	; 0x54
 800926e:	81a3      	strhlt	r3, [r4, #12]
 8009270:	bd10      	pop	{r4, pc}

08009272 <__swrite>:
 8009272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009276:	461f      	mov	r7, r3
 8009278:	898b      	ldrh	r3, [r1, #12]
 800927a:	05db      	lsls	r3, r3, #23
 800927c:	4605      	mov	r5, r0
 800927e:	460c      	mov	r4, r1
 8009280:	4616      	mov	r6, r2
 8009282:	d505      	bpl.n	8009290 <__swrite+0x1e>
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	2302      	movs	r3, #2
 800928a:	2200      	movs	r2, #0
 800928c:	f000 f868 	bl	8009360 <_lseek_r>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	4628      	mov	r0, r5
 80092a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a6:	f000 b817 	b.w	80092d8 <_write_r>

080092aa <__sseek>:
 80092aa:	b510      	push	{r4, lr}
 80092ac:	460c      	mov	r4, r1
 80092ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b2:	f000 f855 	bl	8009360 <_lseek_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	bf15      	itete	ne
 80092bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80092be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092c6:	81a3      	strheq	r3, [r4, #12]
 80092c8:	bf18      	it	ne
 80092ca:	81a3      	strhne	r3, [r4, #12]
 80092cc:	bd10      	pop	{r4, pc}

080092ce <__sclose>:
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f000 b813 	b.w	80092fc <_close_r>
	...

080092d8 <_write_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_write_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f9 fbd5 	bl	8002a96 <_write>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_write_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_write_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	200003d0 	.word	0x200003d0

080092fc <_close_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d06      	ldr	r5, [pc, #24]	; (8009318 <_close_r+0x1c>)
 8009300:	2300      	movs	r3, #0
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	f7f9 fbe1 	bl	8002ace <_close>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_close_r+0x1a>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_close_r+0x1a>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	200003d0 	.word	0x200003d0

0800931c <_fstat_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d07      	ldr	r5, [pc, #28]	; (800933c <_fstat_r+0x20>)
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	f7f9 fbdc 	bl	8002ae6 <_fstat>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	d102      	bne.n	8009338 <_fstat_r+0x1c>
 8009332:	682b      	ldr	r3, [r5, #0]
 8009334:	b103      	cbz	r3, 8009338 <_fstat_r+0x1c>
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	bd38      	pop	{r3, r4, r5, pc}
 800933a:	bf00      	nop
 800933c:	200003d0 	.word	0x200003d0

08009340 <_isatty_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d06      	ldr	r5, [pc, #24]	; (800935c <_isatty_r+0x1c>)
 8009344:	2300      	movs	r3, #0
 8009346:	4604      	mov	r4, r0
 8009348:	4608      	mov	r0, r1
 800934a:	602b      	str	r3, [r5, #0]
 800934c:	f7f9 fbdb 	bl	8002b06 <_isatty>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d102      	bne.n	800935a <_isatty_r+0x1a>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	b103      	cbz	r3, 800935a <_isatty_r+0x1a>
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	200003d0 	.word	0x200003d0

08009360 <_lseek_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d07      	ldr	r5, [pc, #28]	; (8009380 <_lseek_r+0x20>)
 8009364:	4604      	mov	r4, r0
 8009366:	4608      	mov	r0, r1
 8009368:	4611      	mov	r1, r2
 800936a:	2200      	movs	r2, #0
 800936c:	602a      	str	r2, [r5, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	f7f9 fbd4 	bl	8002b1c <_lseek>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_lseek_r+0x1e>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_lseek_r+0x1e>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	200003d0 	.word	0x200003d0

08009384 <_read_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4d07      	ldr	r5, [pc, #28]	; (80093a4 <_read_r+0x20>)
 8009388:	4604      	mov	r4, r0
 800938a:	4608      	mov	r0, r1
 800938c:	4611      	mov	r1, r2
 800938e:	2200      	movs	r2, #0
 8009390:	602a      	str	r2, [r5, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	f7f9 fb62 	bl	8002a5c <_read>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_read_r+0x1e>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_read_r+0x1e>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	200003d0 	.word	0x200003d0

080093a8 <_init>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	bf00      	nop
 80093ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ae:	bc08      	pop	{r3}
 80093b0:	469e      	mov	lr, r3
 80093b2:	4770      	bx	lr

080093b4 <_fini>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	bf00      	nop
 80093b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ba:	bc08      	pop	{r3}
 80093bc:	469e      	mov	lr, r3
 80093be:	4770      	bx	lr
