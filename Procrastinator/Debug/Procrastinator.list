
Procrastinator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800ea60  0800ea60  0001ea60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee74  0800ee74  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee74  0800ee74  0001ee74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee7c  0800ee7c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee7c  0800ee7c  0001ee7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee80  0800ee80  0001ee80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ee84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  200001fc  0800f080  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  0800f080  00020b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbc4  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000484c  00000000  00000000  0003cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00041640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  00042bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baf7  00000000  00000000  00043f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea3a  00000000  00000000  0005fa47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929d7  00000000  00000000  0007e481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a00  00000000  00000000  00110ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea48 	.word	0x0800ea48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800ea48 	.word	0x0800ea48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2319      	movs	r3, #25
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	463b      	mov	r3, r7
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2288      	movs	r2, #136	; 0x88
 8001014:	21ec      	movs	r1, #236	; 0xec
 8001016:	4857      	ldr	r0, [pc, #348]	; (8001174 <TrimRead+0x178>)
 8001018:	f004 f96e 	bl	80052f8 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 800101c:	463b      	mov	r3, r7
 800101e:	3319      	adds	r3, #25
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	9202      	str	r2, [sp, #8]
 8001026:	2207      	movs	r2, #7
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	22e1      	movs	r2, #225	; 0xe1
 8001030:	21ec      	movs	r1, #236	; 0xec
 8001032:	4850      	ldr	r0, [pc, #320]	; (8001174 <TrimRead+0x178>)
 8001034:	f004 f960 	bl	80052f8 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	783b      	ldrb	r3, [r7, #0]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <TrimRead+0x17c>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b48      	ldr	r3, [pc, #288]	; (800117c <TrimRead+0x180>)
 800105c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <TrimRead+0x184>)
 800106e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b40      	ldr	r3, [pc, #256]	; (8001184 <TrimRead+0x188>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001084:	7a7b      	ldrb	r3, [r7, #9]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <TrimRead+0x18c>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <TrimRead+0x190>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <TrimRead+0x194>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <TrimRead+0x198>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7c3b      	ldrb	r3, [r7, #16]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <TrimRead+0x19c>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010de:	7cfb      	ldrb	r3, [r7, #19]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7cbb      	ldrb	r3, [r7, #18]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <TrimRead+0x1a0>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	7d3b      	ldrb	r3, [r7, #20]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <TrimRead+0x1a4>)
 8001100:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <TrimRead+0x1a8>)
 8001112:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001114:	7e3b      	ldrb	r3, [r7, #24]
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <TrimRead+0x1ac>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 800111c:	7ebb      	ldrb	r3, [r7, #26]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7e7b      	ldrb	r3, [r7, #25]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <TrimRead+0x1b0>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800112e:	7efb      	ldrb	r3, [r7, #27]
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <TrimRead+0x1b4>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001136:	7f3b      	ldrb	r3, [r7, #28]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b21a      	sxth	r2, r3
 800113c:	7f7b      	ldrb	r3, [r7, #29]
 800113e:	b21b      	sxth	r3, r3
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <TrimRead+0x1b8>)
 800114c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800114e:	7fbb      	ldrb	r3, [r7, #30]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	b21a      	sxth	r2, r3
 8001154:	7f7b      	ldrb	r3, [r7, #29]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <TrimRead+0x1bc>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <TrimRead+0x1c0>)
 800116a:	801a      	strh	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000250 	.word	0x20000250
 8001178:	20000228 	.word	0x20000228
 800117c:	20000230 	.word	0x20000230
 8001180:	20000232 	.word	0x20000232
 8001184:	2000022a 	.word	0x2000022a
 8001188:	20000234 	.word	0x20000234
 800118c:	20000236 	.word	0x20000236
 8001190:	20000238 	.word	0x20000238
 8001194:	2000023a 	.word	0x2000023a
 8001198:	2000023c 	.word	0x2000023c
 800119c:	2000023e 	.word	0x2000023e
 80011a0:	20000240 	.word	0x20000240
 80011a4:	20000242 	.word	0x20000242
 80011a8:	2000022c 	.word	0x2000022c
 80011ac:	20000244 	.word	0x20000244
 80011b0:	2000022e 	.word	0x2000022e
 80011b4:	20000246 	.word	0x20000246
 80011b8:	20000248 	.word	0x20000248
 80011bc:	2000024a 	.word	0x2000024a

080011c0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4603      	mov	r3, r0
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	460b      	mov	r3, r1
 80011d8:	717b      	strb	r3, [r7, #5]
 80011da:	4613      	mov	r3, r2
 80011dc:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011de:	f7ff ff0d 	bl	8000ffc <TrimRead>


	uint8_t datatowrite = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011ea:	23b6      	movs	r3, #182	; 0xb6
 80011ec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	22e0      	movs	r2, #224	; 0xe0
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	4858      	ldr	r0, [pc, #352]	; (8001368 <BME280_Config+0x1a8>)
 8001206:	f003 ff7d 	bl	8005104 <HAL_I2C_Mem_Write>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <BME280_Config+0x56>
	{
		return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001214:	e0a3      	b.n	800135e <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f001 ff52 	bl	80030c0 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f107 030f 	add.w	r3, r7, #15
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	22f2      	movs	r2, #242	; 0xf2
 8001234:	21ec      	movs	r1, #236	; 0xec
 8001236:	484c      	ldr	r0, [pc, #304]	; (8001368 <BME280_Config+0x1a8>)
 8001238:	f003 ff64 	bl	8005104 <HAL_I2C_Mem_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <BME280_Config+0x88>
	{
		return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	e08a      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001248:	2064      	movs	r0, #100	; 0x64
 800124a:	f001 ff39 	bl	80030c0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030e 	add.w	r3, r7, #14
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	22f2      	movs	r2, #242	; 0xf2
 8001262:	21ec      	movs	r1, #236	; 0xec
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <BME280_Config+0x1a8>)
 8001266:	f004 f847 	bl	80052f8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800126a:	7bba      	ldrb	r2, [r7, #14]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	429a      	cmp	r2, r3
 8001270:	d002      	beq.n	8001278 <BME280_Config+0xb8>
	{
		return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001276:	e072      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001278:	f897 3020 	ldrb.w	r3, [r7, #32]
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	b25a      	sxtb	r2, r3
 8001280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	22f5      	movs	r2, #245	; 0xf5
 80012a4:	21ec      	movs	r1, #236	; 0xec
 80012a6:	4830      	ldr	r0, [pc, #192]	; (8001368 <BME280_Config+0x1a8>)
 80012a8:	f003 ff2c 	bl	8005104 <HAL_I2C_Mem_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <BME280_Config+0xf8>
	{
		return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	e052      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f001 ff01 	bl	80030c0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f107 030e 	add.w	r3, r7, #14
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	22f5      	movs	r2, #245	; 0xf5
 80012d2:	21ec      	movs	r1, #236	; 0xec
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <BME280_Config+0x1a8>)
 80012d6:	f004 f80f 	bl	80052f8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012da:	7bba      	ldrb	r2, [r7, #14]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d002      	beq.n	80012e8 <BME280_Config+0x128>
	{
		return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e6:	e03a      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030f 	add.w	r3, r7, #15
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f4      	movs	r2, #244	; 0xf4
 8001318:	21ec      	movs	r1, #236	; 0xec
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <BME280_Config+0x1a8>)
 800131c:	f003 fef2 	bl	8005104 <HAL_I2C_Mem_Write>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <BME280_Config+0x16c>
	{
		return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	e018      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f001 fec7 	bl	80030c0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030e 	add.w	r3, r7, #14
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	22f4      	movs	r2, #244	; 0xf4
 8001346:	21ec      	movs	r1, #236	; 0xec
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <BME280_Config+0x1a8>)
 800134a:	f003 ffd5 	bl	80052f8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	429a      	cmp	r2, r3
 8001354:	d002      	beq.n	800135c <BME280_Config+0x19c>
	{
		return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135a:	e000      	b.n	800135e <BME280_Config+0x19e>
	}

	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000250 	.word	0x20000250

0800136c <BMEReadRaw>:


int BMEReadRaw(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2301      	movs	r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <BMEReadRaw+0x8c>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	22d0      	movs	r2, #208	; 0xd0
 8001384:	21ec      	movs	r1, #236	; 0xec
 8001386:	481d      	ldr	r0, [pc, #116]	; (80013fc <BMEReadRaw+0x90>)
 8001388:	f003 ffb6 	bl	80052f8 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <BMEReadRaw+0x8c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b60      	cmp	r3, #96	; 0x60
 8001392:	d12a      	bne.n	80013ea <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2308      	movs	r3, #8
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	463b      	mov	r3, r7
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	22f7      	movs	r2, #247	; 0xf7
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <BMEReadRaw+0x90>)
 80013aa:	f003 ffa5 	bl	80052f8 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013ae:	783b      	ldrb	r3, [r7, #0]
 80013b0:	031a      	lsls	r2, r3, #12
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4313      	orrs	r3, r2
 80013b8:	78ba      	ldrb	r2, [r7, #2]
 80013ba:	0912      	lsrs	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	4313      	orrs	r3, r2
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <BMEReadRaw+0x94>)
 80013c2:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	031a      	lsls	r2, r3, #12
 80013c8:	793b      	ldrb	r3, [r7, #4]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4313      	orrs	r3, r2
 80013ce:	797a      	ldrb	r2, [r7, #5]
 80013d0:	0912      	lsrs	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	4313      	orrs	r3, r2
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <BMEReadRaw+0x98>)
 80013d8:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <BMEReadRaw+0x9c>)
 80013e4:	6013      	str	r3, [r2, #0]

		return 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e001      	b.n	80013ee <BMEReadRaw+0x82>
	}

	else return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000218 	.word	0x20000218
 80013fc:	20000250 	.word	0x20000250
 8001400:	20000220 	.word	0x20000220
 8001404:	2000021c 	.word	0x2000021c
 8001408:	20000224 	.word	0x20000224

0800140c <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	10da      	asrs	r2, r3, #3
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <BME280_compensate_T_int32+0x78>)
 8001422:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	12db      	asrs	r3, r3, #11
 800142c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	111b      	asrs	r3, r3, #4
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <BME280_compensate_T_int32+0x74>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	1112      	asrs	r2, r2, #4
 800143c:	4910      	ldr	r1, [pc, #64]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	1a52      	subs	r2, r2, r1
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	131b      	asrs	r3, r3, #12
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <BME280_compensate_T_int32+0x7c>)
 800144a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	139b      	asrs	r3, r3, #14
 8001454:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4413      	add	r3, r2
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <BME280_compensate_T_int32+0x80>)
 800145e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <BME280_compensate_T_int32+0x80>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3380      	adds	r3, #128	; 0x80
 800146c:	121b      	asrs	r3, r3, #8
 800146e:	60fb      	str	r3, [r7, #12]
	return T;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	4618      	mov	r0, r3
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000228 	.word	0x20000228
 8001484:	20000230 	.word	0x20000230
 8001488:	20000232 	.word	0x20000232
 800148c:	2000024c 	.word	0x2000024c

08001490 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001494:	b0ca      	sub	sp, #296	; 0x128
 8001496:	af00      	add	r7, sp, #0
 8001498:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800149c:	4baf      	ldr	r3, [pc, #700]	; (800175c <BME280_compensate_P_int64+0x2cc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	17da      	asrs	r2, r3, #31
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014aa:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 80014ae:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ba:	fb03 f102 	mul.w	r1, r3, r2
 80014be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	18ca      	adds	r2, r1, r3
 80014cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d0:	fba3 8903 	umull	r8, r9, r3, r3
 80014d4:	eb02 0309 	add.w	r3, r2, r9
 80014d8:	4699      	mov	r9, r3
 80014da:	4ba1      	ldr	r3, [pc, #644]	; (8001760 <BME280_compensate_P_int64+0x2d0>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014f0:	4603      	mov	r3, r0
 80014f2:	fb03 f209 	mul.w	r2, r3, r9
 80014f6:	460b      	mov	r3, r1
 80014f8:	fb08 f303 	mul.w	r3, r8, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	4602      	mov	r2, r0
 8001500:	fba8 1202 	umull	r1, r2, r8, r2
 8001504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001508:	460a      	mov	r2, r1
 800150a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800150e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001512:	4413      	add	r3, r2
 8001514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001518:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800151c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001520:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001524:	4b8f      	ldr	r3, [pc, #572]	; (8001764 <BME280_compensate_P_int64+0x2d4>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	b21b      	sxth	r3, r3
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001532:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001536:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800153e:	462a      	mov	r2, r5
 8001540:	fb02 f203 	mul.w	r2, r2, r3
 8001544:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001548:	4621      	mov	r1, r4
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	441a      	add	r2, r3
 8001550:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001554:	4621      	mov	r1, r4
 8001556:	fba3 1301 	umull	r1, r3, r3, r1
 800155a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800155e:	460b      	mov	r3, r1
 8001560:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800157a:	462b      	mov	r3, r5
 800157c:	0459      	lsls	r1, r3, #17
 800157e:	4623      	mov	r3, r4
 8001580:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001584:	4623      	mov	r3, r4
 8001586:	0458      	lsls	r0, r3, #17
 8001588:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800158c:	1814      	adds	r4, r2, r0
 800158e:	643c      	str	r4, [r7, #64]	; 0x40
 8001590:	414b      	adcs	r3, r1
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
 8001594:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001598:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <BME280_compensate_P_int64+0x2d8>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	17da      	asrs	r2, r3, #31
 80015a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ba:	00d9      	lsls	r1, r3, #3
 80015bc:	2000      	movs	r0, #0
 80015be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015c2:	1814      	adds	r4, r2, r0
 80015c4:	63bc      	str	r4, [r7, #56]	; 0x38
 80015c6:	414b      	adcs	r3, r1
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ca:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015da:	fb03 f102 	mul.w	r1, r3, r2
 80015de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	18ca      	adds	r2, r1, r3
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f0:	fba3 1303 	umull	r1, r3, r3, r3
 80015f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015f8:	460b      	mov	r3, r1
 80015fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <BME280_compensate_P_int64+0x2dc>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b21b      	sxth	r3, r3
 8001610:	17da      	asrs	r2, r3, #31
 8001612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001616:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800161a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800161e:	462b      	mov	r3, r5
 8001620:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001624:	4642      	mov	r2, r8
 8001626:	fb02 f203 	mul.w	r2, r2, r3
 800162a:	464b      	mov	r3, r9
 800162c:	4621      	mov	r1, r4
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	4622      	mov	r2, r4
 8001636:	4641      	mov	r1, r8
 8001638:	fba2 1201 	umull	r1, r2, r2, r1
 800163c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001640:	460a      	mov	r2, r1
 8001642:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001646:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800164a:	4413      	add	r3, r2
 800164c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800165c:	4623      	mov	r3, r4
 800165e:	0a18      	lsrs	r0, r3, #8
 8001660:	462b      	mov	r3, r5
 8001662:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001666:	462b      	mov	r3, r5
 8001668:	1219      	asrs	r1, r3, #8
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <BME280_compensate_P_int64+0x2e0>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001678:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800167c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001680:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001684:	464a      	mov	r2, r9
 8001686:	fb02 f203 	mul.w	r2, r2, r3
 800168a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800168e:	4644      	mov	r4, r8
 8001690:	fb04 f303 	mul.w	r3, r4, r3
 8001694:	441a      	add	r2, r3
 8001696:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169a:	4644      	mov	r4, r8
 800169c:	fba3 4304 	umull	r4, r3, r3, r4
 80016a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016a4:	4623      	mov	r3, r4
 80016a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016c0:	464c      	mov	r4, r9
 80016c2:	0323      	lsls	r3, r4, #12
 80016c4:	4644      	mov	r4, r8
 80016c6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016ca:	4644      	mov	r4, r8
 80016cc:	0322      	lsls	r2, r4, #12
 80016ce:	1884      	adds	r4, r0, r2
 80016d0:	633c      	str	r4, [r7, #48]	; 0x30
 80016d2:	eb41 0303 	adc.w	r3, r1, r3
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
 80016d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016e4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016e8:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <BME280_compensate_P_int64+0x2e4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001700:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001704:	462b      	mov	r3, r5
 8001706:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800170a:	4642      	mov	r2, r8
 800170c:	fb02 f203 	mul.w	r2, r2, r3
 8001710:	464b      	mov	r3, r9
 8001712:	4621      	mov	r1, r4
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	4622      	mov	r2, r4
 800171c:	4641      	mov	r1, r8
 800171e:	fba2 1201 	umull	r1, r2, r2, r1
 8001722:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001726:	460a      	mov	r2, r1
 8001728:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800172c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001730:	4413      	add	r3, r2
 8001732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001742:	4629      	mov	r1, r5
 8001744:	104a      	asrs	r2, r1, #1
 8001746:	4629      	mov	r1, r5
 8001748:	17cb      	asrs	r3, r1, #31
 800174a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800174e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001752:	4313      	orrs	r3, r2
 8001754:	d110      	bne.n	8001778 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001756:	2300      	movs	r3, #0
 8001758:	e154      	b.n	8001a04 <BME280_compensate_P_int64+0x574>
 800175a:	bf00      	nop
 800175c:	2000024c 	.word	0x2000024c
 8001760:	2000023c 	.word	0x2000023c
 8001764:	2000023a 	.word	0x2000023a
 8001768:	20000238 	.word	0x20000238
 800176c:	20000236 	.word	0x20000236
 8001770:	20000234 	.word	0x20000234
 8001774:	2000022a 	.word	0x2000022a
	}
	p = 1048576-adc_P;
 8001778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800177c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
 8001784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001786:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800178a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800178e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001792:	105b      	asrs	r3, r3, #1
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001798:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800179c:	07db      	lsls	r3, r3, #31
 800179e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017aa:	4621      	mov	r1, r4
 80017ac:	1a89      	subs	r1, r1, r2
 80017ae:	67b9      	str	r1, [r7, #120]	; 0x78
 80017b0:	4629      	mov	r1, r5
 80017b2:	eb61 0303 	sbc.w	r3, r1, r3
 80017b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017b8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017bc:	4622      	mov	r2, r4
 80017be:	462b      	mov	r3, r5
 80017c0:	1891      	adds	r1, r2, r2
 80017c2:	6239      	str	r1, [r7, #32]
 80017c4:	415b      	adcs	r3, r3
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017cc:	4621      	mov	r1, r4
 80017ce:	1851      	adds	r1, r2, r1
 80017d0:	61b9      	str	r1, [r7, #24]
 80017d2:	4629      	mov	r1, r5
 80017d4:	414b      	adcs	r3, r1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017e4:	4649      	mov	r1, r9
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4641      	mov	r1, r8
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	1889      	adds	r1, r1, r2
 80017f6:	6139      	str	r1, [r7, #16]
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb43 0101 	adc.w	r1, r3, r1
 80017fe:	6179      	str	r1, [r7, #20]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800180c:	4649      	mov	r1, r9
 800180e:	008b      	lsls	r3, r1, #2
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001816:	4641      	mov	r1, r8
 8001818:	008a      	lsls	r2, r1, #2
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4603      	mov	r3, r0
 8001820:	4622      	mov	r2, r4
 8001822:	189b      	adds	r3, r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	460b      	mov	r3, r1
 8001828:	462a      	mov	r2, r5
 800182a:	eb42 0303 	adc.w	r3, r2, r3
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800183c:	4649      	mov	r1, r9
 800183e:	008b      	lsls	r3, r1, #2
 8001840:	4641      	mov	r1, r8
 8001842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001846:	4641      	mov	r1, r8
 8001848:	008a      	lsls	r2, r1, #2
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	4603      	mov	r3, r0
 8001850:	4622      	mov	r2, r4
 8001852:	189b      	adds	r3, r3, r2
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
 8001856:	462b      	mov	r3, r5
 8001858:	460a      	mov	r2, r1
 800185a:	eb42 0303 	adc.w	r3, r2, r3
 800185e:	677b      	str	r3, [r7, #116]	; 0x74
 8001860:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001864:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001868:	f7ff f9f6 	bl	8000c58 <__aeabi_ldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <BME280_compensate_P_int64+0x580>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	b21b      	sxth	r3, r3
 800187c:	17da      	asrs	r2, r3, #31
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001880:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001882:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0b50      	lsrs	r0, r2, #13
 8001890:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001894:	1359      	asrs	r1, r3, #13
 8001896:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800189a:	462b      	mov	r3, r5
 800189c:	fb00 f203 	mul.w	r2, r0, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	fb03 f301 	mul.w	r3, r3, r1
 80018a6:	4413      	add	r3, r2
 80018a8:	4622      	mov	r2, r4
 80018aa:	fba2 1200 	umull	r1, r2, r2, r0
 80018ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018b2:	460a      	mov	r2, r1
 80018b4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018bc:	4413      	add	r3, r2
 80018be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0b50      	lsrs	r0, r2, #13
 80018d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018d4:	1359      	asrs	r1, r3, #13
 80018d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018da:	462b      	mov	r3, r5
 80018dc:	fb00 f203 	mul.w	r2, r0, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	fb03 f301 	mul.w	r3, r3, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	fba2 1200 	umull	r1, r2, r2, r0
 80018ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018f2:	460a      	mov	r2, r1
 80018f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018fc:	4413      	add	r3, r2
 80018fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800190e:	4621      	mov	r1, r4
 8001910:	0e4a      	lsrs	r2, r1, #25
 8001912:	4629      	mov	r1, r5
 8001914:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001918:	4629      	mov	r1, r5
 800191a:	164b      	asrs	r3, r1, #25
 800191c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <BME280_compensate_P_int64+0x584>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	663b      	str	r3, [r7, #96]	; 0x60
 800192c:	667a      	str	r2, [r7, #100]	; 0x64
 800192e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001932:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001936:	462a      	mov	r2, r5
 8001938:	fb02 f203 	mul.w	r2, r2, r3
 800193c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001940:	4621      	mov	r1, r4
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800194c:	4621      	mov	r1, r4
 800194e:	fba2 1201 	umull	r1, r2, r2, r1
 8001952:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001956:	460a      	mov	r2, r1
 8001958:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800195c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001960:	4413      	add	r3, r2
 8001962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001972:	4621      	mov	r1, r4
 8001974:	0cca      	lsrs	r2, r1, #19
 8001976:	4629      	mov	r1, r5
 8001978:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800197c:	4629      	mov	r1, r5
 800197e:	14cb      	asrs	r3, r1, #19
 8001980:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001984:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001988:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800198c:	1884      	adds	r4, r0, r2
 800198e:	65bc      	str	r4, [r7, #88]	; 0x58
 8001990:	eb41 0303 	adc.w	r3, r1, r3
 8001994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001996:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800199a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800199e:	4621      	mov	r1, r4
 80019a0:	1889      	adds	r1, r1, r2
 80019a2:	6539      	str	r1, [r7, #80]	; 0x50
 80019a4:	4629      	mov	r1, r5
 80019a6:	eb43 0101 	adc.w	r1, r3, r1
 80019aa:	6579      	str	r1, [r7, #84]	; 0x54
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019b8:	4623      	mov	r3, r4
 80019ba:	0a18      	lsrs	r0, r3, #8
 80019bc:	462b      	mov	r3, r5
 80019be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019c2:	462b      	mov	r3, r5
 80019c4:	1219      	asrs	r1, r3, #8
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <BME280_compensate_P_int64+0x588>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019e0:	464c      	mov	r4, r9
 80019e2:	0123      	lsls	r3, r4, #4
 80019e4:	4644      	mov	r4, r8
 80019e6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019ea:	4644      	mov	r4, r8
 80019ec:	0122      	lsls	r2, r4, #4
 80019ee:	1884      	adds	r4, r0, r2
 80019f0:	603c      	str	r4, [r7, #0]
 80019f2:	eb41 0303 	adc.w	r3, r1, r3
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019fc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a10:	20000242 	.word	0x20000242
 8001a14:	20000240 	.word	0x20000240
 8001a18:	2000023e 	.word	0x2000023e

08001a1c <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <bme280_compensate_H_int32+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a2c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	039a      	lsls	r2, r3, #14
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <bme280_compensate_H_int32+0xc0>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <bme280_compensate_H_int32+0xc4>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	4619      	mov	r1, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a50:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a52:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <bme280_compensate_H_int32+0xc8>)
 8001a54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a58:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a60:	1292      	asrs	r2, r2, #10
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <bme280_compensate_H_int32+0xcc>)
 8001a64:	8809      	ldrh	r1, [r1, #0]
 8001a66:	4608      	mov	r0, r1
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	fb00 f101 	mul.w	r1, r0, r1
 8001a6e:	12c9      	asrs	r1, r1, #11
 8001a70:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a74:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a78:	1292      	asrs	r2, r2, #10
 8001a7a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a7e:	491b      	ldr	r1, [pc, #108]	; (8001aec <bme280_compensate_H_int32+0xd0>)
 8001a80:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a84:	fb01 f202 	mul.w	r2, r1, r2
 8001a88:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a8c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	13db      	asrs	r3, r3, #15
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	13d2      	asrs	r2, r2, #15
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <bme280_compensate_H_int32+0xd4>)
 8001aa4:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001aaa:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ab8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ac0:	bfa8      	it	ge
 8001ac2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001ac6:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	131b      	asrs	r3, r3, #12
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	2000024c 	.word	0x2000024c
 8001adc:	20000246 	.word	0x20000246
 8001ae0:	20000248 	.word	0x20000248
 8001ae4:	2000024a 	.word	0x2000024a
 8001ae8:	2000022e 	.word	0x2000022e
 8001aec:	20000244 	.word	0x20000244
 8001af0:	2000022c 	.word	0x2000022c

08001af4 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001af8:	f7ff fc38 	bl	800136c <BMEReadRaw>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d163      	bne.n	8001bca <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <BME280_Measure+0xf4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b0a:	d104      	bne.n	8001b16 <BME280_Measure+0x22>
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <BME280_Measure+0xf8>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e016      	b.n	8001b44 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <BME280_Measure+0xf4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc76 	bl	800140c <BME280_compensate_T_int32>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd06 	bl	8000534 <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <BME280_Measure+0xfc>)
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f83d 	bl	8000bb8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <BME280_Measure+0xf8>)
 8001b42:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <BME280_Measure+0x100>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b4c:	d104      	bne.n	8001b58 <BME280_Measure+0x64>
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <BME280_Measure+0x104>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e016      	b.n	8001b86 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <BME280_Measure+0x100>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc97 	bl	8001490 <BME280_compensate_P_int64>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcd5 	bl	8000514 <__aeabi_ui2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <BME280_Measure+0x108>)
 8001b70:	f7fe fe74 	bl	800085c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f81c 	bl	8000bb8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <BME280_Measure+0x104>)
 8001b84:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <BME280_Measure+0x10c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	d104      	bne.n	8001b9a <BME280_Measure+0xa6>
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <BME280_Measure+0x110>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001b98:	e023      	b.n	8001be2 <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <BME280_Measure+0x10c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff3c 	bl	8001a1c <bme280_compensate_H_int32>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcb4 	bl	8000514 <__aeabi_ui2d>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <BME280_Measure+0x114>)
 8001bb2:	f7fe fe53 	bl	800085c <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe fffb 	bl	8000bb8 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <BME280_Measure+0x110>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	e00b      	b.n	8001be2 <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <BME280_Measure+0x110>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <BME280_Measure+0x110>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <BME280_Measure+0x104>)
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <BME280_Measure+0x104>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <BME280_Measure+0xf8>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000021c 	.word	0x2000021c
 8001bec:	20000380 	.word	0x20000380
 8001bf0:	40590000 	.word	0x40590000
 8001bf4:	20000220 	.word	0x20000220
 8001bf8:	20000384 	.word	0x20000384
 8001bfc:	40700000 	.word	0x40700000
 8001c00:	20000224 	.word	0x20000224
 8001c04:	20000388 	.word	0x20000388
 8001c08:	40900000 	.word	0x40900000

08001c0c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001c0c:	b4b0      	push	{r4, r5, r7}
 8001c0e:	b08f      	sub	sp, #60	; 0x3c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001c14:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001c20:	2307      	movs	r3, #7
 8001c22:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001c2c:	23ff      	movs	r3, #255	; 0xff
 8001c2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001c32:	2364      	movs	r3, #100	; 0x64
 8001c34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	461d      	mov	r5, r3
 8001c40:	f107 040c 	add.w	r4, r7, #12
 8001c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	373c      	adds	r7, #60	; 0x3c
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bcb0      	pop	{r4, r5, r7}
 8001c5c:	4770      	bx	lr

08001c5e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6898      	ldr	r0, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	899b      	ldrh	r3, [r3, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	f001 fcdf 	bl	8003634 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f001 fa22 	bl	80030c0 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6898      	ldr	r0, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	899b      	ldrh	r3, [r3, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4619      	mov	r1, r3
 8001c88:	f001 fcd4 	bl	8003634 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c8c:	2064      	movs	r0, #100	; 0x64
 8001c8e:	f001 fa17 	bl	80030c0 <HAL_Delay>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f99f 	bl	8001fea <LoRa_read>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d107      	bne.n	8001cca <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001cba:	7bbb      	ldrb	r3, [r7, #14]
 8001cbc:	f023 0307 	bic.w	r3, r3, #7
 8001cc0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
 8001cc8:	e03e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10c      	bne.n	8001cea <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cd4:	f023 0307 	bic.w	r3, r3, #7
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	61da      	str	r2, [r3, #28]
 8001ce8:	e02e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d10c      	bne.n	8001d0a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cf4:	f023 0307 	bic.w	r3, r3, #7
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	f043 0303 	orr.w	r3, r3, #3
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	61da      	str	r2, [r3, #28]
 8001d08:	e01e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d14:	f023 0307 	bic.w	r3, r3, #7
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	f043 0305 	orr.w	r3, r3, #5
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	61da      	str	r2, [r3, #28]
 8001d28:	e00e      	b.n	8001d48 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d10b      	bne.n	8001d48 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d34:	f023 0307 	bic.w	r3, r3, #7
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f043 0306 	orr.w	r3, r3, #6
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2206      	movs	r2, #6
 8001d46:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f965 	bl	800201e <LoRa_write>
	//HAL_Delay(10);
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	f001 fc5c 	bl	8003634 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6998      	ldr	r0, [r3, #24]
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	f005 fc77 	bl	800767a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001d8c:	bf00      	nop
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 f860 	bl	8007e58 <HAL_SPI_GetState>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d1f7      	bne.n	8001d8e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6998      	ldr	r0, [r3, #24]
 8001da2:	8b3a      	ldrh	r2, [r7, #24]
 8001da4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	f005 fda2 	bl	80078f2 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001dae:	bf00      	nop
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f006 f84f 	bl	8007e58 <HAL_SPI_GetState>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d1f7      	bne.n	8001db0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	889b      	ldrh	r3, [r3, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f001 fc32 	bl	8003634 <HAL_GPIO_WritePin>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	f001 fc1e 	bl	8003634 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6998      	ldr	r0, [r3, #24]
 8001dfc:	88fa      	ldrh	r2, [r7, #6]
 8001dfe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	f005 fc39 	bl	800767a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e08:	bf00      	nop
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f006 f822 	bl	8007e58 <HAL_SPI_GetState>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d1f7      	bne.n	8001e0a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6998      	ldr	r0, [r3, #24]
 8001e1e:	8b3a      	ldrh	r2, [r7, #24]
 8001e20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	f005 fc28 	bl	800767a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e2a:	bf00      	nop
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f006 f811 	bl	8007e58 <HAL_SPI_GetState>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d1f7      	bne.n	8001e2c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	889b      	ldrh	r3, [r3, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	4619      	mov	r1, r3
 8001e48:	f001 fbf4 	bl	8003634 <HAL_GPIO_WritePin>
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	04db      	lsls	r3, r3, #19
 8001e62:	115b      	asrs	r3, r3, #5
 8001e64:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2106      	movs	r1, #6
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8d3 	bl	800201e <LoRa_write>
	HAL_Delay(5);
 8001e78:	2005      	movs	r0, #5
 8001e7a:	f001 f921 	bl	80030c0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	461a      	mov	r2, r3
 8001e88:	2107      	movs	r1, #7
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8c7 	bl	800201e <LoRa_write>
	HAL_Delay(5);
 8001e90:	2005      	movs	r0, #5
 8001e92:	f001 f915 	bl	80030c0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8bc 	bl	800201e <LoRa_write>
	HAL_Delay(5);
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f001 f90a 	bl	80030c0 <HAL_Delay>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	dd01      	ble.n	8001ec8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	dc01      	bgt.n	8001ed2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001ed2:	211e      	movs	r1, #30
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f888 	bl	8001fea <LoRa_read>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f001 f8ee 	bl	80030c0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	461a      	mov	r2, r3
 8001efc:	211e      	movs	r1, #30
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f88d 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001f04:	200a      	movs	r0, #10
 8001f06:	f001 f8db 	bl	80030c0 <HAL_Delay>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	461a      	mov	r2, r3
 8001f22:	2109      	movs	r1, #9
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f87a 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	f001 f8c8 	bl	80030c0 <HAL_Delay>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f4c:	d801      	bhi.n	8001f52 <LoRa_setOCP+0x1a>
		current = 45;
 8001f4e:	232d      	movs	r3, #45	; 0x2d
 8001f50:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	2bf0      	cmp	r3, #240	; 0xf0
 8001f56:	d901      	bls.n	8001f5c <LoRa_setOCP+0x24>
		current = 240;
 8001f58:	23f0      	movs	r3, #240	; 0xf0
 8001f5a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b78      	cmp	r3, #120	; 0x78
 8001f60:	d809      	bhi.n	8001f76 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	3b2d      	subs	r3, #45	; 0x2d
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <LoRa_setOCP+0x78>)
 8001f68:	fb82 1203 	smull	r1, r2, r2, r3
 8001f6c:	1052      	asrs	r2, r2, #1
 8001f6e:	17db      	asrs	r3, r3, #31
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e00b      	b.n	8001f8e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	2bf0      	cmp	r3, #240	; 0xf0
 8001f7a:	d808      	bhi.n	8001f8e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	331e      	adds	r3, #30
 8001f80:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoRa_setOCP+0x78>)
 8001f82:	fb82 1203 	smull	r1, r2, r2, r3
 8001f86:	1092      	asrs	r2, r2, #2
 8001f88:	17db      	asrs	r3, r3, #31
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	3320      	adds	r3, #32
 8001f92:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	461a      	mov	r2, r3
 8001f98:	210b      	movs	r1, #11
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f83f 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f001 f88d 	bl	80030c0 <HAL_Delay>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	66666667 	.word	0x66666667

08001fb4 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001fbc:	211e      	movs	r1, #30
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f813 	bl	8001fea <LoRa_read>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	f043 0307 	orr.w	r3, r3, #7
 8001fce:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	211e      	movs	r1, #30
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f821 	bl	800201e <LoRa_write>
	HAL_Delay(10);
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f001 f86f 	bl	80030c0 <HAL_Delay>
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af02      	add	r7, sp, #8
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002000:	f107 030f 	add.w	r3, r7, #15
 8002004:	f107 010e 	add.w	r1, r7, #14
 8002008:	2201      	movs	r2, #1
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fea4 	bl	8001d5c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af02      	add	r7, sp, #8
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
 800202a:	4613      	mov	r3, r2
 800202c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002034:	b2db      	uxtb	r3, r3
 8002036:	73bb      	strb	r3, [r7, #14]
	data = value;
 8002038:	78bb      	ldrb	r3, [r7, #2]
 800203a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800203c:	f107 030f 	add.w	r3, r7, #15
 8002040:	f107 010e 	add.w	r1, r7, #14
 8002044:	2201      	movs	r2, #1
 8002046:	9200      	str	r2, [sp, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fec4 	bl	8001dd8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	461a      	mov	r2, r3
 8002064:	460b      	mov	r3, r1
 8002066:	72fb      	strb	r3, [r7, #11]
 8002068:	4613      	mov	r3, r2
 800206a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002072:	b2db      	uxtb	r3, r3
 8002074:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	f001 fad7 	bl	8003634 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6998      	ldr	r0, [r3, #24]
 800208a:	f107 0117 	add.w	r1, r7, #23
 800208e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002092:	2201      	movs	r2, #1
 8002094:	f005 faf1 	bl	800767a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002098:	bf00      	nop
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	4618      	mov	r0, r3
 80020a0:	f005 feda 	bl	8007e58 <HAL_SPI_GetState>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d1f7      	bne.n	800209a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6998      	ldr	r0, [r3, #24]
 80020ae:	7abb      	ldrb	r3, [r7, #10]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f005 fadf 	bl	800767a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80020bc:	bf00      	nop
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 fec8 	bl	8007e58 <HAL_SPI_GetState>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d1f7      	bne.n	80020be <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4619      	mov	r1, r3
 80020da:	f001 faab 	bl	8003634 <HAL_GPIO_WritePin>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]

	return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	460b      	mov	r3, r1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	4613      	mov	r3, r2
 8002110:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002118:	2101      	movs	r1, #1
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fdbd 	bl	8001c9a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8002120:	210e      	movs	r1, #14
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7ff ff61 	bl	8001fea <LoRa_read>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	461a      	mov	r2, r3
 8002130:	210d      	movs	r1, #13
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff ff73 	bl	800201e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	461a      	mov	r2, r3
 800213c:	2122      	movs	r1, #34	; 0x22
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ff6d 	bl	800201e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	2100      	movs	r1, #0
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff ff84 	bl	8002058 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8002150:	2103      	movs	r1, #3
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fda1 	bl	8001c9a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002158:	2112      	movs	r1, #18
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff ff45 	bl	8001fea <LoRa_read>
 8002160:	4603      	mov	r3, r0
 8002162:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	2112      	movs	r1, #18
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff ff53 	bl	800201e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8002178:	6979      	ldr	r1, [r7, #20]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff fd8d 	bl	8001c9a <LoRa_gotoMode>
			return 1;
 8002180:	2301      	movs	r3, #1
 8002182:	e00f      	b.n	80021a4 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	80bb      	strh	r3, [r7, #4]
 800218a:	88bb      	ldrh	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8002190:	6979      	ldr	r1, [r7, #20]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff fd81 	bl	8001c9a <LoRa_gotoMode>
				return 0;
 8002198:	2300      	movs	r3, #0
 800219a:	e003      	b.n	80021a4 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f000 ff8f 	bl	80030c0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80021a2:	e7d9      	b.n	8002158 <LoRa_transmit+0x5c>
	}

}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff96 	bl	80020e6 <LoRa_isvalid>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8093 	beq.w	80022e8 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fd68 	bl	8001c9a <LoRa_gotoMode>
			HAL_Delay(10);
 80021ca:	200a      	movs	r0, #10
 80021cc:	f000 ff78 	bl	80030c0 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80021d0:	2101      	movs	r1, #1
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff09 	bl	8001fea <LoRa_read>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80021dc:	200a      	movs	r0, #10
 80021de:	f000 ff6f 	bl	80030c0 <HAL_Delay>
			data = read | 0x80;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021e8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	461a      	mov	r2, r3
 80021ee:	2101      	movs	r1, #1
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff14 	bl	800201e <LoRa_write>
			HAL_Delay(100);
 80021f6:	2064      	movs	r0, #100	; 0x64
 80021f8:	f000 ff62 	bl	80030c0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fe26 	bl	8001e54 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fe7e 	bl	8001f12 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fe8a 	bl	8001f38 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002224:	2223      	movs	r2, #35	; 0x23
 8002226:	210c      	movs	r1, #12
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fef8 	bl	800201e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fec0 	bl	8001fb4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fe39 	bl	8001eb4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	211f      	movs	r1, #31
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fee9 	bl	800201e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4413      	add	r3, r2
 8002266:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	461a      	mov	r2, r3
 800226c:	211d      	movs	r1, #29
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fed5 	bl	800201e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b29b      	uxth	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	2120      	movs	r1, #32
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fecb 	bl	800201e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	2121      	movs	r1, #33	; 0x21
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fec3 	bl	800201e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002298:	2140      	movs	r1, #64	; 0x40
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fea5 	bl	8001fea <LoRa_read>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80022aa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	461a      	mov	r2, r3
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff feb3 	bl	800201e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80022b8:	2101      	movs	r1, #1
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fced 	bl	8001c9a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80022c6:	200a      	movs	r0, #10
 80022c8:	f000 fefa 	bl	80030c0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80022cc:	2142      	movs	r1, #66	; 0x42
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe8b 	bl	8001fea <LoRa_read>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b12      	cmp	r3, #18
 80022dc:	d101      	bne.n	80022e2 <LoRa_init+0x136>
				return LORA_OK;
 80022de:	23c8      	movs	r3, #200	; 0xc8
 80022e0:	e004      	b.n	80022ec <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80022e2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80022e6:	e001      	b.n	80022ec <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80022e8:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a74      	ldr	r2, [pc, #464]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002314:	f043 0310 	orr.w	r3, r3, #16
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a6d      	ldr	r2, [pc, #436]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a66      	ldr	r2, [pc, #408]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 800234c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b64      	ldr	r3, [pc, #400]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b60      	ldr	r3, [pc, #384]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a5f      	ldr	r2, [pc, #380]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a51      	ldr	r2, [pc, #324]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b4f      	ldr	r3, [pc, #316]	; (80024e4 <MX_GPIO_Init+0x1f0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2108      	movs	r1, #8
 80023b6:	484c      	ldr	r0, [pc, #304]	; (80024e8 <MX_GPIO_Init+0x1f4>)
 80023b8:	f001 f93c 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	2101      	movs	r1, #1
 80023c0:	484a      	ldr	r0, [pc, #296]	; (80024ec <MX_GPIO_Init+0x1f8>)
 80023c2:	f001 f937 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2103      	movs	r1, #3
 80023ca:	4849      	ldr	r0, [pc, #292]	; (80024f0 <MX_GPIO_Init+0x1fc>)
 80023cc:	f001 f932 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_Pin|WHITE_Pin, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80023d6:	4846      	ldr	r0, [pc, #280]	; (80024f0 <MX_GPIO_Init+0x1fc>)
 80023d8:	f001 f92c 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023dc:	2200      	movs	r2, #0
 80023de:	f24f 0110 	movw	r1, #61456	; 0xf010
 80023e2:	4844      	ldr	r0, [pc, #272]	; (80024f4 <MX_GPIO_Init+0x200>)
 80023e4:	f001 f926 	bl	8003634 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80023e8:	2304      	movs	r3, #4
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	483b      	ldr	r0, [pc, #236]	; (80024e8 <MX_GPIO_Init+0x1f4>)
 80023fc:	f000 ff96 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002400:	2308      	movs	r3, #8
 8002402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2301      	movs	r3, #1
 8002406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	4834      	ldr	r0, [pc, #208]	; (80024e8 <MX_GPIO_Init+0x1f4>)
 8002418:	f000 ff88 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800241c:	2332      	movs	r3, #50	; 0x32
 800241e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002420:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	482d      	ldr	r0, [pc, #180]	; (80024e8 <MX_GPIO_Init+0x1f4>)
 8002432:	f000 ff7b 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002436:	2301      	movs	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	2301      	movs	r3, #1
 800243c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	4827      	ldr	r0, [pc, #156]	; (80024ec <MX_GPIO_Init+0x1f8>)
 800244e:	f000 ff6d 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002452:	2301      	movs	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002456:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800245a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4824      	ldr	r0, [pc, #144]	; (80024f8 <MX_GPIO_Init+0x204>)
 8002468:	f000 ff60 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|GREEN_Pin|WHITE_Pin;
 800246c:	f246 0303 	movw	r3, #24579	; 0x6003
 8002470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	481a      	ldr	r0, [pc, #104]	; (80024f0 <MX_GPIO_Init+0x1fc>)
 8002486:	f000 ff51 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800248a:	2304      	movs	r3, #4
 800248c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	4814      	ldr	r0, [pc, #80]	; (80024f0 <MX_GPIO_Init+0x1fc>)
 80024a0:	f000 ff44 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80024a4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80024a8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	480d      	ldr	r0, [pc, #52]	; (80024f4 <MX_GPIO_Init+0x200>)
 80024be:	f000 ff35 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024c2:	2320      	movs	r3, #32
 80024c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	4619      	mov	r1, r3
 80024d4:	4807      	ldr	r0, [pc, #28]	; (80024f4 <MX_GPIO_Init+0x200>)
 80024d6:	f000 ff29 	bl	800332c <HAL_GPIO_Init>

}
 80024da:	bf00      	nop
 80024dc:	3730      	adds	r7, #48	; 0x30
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40020000 	.word	0x40020000

080024fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_I2C1_Init+0x50>)
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <MX_I2C1_Init+0x54>)
 8002504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_I2C1_Init+0x50>)
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <MX_I2C1_Init+0x58>)
 800250a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_I2C1_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_I2C1_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_I2C1_Init+0x50>)
 800251a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800251e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <MX_I2C1_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_I2C1_Init+0x50>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <MX_I2C1_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_I2C1_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <MX_I2C1_Init+0x50>)
 800253a:	f002 fc9f 	bl	8004e7c <HAL_I2C_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002544:	f000 faf6 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000250 	.word	0x20000250
 8002550:	40005400 	.word	0x40005400
 8002554:	000186a0 	.word	0x000186a0

08002558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_I2C_MspInit+0x84>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12c      	bne.n	80025d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002596:	f44f 7310 	mov.w	r3, #576	; 0x240
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259c:	2312      	movs	r3, #18
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025a8:	2304      	movs	r3, #4
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	480c      	ldr	r0, [pc, #48]	; (80025e4 <HAL_I2C_MspInit+0x8c>)
 80025b4:	f000 feba 	bl	800332c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 80025c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40005400 	.word	0x40005400
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020400 	.word	0x40020400

080025e8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <MX_I2S2_Init+0x50>)
 80025ee:	4a13      	ldr	r2, [pc, #76]	; (800263c <MX_I2S2_Init+0x54>)
 80025f0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_I2S2_Init+0x50>)
 80025f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_I2S2_Init+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <MX_I2S2_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_I2S2_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <MX_I2S2_Init+0x50>)
 800260e:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <MX_I2S2_Init+0x58>)
 8002610:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_I2S2_Init+0x50>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <MX_I2S2_Init+0x50>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_I2S2_Init+0x50>)
 8002620:	2201      	movs	r2, #1
 8002622:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <MX_I2S2_Init+0x50>)
 8002626:	f003 fd17 	bl	8006058 <HAL_I2S_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8002630:	f000 fa80 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200002a4 	.word	0x200002a4
 800263c:	40003800 	.word	0x40003800
 8002640:	00017700 	.word	0x00017700

08002644 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <MX_I2S3_Init+0x54>)
 800264a:	4a14      	ldr	r2, [pc, #80]	; (800269c <MX_I2S3_Init+0x58>)
 800264c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <MX_I2S3_Init+0x54>)
 8002650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002654:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_I2S3_Init+0x54>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_I2S3_Init+0x54>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <MX_I2S3_Init+0x54>)
 8002664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002668:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_I2S3_Init+0x54>)
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <MX_I2S3_Init+0x5c>)
 800266e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_I2S3_Init+0x54>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_I2S3_Init+0x54>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_I2S3_Init+0x54>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_I2S3_Init+0x54>)
 8002684:	f003 fce8 	bl	8006058 <HAL_I2S_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800268e:	f000 fa51 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200002ec 	.word	0x200002ec
 800269c:	40003c00 	.word	0x40003c00
 80026a0:	00017700 	.word	0x00017700

080026a4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08e      	sub	sp, #56	; 0x38
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a59      	ldr	r2, [pc, #356]	; (8002828 <HAL_I2S_MspInit+0x184>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d15b      	bne.n	800277e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	4b58      	ldr	r3, [pc, #352]	; (800282c <HAL_I2S_MspInit+0x188>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a57      	ldr	r2, [pc, #348]	; (800282c <HAL_I2S_MspInit+0x188>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_I2S_MspInit+0x188>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	4b51      	ldr	r3, [pc, #324]	; (800282c <HAL_I2S_MspInit+0x188>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a50      	ldr	r2, [pc, #320]	; (800282c <HAL_I2S_MspInit+0x188>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b4e      	ldr	r3, [pc, #312]	; (800282c <HAL_I2S_MspInit+0x188>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_I2S_MspInit+0x188>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a49      	ldr	r2, [pc, #292]	; (800282c <HAL_I2S_MspInit+0x188>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_I2S_MspInit+0x188>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800271a:	2304      	movs	r3, #4
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800272a:	2306      	movs	r3, #6
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	483e      	ldr	r0, [pc, #248]	; (8002830 <HAL_I2S_MspInit+0x18c>)
 8002736:	f000 fdf9 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800273a:	2308      	movs	r3, #8
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800274a:	2305      	movs	r3, #5
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	4619      	mov	r1, r3
 8002754:	4836      	ldr	r0, [pc, #216]	; (8002830 <HAL_I2S_MspInit+0x18c>)
 8002756:	f000 fde9 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800275a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800276c:	2305      	movs	r3, #5
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002774:	4619      	mov	r1, r3
 8002776:	482f      	ldr	r0, [pc, #188]	; (8002834 <HAL_I2S_MspInit+0x190>)
 8002778:	f000 fdd8 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800277c:	e04f      	b.n	800281e <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_I2S_MspInit+0x194>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d14a      	bne.n	800281e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_I2S_MspInit+0x188>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_I2S_MspInit+0x188>)
 8002792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002796:	6413      	str	r3, [r2, #64]	; 0x40
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_I2S_MspInit+0x188>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_I2S_MspInit+0x188>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <HAL_I2S_MspInit+0x188>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6313      	str	r3, [r2, #48]	; 0x30
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_I2S_MspInit+0x188>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_I2S_MspInit+0x188>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_I2S_MspInit+0x188>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6313      	str	r3, [r2, #48]	; 0x30
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_I2S_MspInit+0x188>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80027dc:	2310      	movs	r3, #16
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ec:	2306      	movs	r3, #6
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	4811      	ldr	r0, [pc, #68]	; (800283c <HAL_I2S_MspInit+0x198>)
 80027f8:	f000 fd98 	bl	800332c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80027fc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800280e:	2306      	movs	r3, #6
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_I2S_MspInit+0x18c>)
 800281a:	f000 fd87 	bl	800332c <HAL_GPIO_Init>
}
 800281e:	bf00      	nop
 8002820:	3738      	adds	r7, #56	; 0x38
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40003800 	.word	0x40003800
 800282c:	40023800 	.word	0x40023800
 8002830:	40020800 	.word	0x40020800
 8002834:	40020400 	.word	0x40020400
 8002838:	40003c00 	.word	0x40003c00
 800283c:	40020000 	.word	0x40020000

08002840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002844:	b090      	sub	sp, #64	; 0x40
 8002846:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002848:	f000 fbc8 	bl	8002fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284c:	f000 f8ea 	bl	8002a24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002850:	f000 f950 	bl	8002af4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002854:	f7ff fd4e 	bl	80022f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002858:	f7ff fe50 	bl	80024fc <MX_I2C1_Init>
  MX_I2S2_Init();
 800285c:	f7ff fec4 	bl	80025e8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8002860:	f7ff fef0 	bl	8002644 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002864:	f000 f96c 	bl	8002b40 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8002868:	f008 feca 	bl	800b600 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800286c:	f000 fb1a 	bl	8002ea4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002870:	2304      	movs	r3, #4
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	2300      	movs	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2303      	movs	r3, #3
 800287a:	2201      	movs	r2, #1
 800287c:	2105      	movs	r1, #5
 800287e:	2002      	movs	r0, #2
 8002880:	f7fe fc9e 	bl	80011c0 <BME280_Config>
  if(HAL_I2C_IsDeviceReady(&hi2c1, 0xEC, 2, 10)==HAL_OK){
 8002884:	230a      	movs	r3, #10
 8002886:	2202      	movs	r2, #2
 8002888:	21ec      	movs	r1, #236	; 0xec
 800288a:	485c      	ldr	r0, [pc, #368]	; (80029fc <main+0x1bc>)
 800288c:	f002 ff5a 	bl	8005744 <HAL_I2C_IsDeviceReady>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <main+0x62>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289c:	4858      	ldr	r0, [pc, #352]	; (8002a00 <main+0x1c0>)
 800289e:	f000 fec9 	bl	8003634 <HAL_GPIO_WritePin>
   }

//  uint16_t readvalue;
//    HAL_ADC_Start(&hadc1);
    myLoRa = newLoRa();
 80028a2:	4c58      	ldr	r4, [pc, #352]	; (8002a04 <main+0x1c4>)
 80028a4:	463b      	mov	r3, r7
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff f9b0 	bl	8001c0c <newLoRa>
 80028ac:	4625      	mov	r5, r4
 80028ae:	463c      	mov	r4, r7
 80028b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80028bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    LoRa_reset(&myLoRa);
 80028c0:	4850      	ldr	r0, [pc, #320]	; (8002a04 <main+0x1c4>)
 80028c2:	f7ff f9cc 	bl	8001c5e <LoRa_reset>
    myLoRa.CS_port         = NSS_GPIO_Port;
 80028c6:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <main+0x1c4>)
 80028c8:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <main+0x1c8>)
 80028ca:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin          = NSS_Pin;
 80028cc:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <main+0x1c4>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port      = RST_GPIO_Port;
 80028d2:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <main+0x1c4>)
 80028d4:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <main+0x1c8>)
 80028d6:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin       = RST_Pin;
 80028d8:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <main+0x1c4>)
 80028da:	2202      	movs	r2, #2
 80028dc:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port       = DIO0_GPIO_Port;
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <main+0x1c4>)
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <main+0x1c8>)
 80028e2:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin        = DIO0_Pin;
 80028e4:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <main+0x1c4>)
 80028e6:	2204      	movs	r2, #4
 80028e8:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx           = &hspi1;
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <main+0x1c4>)
 80028ec:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <main+0x1cc>)
 80028ee:	619a      	str	r2, [r3, #24]

    myLoRa.frequency             = 440;             // default = 433 MHz
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <main+0x1c4>)
 80028f2:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80028f6:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor        = SF_7;            // default = SF_7
 80028f8:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <main+0x1c4>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <main+0x1c4>)
 8002902:	2204      	movs	r2, #4
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8002908:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <main+0x1c4>)
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    myLoRa.power                 = POWER_20db;      // default = 20db
 8002910:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <main+0x1c4>)
 8002912:	22ff      	movs	r2, #255	; 0xff
 8002914:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8002918:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <main+0x1c4>)
 800291a:	2282      	movs	r2, #130	; 0x82
 800291c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    myLoRa.preamble              = 9;              // default = 8;
 8002920:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <main+0x1c4>)
 8002922:	2209      	movs	r2, #9
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28

    if (LoRa_init(&myLoRa) == LORA_OK){
 8002926:	4837      	ldr	r0, [pc, #220]	; (8002a04 <main+0x1c4>)
 8002928:	f7ff fc40 	bl	80021ac <LoRa_init>
 800292c:	4603      	mov	r3, r0
 800292e:	2bc8      	cmp	r3, #200	; 0xc8
 8002930:	d105      	bne.n	800293e <main+0xfe>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002932:	2201      	movs	r2, #1
 8002934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002938:	4833      	ldr	r0, [pc, #204]	; (8002a08 <main+0x1c8>)
 800293a:	f000 fe7b 	bl	8003634 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800293e:	f008 fe85 	bl	800b64c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  if (LoRa_init(&myLoRa) == LORA_OK){
 8002942:	4830      	ldr	r0, [pc, #192]	; (8002a04 <main+0x1c4>)
 8002944:	f7ff fc32 	bl	80021ac <LoRa_init>
 8002948:	4603      	mov	r3, r0
 800294a:	2bc8      	cmp	r3, #200	; 0xc8
 800294c:	d106      	bne.n	800295c <main+0x11c>
	    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002954:	482c      	ldr	r0, [pc, #176]	; (8002a08 <main+0x1c8>)
 8002956:	f000 fe6d 	bl	8003634 <HAL_GPIO_WritePin>
 800295a:	e005      	b.n	8002968 <main+0x128>
	      }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002962:	4829      	ldr	r0, [pc, #164]	; (8002a08 <main+0x1c8>)
 8002964:	f000 fe66 	bl	8003634 <HAL_GPIO_WritePin>
	  }
    BME280_Measure();
 8002968:	f7ff f8c4 	bl	8001af4 <BME280_Measure>
    sprintf(buffer, "T: %.2f P: %.2f H: %.2f\n\r", Temperature, Pressure, Humidity);
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <main+0x1d0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fdf1 	bl	8000558 <__aeabi_f2d>
 8002976:	4680      	mov	r8, r0
 8002978:	4689      	mov	r9, r1
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <main+0x1d4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fdea 	bl	8000558 <__aeabi_f2d>
 8002984:	4604      	mov	r4, r0
 8002986:	460d      	mov	r5, r1
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <main+0x1d8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fde3 	bl	8000558 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800299a:	e9cd 4500 	strd	r4, r5, [sp]
 800299e:	4642      	mov	r2, r8
 80029a0:	464b      	mov	r3, r9
 80029a2:	491e      	ldr	r1, [pc, #120]	; (8002a1c <main+0x1dc>)
 80029a4:	481e      	ldr	r0, [pc, #120]	; (8002a20 <main+0x1e0>)
 80029a6:	f009 fecf 	bl	800c748 <siprintf>
//    uprintf(buffer);
	if(LoRa_transmit(&myLoRa, (uint8_t*)buffer, strlen(buffer), 100) == 1){
 80029aa:	481d      	ldr	r0, [pc, #116]	; (8002a20 <main+0x1e0>)
 80029ac:	f7fd fc18 	bl	80001e0 <strlen>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	2364      	movs	r3, #100	; 0x64
 80029b6:	491a      	ldr	r1, [pc, #104]	; (8002a20 <main+0x1e0>)
 80029b8:	4812      	ldr	r0, [pc, #72]	; (8002a04 <main+0x1c4>)
 80029ba:	f7ff fb9f 	bl	80020fc <LoRa_transmit>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <main+0x192>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80029c4:	2201      	movs	r2, #1
 80029c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ca:	480f      	ldr	r0, [pc, #60]	; (8002a08 <main+0x1c8>)
 80029cc:	f000 fe32 	bl	8003634 <HAL_GPIO_WritePin>
 80029d0:	e005      	b.n	80029de <main+0x19e>
	}
	else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80029d2:	2200      	movs	r2, #0
 80029d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <main+0x1c8>)
 80029da:	f000 fe2b 	bl	8003634 <HAL_GPIO_WritePin>
	}
	LoRa_transmit(&myLoRa, (uint8_t*)buffer, strlen(buffer), 100);
 80029de:	4810      	ldr	r0, [pc, #64]	; (8002a20 <main+0x1e0>)
 80029e0:	f7fd fbfe 	bl	80001e0 <strlen>
 80029e4:	4603      	mov	r3, r0
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	2364      	movs	r3, #100	; 0x64
 80029ea:	490d      	ldr	r1, [pc, #52]	; (8002a20 <main+0x1e0>)
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <main+0x1c4>)
 80029ee:	f7ff fb85 	bl	80020fc <LoRa_transmit>
	HAL_Delay(200);
 80029f2:	20c8      	movs	r0, #200	; 0xc8
 80029f4:	f000 fb64 	bl	80030c0 <HAL_Delay>
    MX_USB_HOST_Process();
 80029f8:	e7a1      	b.n	800293e <main+0xfe>
 80029fa:	bf00      	nop
 80029fc:	20000250 	.word	0x20000250
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	20000354 	.word	0x20000354
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	2000038c 	.word	0x2000038c
 8002a10:	20000380 	.word	0x20000380
 8002a14:	20000384 	.word	0x20000384
 8002a18:	20000388 	.word	0x20000388
 8002a1c:	0800ea60 	.word	0x0800ea60
 8002a20:	20000334 	.word	0x20000334

08002a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b094      	sub	sp, #80	; 0x50
 8002a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2a:	f107 0320 	add.w	r3, r7, #32
 8002a2e:	2230      	movs	r2, #48	; 0x30
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f009 f926 	bl	800bc84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <SystemClock_Config+0xc8>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <SystemClock_Config+0xc8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <SystemClock_Config+0xc8>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <SystemClock_Config+0xcc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <SystemClock_Config+0xcc>)
 8002a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <SystemClock_Config+0xcc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a94:	2304      	movs	r3, #4
 8002a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002a98:	2348      	movs	r3, #72	; 0x48
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa4:	f107 0320 	add.w	r3, r7, #32
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 ff75 	bl	8006998 <HAL_RCC_OscConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ab4:	f000 f83e 	bl	8002b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abc:	2302      	movs	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f004 f9d7 	bl	8006e88 <HAL_RCC_ClockConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ae0:	f000 f828 	bl	8002b34 <Error_Handler>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3750      	adds	r7, #80	; 0x50
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000

08002af4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002afa:	463b      	mov	r3, r7
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002b0e:	23c8      	movs	r3, #200	; 0xc8
 8002b10:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002b12:	2305      	movs	r3, #5
 8002b14:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002b16:	2302      	movs	r3, #2
 8002b18:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 fbd3 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002b28:	f000 f804 	bl	8002b34 <Error_Handler>
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b38:	b672      	cpsid	i
}
 8002b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <Error_Handler+0x8>
	...

08002b40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <MX_SPI1_Init+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b74:	2210      	movs	r2, #16
 8002b76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b8c:	220a      	movs	r2, #10
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b90:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <MX_SPI1_Init+0x64>)
 8002b92:	f004 fce9 	bl	8007568 <HAL_SPI_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b9c:	f7ff ffca 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000038c 	.word	0x2000038c
 8002ba8:	40013000 	.word	0x40013000

08002bac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_SPI_MspInit+0x84>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d12b      	bne.n	8002c26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_SPI_MspInit+0x88>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <HAL_SPI_MspInit+0x88>)
 8002bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_SPI_MspInit+0x88>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_SPI_MspInit+0x88>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <HAL_SPI_MspInit+0x88>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_SPI_MspInit+0x88>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002c06:	23e0      	movs	r3, #224	; 0xe0
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c16:	2305      	movs	r3, #5
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_SPI_MspInit+0x8c>)
 8002c22:	f000 fb83 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c26:	bf00      	nop
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40013000 	.word	0x40013000
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f000 fb14 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <NMI_Handler+0x4>

08002c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <HardFault_Handler+0x4>

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <MemManage_Handler+0x4>

08002c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd8:	f000 f9d2 	bl	8003080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <OTG_FS_IRQHandler+0x10>)
 8002ce6:	f000 ff29 	bl	8003b3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000080c 	.word	0x2000080c

08002cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
	return 1;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <_kill>:

int _kill(int pid, int sig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d0e:	f008 ff7f 	bl	800bc10 <__errno>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2216      	movs	r2, #22
 8002d16:	601a      	str	r2, [r3, #0]
	return -1;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_exit>:

void _exit (int status)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ffe7 	bl	8002d04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d36:	e7fe      	b.n	8002d36 <_exit+0x12>

08002d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e00a      	b.n	8002d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d4a:	f3af 8000 	nop.w
 8002d4e:	4601      	mov	r1, r0
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	60ba      	str	r2, [r7, #8]
 8002d56:	b2ca      	uxtb	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dbf0      	blt.n	8002d4a <_read+0x12>
	}

return len;
 8002d68:	687b      	ldr	r3, [r7, #4]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e009      	b.n	8002d98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	60ba      	str	r2, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dbf1      	blt.n	8002d84 <_write+0x12>
	}
	return len;
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_close>:

int _close(int file)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
	return -1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_isatty>:

int _isatty(int file)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	return 1;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <_sbrk+0x5c>)
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <_sbrk+0x60>)
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <_sbrk+0x64>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <_sbrk+0x64>)
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <_sbrk+0x68>)
 8002e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d207      	bcs.n	8002e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e44:	f008 fee4 	bl	800bc10 <__errno>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e52:	e009      	b.n	8002e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <_sbrk+0x64>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <_sbrk+0x64>)
 8002e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20020000 	.word	0x20020000
 8002e74:	00000400 	.word	0x00000400
 8002e78:	200003e4 	.word	0x200003e4
 8002e7c:	20000b20 	.word	0x20000b20

08002e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <SystemInit+0x20>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <SystemInit+0x20>)
 8002e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <MX_USART2_UART_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <MX_USART2_UART_Init+0x4c>)
 8002edc:	f005 f8fa 	bl	80080d4 <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ee6:	f7ff fe25 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200003e8 	.word	0x200003e8
 8002ef4:	40004400 	.word	0x40004400

08002ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_UART_MspInit+0x84>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12b      	bne.n	8002f72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f52:	230c      	movs	r3, #12
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f62:	2307      	movs	r3, #7
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f66:	f107 0314 	add.w	r3, r7, #20
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <HAL_UART_MspInit+0x8c>)
 8002f6e:	f000 f9dd 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020000 	.word	0x40020000

08002f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f8e:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f94:	e002      	b.n	8002f9c <LoopCopyDataInit>

08002f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9a:	3304      	adds	r3, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa0:	d3f9      	bcc.n	8002f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fa4:	4c0b      	ldr	r4, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa8:	e001      	b.n	8002fae <LoopFillZerobss>

08002faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fac:	3204      	adds	r2, #4

08002fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb0:	d3fb      	bcc.n	8002faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fb2:	f7ff ff65 	bl	8002e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb6:	f008 fe31 	bl	800bc1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fba:	f7ff fc41 	bl	8002840 <main>
  bx  lr    
 8002fbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002fcc:	0800ee84 	.word	0x0800ee84
  ldr r2, =_sbss
 8002fd0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002fd4:	20000b20 	.word	0x20000b20

08002fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC_IRQHandler>
	...

08002fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <HAL_Init+0x40>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_Init+0x40>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_Init+0x40>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003004:	2003      	movs	r0, #3
 8003006:	f000 f94f 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300a:	2000      	movs	r0, #0
 800300c:	f000 f808 	bl	8003020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003010:	f7ff fe14 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00

08003020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_InitTick+0x54>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_InitTick+0x58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003036:	fbb3 f3f1 	udiv	r3, r3, r1
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f967 	bl	8003312 <HAL_SYSTICK_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00e      	b.n	800306c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d80a      	bhi.n	800306a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003054:	2200      	movs	r2, #0
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800305c:	f000 f92f 	bl	80032be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <HAL_InitTick+0x5c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000000 	.word	0x20000000
 8003078:	20000008 	.word	0x20000008
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000008 	.word	0x20000008
 80030a4:	2000042c 	.word	0x2000042c

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	2000042c 	.word	0x2000042c

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000008 	.word	0x20000008

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	; (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003274:	d301      	bcc.n	800327a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <SysTick_Config+0x40>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003282:	210f      	movs	r1, #15
 8003284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003288:	f7ff ff8e 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <SysTick_Config+0x40>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <SysTick_Config+0x40>)
 8003294:	2207      	movs	r2, #7
 8003296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000e010 	.word	0xe000e010

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff29 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff3e 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff8e 	bl	80031fc <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5d 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff31 	bl	800316c <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa2 	bl	8003264 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e159      	b.n	80035fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003348:	2201      	movs	r2, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	429a      	cmp	r2, r3
 8003362:	f040 8148 	bne.w	80035f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d005      	beq.n	800337e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800337a:	2b02      	cmp	r3, #2
 800337c:	d130      	bne.n	80033e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 0201 	and.w	r2, r3, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d017      	beq.n	800341c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d123      	bne.n	8003470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	08da      	lsrs	r2, r3, #3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3208      	adds	r2, #8
 8003430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	220f      	movs	r2, #15
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	08da      	lsrs	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3208      	adds	r2, #8
 800346a:	69b9      	ldr	r1, [r7, #24]
 800346c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0203 	and.w	r2, r3, #3
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a2 	beq.w	80035f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b57      	ldr	r3, [pc, #348]	; (8003614 <HAL_GPIO_Init+0x2e8>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	4a56      	ldr	r2, [pc, #344]	; (8003614 <HAL_GPIO_Init+0x2e8>)
 80034bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c0:	6453      	str	r3, [r2, #68]	; 0x44
 80034c2:	4b54      	ldr	r3, [pc, #336]	; (8003614 <HAL_GPIO_Init+0x2e8>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ce:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_GPIO_Init+0x2ec>)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	220f      	movs	r2, #15
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a49      	ldr	r2, [pc, #292]	; (800361c <HAL_GPIO_Init+0x2f0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <HAL_GPIO_Init+0x202>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a48      	ldr	r2, [pc, #288]	; (8003620 <HAL_GPIO_Init+0x2f4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x1fe>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a47      	ldr	r2, [pc, #284]	; (8003624 <HAL_GPIO_Init+0x2f8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x1fa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a46      	ldr	r2, [pc, #280]	; (8003628 <HAL_GPIO_Init+0x2fc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x1f6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a45      	ldr	r2, [pc, #276]	; (800362c <HAL_GPIO_Init+0x300>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x1f2>
 800351a:	2304      	movs	r3, #4
 800351c:	e008      	b.n	8003530 <HAL_GPIO_Init+0x204>
 800351e:	2307      	movs	r3, #7
 8003520:	e006      	b.n	8003530 <HAL_GPIO_Init+0x204>
 8003522:	2303      	movs	r3, #3
 8003524:	e004      	b.n	8003530 <HAL_GPIO_Init+0x204>
 8003526:	2302      	movs	r3, #2
 8003528:	e002      	b.n	8003530 <HAL_GPIO_Init+0x204>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_GPIO_Init+0x204>
 800352e:	2300      	movs	r3, #0
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	f002 0203 	and.w	r2, r2, #3
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	4093      	lsls	r3, r2
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003540:	4935      	ldr	r1, [pc, #212]	; (8003618 <HAL_GPIO_Init+0x2ec>)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	3302      	adds	r3, #2
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354e:	4b38      	ldr	r3, [pc, #224]	; (8003630 <HAL_GPIO_Init+0x304>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003572:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <HAL_GPIO_Init+0x304>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003578:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_GPIO_Init+0x304>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800359c:	4a24      	ldr	r2, [pc, #144]	; (8003630 <HAL_GPIO_Init+0x304>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_GPIO_Init+0x304>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c6:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_GPIO_Init+0x304>)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035cc:	4b18      	ldr	r3, [pc, #96]	; (8003630 <HAL_GPIO_Init+0x304>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f0:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <HAL_GPIO_Init+0x304>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3301      	adds	r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	f67f aea2 	bls.w	8003348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	40013800 	.word	0x40013800
 800361c:	40020000 	.word	0x40020000
 8003620:	40020400 	.word	0x40020400
 8003624:	40020800 	.word	0x40020800
 8003628:	40020c00 	.word	0x40020c00
 800362c:	40021000 	.word	0x40021000
 8003630:	40013c00 	.word	0x40013c00

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003650:	e003      	b.n	800365a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	041a      	lsls	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	619a      	str	r2, [r3, #24]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003668:	b08f      	sub	sp, #60	; 0x3c
 800366a:	af0a      	add	r7, sp, #40	; 0x28
 800366c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e054      	b.n	8003722 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f008 f812 	bl	800b6bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2203      	movs	r2, #3
 800369c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f005 f840 	bl	800873c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	687e      	ldr	r6, [r7, #4]
 80036c4:	466d      	mov	r5, sp
 80036c6:	f106 0410 	add.w	r4, r6, #16
 80036ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80036da:	1d33      	adds	r3, r6, #4
 80036dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036de:	6838      	ldr	r0, [r7, #0]
 80036e0:	f004 ffba 	bl	8008658 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f005 f837 	bl	800875e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	687e      	ldr	r6, [r7, #4]
 80036f8:	466d      	mov	r5, sp
 80036fa:	f106 0410 	add.w	r4, r6, #16
 80036fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800370a:	e885 0003 	stmia.w	r5, {r0, r1}
 800370e:	1d33      	adds	r3, r6, #4
 8003710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f005 f9c0 	bl	8008a98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800372a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800372a:	b590      	push	{r4, r7, lr}
 800372c:	b089      	sub	sp, #36	; 0x24
 800372e:	af04      	add	r7, sp, #16
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	4608      	mov	r0, r1
 8003734:	4611      	mov	r1, r2
 8003736:	461a      	mov	r2, r3
 8003738:	4603      	mov	r3, r0
 800373a:	70fb      	strb	r3, [r7, #3]
 800373c:	460b      	mov	r3, r1
 800373e:	70bb      	strb	r3, [r7, #2]
 8003740:	4613      	mov	r3, r2
 8003742:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_HCD_HC_Init+0x28>
 800374e:	2302      	movs	r3, #2
 8003750:	e076      	b.n	8003840 <HAL_HCD_HC_Init+0x116>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	333d      	adds	r3, #61	; 0x3d
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3338      	adds	r3, #56	; 0x38
 800377a:	787a      	ldrb	r2, [r7, #1]
 800377c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	3340      	adds	r3, #64	; 0x40
 800378c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800378e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3339      	adds	r3, #57	; 0x39
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	333f      	adds	r3, #63	; 0x3f
 80037b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80037b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	78ba      	ldrb	r2, [r7, #2]
 80037ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037be:	b2d0      	uxtb	r0, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	333a      	adds	r3, #58	; 0x3a
 80037cc:	4602      	mov	r2, r0
 80037ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80037d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da09      	bge.n	80037ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	333b      	adds	r3, #59	; 0x3b
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e008      	b.n	80037fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	333b      	adds	r3, #59	; 0x3b
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	212c      	movs	r1, #44	; 0x2c
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	4413      	add	r3, r2
 800380a:	333c      	adds	r3, #60	; 0x3c
 800380c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003810:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	787c      	ldrb	r4, [r7, #1]
 8003818:	78ba      	ldrb	r2, [r7, #2]
 800381a:	78f9      	ldrb	r1, [r7, #3]
 800381c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800381e:	9302      	str	r3, [sp, #8]
 8003820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	f897 3020 	ldrb.w	r3, [r7, #32]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4623      	mov	r3, r4
 800382e:	f005 fab9 	bl	8008da4 <USB_HC_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bd90      	pop	{r4, r7, pc}

08003848 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_HCD_HC_Halt+0x1e>
 8003862:	2302      	movs	r3, #2
 8003864:	e00f      	b.n	8003886 <HAL_HCD_HC_Halt+0x3e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fd09 	bl	800928e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	70fb      	strb	r3, [r7, #3]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70bb      	strb	r3, [r7, #2]
 80038a6:	4613      	mov	r3, r2
 80038a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	333b      	adds	r3, #59	; 0x3b
 80038b8:	78ba      	ldrb	r2, [r7, #2]
 80038ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	333f      	adds	r3, #63	; 0x3f
 80038ca:	787a      	ldrb	r2, [r7, #1]
 80038cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80038ce:	7c3b      	ldrb	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d112      	bne.n	80038fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3342      	adds	r3, #66	; 0x42
 80038e2:	2203      	movs	r2, #3
 80038e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	333d      	adds	r3, #61	; 0x3d
 80038f4:	7f3a      	ldrb	r2, [r7, #28]
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e008      	b.n	800390c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	3342      	adds	r3, #66	; 0x42
 8003908:	2202      	movs	r2, #2
 800390a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800390c:	787b      	ldrb	r3, [r7, #1]
 800390e:	2b03      	cmp	r3, #3
 8003910:	f200 80c6 	bhi.w	8003aa0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003a8d 	.word	0x08003a8d
 8003924:	08003991 	.word	0x08003991
 8003928:	08003a0f 	.word	0x08003a0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800392c:	7c3b      	ldrb	r3, [r7, #16]
 800392e:	2b01      	cmp	r3, #1
 8003930:	f040 80b8 	bne.w	8003aa4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003934:	78bb      	ldrb	r3, [r7, #2]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 80b4 	bne.w	8003aa4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800393c:	8b3b      	ldrh	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d108      	bne.n	8003954 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	3355      	adds	r3, #85	; 0x55
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3355      	adds	r3, #85	; 0x55
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3342      	adds	r3, #66	; 0x42
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800397a:	e093      	b.n	8003aa4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	3342      	adds	r3, #66	; 0x42
 800398a:	2202      	movs	r2, #2
 800398c:	701a      	strb	r2, [r3, #0]
      break;
 800398e:	e089      	b.n	8003aa4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003990:	78bb      	ldrb	r3, [r7, #2]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11d      	bne.n	80039d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	3355      	adds	r3, #85	; 0x55
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3342      	adds	r3, #66	; 0x42
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80039bc:	e073      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3342      	adds	r3, #66	; 0x42
 80039cc:	2202      	movs	r2, #2
 80039ce:	701a      	strb	r2, [r3, #0]
      break;
 80039d0:	e069      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	212c      	movs	r1, #44	; 0x2c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	3354      	adds	r3, #84	; 0x54
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039e6:	78fb      	ldrb	r3, [r7, #3]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3342      	adds	r3, #66	; 0x42
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
      break;
 80039f8:	e055      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	3342      	adds	r3, #66	; 0x42
 8003a08:	2202      	movs	r2, #2
 8003a0a:	701a      	strb	r2, [r3, #0]
      break;
 8003a0c:	e04b      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003a0e:	78bb      	ldrb	r3, [r7, #2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11d      	bne.n	8003a50 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3355      	adds	r3, #85	; 0x55
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3342      	adds	r3, #66	; 0x42
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a3a:	e034      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3342      	adds	r3, #66	; 0x42
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]
      break;
 8003a4e:	e02a      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3354      	adds	r3, #84	; 0x54
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	3342      	adds	r3, #66	; 0x42
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
      break;
 8003a76:	e016      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	212c      	movs	r1, #44	; 0x2c
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	3342      	adds	r3, #66	; 0x42
 8003a86:	2202      	movs	r2, #2
 8003a88:	701a      	strb	r2, [r3, #0]
      break;
 8003a8a:	e00c      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3342      	adds	r3, #66	; 0x42
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003aa4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3344      	adds	r3, #68	; 0x44
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	8b3a      	ldrh	r2, [r7, #24]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	202c      	movs	r0, #44	; 0x2c
 8003ac0:	fb00 f303 	mul.w	r3, r0, r3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334c      	adds	r3, #76	; 0x4c
 8003ac8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3360      	adds	r3, #96	; 0x60
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3350      	adds	r3, #80	; 0x50
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	212c      	movs	r1, #44	; 0x2c
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	3339      	adds	r3, #57	; 0x39
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3361      	adds	r3, #97	; 0x61
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	222c      	movs	r2, #44	; 0x2c
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	3338      	adds	r3, #56	; 0x38
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	18d1      	adds	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f005 fa5c 	bl	8008fe8 <USB_HC_StartXfer>
 8003b30:	4603      	mov	r3, r0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop

08003b3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 ff5d 	bl	8008a12 <USB_GetMode>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	f040 80f6 	bne.w	8003d4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 ff41 	bl	80089ec <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80ec 	beq.w	8003d4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 ff38 	bl	80089ec <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b86:	d104      	bne.n	8003b92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 ff28 	bl	80089ec <USB_ReadInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d104      	bne.n	8003bb2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 ff18 	bl	80089ec <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc6:	d104      	bne.n	8003bd2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003bd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 ff08 	bl	80089ec <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d103      	bne.n	8003bee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2202      	movs	r2, #2
 8003bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f004 fefa 	bl	80089ec <USB_ReadInterrupts>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c02:	d11c      	bne.n	8003c3e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003c1e:	2110      	movs	r1, #16
 8003c20:	6938      	ldr	r0, [r7, #16]
 8003c22:	f004 fde9 	bl	80087f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003c26:	6938      	ldr	r0, [r7, #16]
 8003c28:	f004 fe1a 	bl	8008860 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f004 fff0 	bl	8008c18 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f007 fdbd 	bl	800b7b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 fed2 	bl	80089ec <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c52:	d102      	bne.n	8003c5a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f001 f89e 	bl	8004d96 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 fec4 	bl	80089ec <USB_ReadInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d106      	bne.n	8003c7c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f007 fd86 	bl	800b780 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 feb3 	bl	80089ec <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d101      	bne.n	8003c94 <HAL_HCD_IRQHandler+0x158>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_HCD_IRQHandler+0x15a>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d012      	beq.n	8003cc0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0210 	bic.w	r2, r2, #16
 8003ca8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 ffa1 	bl	8004bf2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0210 	orr.w	r2, r2, #16
 8003cbe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f004 fe91 	bl	80089ec <USB_ReadInterrupts>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cd4:	d13a      	bne.n	8003d4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f005 fac6 	bl	800926c <USB_HC_ReadInterrupt>
 8003ce0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e025      	b.n	8003d34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d018      	beq.n	8003d2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d12:	d106      	bne.n	8003d22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8ab 	bl	8003e76 <HCD_HC_IN_IRQHandler>
 8003d20:	e005      	b.n	8003d2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fbf9 	bl	8004520 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3301      	adds	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d3d4      	bcc.n	8003ce8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d46:	615a      	str	r2, [r3, #20]
 8003d48:	e000      	b.n	8003d4c <HAL_HCD_IRQHandler+0x210>
      return;
 8003d4a:	bf00      	nop
    }
  }
}
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_HCD_Start+0x16>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e013      	b.n	8003d90 <HAL_HCD_Start+0x3e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 ffb2 	bl	8008ce0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 fcca 	bl	800871a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_HCD_Stop+0x16>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e00d      	b.n	8003dca <HAL_HCD_Stop+0x32>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f005 fba0 	bl	8009500 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f004 ff54 	bl	8008c8c <USB_ResetPort>
 8003de4:	4603      	mov	r3, r0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	3360      	adds	r3, #96	; 0x60
 8003e08:	781b      	ldrb	r3, [r3, #0]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3350      	adds	r3, #80	; 0x50
 8003e30:	681b      	ldr	r3, [r3, #0]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f004 ff98 	bl	8008d80 <USB_GetCurrentFrame>
 8003e50:	4603      	mov	r3, r0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 ff73 	bl	8008d52 <USB_GetHostSpeed>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d11a      	bne.n	8003edc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3361      	adds	r3, #97	; 0x61
 8003ec6:	2206      	movs	r2, #6
 8003ec8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f005 f9da 	bl	800928e <USB_HC_Halt>
 8003eda:	e0af      	b.n	800403c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef2:	d11b      	bne.n	8003f2c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f00:	461a      	mov	r2, r3
 8003f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	3361      	adds	r3, #97	; 0x61
 8003f16:	2207      	movs	r2, #7
 8003f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f005 f9b2 	bl	800928e <USB_HC_Halt>
 8003f2a:	e087      	b.n	800403c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d109      	bne.n	8003f56 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2320      	movs	r3, #32
 8003f52:	6093      	str	r3, [r2, #8]
 8003f54:	e072      	b.n	800403c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d11a      	bne.n	8003fa2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3361      	adds	r3, #97	; 0x61
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f005 f977 	bl	800928e <USB_HC_Halt>
 8003fa0:	e04c      	b.n	800403c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d11b      	bne.n	8003ff2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3361      	adds	r3, #97	; 0x61
 8003fdc:	2208      	movs	r2, #8
 8003fde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f005 f94f 	bl	800928e <USB_HC_Halt>
 8003ff0:	e024      	b.n	800403c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d119      	bne.n	800403c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	461a      	mov	r2, r3
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3361      	adds	r3, #97	; 0x61
 8004028:	2206      	movs	r2, #6
 800402a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f005 f929 	bl	800928e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004052:	d112      	bne.n	800407a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f005 f915 	bl	800928e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004076:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004078:	e24e      	b.n	8004518 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4413      	add	r3, r2
 8004082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 80df 	bne.w	8004250 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	3348      	adds	r3, #72	; 0x48
 80040a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	0159      	lsls	r1, r3, #5
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	440b      	add	r3, r1
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80040bc:	1ad2      	subs	r2, r2, r3
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	202c      	movs	r0, #44	; 0x2c
 80040c4:	fb00 f303 	mul.w	r3, r0, r3
 80040c8:	440b      	add	r3, r1
 80040ca:	3350      	adds	r3, #80	; 0x50
 80040cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3361      	adds	r3, #97	; 0x61
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	335c      	adds	r3, #92	; 0x5c
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fe:	461a      	mov	r2, r3
 8004100:	2301      	movs	r3, #1
 8004102:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	333f      	adds	r3, #63	; 0x3f
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	333f      	adds	r3, #63	; 0x3f
 8004126:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004128:	2b02      	cmp	r3, #2
 800412a:	d111      	bne.n	8004150 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f005 f8a9 	bl	800928e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004148:	461a      	mov	r2, r3
 800414a:	2310      	movs	r3, #16
 800414c:	6093      	str	r3, [r2, #8]
 800414e:	e03a      	b.n	80041c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	333f      	adds	r3, #63	; 0x3f
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d009      	beq.n	8004178 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	333f      	adds	r3, #63	; 0x3f
 8004172:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004174:	2b01      	cmp	r3, #1
 8004176:	d126      	bne.n	80041c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	440a      	add	r2, r1
 800418e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004196:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3360      	adds	r3, #96	; 0x60
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	b2d9      	uxtb	r1, r3
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	202c      	movs	r0, #44	; 0x2c
 80041b4:	fb00 f303 	mul.w	r3, r0, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	3360      	adds	r3, #96	; 0x60
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f007 fb07 	bl	800b7d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d12b      	bne.n	8004226 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	3348      	adds	r3, #72	; 0x48
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	202c      	movs	r0, #44	; 0x2c
 80041e4:	fb00 f202 	mul.w	r2, r0, r2
 80041e8:	440a      	add	r2, r1
 80041ea:	3240      	adds	r2, #64	; 0x40
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 818e 	beq.w	8004518 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	3354      	adds	r3, #84	; 0x54
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f083 0301 	eor.w	r3, r3, #1
 8004210:	b2d8      	uxtb	r0, r3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	3354      	adds	r3, #84	; 0x54
 8004220:	4602      	mov	r2, r0
 8004222:	701a      	strb	r2, [r3, #0]
}
 8004224:	e178      	b.n	8004518 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	3354      	adds	r3, #84	; 0x54
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	f083 0301 	eor.w	r3, r3, #1
 800423a:	b2d8      	uxtb	r0, r3
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3354      	adds	r3, #84	; 0x54
 800424a:	4602      	mov	r2, r0
 800424c:	701a      	strb	r2, [r3, #0]
}
 800424e:	e163      	b.n	8004518 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	f040 80f6 	bne.w	8004454 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	212c      	movs	r1, #44	; 0x2c
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	3361      	adds	r3, #97	; 0x61
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d109      	bne.n	8004290 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	3360      	adds	r3, #96	; 0x60
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e0c9      	b.n	8004424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	212c      	movs	r1, #44	; 0x2c
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	4413      	add	r3, r2
 800429c:	3361      	adds	r3, #97	; 0x61
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	d109      	bne.n	80042b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	3360      	adds	r3, #96	; 0x60
 80042b2:	2205      	movs	r2, #5
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e0b5      	b.n	8004424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	212c      	movs	r1, #44	; 0x2c
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	3361      	adds	r3, #97	; 0x61
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d009      	beq.n	80042e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	3361      	adds	r3, #97	; 0x61
 80042da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d150      	bne.n	8004382 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	335c      	adds	r3, #92	; 0x5c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	202c      	movs	r0, #44	; 0x2c
 80042f8:	fb00 f303 	mul.w	r3, r0, r3
 80042fc:	440b      	add	r3, r1
 80042fe:	335c      	adds	r3, #92	; 0x5c
 8004300:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	335c      	adds	r3, #92	; 0x5c
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d912      	bls.n	800433c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	212c      	movs	r1, #44	; 0x2c
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	4413      	add	r3, r2
 8004322:	335c      	adds	r3, #92	; 0x5c
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	3360      	adds	r3, #96	; 0x60
 8004336:	2204      	movs	r2, #4
 8004338:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800433a:	e073      	b.n	8004424 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3360      	adds	r3, #96	; 0x60
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004364:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800436c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004380:	e050      	b.n	8004424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	3361      	adds	r3, #97	; 0x61
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d122      	bne.n	80043dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	3360      	adds	r3, #96	; 0x60
 80043a4:	2202      	movs	r2, #2
 80043a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e023      	b.n	8004424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	3361      	adds	r3, #97	; 0x61
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b07      	cmp	r3, #7
 80043ee:	d119      	bne.n	8004424 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	335c      	adds	r3, #92	; 0x5c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	202c      	movs	r0, #44	; 0x2c
 8004408:	fb00 f303 	mul.w	r3, r0, r3
 800440c:	440b      	add	r3, r1
 800440e:	335c      	adds	r3, #92	; 0x5c
 8004410:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	3360      	adds	r3, #96	; 0x60
 8004420:	2204      	movs	r2, #4
 8004422:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	461a      	mov	r2, r3
 8004432:	2302      	movs	r3, #2
 8004434:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	b2d9      	uxtb	r1, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	202c      	movs	r0, #44	; 0x2c
 8004440:	fb00 f303 	mul.w	r3, r0, r3
 8004444:	4413      	add	r3, r2
 8004446:	3360      	adds	r3, #96	; 0x60
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f007 f9c1 	bl	800b7d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004452:	e061      	b.n	8004518 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d156      	bne.n	8004518 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	333f      	adds	r3, #63	; 0x3f
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d111      	bne.n	80044a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	335c      	adds	r3, #92	; 0x5c
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fef7 	bl	800928e <USB_HC_Halt>
 80044a0:	e031      	b.n	8004506 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	333f      	adds	r3, #63	; 0x3f
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	333f      	adds	r3, #63	; 0x3f
 80044c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d11d      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	212c      	movs	r1, #44	; 0x2c
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	335c      	adds	r3, #92	; 0x5c
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d110      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3361      	adds	r3, #97	; 0x61
 80044f2:	2203      	movs	r2, #3
 80044f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f004 fec4 	bl	800928e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004512:	461a      	mov	r2, r3
 8004514:	2310      	movs	r3, #16
 8004516:	6093      	str	r3, [r2, #8]
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4413      	add	r3, r2
 8004542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d11a      	bne.n	8004586 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2304      	movs	r3, #4
 8004560:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	212c      	movs	r1, #44	; 0x2c
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	4413      	add	r3, r2
 800456e:	3361      	adds	r3, #97	; 0x61
 8004570:	2206      	movs	r2, #6
 8004572:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f004 fe85 	bl	800928e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004584:	e331      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4413      	add	r3, r2
 800458e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d12e      	bne.n	80045fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	461a      	mov	r2, r3
 80045aa:	2320      	movs	r3, #32
 80045ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	333d      	adds	r3, #61	; 0x3d
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	f040 8313 	bne.w	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	333d      	adds	r3, #61	; 0x3d
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	212c      	movs	r1, #44	; 0x2c
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	3360      	adds	r3, #96	; 0x60
 80045e4:	2202      	movs	r2, #2
 80045e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f004 fe4b 	bl	800928e <USB_HC_Halt>
}
 80045f8:	e2f7      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004610:	d112      	bne.n	8004638 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	461a      	mov	r2, r3
 8004620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004624:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f004 fe2c 	bl	800928e <USB_HC_Halt>
}
 8004636:	e2d8      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d140      	bne.n	80046d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	335c      	adds	r3, #92	; 0x5c
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d111      	bne.n	800469a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	333d      	adds	r3, #61	; 0x3d
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	4413      	add	r3, r2
 8004690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004694:	461a      	mov	r2, r3
 8004696:	2340      	movs	r3, #64	; 0x40
 8004698:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a6:	461a      	mov	r2, r3
 80046a8:	2301      	movs	r3, #1
 80046aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3361      	adds	r3, #97	; 0x61
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f004 fde0 	bl	800928e <USB_HC_Halt>
}
 80046ce:	e28c      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d12c      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3361      	adds	r3, #97	; 0x61
 80046f4:	2204      	movs	r2, #4
 80046f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	212c      	movs	r1, #44	; 0x2c
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	4413      	add	r3, r2
 8004704:	333d      	adds	r3, #61	; 0x3d
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	335c      	adds	r3, #92	; 0x5c
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f004 fdb1 	bl	800928e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	461a      	mov	r2, r3
 800473a:	2340      	movs	r3, #64	; 0x40
 800473c:	6093      	str	r3, [r2, #8]
}
 800473e:	e254      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b08      	cmp	r3, #8
 8004754:	d11a      	bne.n	800478c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	2308      	movs	r3, #8
 8004766:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3361      	adds	r3, #97	; 0x61
 8004776:	2205      	movs	r2, #5
 8004778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f004 fd82 	bl	800928e <USB_HC_Halt>
}
 800478a:	e22e      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d140      	bne.n	8004824 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	212c      	movs	r1, #44	; 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	335c      	adds	r3, #92	; 0x5c
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3361      	adds	r3, #97	; 0x61
 80047c2:	2203      	movs	r2, #3
 80047c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	333d      	adds	r3, #61	; 0x3d
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d112      	bne.n	8004800 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	333c      	adds	r3, #60	; 0x3c
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	333d      	adds	r3, #61	; 0x3d
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f004 fd3f 	bl	800928e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2310      	movs	r3, #16
 8004820:	6093      	str	r3, [r2, #8]
}
 8004822:	e1e2      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d164      	bne.n	8004904 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d111      	bne.n	8004866 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	3361      	adds	r3, #97	; 0x61
 8004850:	2206      	movs	r2, #6
 8004852:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f004 fd15 	bl	800928e <USB_HC_Halt>
 8004864:	e044      	b.n	80048f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	335c      	adds	r3, #92	; 0x5c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	202c      	movs	r0, #44	; 0x2c
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	440b      	add	r3, r1
 8004884:	335c      	adds	r3, #92	; 0x5c
 8004886:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	335c      	adds	r3, #92	; 0x5c
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d920      	bls.n	80048de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	335c      	adds	r3, #92	; 0x5c
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	3360      	adds	r3, #96	; 0x60
 80048bc:	2204      	movs	r2, #4
 80048be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	b2d9      	uxtb	r1, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	202c      	movs	r0, #44	; 0x2c
 80048ca:	fb00 f303 	mul.w	r3, r0, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3360      	adds	r3, #96	; 0x60
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f006 ff7c 	bl	800b7d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048dc:	e008      	b.n	80048f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	212c      	movs	r1, #44	; 0x2c
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	3360      	adds	r3, #96	; 0x60
 80048ec:	2202      	movs	r2, #2
 80048ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fc:	461a      	mov	r2, r3
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	6093      	str	r3, [r2, #8]
}
 8004902:	e172      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d11b      	bne.n	8004954 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	212c      	movs	r1, #44	; 0x2c
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	3361      	adds	r3, #97	; 0x61
 800492a:	2208      	movs	r2, #8
 800492c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f004 fca8 	bl	800928e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4413      	add	r3, r2
 8004946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494a:	461a      	mov	r2, r3
 800494c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004950:	6093      	str	r3, [r2, #8]
}
 8004952:	e14a      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	f040 813f 	bne.w	8004bea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	212c      	movs	r1, #44	; 0x2c
 8004972:	fb01 f303 	mul.w	r3, r1, r3
 8004976:	4413      	add	r3, r2
 8004978:	3361      	adds	r3, #97	; 0x61
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d17d      	bne.n	8004a7c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	212c      	movs	r1, #44	; 0x2c
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	4413      	add	r3, r2
 800498c:	3360      	adds	r3, #96	; 0x60
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	333f      	adds	r3, #63	; 0x3f
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d00a      	beq.n	80049bc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	212c      	movs	r1, #44	; 0x2c
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	333f      	adds	r3, #63	; 0x3f
 80049b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	f040 8100 	bne.w	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d113      	bne.n	80049ec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	212c      	movs	r1, #44	; 0x2c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	3355      	adds	r3, #85	; 0x55
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	f083 0301 	eor.w	r3, r3, #1
 80049d8:	b2d8      	uxtb	r0, r3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	3355      	adds	r3, #85	; 0x55
 80049e8:	4602      	mov	r2, r0
 80049ea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	f040 80e3 	bne.w	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	334c      	adds	r3, #76	; 0x4c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d8 	beq.w	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	334c      	adds	r3, #76	; 0x4c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	202c      	movs	r0, #44	; 0x2c
 8004a22:	fb00 f202 	mul.w	r2, r0, r2
 8004a26:	440a      	add	r2, r1
 8004a28:	3240      	adds	r2, #64	; 0x40
 8004a2a:	8812      	ldrh	r2, [r2, #0]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	202c      	movs	r0, #44	; 0x2c
 8004a36:	fb00 f202 	mul.w	r2, r0, r2
 8004a3a:	440a      	add	r2, r1
 8004a3c:	3240      	adds	r2, #64	; 0x40
 8004a3e:	8812      	ldrh	r2, [r2, #0]
 8004a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80b5 	beq.w	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3355      	adds	r3, #85	; 0x55
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	f083 0301 	eor.w	r3, r3, #1
 8004a66:	b2d8      	uxtb	r0, r3
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3355      	adds	r3, #85	; 0x55
 8004a76:	4602      	mov	r2, r0
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e09f      	b.n	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	3361      	adds	r3, #97	; 0x61
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d109      	bne.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	212c      	movs	r1, #44	; 0x2c
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3360      	adds	r3, #96	; 0x60
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e08b      	b.n	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3361      	adds	r3, #97	; 0x61
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d109      	bne.n	8004acc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3360      	adds	r3, #96	; 0x60
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	e077      	b.n	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3361      	adds	r3, #97	; 0x61
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d109      	bne.n	8004af4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3360      	adds	r3, #96	; 0x60
 8004aee:	2205      	movs	r2, #5
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e063      	b.n	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	3361      	adds	r3, #97	; 0x61
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d009      	beq.n	8004b1c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3361      	adds	r3, #97	; 0x61
 8004b16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d14f      	bne.n	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	335c      	adds	r3, #92	; 0x5c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	202c      	movs	r0, #44	; 0x2c
 8004b34:	fb00 f303 	mul.w	r3, r0, r3
 8004b38:	440b      	add	r3, r1
 8004b3a:	335c      	adds	r3, #92	; 0x5c
 8004b3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	335c      	adds	r3, #92	; 0x5c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d912      	bls.n	8004b78 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	212c      	movs	r1, #44	; 0x2c
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	335c      	adds	r3, #92	; 0x5c
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	212c      	movs	r1, #44	; 0x2c
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	3360      	adds	r3, #96	; 0x60
 8004b72:	2204      	movs	r2, #4
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e021      	b.n	8004bbc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	212c      	movs	r1, #44	; 0x2c
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	3360      	adds	r3, #96	; 0x60
 8004b86:	2202      	movs	r2, #2
 8004b88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ba0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ba8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2302      	movs	r3, #2
 8004bcc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	b2d9      	uxtb	r1, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	202c      	movs	r0, #44	; 0x2c
 8004bd8:	fb00 f303 	mul.w	r3, r0, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	3360      	adds	r3, #96	; 0x60
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f006 fdf5 	bl	800b7d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bea:	bf00      	nop
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b08a      	sub	sp, #40	; 0x28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	0c5b      	lsrs	r3, r3, #17
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d004      	beq.n	8004c38 <HCD_RXQLVL_IRQHandler+0x46>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	f000 80a9 	beq.w	8004d88 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c36:	e0aa      	b.n	8004d8e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80a6 	beq.w	8004d8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3344      	adds	r3, #68	; 0x44
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 809b 	beq.w	8004d8c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3350      	adds	r3, #80	; 0x50
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	441a      	add	r2, r3
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	202c      	movs	r0, #44	; 0x2c
 8004c70:	fb00 f303 	mul.w	r3, r0, r3
 8004c74:	440b      	add	r3, r1
 8004c76:	334c      	adds	r3, #76	; 0x4c
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d87a      	bhi.n	8004d74 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3344      	adds	r3, #68	; 0x44
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	b292      	uxth	r2, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	f003 fe50 	bl	800893c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3344      	adds	r3, #68	; 0x44
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	441a      	add	r2, r3
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	202c      	movs	r0, #44	; 0x2c
 8004cb6:	fb00 f303 	mul.w	r3, r0, r3
 8004cba:	440b      	add	r3, r1
 8004cbc:	3344      	adds	r3, #68	; 0x44
 8004cbe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	212c      	movs	r1, #44	; 0x2c
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	3350      	adds	r3, #80	; 0x50
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	441a      	add	r2, r3
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	202c      	movs	r0, #44	; 0x2c
 8004cda:	fb00 f303 	mul.w	r3, r0, r3
 8004cde:	440b      	add	r3, r1
 8004ce0:	3350      	adds	r3, #80	; 0x50
 8004ce2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	0cdb      	lsrs	r3, r3, #19
 8004cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	3340      	adds	r3, #64	; 0x40
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d13c      	bne.n	8004d8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d039      	beq.n	8004d8c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d36:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	212c      	movs	r1, #44	; 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	3354      	adds	r3, #84	; 0x54
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	f083 0301 	eor.w	r3, r3, #1
 8004d5e:	b2d8      	uxtb	r0, r3
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3354      	adds	r3, #84	; 0x54
 8004d6e:	4602      	mov	r2, r0
 8004d70:	701a      	strb	r2, [r3, #0]
      break;
 8004d72:	e00b      	b.n	8004d8c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	212c      	movs	r1, #44	; 0x2c
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	3360      	adds	r3, #96	; 0x60
 8004d82:	2204      	movs	r2, #4
 8004d84:	701a      	strb	r2, [r3, #0]
      break;
 8004d86:	e001      	b.n	8004d8c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004d8c:	bf00      	nop
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dc2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d10b      	bne.n	8004de6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d102      	bne.n	8004dde <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f006 fcdf 	bl	800b79c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d132      	bne.n	8004e56 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f043 0308 	orr.w	r3, r3, #8
 8004df6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d126      	bne.n	8004e50 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d113      	bne.n	8004e32 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e14:	d106      	bne.n	8004e24 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f003 fefb 	bl	8008c18 <USB_InitFSLSPClkSel>
 8004e22:	e011      	b.n	8004e48 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f003 fef4 	bl	8008c18 <USB_InitFSLSPClkSel>
 8004e30:	e00a      	b.n	8004e48 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d106      	bne.n	8004e48 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e40:	461a      	mov	r2, r3
 8004e42:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004e46:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f006 fcd1 	bl	800b7f0 <HAL_HCD_PortEnabled_Callback>
 8004e4e:	e002      	b.n	8004e56 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f006 fcdb 	bl	800b80c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d103      	bne.n	8004e68 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f043 0320 	orr.w	r3, r3, #32
 8004e66:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e12b      	b.n	80050e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fd fb58 	bl	8002558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ee0:	f002 f9ca 	bl	8007278 <HAL_RCC_GetPCLK1Freq>
 8004ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4a81      	ldr	r2, [pc, #516]	; (80050f0 <HAL_I2C_Init+0x274>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d807      	bhi.n	8004f00 <HAL_I2C_Init+0x84>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a80      	ldr	r2, [pc, #512]	; (80050f4 <HAL_I2C_Init+0x278>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bf94      	ite	ls
 8004ef8:	2301      	movls	r3, #1
 8004efa:	2300      	movhi	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	e006      	b.n	8004f0e <HAL_I2C_Init+0x92>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a7d      	ldr	r2, [pc, #500]	; (80050f8 <HAL_I2C_Init+0x27c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	bf94      	ite	ls
 8004f08:	2301      	movls	r3, #1
 8004f0a:	2300      	movhi	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0e7      	b.n	80050e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a78      	ldr	r2, [pc, #480]	; (80050fc <HAL_I2C_Init+0x280>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	0c9b      	lsrs	r3, r3, #18
 8004f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4a6a      	ldr	r2, [pc, #424]	; (80050f0 <HAL_I2C_Init+0x274>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d802      	bhi.n	8004f50 <HAL_I2C_Init+0xd4>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	e009      	b.n	8004f64 <HAL_I2C_Init+0xe8>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	4a69      	ldr	r2, [pc, #420]	; (8005100 <HAL_I2C_Init+0x284>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	099b      	lsrs	r3, r3, #6
 8004f62:	3301      	adds	r3, #1
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	495c      	ldr	r1, [pc, #368]	; (80050f0 <HAL_I2C_Init+0x274>)
 8004f80:	428b      	cmp	r3, r1
 8004f82:	d819      	bhi.n	8004fb8 <HAL_I2C_Init+0x13c>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1e59      	subs	r1, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f92:	1c59      	adds	r1, r3, #1
 8004f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f98:	400b      	ands	r3, r1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_I2C_Init+0x138>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1e59      	subs	r1, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fac:	3301      	adds	r3, #1
 8004fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb2:	e051      	b.n	8005058 <HAL_I2C_Init+0x1dc>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	e04f      	b.n	8005058 <HAL_I2C_Init+0x1dc>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d111      	bne.n	8004fe4 <HAL_I2C_Init+0x168>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1e58      	subs	r0, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	440b      	add	r3, r1
 8004fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	e012      	b.n	800500a <HAL_I2C_Init+0x18e>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1e58      	subs	r0, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	0099      	lsls	r1, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_I2C_Init+0x196>
 800500e:	2301      	movs	r3, #1
 8005010:	e022      	b.n	8005058 <HAL_I2C_Init+0x1dc>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10e      	bne.n	8005038 <HAL_I2C_Init+0x1bc>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1e58      	subs	r0, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	440b      	add	r3, r1
 8005028:	fbb0 f3f3 	udiv	r3, r0, r3
 800502c:	3301      	adds	r3, #1
 800502e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	e00f      	b.n	8005058 <HAL_I2C_Init+0x1dc>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1e58      	subs	r0, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6859      	ldr	r1, [r3, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	0099      	lsls	r1, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	fbb0 f3f3 	udiv	r3, r0, r3
 800504e:	3301      	adds	r3, #1
 8005050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	6809      	ldr	r1, [r1, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6911      	ldr	r1, [r2, #16]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68d2      	ldr	r2, [r2, #12]
 8005092:	4311      	orrs	r1, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	430b      	orrs	r3, r1
 800509a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	000186a0 	.word	0x000186a0
 80050f4:	001e847f 	.word	0x001e847f
 80050f8:	003d08ff 	.word	0x003d08ff
 80050fc:	431bde83 	.word	0x431bde83
 8005100:	10624dd3 	.word	0x10624dd3

08005104 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4603      	mov	r3, r0
 8005114:	817b      	strh	r3, [r7, #10]
 8005116:	460b      	mov	r3, r1
 8005118:	813b      	strh	r3, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800511e:	f7fd ffc3 	bl	80030a8 <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b20      	cmp	r3, #32
 800512e:	f040 80d9 	bne.w	80052e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	2319      	movs	r3, #25
 8005138:	2201      	movs	r2, #1
 800513a:	496d      	ldr	r1, [pc, #436]	; (80052f0 <HAL_I2C_Mem_Write+0x1ec>)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fdad 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
 800514a:	e0cc      	b.n	80052e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_I2C_Mem_Write+0x56>
 8005156:	2302      	movs	r3, #2
 8005158:	e0c5      	b.n	80052e6 <HAL_I2C_Mem_Write+0x1e2>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d007      	beq.n	8005180 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2221      	movs	r2, #33	; 0x21
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2240      	movs	r2, #64	; 0x40
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a4d      	ldr	r2, [pc, #308]	; (80052f4 <HAL_I2C_Mem_Write+0x1f0>)
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051c2:	88f8      	ldrh	r0, [r7, #6]
 80051c4:	893a      	ldrh	r2, [r7, #8]
 80051c6:	8979      	ldrh	r1, [r7, #10]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	4603      	mov	r3, r0
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fbe4 	bl	80059a0 <I2C_RequestMemoryWrite>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d052      	beq.n	8005284 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e081      	b.n	80052e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fe2e 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d107      	bne.n	800520a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e06b      	b.n	80052e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	781a      	ldrb	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d11b      	bne.n	8005284 <HAL_I2C_Mem_Write+0x180>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	2b00      	cmp	r3, #0
 8005252:	d017      	beq.n	8005284 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1aa      	bne.n	80051e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fe1a 	bl	8005eca <I2C_WaitOnBTFFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d107      	bne.n	80052b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e016      	b.n	80052e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	00100002 	.word	0x00100002
 80052f4:	ffff0000 	.word	0xffff0000

080052f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	; 0x30
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	817b      	strh	r3, [r7, #10]
 800530a:	460b      	mov	r3, r1
 800530c:	813b      	strh	r3, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005312:	f7fd fec9 	bl	80030a8 <HAL_GetTick>
 8005316:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b20      	cmp	r3, #32
 8005322:	f040 8208 	bne.w	8005736 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2319      	movs	r3, #25
 800532c:	2201      	movs	r2, #1
 800532e:	497b      	ldr	r1, [pc, #492]	; (800551c <HAL_I2C_Mem_Read+0x224>)
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fcb3 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800533c:	2302      	movs	r3, #2
 800533e:	e1fb      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_I2C_Mem_Read+0x56>
 800534a:	2302      	movs	r3, #2
 800534c:	e1f4      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d007      	beq.n	8005374 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2222      	movs	r2, #34	; 0x22
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a5b      	ldr	r2, [pc, #364]	; (8005520 <HAL_I2C_Mem_Read+0x228>)
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053b6:	88f8      	ldrh	r0, [r7, #6]
 80053b8:	893a      	ldrh	r2, [r7, #8]
 80053ba:	8979      	ldrh	r1, [r7, #10]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	4603      	mov	r3, r0
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fb80 	bl	8005acc <I2C_RequestMemoryRead>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e1b0      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d113      	bne.n	8005406 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053de:	2300      	movs	r3, #0
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	623b      	str	r3, [r7, #32]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	623b      	str	r3, [r7, #32]
 80053f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e184      	b.n	8005710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	2b01      	cmp	r3, #1
 800540c:	d11b      	bne.n	8005446 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e164      	b.n	8005710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544a:	2b02      	cmp	r3, #2
 800544c:	d11b      	bne.n	8005486 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	e144      	b.n	8005710 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800549c:	e138      	b.n	8005710 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	f200 80f1 	bhi.w	800568a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d123      	bne.n	80054f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fd49 	bl	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e139      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054f6:	e10b      	b.n	8005710 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d14e      	bne.n	800559e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2200      	movs	r2, #0
 8005508:	4906      	ldr	r1, [pc, #24]	; (8005524 <HAL_I2C_Mem_Read+0x22c>)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fbc6 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e10e      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
 800551a:	bf00      	nop
 800551c:	00100002 	.word	0x00100002
 8005520:	ffff0000 	.word	0xffff0000
 8005524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800559c:	e0b8      	b.n	8005710 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2200      	movs	r2, #0
 80055a6:	4966      	ldr	r1, [pc, #408]	; (8005740 <HAL_I2C_Mem_Read+0x448>)
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fb77 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0bf      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	2200      	movs	r2, #0
 8005602:	494f      	ldr	r1, [pc, #316]	; (8005740 <HAL_I2C_Mem_Read+0x448>)
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 fb49 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e091      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005688:	e042      	b.n	8005710 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800568a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 fc5c 	bl	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e04c      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d118      	bne.n	8005710 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005714:	2b00      	cmp	r3, #0
 8005716:	f47f aec2 	bne.w	800549e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e000      	b.n	8005738 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005736:	2302      	movs	r3, #2
  }
}
 8005738:	4618      	mov	r0, r3
 800573a:	3728      	adds	r7, #40	; 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	00010004 	.word	0x00010004

08005744 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	460b      	mov	r3, r1
 8005752:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005754:	f7fd fca8 	bl	80030a8 <HAL_GetTick>
 8005758:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b20      	cmp	r3, #32
 8005768:	f040 8111 	bne.w	800598e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	2319      	movs	r3, #25
 8005772:	2201      	movs	r2, #1
 8005774:	4988      	ldr	r1, [pc, #544]	; (8005998 <HAL_I2C_IsDeviceReady+0x254>)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fa90 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
 8005784:	e104      	b.n	8005990 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_I2C_IsDeviceReady+0x50>
 8005790:	2302      	movs	r3, #2
 8005792:	e0fd      	b.n	8005990 <HAL_I2C_IsDeviceReady+0x24c>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d007      	beq.n	80057ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2224      	movs	r2, #36	; 0x24
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a70      	ldr	r2, [pc, #448]	; (800599c <HAL_I2C_IsDeviceReady+0x258>)
 80057dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa4e 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005814:	d103      	bne.n	800581e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e0b6      	b.n	8005990 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005822:	897b      	ldrh	r3, [r7, #10]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005830:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005832:	f7fd fc39 	bl	80030a8 <HAL_GetTick>
 8005836:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005866:	e025      	b.n	80058b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005868:	f7fd fc1e 	bl	80030a8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d302      	bcc.n	800587e <HAL_I2C_IsDeviceReady+0x13a>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	22a0      	movs	r2, #160	; 0xa0
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b02      	cmp	r3, #2
 8005892:	bf0c      	ite	eq
 8005894:	2301      	moveq	r3, #1
 8005896:	2300      	movne	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2ba0      	cmp	r3, #160	; 0xa0
 80058be:	d005      	beq.n	80058cc <HAL_I2C_IsDeviceReady+0x188>
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <HAL_I2C_IsDeviceReady+0x188>
 80058c6:	7dbb      	ldrb	r3, [r7, #22]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0cd      	beq.n	8005868 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d129      	bne.n	8005936 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2319      	movs	r3, #25
 800590e:	2201      	movs	r2, #1
 8005910:	4921      	ldr	r1, [pc, #132]	; (8005998 <HAL_I2C_IsDeviceReady+0x254>)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f9c2 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e036      	b.n	8005990 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e02c      	b.n	8005990 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005944:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800594e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2319      	movs	r3, #25
 8005956:	2201      	movs	r2, #1
 8005958:	490f      	ldr	r1, [pc, #60]	; (8005998 <HAL_I2C_IsDeviceReady+0x254>)
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f99e 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e012      	b.n	8005990 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3301      	adds	r3, #1
 800596e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	f4ff af32 	bcc.w	80057de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	00100002 	.word	0x00100002
 800599c:	ffff0000 	.word	0xffff0000

080059a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	817b      	strh	r3, [r7, #10]
 80059b2:	460b      	mov	r3, r1
 80059b4:	813b      	strh	r3, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f960 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00d      	beq.n	80059fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f0:	d103      	bne.n	80059fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e05f      	b.n	8005abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059fe:	897b      	ldrh	r3, [r7, #10]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	492d      	ldr	r1, [pc, #180]	; (8005ac8 <I2C_RequestMemoryWrite+0x128>)
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f998 	bl	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e04c      	b.n	8005abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3c:	6a39      	ldr	r1, [r7, #32]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa02 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d107      	bne.n	8005a62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e02b      	b.n	8005abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a6c:	893b      	ldrh	r3, [r7, #8]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	611a      	str	r2, [r3, #16]
 8005a76:	e021      	b.n	8005abc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a78:	893b      	ldrh	r3, [r7, #8]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a88:	6a39      	ldr	r1, [r7, #32]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f9dc 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d107      	bne.n	8005aae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e005      	b.n	8005abe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab2:	893b      	ldrh	r3, [r7, #8]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	00010002 	.word	0x00010002

08005acc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	817b      	strh	r3, [r7, #10]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	813b      	strh	r3, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8c2 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2c:	d103      	bne.n	8005b36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e0aa      	b.n	8005c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b3a:	897b      	ldrh	r3, [r7, #10]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	6a3a      	ldr	r2, [r7, #32]
 8005b4e:	4952      	ldr	r1, [pc, #328]	; (8005c98 <I2C_RequestMemoryRead+0x1cc>)
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f8fa 	bl	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e097      	b.n	8005c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f964 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d107      	bne.n	8005b9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e076      	b.n	8005c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d105      	bne.n	8005bb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba8:	893b      	ldrh	r3, [r7, #8]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	611a      	str	r2, [r3, #16]
 8005bb2:	e021      	b.n	8005bf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bb4:	893b      	ldrh	r3, [r7, #8]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	6a39      	ldr	r1, [r7, #32]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f93e 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d107      	bne.n	8005bea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e050      	b.n	8005c90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bee:	893b      	ldrh	r3, [r7, #8]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	6a39      	ldr	r1, [r7, #32]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f923 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d107      	bne.n	8005c20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e035      	b.n	8005c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f82b 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00d      	beq.n	8005c68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5a:	d103      	bne.n	8005c64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e013      	b.n	8005c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c68:	897b      	ldrh	r3, [r7, #10]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	4906      	ldr	r1, [pc, #24]	; (8005c98 <I2C_RequestMemoryRead+0x1cc>)
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f863 	bl	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	00010002 	.word	0x00010002

08005c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cac:	e025      	b.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb4:	d021      	beq.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb6:	f7fd f9f7 	bl	80030a8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d116      	bne.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f043 0220 	orr.w	r2, r3, #32
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e023      	b.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d10d      	bne.n	8005d20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	43da      	mvns	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	e00c      	b.n	8005d3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	43da      	mvns	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d0b6      	beq.n	8005cae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d58:	e051      	b.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d68:	d123      	bne.n	8005db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0204 	orr.w	r2, r3, #4
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e046      	b.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d021      	beq.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fd f975 	bl	80030a8 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d116      	bne.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e020      	b.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10c      	bne.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e00b      	b.n	8005e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d18d      	bne.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e54:	e02d      	b.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f8ce 	bl	8005ff8 <I2C_IsAcknowledgeFailed>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e02d      	b.n	8005ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e6c:	d021      	beq.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6e:	f7fd f91b 	bl	80030a8 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d116      	bne.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e007      	b.n	8005ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d1ca      	bne.n	8005e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed6:	e02d      	b.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f88d 	bl	8005ff8 <I2C_IsAcknowledgeFailed>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e02d      	b.n	8005f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eee:	d021      	beq.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef0:	f7fd f8da 	bl	80030a8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d116      	bne.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e007      	b.n	8005f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d1ca      	bne.n	8005ed8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f58:	e042      	b.n	8005fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d119      	bne.n	8005f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0210 	mvn.w	r2, #16
 8005f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e029      	b.n	8005ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9c:	f7fd f884 	bl	80030a8 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d302      	bcc.n	8005fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d116      	bne.n	8005fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e007      	b.n	8005ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d1b5      	bne.n	8005f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600e:	d11b      	bne.n	8006048 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006018:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	f043 0204 	orr.w	r2, r3, #4
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e128      	b.n	80062bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a90      	ldr	r2, [pc, #576]	; (80062c4 <HAL_I2S_Init+0x26c>)
 8006082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fc fb0d 	bl	80026a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060a0:	f023 030f 	bic.w	r3, r3, #15
 80060a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2202      	movs	r2, #2
 80060ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d060      	beq.n	8006178 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d102      	bne.n	80060c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80060be:	2310      	movs	r3, #16
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e001      	b.n	80060c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80060c4:	2320      	movs	r3, #32
 80060c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d802      	bhi.n	80060d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80060d6:	2001      	movs	r0, #1
 80060d8:	f001 f9e6 	bl	80074a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80060dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e6:	d125      	bne.n	8006134 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d010      	beq.n	8006112 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	3305      	adds	r3, #5
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e01f      	b.n	8006152 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	fbb2 f2f3 	udiv	r2, r2, r3
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	461a      	mov	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	3305      	adds	r3, #5
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	e00e      	b.n	8006152 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	fbb2 f2f3 	udiv	r2, r2, r3
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	3305      	adds	r3, #5
 8006150:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4a5c      	ldr	r2, [pc, #368]	; (80062c8 <HAL_I2S_Init+0x270>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	08db      	lsrs	r3, r3, #3
 800615c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e003      	b.n	8006180 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006178:	2302      	movs	r3, #2
 800617a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d902      	bls.n	800618c <HAL_I2S_Init+0x134>
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2bff      	cmp	r3, #255	; 0xff
 800618a:	d907      	bls.n	800619c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006190:	f043 0210 	orr.w	r2, r3, #16
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e08f      	b.n	80062bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	ea42 0103 	orr.w	r1, r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061ba:	f023 030f 	bic.w	r3, r3, #15
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6851      	ldr	r1, [r2, #4]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6892      	ldr	r2, [r2, #8]
 80061c6:	4311      	orrs	r1, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68d2      	ldr	r2, [r2, #12]
 80061cc:	4311      	orrs	r1, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6992      	ldr	r2, [r2, #24]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d161      	bne.n	80062ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a38      	ldr	r2, [pc, #224]	; (80062cc <HAL_I2S_Init+0x274>)
 80061ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a37      	ldr	r2, [pc, #220]	; (80062d0 <HAL_I2S_Init+0x278>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d101      	bne.n	80061fc <HAL_I2S_Init+0x1a4>
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <HAL_I2S_Init+0x27c>)
 80061fa:	e001      	b.n	8006200 <HAL_I2S_Init+0x1a8>
 80061fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	4932      	ldr	r1, [pc, #200]	; (80062d0 <HAL_I2S_Init+0x278>)
 8006208:	428a      	cmp	r2, r1
 800620a:	d101      	bne.n	8006210 <HAL_I2S_Init+0x1b8>
 800620c:	4a31      	ldr	r2, [pc, #196]	; (80062d4 <HAL_I2S_Init+0x27c>)
 800620e:	e001      	b.n	8006214 <HAL_I2S_Init+0x1bc>
 8006210:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006214:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006218:	f023 030f 	bic.w	r3, r3, #15
 800621c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <HAL_I2S_Init+0x278>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <HAL_I2S_Init+0x1d4>
 8006228:	4b2a      	ldr	r3, [pc, #168]	; (80062d4 <HAL_I2S_Init+0x27c>)
 800622a:	e001      	b.n	8006230 <HAL_I2S_Init+0x1d8>
 800622c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006230:	2202      	movs	r2, #2
 8006232:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a25      	ldr	r2, [pc, #148]	; (80062d0 <HAL_I2S_Init+0x278>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <HAL_I2S_Init+0x1ea>
 800623e:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <HAL_I2S_Init+0x27c>)
 8006240:	e001      	b.n	8006246 <HAL_I2S_Init+0x1ee>
 8006242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006252:	d003      	beq.n	800625c <HAL_I2S_Init+0x204>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800625c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	e001      	b.n	8006268 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006272:	4313      	orrs	r3, r2
 8006274:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800627c:	4313      	orrs	r3, r2
 800627e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006286:	4313      	orrs	r3, r2
 8006288:	b29a      	uxth	r2, r3
 800628a:	897b      	ldrh	r3, [r7, #10]
 800628c:	4313      	orrs	r3, r2
 800628e:	b29b      	uxth	r3, r3
 8006290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006294:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a0d      	ldr	r2, [pc, #52]	; (80062d0 <HAL_I2S_Init+0x278>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d101      	bne.n	80062a4 <HAL_I2S_Init+0x24c>
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <HAL_I2S_Init+0x27c>)
 80062a2:	e001      	b.n	80062a8 <HAL_I2S_Init+0x250>
 80062a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062a8:	897a      	ldrh	r2, [r7, #10]
 80062aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	080063cf 	.word	0x080063cf
 80062c8:	cccccccd 	.word	0xcccccccd
 80062cc:	080064e5 	.word	0x080064e5
 80062d0:	40003800 	.word	0x40003800
 80062d4:	40003400 	.word	0x40003400

080062d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c9a      	adds	r2, r3, #2
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10e      	bne.n	8006368 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006358:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff ffb8 	bl	80062d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	b292      	uxth	r2, r2
 8006384:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10e      	bne.n	80063c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ff93 	bl	80062ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b086      	sub	sp, #24
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d13a      	bne.n	8006460 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d109      	bne.n	8006408 <I2S_IRQHandler+0x3a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d102      	bne.n	8006408 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff ffb4 	bl	8006370 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d126      	bne.n	8006460 <I2S_IRQHandler+0x92>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b20      	cmp	r3, #32
 800641e:	d11f      	bne.n	8006460 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800642e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	f043 0202 	orr.w	r2, r3, #2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff ff50 	bl	8006300 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b03      	cmp	r3, #3
 800646a:	d136      	bne.n	80064da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b02      	cmp	r3, #2
 8006474:	d109      	bne.n	800648a <I2S_IRQHandler+0xbc>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b80      	cmp	r3, #128	; 0x80
 8006482:	d102      	bne.n	800648a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ff45 	bl	8006314 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b08      	cmp	r3, #8
 8006492:	d122      	bne.n	80064da <I2S_IRQHandler+0x10c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d11b      	bne.n	80064da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064cc:	f043 0204 	orr.w	r2, r3, #4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff13 	bl	8006300 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064da:	bf00      	nop
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a92      	ldr	r2, [pc, #584]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d101      	bne.n	8006502 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80064fe:	4b92      	ldr	r3, [pc, #584]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006500:	e001      	b.n	8006506 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a8b      	ldr	r2, [pc, #556]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800651c:	4b8a      	ldr	r3, [pc, #552]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800651e:	e001      	b.n	8006524 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006530:	d004      	beq.n	800653c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 8099 	bne.w	800666e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b02      	cmp	r3, #2
 8006544:	d107      	bne.n	8006556 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f925 	bl	80067a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9c8 	bl	8006900 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d13a      	bne.n	80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d035      	beq.n	80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a6e      	ldr	r2, [pc, #440]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d101      	bne.n	8006592 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800658e:	4b6e      	ldr	r3, [pc, #440]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006590:	e001      	b.n	8006596 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4969      	ldr	r1, [pc, #420]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800659e:	428b      	cmp	r3, r1
 80065a0:	d101      	bne.n	80065a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80065a2:	4b69      	ldr	r3, [pc, #420]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065a4:	e001      	b.n	80065aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80065a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	f043 0202 	orr.w	r2, r3, #2
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fe88 	bl	8006300 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	f040 80c3 	bne.w	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80bd 	beq.w	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006616:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a49      	ldr	r2, [pc, #292]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006622:	4b49      	ldr	r3, [pc, #292]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006624:	e001      	b.n	800662a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4944      	ldr	r1, [pc, #272]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006632:	428b      	cmp	r3, r1
 8006634:	d101      	bne.n	800663a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006636:	4b44      	ldr	r3, [pc, #272]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006638:	e001      	b.n	800663e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800663a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800663e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006642:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006644:	2300      	movs	r3, #0
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	f043 0204 	orr.w	r2, r3, #4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff fe4a 	bl	8006300 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800666c:	e089      	b.n	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b02      	cmp	r3, #2
 8006676:	d107      	bne.n	8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8be 	bl	8006804 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b01      	cmp	r3, #1
 8006690:	d107      	bne.n	80066a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8fd 	bl	800689c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d12f      	bne.n	800670c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d02a      	beq.n	800670c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d101      	bne.n	80066d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066d2:	e001      	b.n	80066d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80066d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4919      	ldr	r1, [pc, #100]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066e0:	428b      	cmp	r3, r1
 80066e2:	d101      	bne.n	80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80066e4:	4b18      	ldr	r3, [pc, #96]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066e6:	e001      	b.n	80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80066e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	f043 0202 	orr.w	r2, r3, #2
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff fdfa 	bl	8006300 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b08      	cmp	r3, #8
 8006714:	d136      	bne.n	8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d031      	beq.n	8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a07      	ldr	r2, [pc, #28]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d101      	bne.n	800672e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800672c:	e001      	b.n	8006732 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800672e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4902      	ldr	r1, [pc, #8]	; (8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800673a:	428b      	cmp	r3, r1
 800673c:	d106      	bne.n	800674c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800673e:	4b02      	ldr	r3, [pc, #8]	; (8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006740:	e006      	b.n	8006750 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006742:	bf00      	nop
 8006744:	40003800 	.word	0x40003800
 8006748:	40003400 	.word	0x40003400
 800674c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006750:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006754:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006764:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	f043 0204 	orr.w	r2, r3, #4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fdc0 	bl	8006300 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006780:	e000      	b.n	8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006782:	bf00      	nop
}
 8006784:	bf00      	nop
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	1c99      	adds	r1, r3, #2
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6251      	str	r1, [r2, #36]	; 0x24
 80067b2:	881a      	ldrh	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d113      	bne.n	80067fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ffc9 	bl	800678c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	1c99      	adds	r1, r3, #2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6251      	str	r1, [r2, #36]	; 0x24
 8006816:	8819      	ldrh	r1, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <I2SEx_TxISR_I2SExt+0x90>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <I2SEx_TxISR_I2SExt+0x22>
 8006822:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <I2SEx_TxISR_I2SExt+0x94>)
 8006824:	e001      	b.n	800682a <I2SEx_TxISR_I2SExt+0x26>
 8006826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682a:	460a      	mov	r2, r1
 800682c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d121      	bne.n	800688a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a12      	ldr	r2, [pc, #72]	; (8006894 <I2SEx_TxISR_I2SExt+0x90>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d101      	bne.n	8006854 <I2SEx_TxISR_I2SExt+0x50>
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <I2SEx_TxISR_I2SExt+0x94>)
 8006852:	e001      	b.n	8006858 <I2SEx_TxISR_I2SExt+0x54>
 8006854:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	490d      	ldr	r1, [pc, #52]	; (8006894 <I2SEx_TxISR_I2SExt+0x90>)
 8006860:	428b      	cmp	r3, r1
 8006862:	d101      	bne.n	8006868 <I2SEx_TxISR_I2SExt+0x64>
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <I2SEx_TxISR_I2SExt+0x94>)
 8006866:	e001      	b.n	800686c <I2SEx_TxISR_I2SExt+0x68>
 8006868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800686c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006870:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ff81 	bl	800678c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40003800 	.word	0x40003800
 8006898:	40003400 	.word	0x40003400

0800689c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68d8      	ldr	r0, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	1c99      	adds	r1, r3, #2
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068b4:	b282      	uxth	r2, r0
 80068b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d113      	bne.n	80068f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff ff4a 	bl	800678c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a20      	ldr	r2, [pc, #128]	; (8006990 <I2SEx_RxISR_I2SExt+0x90>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d101      	bne.n	8006916 <I2SEx_RxISR_I2SExt+0x16>
 8006912:	4b20      	ldr	r3, [pc, #128]	; (8006994 <I2SEx_RxISR_I2SExt+0x94>)
 8006914:	e001      	b.n	800691a <I2SEx_RxISR_I2SExt+0x1a>
 8006916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800691a:	68d8      	ldr	r0, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	1c99      	adds	r1, r3, #2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006926:	b282      	uxth	r2, r0
 8006928:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d121      	bne.n	8006986 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <I2SEx_RxISR_I2SExt+0x90>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d101      	bne.n	8006950 <I2SEx_RxISR_I2SExt+0x50>
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <I2SEx_RxISR_I2SExt+0x94>)
 800694e:	e001      	b.n	8006954 <I2SEx_RxISR_I2SExt+0x54>
 8006950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	490d      	ldr	r1, [pc, #52]	; (8006990 <I2SEx_RxISR_I2SExt+0x90>)
 800695c:	428b      	cmp	r3, r1
 800695e:	d101      	bne.n	8006964 <I2SEx_RxISR_I2SExt+0x64>
 8006960:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <I2SEx_RxISR_I2SExt+0x94>)
 8006962:	e001      	b.n	8006968 <I2SEx_RxISR_I2SExt+0x68>
 8006964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006968:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800696c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff03 	bl	800678c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40003800 	.word	0x40003800
 8006994:	40003400 	.word	0x40003400

08006998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e267      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d075      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069b6:	4b88      	ldr	r3, [pc, #544]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 030c 	and.w	r3, r3, #12
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d00c      	beq.n	80069dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069c2:	4b85      	ldr	r3, [pc, #532]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d112      	bne.n	80069f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ce:	4b82      	ldr	r3, [pc, #520]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069da:	d10b      	bne.n	80069f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069dc:	4b7e      	ldr	r3, [pc, #504]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d05b      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x108>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d157      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e242      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fc:	d106      	bne.n	8006a0c <HAL_RCC_OscConfig+0x74>
 80069fe:	4b76      	ldr	r3, [pc, #472]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a75      	ldr	r2, [pc, #468]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	e01d      	b.n	8006a48 <HAL_RCC_OscConfig+0xb0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a14:	d10c      	bne.n	8006a30 <HAL_RCC_OscConfig+0x98>
 8006a16:	4b70      	ldr	r3, [pc, #448]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a6f      	ldr	r2, [pc, #444]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	4b6d      	ldr	r3, [pc, #436]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a6c      	ldr	r2, [pc, #432]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e00b      	b.n	8006a48 <HAL_RCC_OscConfig+0xb0>
 8006a30:	4b69      	ldr	r3, [pc, #420]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a68      	ldr	r2, [pc, #416]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	4b66      	ldr	r3, [pc, #408]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a65      	ldr	r2, [pc, #404]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d013      	beq.n	8006a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a50:	f7fc fb2a 	bl	80030a8 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a58:	f7fc fb26 	bl	80030a8 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b64      	cmp	r3, #100	; 0x64
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e207      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	4b5b      	ldr	r3, [pc, #364]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0xc0>
 8006a76:	e014      	b.n	8006aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a78:	f7fc fb16 	bl	80030a8 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a80:	f7fc fb12 	bl	80030a8 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e1f3      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a92:	4b51      	ldr	r3, [pc, #324]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0xe8>
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d063      	beq.n	8006b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aae:	4b4a      	ldr	r3, [pc, #296]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00b      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aba:	4b47      	ldr	r3, [pc, #284]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d11c      	bne.n	8006b00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ac6:	4b44      	ldr	r3, [pc, #272]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d116      	bne.n	8006b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad2:	4b41      	ldr	r3, [pc, #260]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_RCC_OscConfig+0x152>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d001      	beq.n	8006aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e1c7      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aea:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4937      	ldr	r1, [pc, #220]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006afe:	e03a      	b.n	8006b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d020      	beq.n	8006b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b08:	4b34      	ldr	r3, [pc, #208]	; (8006bdc <HAL_RCC_OscConfig+0x244>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0e:	f7fc facb 	bl	80030a8 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b16:	f7fc fac7 	bl	80030a8 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e1a8      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b28:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f0      	beq.n	8006b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b34:	4b28      	ldr	r3, [pc, #160]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	4925      	ldr	r1, [pc, #148]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	600b      	str	r3, [r1, #0]
 8006b48:	e015      	b.n	8006b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b4a:	4b24      	ldr	r3, [pc, #144]	; (8006bdc <HAL_RCC_OscConfig+0x244>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fc faaa 	bl	80030a8 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b58:	f7fc faa6 	bl	80030a8 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e187      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1f0      	bne.n	8006b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d036      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d016      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b8a:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <HAL_RCC_OscConfig+0x248>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b90:	f7fc fa8a 	bl	80030a8 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b98:	f7fc fa86 	bl	80030a8 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e167      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006baa:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_RCC_OscConfig+0x240>)
 8006bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0x200>
 8006bb6:	e01b      	b.n	8006bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <HAL_RCC_OscConfig+0x248>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bbe:	f7fc fa73 	bl	80030a8 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bc4:	e00e      	b.n	8006be4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bc6:	f7fc fa6f 	bl	80030a8 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d907      	bls.n	8006be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e150      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	42470000 	.word	0x42470000
 8006be0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006be4:	4b88      	ldr	r3, [pc, #544]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1ea      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8097 	beq.w	8006d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c02:	4b81      	ldr	r3, [pc, #516]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10f      	bne.n	8006c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	4b7d      	ldr	r3, [pc, #500]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	4a7c      	ldr	r2, [pc, #496]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c1e:	4b7a      	ldr	r3, [pc, #488]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2e:	4b77      	ldr	r3, [pc, #476]	; (8006e0c <HAL_RCC_OscConfig+0x474>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d118      	bne.n	8006c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c3a:	4b74      	ldr	r3, [pc, #464]	; (8006e0c <HAL_RCC_OscConfig+0x474>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a73      	ldr	r2, [pc, #460]	; (8006e0c <HAL_RCC_OscConfig+0x474>)
 8006c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c46:	f7fc fa2f 	bl	80030a8 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c4e:	f7fc fa2b 	bl	80030a8 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e10c      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c60:	4b6a      	ldr	r3, [pc, #424]	; (8006e0c <HAL_RCC_OscConfig+0x474>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x2ea>
 8006c74:	4b64      	ldr	r3, [pc, #400]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	4a63      	ldr	r2, [pc, #396]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c80:	e01c      	b.n	8006cbc <HAL_RCC_OscConfig+0x324>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x30c>
 8006c8a:	4b5f      	ldr	r3, [pc, #380]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a5e      	ldr	r2, [pc, #376]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c90:	f043 0304 	orr.w	r3, r3, #4
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
 8006c96:	4b5c      	ldr	r3, [pc, #368]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a5b      	ldr	r2, [pc, #364]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca2:	e00b      	b.n	8006cbc <HAL_RCC_OscConfig+0x324>
 8006ca4:	4b58      	ldr	r3, [pc, #352]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	4a57      	ldr	r2, [pc, #348]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb0:	4b55      	ldr	r3, [pc, #340]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	4a54      	ldr	r2, [pc, #336]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006cb6:	f023 0304 	bic.w	r3, r3, #4
 8006cba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d015      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc4:	f7fc f9f0 	bl	80030a8 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ccc:	f7fc f9ec 	bl	80030a8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e0cb      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce2:	4b49      	ldr	r3, [pc, #292]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ee      	beq.n	8006ccc <HAL_RCC_OscConfig+0x334>
 8006cee:	e014      	b.n	8006d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf0:	f7fc f9da 	bl	80030a8 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cf8:	f7fc f9d6 	bl	80030a8 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e0b5      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d0e:	4b3e      	ldr	r3, [pc, #248]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1ee      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d105      	bne.n	8006d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d20:	4b39      	ldr	r3, [pc, #228]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	4a38      	ldr	r2, [pc, #224]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80a1 	beq.w	8006e78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d36:	4b34      	ldr	r3, [pc, #208]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 030c 	and.w	r3, r3, #12
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d05c      	beq.n	8006dfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d141      	bne.n	8006dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4a:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <HAL_RCC_OscConfig+0x478>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d50:	f7fc f9aa 	bl	80030a8 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d58:	f7fc f9a6 	bl	80030a8 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e087      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6a:	4b27      	ldr	r3, [pc, #156]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	019b      	lsls	r3, r3, #6
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	041b      	lsls	r3, r3, #16
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	061b      	lsls	r3, r3, #24
 8006d9a:	491b      	ldr	r1, [pc, #108]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006da0:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <HAL_RCC_OscConfig+0x478>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da6:	f7fc f97f 	bl	80030a8 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dae:	f7fc f97b 	bl	80030a8 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e05c      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc0:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0x416>
 8006dcc:	e054      	b.n	8006e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <HAL_RCC_OscConfig+0x478>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd4:	f7fc f968 	bl	80030a8 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ddc:	f7fc f964 	bl	80030a8 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e045      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dee:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <HAL_RCC_OscConfig+0x470>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0x444>
 8006dfa:	e03d      	b.n	8006e78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d107      	bne.n	8006e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e038      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	40007000 	.word	0x40007000
 8006e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e14:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <HAL_RCC_OscConfig+0x4ec>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d028      	beq.n	8006e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d121      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d11a      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e44:	4013      	ands	r3, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d111      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d107      	bne.n	8006e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d001      	beq.n	8006e78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40023800 	.word	0x40023800

08006e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0cc      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e9c:	4b68      	ldr	r3, [pc, #416]	; (8007040 <HAL_RCC_ClockConfig+0x1b8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d90c      	bls.n	8006ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eaa:	4b65      	ldr	r3, [pc, #404]	; (8007040 <HAL_RCC_ClockConfig+0x1b8>)
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b63      	ldr	r3, [pc, #396]	; (8007040 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0b8      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d020      	beq.n	8006f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006edc:	4b59      	ldr	r3, [pc, #356]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	4a58      	ldr	r2, [pc, #352]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ef4:	4b53      	ldr	r3, [pc, #332]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	4a52      	ldr	r2, [pc, #328]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f00:	4b50      	ldr	r3, [pc, #320]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	494d      	ldr	r1, [pc, #308]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d044      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d107      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f26:	4b47      	ldr	r3, [pc, #284]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d119      	bne.n	8006f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e07f      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d003      	beq.n	8006f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d107      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f46:	4b3f      	ldr	r3, [pc, #252]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e06f      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f56:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e067      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f66:	4b37      	ldr	r3, [pc, #220]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f023 0203 	bic.w	r2, r3, #3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4934      	ldr	r1, [pc, #208]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f78:	f7fc f896 	bl	80030a8 <HAL_GetTick>
 8006f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7e:	e00a      	b.n	8006f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f80:	f7fc f892 	bl	80030a8 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e04f      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 020c 	and.w	r2, r3, #12
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d1eb      	bne.n	8006f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa8:	4b25      	ldr	r3, [pc, #148]	; (8007040 <HAL_RCC_ClockConfig+0x1b8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d20c      	bcs.n	8006fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb6:	4b22      	ldr	r3, [pc, #136]	; (8007040 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fbe:	4b20      	ldr	r3, [pc, #128]	; (8007040 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e032      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fdc:	4b19      	ldr	r3, [pc, #100]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	4916      	ldr	r1, [pc, #88]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ffa:	4b12      	ldr	r3, [pc, #72]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	490e      	ldr	r1, [pc, #56]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	4313      	orrs	r3, r2
 800700c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800700e:	f000 f821 	bl	8007054 <HAL_RCC_GetSysClockFreq>
 8007012:	4602      	mov	r2, r0
 8007014:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	490a      	ldr	r1, [pc, #40]	; (8007048 <HAL_RCC_ClockConfig+0x1c0>)
 8007020:	5ccb      	ldrb	r3, [r1, r3]
 8007022:	fa22 f303 	lsr.w	r3, r2, r3
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <HAL_RCC_ClockConfig+0x1c4>)
 8007028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800702a:	4b09      	ldr	r3, [pc, #36]	; (8007050 <HAL_RCC_ClockConfig+0x1c8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f7fb fff6 	bl	8003020 <HAL_InitTick>

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40023c00 	.word	0x40023c00
 8007044:	40023800 	.word	0x40023800
 8007048:	0800ea80 	.word	0x0800ea80
 800704c:	20000000 	.word	0x20000000
 8007050:	20000004 	.word	0x20000004

08007054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007058:	b094      	sub	sp, #80	; 0x50
 800705a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	647b      	str	r3, [r7, #68]	; 0x44
 8007060:	2300      	movs	r3, #0
 8007062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007064:	2300      	movs	r3, #0
 8007066:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800706c:	4b79      	ldr	r3, [pc, #484]	; (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 030c 	and.w	r3, r3, #12
 8007074:	2b08      	cmp	r3, #8
 8007076:	d00d      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x40>
 8007078:	2b08      	cmp	r3, #8
 800707a:	f200 80e1 	bhi.w	8007240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_RCC_GetSysClockFreq+0x34>
 8007082:	2b04      	cmp	r3, #4
 8007084:	d003      	beq.n	800708e <HAL_RCC_GetSysClockFreq+0x3a>
 8007086:	e0db      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007088:	4b73      	ldr	r3, [pc, #460]	; (8007258 <HAL_RCC_GetSysClockFreq+0x204>)
 800708a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800708c:	e0db      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800708e:	4b73      	ldr	r3, [pc, #460]	; (800725c <HAL_RCC_GetSysClockFreq+0x208>)
 8007090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007092:	e0d8      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007094:	4b6f      	ldr	r3, [pc, #444]	; (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800709c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800709e:	4b6d      	ldr	r3, [pc, #436]	; (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d063      	beq.n	8007172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070aa:	4b6a      	ldr	r3, [pc, #424]	; (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	099b      	lsrs	r3, r3, #6
 80070b0:	2200      	movs	r2, #0
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80070b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070bc:	633b      	str	r3, [r7, #48]	; 0x30
 80070be:	2300      	movs	r3, #0
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
 80070c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070c6:	4622      	mov	r2, r4
 80070c8:	462b      	mov	r3, r5
 80070ca:	f04f 0000 	mov.w	r0, #0
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	0159      	lsls	r1, r3, #5
 80070d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070d8:	0150      	lsls	r0, r2, #5
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4621      	mov	r1, r4
 80070e0:	1a51      	subs	r1, r2, r1
 80070e2:	6139      	str	r1, [r7, #16]
 80070e4:	4629      	mov	r1, r5
 80070e6:	eb63 0301 	sbc.w	r3, r3, r1
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070f8:	4659      	mov	r1, fp
 80070fa:	018b      	lsls	r3, r1, #6
 80070fc:	4651      	mov	r1, sl
 80070fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007102:	4651      	mov	r1, sl
 8007104:	018a      	lsls	r2, r1, #6
 8007106:	4651      	mov	r1, sl
 8007108:	ebb2 0801 	subs.w	r8, r2, r1
 800710c:	4659      	mov	r1, fp
 800710e:	eb63 0901 	sbc.w	r9, r3, r1
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800711e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007126:	4690      	mov	r8, r2
 8007128:	4699      	mov	r9, r3
 800712a:	4623      	mov	r3, r4
 800712c:	eb18 0303 	adds.w	r3, r8, r3
 8007130:	60bb      	str	r3, [r7, #8]
 8007132:	462b      	mov	r3, r5
 8007134:	eb49 0303 	adc.w	r3, r9, r3
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007146:	4629      	mov	r1, r5
 8007148:	024b      	lsls	r3, r1, #9
 800714a:	4621      	mov	r1, r4
 800714c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007150:	4621      	mov	r1, r4
 8007152:	024a      	lsls	r2, r1, #9
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800715a:	2200      	movs	r2, #0
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
 800715e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007164:	f7f9 fdc8 	bl	8000cf8 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4613      	mov	r3, r2
 800716e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007170:	e058      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007172:	4b38      	ldr	r3, [pc, #224]	; (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	2200      	movs	r2, #0
 800717a:	4618      	mov	r0, r3
 800717c:	4611      	mov	r1, r2
 800717e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007182:	623b      	str	r3, [r7, #32]
 8007184:	2300      	movs	r3, #0
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
 8007188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800718c:	4642      	mov	r2, r8
 800718e:	464b      	mov	r3, r9
 8007190:	f04f 0000 	mov.w	r0, #0
 8007194:	f04f 0100 	mov.w	r1, #0
 8007198:	0159      	lsls	r1, r3, #5
 800719a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800719e:	0150      	lsls	r0, r2, #5
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4641      	mov	r1, r8
 80071a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80071aa:	4649      	mov	r1, r9
 80071ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071c4:	ebb2 040a 	subs.w	r4, r2, sl
 80071c8:	eb63 050b 	sbc.w	r5, r3, fp
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	00eb      	lsls	r3, r5, #3
 80071d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071da:	00e2      	lsls	r2, r4, #3
 80071dc:	4614      	mov	r4, r2
 80071de:	461d      	mov	r5, r3
 80071e0:	4643      	mov	r3, r8
 80071e2:	18e3      	adds	r3, r4, r3
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	464b      	mov	r3, r9
 80071e8:	eb45 0303 	adc.w	r3, r5, r3
 80071ec:	607b      	str	r3, [r7, #4]
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071fa:	4629      	mov	r1, r5
 80071fc:	028b      	lsls	r3, r1, #10
 80071fe:	4621      	mov	r1, r4
 8007200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007204:	4621      	mov	r1, r4
 8007206:	028a      	lsls	r2, r1, #10
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720e:	2200      	movs	r2, #0
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	61fa      	str	r2, [r7, #28]
 8007214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007218:	f7f9 fd6e 	bl	8000cf8 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4613      	mov	r3, r2
 8007222:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007224:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	3301      	adds	r3, #1
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800723e:	e002      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_RCC_GetSysClockFreq+0x204>)
 8007242:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007248:	4618      	mov	r0, r3
 800724a:	3750      	adds	r7, #80	; 0x50
 800724c:	46bd      	mov	sp, r7
 800724e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800
 8007258:	00f42400 	.word	0x00f42400
 800725c:	007a1200 	.word	0x007a1200

08007260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007264:	4b03      	ldr	r3, [pc, #12]	; (8007274 <HAL_RCC_GetHCLKFreq+0x14>)
 8007266:	681b      	ldr	r3, [r3, #0]
}
 8007268:	4618      	mov	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000000 	.word	0x20000000

08007278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800727c:	f7ff fff0 	bl	8007260 <HAL_RCC_GetHCLKFreq>
 8007280:	4602      	mov	r2, r0
 8007282:	4b05      	ldr	r3, [pc, #20]	; (8007298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	0a9b      	lsrs	r3, r3, #10
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	4903      	ldr	r1, [pc, #12]	; (800729c <HAL_RCC_GetPCLK1Freq+0x24>)
 800728e:	5ccb      	ldrb	r3, [r1, r3]
 8007290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007294:	4618      	mov	r0, r3
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40023800 	.word	0x40023800
 800729c:	0800ea90 	.word	0x0800ea90

080072a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072a4:	f7ff ffdc 	bl	8007260 <HAL_RCC_GetHCLKFreq>
 80072a8:	4602      	mov	r2, r0
 80072aa:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	0b5b      	lsrs	r3, r3, #13
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	4903      	ldr	r1, [pc, #12]	; (80072c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072b6:	5ccb      	ldrb	r3, [r1, r3]
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072bc:	4618      	mov	r0, r3
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40023800 	.word	0x40023800
 80072c4:	0800ea90 	.word	0x0800ea90

080072c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d038      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072f0:	4b68      	ldr	r3, [pc, #416]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072f6:	f7fb fed7 	bl	80030a8 <HAL_GetTick>
 80072fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072fc:	e008      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072fe:	f7fb fed3 	bl	80030a8 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e0bd      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007310:	4b61      	ldr	r3, [pc, #388]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f0      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	019b      	lsls	r3, r3, #6
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	071b      	lsls	r3, r3, #28
 800732e:	495a      	ldr	r1, [pc, #360]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007336:	4b57      	ldr	r3, [pc, #348]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800733c:	f7fb feb4 	bl	80030a8 <HAL_GetTick>
 8007340:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007344:	f7fb feb0 	bl	80030a8 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e09a      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007356:	4b50      	ldr	r3, [pc, #320]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8083 	beq.w	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	4b48      	ldr	r3, [pc, #288]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	4a47      	ldr	r2, [pc, #284]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800737a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737e:	6413      	str	r3, [r2, #64]	; 0x40
 8007380:	4b45      	ldr	r3, [pc, #276]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800738c:	4b43      	ldr	r3, [pc, #268]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a42      	ldr	r2, [pc, #264]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007396:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007398:	f7fb fe86 	bl	80030a8 <HAL_GetTick>
 800739c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073a0:	f7fb fe82 	bl	80030a8 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e06c      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073b2:	4b3a      	ldr	r3, [pc, #232]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073be:	4b36      	ldr	r3, [pc, #216]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d02f      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d028      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073dc:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073e6:	4b2e      	ldr	r3, [pc, #184]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073ec:	4b2c      	ldr	r3, [pc, #176]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073f2:	4a29      	ldr	r2, [pc, #164]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073f8:	4b27      	ldr	r3, [pc, #156]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b01      	cmp	r3, #1
 8007402:	d114      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007404:	f7fb fe50 	bl	80030a8 <HAL_GetTick>
 8007408:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740a:	e00a      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800740c:	f7fb fe4c 	bl	80030a8 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f241 3288 	movw	r2, #5000	; 0x1388
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e034      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007422:	4b1d      	ldr	r3, [pc, #116]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0ee      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743a:	d10d      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800743c:	4b16      	ldr	r3, [pc, #88]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800744c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007450:	4911      	ldr	r1, [pc, #68]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007452:	4313      	orrs	r3, r2
 8007454:	608b      	str	r3, [r1, #8]
 8007456:	e005      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4a0e      	ldr	r2, [pc, #56]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007462:	6093      	str	r3, [r2, #8]
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007470:	4909      	ldr	r1, [pc, #36]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007472:	4313      	orrs	r3, r2
 8007474:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	7d1a      	ldrb	r2, [r3, #20]
 8007486:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007488:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	42470068 	.word	0x42470068
 8007498:	40023800 	.word	0x40023800
 800749c:	40007000 	.word	0x40007000
 80074a0:	42470e40 	.word	0x42470e40
 80074a4:	424711e0 	.word	0x424711e0

080074a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d140      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d131      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074dc:	4b1f      	ldr	r3, [pc, #124]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074de:	617b      	str	r3, [r7, #20]
          break;
 80074e0:	e031      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ee:	d109      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074f0:	4b19      	ldr	r3, [pc, #100]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074fa:	4a19      	ldr	r2, [pc, #100]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80074fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	e008      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007504:	4b14      	ldr	r3, [pc, #80]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800750a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800750e:	4a15      	ldr	r2, [pc, #84]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007510:	fbb2 f3f3 	udiv	r3, r2, r3
 8007514:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751c:	099b      	lsrs	r3, r3, #6
 800751e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	fb02 f303 	mul.w	r3, r2, r3
 8007528:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800752c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007530:	0f1b      	lsrs	r3, r3, #28
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	617b      	str	r3, [r7, #20]
          break;
 800753e:	e002      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
          break;
 8007544:	bf00      	nop
        }
      }
      break;
 8007546:	bf00      	nop
    }
  }
  return frequency;
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40023800 	.word	0x40023800
 800755c:	00bb8000 	.word	0x00bb8000
 8007560:	007a1200 	.word	0x007a1200
 8007564:	00f42400 	.word	0x00f42400

08007568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e07b      	b.n	8007672 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d108      	bne.n	8007594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800758a:	d009      	beq.n	80075a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	61da      	str	r2, [r3, #28]
 8007592:	e005      	b.n	80075a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fb faf6 	bl	8002bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007624:	ea42 0103 	orr.w	r1, r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	f003 0104 	and.w	r1, r3, #4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	f003 0210 	and.w	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b088      	sub	sp, #32
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_SPI_Transmit+0x22>
 8007698:	2302      	movs	r3, #2
 800769a:	e126      	b.n	80078ea <HAL_SPI_Transmit+0x270>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a4:	f7fb fd00 	bl	80030a8 <HAL_GetTick>
 80076a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d002      	beq.n	80076c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076ba:	2302      	movs	r3, #2
 80076bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076be:	e10b      	b.n	80078d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_SPI_Transmit+0x52>
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076d0:	e102      	b.n	80078d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2203      	movs	r2, #3
 80076d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	88fa      	ldrh	r2, [r7, #6]
 80076ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007718:	d10f      	bne.n	800773a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	d007      	beq.n	8007758 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007760:	d14b      	bne.n	80077fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_SPI_Transmit+0xf6>
 800776a:	8afb      	ldrh	r3, [r7, #22]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d13e      	bne.n	80077ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	881a      	ldrh	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	1c9a      	adds	r2, r3, #2
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007794:	e02b      	b.n	80077ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d112      	bne.n	80077ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	881a      	ldrh	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80077c8:	e011      	b.n	80077ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ca:	f7fb fc6d 	bl	80030a8 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d803      	bhi.n	80077e2 <HAL_SPI_Transmit+0x168>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e0:	d102      	bne.n	80077e8 <HAL_SPI_Transmit+0x16e>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077ec:	e074      	b.n	80078d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1ce      	bne.n	8007796 <HAL_SPI_Transmit+0x11c>
 80077f8:	e04c      	b.n	8007894 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_SPI_Transmit+0x18e>
 8007802:	8afb      	ldrh	r3, [r7, #22]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d140      	bne.n	800788a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800782e:	e02c      	b.n	800788a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b02      	cmp	r3, #2
 800783c:	d113      	bne.n	8007866 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	330c      	adds	r3, #12
 8007848:	7812      	ldrb	r2, [r2, #0]
 800784a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	86da      	strh	r2, [r3, #54]	; 0x36
 8007864:	e011      	b.n	800788a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007866:	f7fb fc1f 	bl	80030a8 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d803      	bhi.n	800787e <HAL_SPI_Transmit+0x204>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787c:	d102      	bne.n	8007884 <HAL_SPI_Transmit+0x20a>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007888:	e026      	b.n	80078d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1cd      	bne.n	8007830 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fbd9 	bl	8008050 <SPI_EndRxTxTransaction>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	77fb      	strb	r3, [r7, #31]
 80078d4:	e000      	b.n	80078d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80078d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b088      	sub	sp, #32
 80078f6:	af02      	add	r7, sp, #8
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800790e:	d112      	bne.n	8007936 <HAL_SPI_Receive+0x44>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10e      	bne.n	8007936 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2204      	movs	r2, #4
 800791c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f8f1 	bl	8007b14 <HAL_SPI_TransmitReceive>
 8007932:	4603      	mov	r3, r0
 8007934:	e0ea      	b.n	8007b0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_SPI_Receive+0x52>
 8007940:	2302      	movs	r3, #2
 8007942:	e0e3      	b.n	8007b0c <HAL_SPI_Receive+0x21a>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794c:	f7fb fbac 	bl	80030a8 <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	d002      	beq.n	8007964 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800795e:	2302      	movs	r3, #2
 8007960:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007962:	e0ca      	b.n	8007afa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <HAL_SPI_Receive+0x7e>
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007974:	e0c1      	b.n	8007afa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2204      	movs	r2, #4
 800797a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079bc:	d10f      	bne.n	80079de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e8:	2b40      	cmp	r3, #64	; 0x40
 80079ea:	d007      	beq.n	80079fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d162      	bne.n	8007aca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a04:	e02e      	b.n	8007a64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d115      	bne.n	8007a40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f103 020c 	add.w	r2, r3, #12
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a3e:	e011      	b.n	8007a64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a40:	f7fb fb32 	bl	80030a8 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d803      	bhi.n	8007a58 <HAL_SPI_Receive+0x166>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a56:	d102      	bne.n	8007a5e <HAL_SPI_Receive+0x16c>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a62:	e04a      	b.n	8007afa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1cb      	bne.n	8007a06 <HAL_SPI_Receive+0x114>
 8007a6e:	e031      	b.n	8007ad4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d113      	bne.n	8007aa6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	b292      	uxth	r2, r2
 8007a8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	1c9a      	adds	r2, r3, #2
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aa4:	e011      	b.n	8007aca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa6:	f7fb faff 	bl	80030a8 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d803      	bhi.n	8007abe <HAL_SPI_Receive+0x1cc>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007abc:	d102      	bne.n	8007ac4 <HAL_SPI_Receive+0x1d2>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ac8:	e017      	b.n	8007afa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1cd      	bne.n	8007a70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fa53 	bl	8007f84 <SPI_EndRxTransaction>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
 8007af6:	e000      	b.n	8007afa <HAL_SPI_Receive+0x208>
  }

error :
 8007af8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	; 0x30
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b22:	2301      	movs	r3, #1
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_SPI_TransmitReceive+0x26>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e18a      	b.n	8007e50 <HAL_SPI_TransmitReceive+0x33c>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b42:	f7fb fab1 	bl	80030a8 <HAL_GetTick>
 8007b46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b58:	887b      	ldrh	r3, [r7, #2]
 8007b5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d00f      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x70>
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6a:	d107      	bne.n	8007b7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <HAL_SPI_TransmitReceive+0x68>
 8007b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d003      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b82:	e15b      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d005      	beq.n	8007b96 <HAL_SPI_TransmitReceive+0x82>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <HAL_SPI_TransmitReceive+0x82>
 8007b90:	887b      	ldrh	r3, [r7, #2]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b9c:	e14e      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d003      	beq.n	8007bb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2205      	movs	r2, #5
 8007bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	887a      	ldrh	r2, [r7, #2]
 8007bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	887a      	ldrh	r2, [r7, #2]
 8007bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	887a      	ldrh	r2, [r7, #2]
 8007bd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	887a      	ldrh	r2, [r7, #2]
 8007bda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d007      	beq.n	8007c06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0e:	d178      	bne.n	8007d02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x10a>
 8007c18:	8b7b      	ldrh	r3, [r7, #26]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d166      	bne.n	8007cec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	881a      	ldrh	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	1c9a      	adds	r2, r3, #2
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c42:	e053      	b.n	8007cec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d11b      	bne.n	8007c8a <HAL_SPI_TransmitReceive+0x176>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d016      	beq.n	8007c8a <HAL_SPI_TransmitReceive+0x176>
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d113      	bne.n	8007c8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	1c9a      	adds	r2, r3, #2
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d119      	bne.n	8007ccc <HAL_SPI_TransmitReceive+0x1b8>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d014      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	b292      	uxth	r2, r2
 8007cae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	1c9a      	adds	r2, r3, #2
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ccc:	f7fb f9ec 	bl	80030a8 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d807      	bhi.n	8007cec <HAL_SPI_TransmitReceive+0x1d8>
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce2:	d003      	beq.n	8007cec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cea:	e0a7      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1a6      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x130>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1a1      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x130>
 8007d00:	e07c      	b.n	8007dfc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x1fc>
 8007d0a:	8b7b      	ldrh	r3, [r7, #26]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d16b      	bne.n	8007de8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d36:	e057      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d11c      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x26c>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <HAL_SPI_TransmitReceive+0x26c>
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d114      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	7812      	ldrb	r2, [r2, #0]
 8007d62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d119      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x2ae>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d014      	beq.n	8007dc2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dc2:	f7fb f971 	bl	80030a8 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d803      	bhi.n	8007dda <HAL_SPI_TransmitReceive+0x2c6>
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dd8:	d102      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x2cc>
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007de6:	e029      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1a2      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x224>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d19d      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f925 	bl	8008050 <SPI_EndRxTxTransaction>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e18:	e010      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	e000      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3730      	adds	r7, #48	; 0x30
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e66:	b2db      	uxtb	r3, r3
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e84:	f7fb f910 	bl	80030a8 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	4413      	add	r3, r2
 8007e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e94:	f7fb f908 	bl	80030a8 <HAL_GetTick>
 8007e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e9a:	4b39      	ldr	r3, [pc, #228]	; (8007f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	015b      	lsls	r3, r3, #5
 8007ea0:	0d1b      	lsrs	r3, r3, #20
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	fb02 f303 	mul.w	r3, r2, r3
 8007ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eaa:	e054      	b.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb2:	d050      	beq.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eb4:	f7fb f8f8 	bl	80030a8 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d902      	bls.n	8007eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d13d      	bne.n	8007f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ee2:	d111      	bne.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eec:	d004      	beq.n	8007ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef6:	d107      	bne.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f10:	d10f      	bne.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e017      	b.n	8007f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	bf0c      	ite	eq
 8007f66:	2301      	moveq	r3, #1
 8007f68:	2300      	movne	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d19b      	bne.n	8007eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3720      	adds	r7, #32
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000000 	.word	0x20000000

08007f84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f98:	d111      	bne.n	8007fbe <SPI_EndRxTransaction+0x3a>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa2:	d004      	beq.n	8007fae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fac:	d107      	bne.n	8007fbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fc6:	d12a      	bne.n	800801e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd0:	d012      	beq.n	8007ff8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2180      	movs	r1, #128	; 0x80
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff ff49 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d02d      	beq.n	8008044 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fec:	f043 0220 	orr.w	r2, r3, #32
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e026      	b.n	8008046 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2101      	movs	r1, #1
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff ff36 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01a      	beq.n	8008044 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e013      	b.n	8008046 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	2101      	movs	r1, #1
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7ff ff23 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d007      	beq.n	8008044 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e000      	b.n	8008046 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800805c:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <SPI_EndRxTxTransaction+0x7c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <SPI_EndRxTxTransaction+0x80>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	0d5b      	lsrs	r3, r3, #21
 8008068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800807a:	d112      	bne.n	80080a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2200      	movs	r2, #0
 8008084:	2180      	movs	r1, #128	; 0x80
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fef4 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d016      	beq.n	80080c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008096:	f043 0220 	orr.w	r2, r3, #32
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e00f      	b.n	80080c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d0f2      	beq.n	80080a2 <SPI_EndRxTxTransaction+0x52>
 80080bc:	e000      	b.n	80080c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80080be:	bf00      	nop
  }

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000000 	.word	0x20000000
 80080d0:	165e9f81 	.word	0x165e9f81

080080d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e03f      	b.n	8008166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fa fefc 	bl	8002ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2224      	movs	r2, #36	; 0x24
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f829 	bl	8008170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800812c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695a      	ldr	r2, [r3, #20]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800813c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800814c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008174:	b0c0      	sub	sp, #256	; 0x100
 8008176:	af00      	add	r7, sp, #0
 8008178:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800818c:	68d9      	ldr	r1, [r3, #12]
 800818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	ea40 0301 	orr.w	r3, r0, r1
 8008198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80081c8:	f021 010c 	bic.w	r1, r1, #12
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081d6:	430b      	orrs	r3, r1
 80081d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ea:	6999      	ldr	r1, [r3, #24]
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	ea40 0301 	orr.w	r3, r0, r1
 80081f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4b8f      	ldr	r3, [pc, #572]	; (800843c <UART_SetConfig+0x2cc>)
 8008200:	429a      	cmp	r2, r3
 8008202:	d005      	beq.n	8008210 <UART_SetConfig+0xa0>
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4b8d      	ldr	r3, [pc, #564]	; (8008440 <UART_SetConfig+0x2d0>)
 800820c:	429a      	cmp	r2, r3
 800820e:	d104      	bne.n	800821a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008210:	f7ff f846 	bl	80072a0 <HAL_RCC_GetPCLK2Freq>
 8008214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008218:	e003      	b.n	8008222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800821a:	f7ff f82d 	bl	8007278 <HAL_RCC_GetPCLK1Freq>
 800821e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800822c:	f040 810c 	bne.w	8008448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008234:	2200      	movs	r2, #0
 8008236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800823a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800823e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008242:	4622      	mov	r2, r4
 8008244:	462b      	mov	r3, r5
 8008246:	1891      	adds	r1, r2, r2
 8008248:	65b9      	str	r1, [r7, #88]	; 0x58
 800824a:	415b      	adcs	r3, r3
 800824c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800824e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008252:	4621      	mov	r1, r4
 8008254:	eb12 0801 	adds.w	r8, r2, r1
 8008258:	4629      	mov	r1, r5
 800825a:	eb43 0901 	adc.w	r9, r3, r1
 800825e:	f04f 0200 	mov.w	r2, #0
 8008262:	f04f 0300 	mov.w	r3, #0
 8008266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800826a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800826e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008272:	4690      	mov	r8, r2
 8008274:	4699      	mov	r9, r3
 8008276:	4623      	mov	r3, r4
 8008278:	eb18 0303 	adds.w	r3, r8, r3
 800827c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008280:	462b      	mov	r3, r5
 8008282:	eb49 0303 	adc.w	r3, r9, r3
 8008286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008296:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800829a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800829e:	460b      	mov	r3, r1
 80082a0:	18db      	adds	r3, r3, r3
 80082a2:	653b      	str	r3, [r7, #80]	; 0x50
 80082a4:	4613      	mov	r3, r2
 80082a6:	eb42 0303 	adc.w	r3, r2, r3
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54
 80082ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082b4:	f7f8 fd20 	bl	8000cf8 <__aeabi_uldivmod>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4b61      	ldr	r3, [pc, #388]	; (8008444 <UART_SetConfig+0x2d4>)
 80082be:	fba3 2302 	umull	r2, r3, r3, r2
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	011c      	lsls	r4, r3, #4
 80082c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	1891      	adds	r1, r2, r2
 80082de:	64b9      	str	r1, [r7, #72]	; 0x48
 80082e0:	415b      	adcs	r3, r3
 80082e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082e8:	4641      	mov	r1, r8
 80082ea:	eb12 0a01 	adds.w	sl, r2, r1
 80082ee:	4649      	mov	r1, r9
 80082f0:	eb43 0b01 	adc.w	fp, r3, r1
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008308:	4692      	mov	sl, r2
 800830a:	469b      	mov	fp, r3
 800830c:	4643      	mov	r3, r8
 800830e:	eb1a 0303 	adds.w	r3, sl, r3
 8008312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008316:	464b      	mov	r3, r9
 8008318:	eb4b 0303 	adc.w	r3, fp, r3
 800831c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800832c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008334:	460b      	mov	r3, r1
 8008336:	18db      	adds	r3, r3, r3
 8008338:	643b      	str	r3, [r7, #64]	; 0x40
 800833a:	4613      	mov	r3, r2
 800833c:	eb42 0303 	adc.w	r3, r2, r3
 8008340:	647b      	str	r3, [r7, #68]	; 0x44
 8008342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800834a:	f7f8 fcd5 	bl	8000cf8 <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4611      	mov	r1, r2
 8008354:	4b3b      	ldr	r3, [pc, #236]	; (8008444 <UART_SetConfig+0x2d4>)
 8008356:	fba3 2301 	umull	r2, r3, r3, r1
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	2264      	movs	r2, #100	; 0x64
 800835e:	fb02 f303 	mul.w	r3, r2, r3
 8008362:	1acb      	subs	r3, r1, r3
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800836a:	4b36      	ldr	r3, [pc, #216]	; (8008444 <UART_SetConfig+0x2d4>)
 800836c:	fba3 2302 	umull	r2, r3, r3, r2
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008378:	441c      	add	r4, r3
 800837a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837e:	2200      	movs	r2, #0
 8008380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008384:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800838c:	4642      	mov	r2, r8
 800838e:	464b      	mov	r3, r9
 8008390:	1891      	adds	r1, r2, r2
 8008392:	63b9      	str	r1, [r7, #56]	; 0x38
 8008394:	415b      	adcs	r3, r3
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800839c:	4641      	mov	r1, r8
 800839e:	1851      	adds	r1, r2, r1
 80083a0:	6339      	str	r1, [r7, #48]	; 0x30
 80083a2:	4649      	mov	r1, r9
 80083a4:	414b      	adcs	r3, r1
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80083b4:	4659      	mov	r1, fp
 80083b6:	00cb      	lsls	r3, r1, #3
 80083b8:	4651      	mov	r1, sl
 80083ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083be:	4651      	mov	r1, sl
 80083c0:	00ca      	lsls	r2, r1, #3
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	4603      	mov	r3, r0
 80083c8:	4642      	mov	r2, r8
 80083ca:	189b      	adds	r3, r3, r2
 80083cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083d0:	464b      	mov	r3, r9
 80083d2:	460a      	mov	r2, r1
 80083d4:	eb42 0303 	adc.w	r3, r2, r3
 80083d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80083ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80083f0:	460b      	mov	r3, r1
 80083f2:	18db      	adds	r3, r3, r3
 80083f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80083f6:	4613      	mov	r3, r2
 80083f8:	eb42 0303 	adc.w	r3, r2, r3
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008406:	f7f8 fc77 	bl	8000cf8 <__aeabi_uldivmod>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <UART_SetConfig+0x2d4>)
 8008410:	fba3 1302 	umull	r1, r3, r3, r2
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	2164      	movs	r1, #100	; 0x64
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	3332      	adds	r3, #50	; 0x32
 8008422:	4a08      	ldr	r2, [pc, #32]	; (8008444 <UART_SetConfig+0x2d4>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	f003 0207 	and.w	r2, r3, #7
 800842e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4422      	add	r2, r4
 8008436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008438:	e105      	b.n	8008646 <UART_SetConfig+0x4d6>
 800843a:	bf00      	nop
 800843c:	40011000 	.word	0x40011000
 8008440:	40011400 	.word	0x40011400
 8008444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800844c:	2200      	movs	r2, #0
 800844e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008452:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800845a:	4642      	mov	r2, r8
 800845c:	464b      	mov	r3, r9
 800845e:	1891      	adds	r1, r2, r2
 8008460:	6239      	str	r1, [r7, #32]
 8008462:	415b      	adcs	r3, r3
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
 8008466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800846a:	4641      	mov	r1, r8
 800846c:	1854      	adds	r4, r2, r1
 800846e:	4649      	mov	r1, r9
 8008470:	eb43 0501 	adc.w	r5, r3, r1
 8008474:	f04f 0200 	mov.w	r2, #0
 8008478:	f04f 0300 	mov.w	r3, #0
 800847c:	00eb      	lsls	r3, r5, #3
 800847e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008482:	00e2      	lsls	r2, r4, #3
 8008484:	4614      	mov	r4, r2
 8008486:	461d      	mov	r5, r3
 8008488:	4643      	mov	r3, r8
 800848a:	18e3      	adds	r3, r4, r3
 800848c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008490:	464b      	mov	r3, r9
 8008492:	eb45 0303 	adc.w	r3, r5, r3
 8008496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800849a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	f04f 0300 	mov.w	r3, #0
 80084b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80084b6:	4629      	mov	r1, r5
 80084b8:	008b      	lsls	r3, r1, #2
 80084ba:	4621      	mov	r1, r4
 80084bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084c0:	4621      	mov	r1, r4
 80084c2:	008a      	lsls	r2, r1, #2
 80084c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80084c8:	f7f8 fc16 	bl	8000cf8 <__aeabi_uldivmod>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4b60      	ldr	r3, [pc, #384]	; (8008654 <UART_SetConfig+0x4e4>)
 80084d2:	fba3 2302 	umull	r2, r3, r3, r2
 80084d6:	095b      	lsrs	r3, r3, #5
 80084d8:	011c      	lsls	r4, r3, #4
 80084da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80084e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80084ec:	4642      	mov	r2, r8
 80084ee:	464b      	mov	r3, r9
 80084f0:	1891      	adds	r1, r2, r2
 80084f2:	61b9      	str	r1, [r7, #24]
 80084f4:	415b      	adcs	r3, r3
 80084f6:	61fb      	str	r3, [r7, #28]
 80084f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084fc:	4641      	mov	r1, r8
 80084fe:	1851      	adds	r1, r2, r1
 8008500:	6139      	str	r1, [r7, #16]
 8008502:	4649      	mov	r1, r9
 8008504:	414b      	adcs	r3, r1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008514:	4659      	mov	r1, fp
 8008516:	00cb      	lsls	r3, r1, #3
 8008518:	4651      	mov	r1, sl
 800851a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800851e:	4651      	mov	r1, sl
 8008520:	00ca      	lsls	r2, r1, #3
 8008522:	4610      	mov	r0, r2
 8008524:	4619      	mov	r1, r3
 8008526:	4603      	mov	r3, r0
 8008528:	4642      	mov	r2, r8
 800852a:	189b      	adds	r3, r3, r2
 800852c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008530:	464b      	mov	r3, r9
 8008532:	460a      	mov	r2, r1
 8008534:	eb42 0303 	adc.w	r3, r2, r3
 8008538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	67bb      	str	r3, [r7, #120]	; 0x78
 8008546:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008554:	4649      	mov	r1, r9
 8008556:	008b      	lsls	r3, r1, #2
 8008558:	4641      	mov	r1, r8
 800855a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800855e:	4641      	mov	r1, r8
 8008560:	008a      	lsls	r2, r1, #2
 8008562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008566:	f7f8 fbc7 	bl	8000cf8 <__aeabi_uldivmod>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4b39      	ldr	r3, [pc, #228]	; (8008654 <UART_SetConfig+0x4e4>)
 8008570:	fba3 1302 	umull	r1, r3, r3, r2
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	2164      	movs	r1, #100	; 0x64
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	3332      	adds	r3, #50	; 0x32
 8008582:	4a34      	ldr	r2, [pc, #208]	; (8008654 <UART_SetConfig+0x4e4>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800858e:	441c      	add	r4, r3
 8008590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008594:	2200      	movs	r2, #0
 8008596:	673b      	str	r3, [r7, #112]	; 0x70
 8008598:	677a      	str	r2, [r7, #116]	; 0x74
 800859a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800859e:	4642      	mov	r2, r8
 80085a0:	464b      	mov	r3, r9
 80085a2:	1891      	adds	r1, r2, r2
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	415b      	adcs	r3, r3
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085ae:	4641      	mov	r1, r8
 80085b0:	1851      	adds	r1, r2, r1
 80085b2:	6039      	str	r1, [r7, #0]
 80085b4:	4649      	mov	r1, r9
 80085b6:	414b      	adcs	r3, r1
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	f04f 0200 	mov.w	r2, #0
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085c6:	4659      	mov	r1, fp
 80085c8:	00cb      	lsls	r3, r1, #3
 80085ca:	4651      	mov	r1, sl
 80085cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085d0:	4651      	mov	r1, sl
 80085d2:	00ca      	lsls	r2, r1, #3
 80085d4:	4610      	mov	r0, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	4603      	mov	r3, r0
 80085da:	4642      	mov	r2, r8
 80085dc:	189b      	adds	r3, r3, r2
 80085de:	66bb      	str	r3, [r7, #104]	; 0x68
 80085e0:	464b      	mov	r3, r9
 80085e2:	460a      	mov	r2, r1
 80085e4:	eb42 0303 	adc.w	r3, r2, r3
 80085e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	663b      	str	r3, [r7, #96]	; 0x60
 80085f4:	667a      	str	r2, [r7, #100]	; 0x64
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008602:	4649      	mov	r1, r9
 8008604:	008b      	lsls	r3, r1, #2
 8008606:	4641      	mov	r1, r8
 8008608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800860c:	4641      	mov	r1, r8
 800860e:	008a      	lsls	r2, r1, #2
 8008610:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008614:	f7f8 fb70 	bl	8000cf8 <__aeabi_uldivmod>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <UART_SetConfig+0x4e4>)
 800861e:	fba3 1302 	umull	r1, r3, r3, r2
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	2164      	movs	r1, #100	; 0x64
 8008626:	fb01 f303 	mul.w	r3, r1, r3
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	3332      	adds	r3, #50	; 0x32
 8008630:	4a08      	ldr	r2, [pc, #32]	; (8008654 <UART_SetConfig+0x4e4>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	f003 020f 	and.w	r2, r3, #15
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4422      	add	r2, r4
 8008644:	609a      	str	r2, [r3, #8]
}
 8008646:	bf00      	nop
 8008648:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800864c:	46bd      	mov	sp, r7
 800864e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008652:	bf00      	nop
 8008654:	51eb851f 	.word	0x51eb851f

08008658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008658:	b084      	sub	sp, #16
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	f107 001c 	add.w	r0, r7, #28
 8008666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	2b01      	cmp	r3, #1
 800866e:	d122      	bne.n	80086b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d105      	bne.n	80086aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9c0 	bl	8008a30 <USB_CoreReset>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	e01a      	b.n	80086ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f9b4 	bl	8008a30 <USB_CoreReset>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	639a      	str	r2, [r3, #56]	; 0x38
 80086de:	e005      	b.n	80086ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d10b      	bne.n	800870a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f043 0206 	orr.w	r2, r3, #6
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f043 0220 	orr.w	r2, r3, #32
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008716:	b004      	add	sp, #16
 8008718:	4770      	bx	lr

0800871a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f043 0201 	orr.w	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f023 0201 	bic.w	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d115      	bne.n	80087ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800878c:	2001      	movs	r0, #1
 800878e:	f7fa fc97 	bl	80030c0 <HAL_Delay>
      ms++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f93a 	bl	8008a12 <USB_GetMode>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d01e      	beq.n	80087e2 <USB_SetCurrentMode+0x84>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b31      	cmp	r3, #49	; 0x31
 80087a8:	d9f0      	bls.n	800878c <USB_SetCurrentMode+0x2e>
 80087aa:	e01a      	b.n	80087e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d115      	bne.n	80087de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087be:	2001      	movs	r0, #1
 80087c0:	f7fa fc7e 	bl	80030c0 <HAL_Delay>
      ms++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f921 	bl	8008a12 <USB_GetMode>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d005      	beq.n	80087e2 <USB_SetCurrentMode+0x84>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b31      	cmp	r3, #49	; 0x31
 80087da:	d9f0      	bls.n	80087be <USB_SetCurrentMode+0x60>
 80087dc:	e001      	b.n	80087e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e005      	b.n	80087ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b32      	cmp	r3, #50	; 0x32
 80087e6:	d101      	bne.n	80087ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e000      	b.n	80087ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3301      	adds	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4a13      	ldr	r2, [pc, #76]	; (800885c <USB_FlushTxFifo+0x64>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d901      	bls.n	8008818 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e01b      	b.n	8008850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	daf2      	bge.n	8008806 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	019b      	lsls	r3, r3, #6
 8008828:	f043 0220 	orr.w	r2, r3, #32
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4a08      	ldr	r2, [pc, #32]	; (800885c <USB_FlushTxFifo+0x64>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e006      	b.n	8008850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b20      	cmp	r3, #32
 800884c:	d0f0      	beq.n	8008830 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	00030d40 	.word	0x00030d40

08008860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4a11      	ldr	r2, [pc, #68]	; (80088bc <USB_FlushRxFifo+0x5c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d901      	bls.n	800887e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e018      	b.n	80088b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	daf2      	bge.n	800886c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2210      	movs	r2, #16
 800888e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4a08      	ldr	r2, [pc, #32]	; (80088bc <USB_FlushRxFifo+0x5c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d901      	bls.n	80088a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e006      	b.n	80088b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0310 	and.w	r3, r3, #16
 80088aa:	2b10      	cmp	r3, #16
 80088ac:	d0f0      	beq.n	8008890 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	00030d40 	.word	0x00030d40

080088c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	460b      	mov	r3, r1
 80088d0:	71fb      	strb	r3, [r7, #7]
 80088d2:	4613      	mov	r3, r2
 80088d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d123      	bne.n	800892e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088e6:	88bb      	ldrh	r3, [r7, #4]
 80088e8:	3303      	adds	r3, #3
 80088ea:	089b      	lsrs	r3, r3, #2
 80088ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088ee:	2300      	movs	r3, #0
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e018      	b.n	8008926 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	031a      	lsls	r2, r3, #12
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008900:	461a      	mov	r2, r3
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	3301      	adds	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	3301      	adds	r3, #1
 8008912:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	3301      	adds	r3, #1
 8008918:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	3301      	adds	r3, #1
 800891e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	3301      	adds	r3, #1
 8008924:	61bb      	str	r3, [r7, #24]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	429a      	cmp	r2, r3
 800892c:	d3e2      	bcc.n	80088f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3724      	adds	r7, #36	; 0x24
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800893c:	b480      	push	{r7}
 800893e:	b08b      	sub	sp, #44	; 0x2c
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	089b      	lsrs	r3, r3, #2
 8008956:	b29b      	uxth	r3, r3
 8008958:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008962:	2300      	movs	r3, #0
 8008964:	623b      	str	r3, [r7, #32]
 8008966:	e014      	b.n	8008992 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	601a      	str	r2, [r3, #0]
    pDest++;
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	3301      	adds	r3, #1
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	3301      	adds	r3, #1
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	3301      	adds	r3, #1
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	3301      	adds	r3, #1
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	3301      	adds	r3, #1
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	6a3a      	ldr	r2, [r7, #32]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	429a      	cmp	r2, r3
 8008998:	d3e6      	bcc.n	8008968 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800899a:	8bfb      	ldrh	r3, [r7, #30]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01e      	beq.n	80089de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089aa:	461a      	mov	r2, r3
 80089ac:	f107 0310 	add.w	r3, r7, #16
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	fa22 f303 	lsr.w	r3, r2, r3
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	701a      	strb	r2, [r3, #0]
      i++;
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	3301      	adds	r3, #1
 80089ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	3301      	adds	r3, #1
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80089d2:	8bfb      	ldrh	r3, [r7, #30]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089d8:	8bfb      	ldrh	r3, [r7, #30]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1ea      	bne.n	80089b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	372c      	adds	r7, #44	; 0x2c
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4013      	ands	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a04:	68fb      	ldr	r3, [r7, #12]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
	...

08008a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4a13      	ldr	r2, [pc, #76]	; (8008a94 <USB_CoreReset+0x64>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d901      	bls.n	8008a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e01b      	b.n	8008a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	daf2      	bge.n	8008a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f043 0201 	orr.w	r2, r3, #1
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <USB_CoreReset+0x64>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d901      	bls.n	8008a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e006      	b.n	8008a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d0f0      	beq.n	8008a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	00030d40 	.word	0x00030d40

08008a98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a98:	b084      	sub	sp, #16
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b086      	sub	sp, #24
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ab8:	461a      	mov	r2, r3
 8008aba:	2300      	movs	r3, #0
 8008abc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d018      	beq.n	8008b20 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d10a      	bne.n	8008b0a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b02:	f043 0304 	orr.w	r3, r3, #4
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	e014      	b.n	8008b34 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b18:	f023 0304 	bic.w	r3, r3, #4
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	e009      	b.n	8008b34 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b2e:	f023 0304 	bic.w	r3, r3, #4
 8008b32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b34:	2110      	movs	r1, #16
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff fe5e 	bl	80087f8 <USB_FlushTxFifo>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff fe8a 	bl	8008860 <USB_FlushRxFifo>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	e015      	b.n	8008b88 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3301      	adds	r3, #1
 8008b86:	613b      	str	r3, [r7, #16]
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d3e5      	bcc.n	8008b5c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00b      	beq.n	8008bc2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a13      	ldr	r2, [pc, #76]	; (8008c04 <USB_HostInit+0x16c>)
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a13      	ldr	r2, [pc, #76]	; (8008c08 <USB_HostInit+0x170>)
 8008bbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008bc0:	e009      	b.n	8008bd6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2280      	movs	r2, #128	; 0x80
 8008bc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a10      	ldr	r2, [pc, #64]	; (8008c0c <USB_HostInit+0x174>)
 8008bcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a0f      	ldr	r2, [pc, #60]	; (8008c10 <USB_HostInit+0x178>)
 8008bd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d105      	bne.n	8008be8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	f043 0210 	orr.w	r2, r3, #16
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <USB_HostInit+0x17c>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c00:	b004      	add	sp, #16
 8008c02:	4770      	bx	lr
 8008c04:	01000200 	.word	0x01000200
 8008c08:	00e00300 	.word	0x00e00300
 8008c0c:	00600080 	.word	0x00600080
 8008c10:	004000e0 	.word	0x004000e0
 8008c14:	a3200008 	.word	0xa3200008

08008c18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c50:	4313      	orrs	r3, r2
 8008c52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d107      	bne.n	8008c6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c60:	461a      	mov	r2, r3
 8008c62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008c66:	6053      	str	r3, [r2, #4]
 8008c68:	e009      	b.n	8008c7e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d106      	bne.n	8008c7e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c76:	461a      	mov	r2, r3
 8008c78:	f241 7370 	movw	r3, #6000	; 0x1770
 8008c7c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008cac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008cbc:	2064      	movs	r0, #100	; 0x64
 8008cbe:	f7fa f9ff 	bl	80030c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008cd0:	200a      	movs	r0, #10
 8008cd2:	f7fa f9f5 	bl	80030c0 <HAL_Delay>

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <USB_DriveVbus+0x44>
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d106      	bne.n	8008d24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d109      	bne.n	8008d44 <USB_DriveVbus+0x64>
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	0c5b      	lsrs	r3, r3, #17
 8008d70:	f003 0303 	and.w	r3, r3, #3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	b29b      	uxth	r3, r3
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	461a      	mov	r2, r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	70fb      	strb	r3, [r7, #3]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70bb      	strb	r3, [r7, #2]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dd8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008dda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d87e      	bhi.n	8008ee0 <USB_HC_Init+0x13c>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <USB_HC_Init+0x44>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008ea3 	.word	0x08008ea3
 8008df0:	08008df9 	.word	0x08008df9
 8008df4:	08008e65 	.word	0x08008e65
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e04:	461a      	mov	r2, r3
 8008e06:	f240 439d 	movw	r3, #1181	; 0x49d
 8008e0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da10      	bge.n	8008e36 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e32:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008e34:	e057      	b.n	8008ee6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d051      	beq.n	8008ee6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	0151      	lsls	r1, r2, #5
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	440a      	add	r2, r1
 8008e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008e60:	60d3      	str	r3, [r2, #12]
      break;
 8008e62:	e040      	b.n	8008ee6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e70:	461a      	mov	r2, r3
 8008e72:	f240 639d 	movw	r3, #1693	; 0x69d
 8008e76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	da34      	bge.n	8008eea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	0151      	lsls	r1, r2, #5
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	440a      	add	r2, r1
 8008e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008ea0:	e023      	b.n	8008eea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f240 2325 	movw	r3, #549	; 0x225
 8008eb4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008eb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	da17      	bge.n	8008eee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ed8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008edc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008ede:	e006      	b.n	8008eee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	77fb      	strb	r3, [r7, #31]
      break;
 8008ee4:	e004      	b.n	8008ef0 <USB_HC_Init+0x14c>
      break;
 8008ee6:	bf00      	nop
 8008ee8:	e002      	b.n	8008ef0 <USB_HC_Init+0x14c>
      break;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <USB_HC_Init+0x14c>
      break;
 8008eee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f0a:	f043 0302 	orr.w	r3, r3, #2
 8008f0e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	78fb      	ldrb	r3, [r7, #3]
 8008f1a:	f003 030f 	and.w	r3, r3, #15
 8008f1e:	2101      	movs	r1, #1
 8008f20:	fa01 f303 	lsl.w	r3, r1, r3
 8008f24:	6939      	ldr	r1, [r7, #16]
 8008f26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008f3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	da03      	bge.n	8008f4a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f46:	61bb      	str	r3, [r7, #24]
 8008f48:	e001      	b.n	8008f4e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff feff 	bl	8008d52 <USB_GetHostSpeed>
 8008f54:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008f56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d106      	bne.n	8008f6c <USB_HC_Init+0x1c8>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d003      	beq.n	8008f6c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	e001      	b.n	8008f70 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f70:	787b      	ldrb	r3, [r7, #1]
 8008f72:	059b      	lsls	r3, r3, #22
 8008f74:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f78:	78bb      	ldrb	r3, [r7, #2]
 8008f7a:	02db      	lsls	r3, r3, #11
 8008f7c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f80:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f86:	049b      	lsls	r3, r3, #18
 8008f88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	0159      	lsls	r1, r3, #5
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	440b      	add	r3, r1
 8008fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d003      	beq.n	8008fbe <USB_HC_Init+0x21a>
 8008fb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d10f      	bne.n	8008fde <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008fbe:	78fb      	ldrb	r3, [r7, #3]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	78fa      	ldrb	r2, [r7, #3]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fdc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08c      	sub	sp, #48	; 0x30
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009004:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900e:	2b00      	cmp	r3, #0
 8009010:	d02d      	beq.n	800906e <USB_HC_StartXfer+0x86>
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	791b      	ldrb	r3, [r3, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d129      	bne.n	800906e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d117      	bne.n	8009050 <USB_HC_StartXfer+0x68>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	79db      	ldrb	r3, [r3, #7]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <USB_HC_StartXfer+0x48>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	79db      	ldrb	r3, [r3, #7]
 800902c:	2b02      	cmp	r3, #2
 800902e:	d10f      	bne.n	8009050 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	4413      	add	r3, r2
 8009038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	0151      	lsls	r1, r2, #5
 8009042:	6a3a      	ldr	r2, [r7, #32]
 8009044:	440a      	add	r2, r1
 8009046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800904a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10b      	bne.n	800906e <USB_HC_StartXfer+0x86>
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	795b      	ldrb	r3, [r3, #5]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d107      	bne.n	800906e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	4619      	mov	r1, r3
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 fa0f 	bl	8009488 <USB_DoPing>
      return HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	e0f8      	b.n	8009260 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d018      	beq.n	80090a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	8912      	ldrh	r2, [r2, #8]
 800907e:	4413      	add	r3, r2
 8009080:	3b01      	subs	r3, #1
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	8912      	ldrh	r2, [r2, #8]
 8009086:	fbb3 f3f2 	udiv	r3, r3, r2
 800908a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800908c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800908e:	8b7b      	ldrh	r3, [r7, #26]
 8009090:	429a      	cmp	r2, r3
 8009092:	d90b      	bls.n	80090ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009094:	8b7b      	ldrh	r3, [r7, #26]
 8009096:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	8912      	ldrh	r2, [r2, #8]
 800909e:	fb03 f202 	mul.w	r2, r3, r2
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	611a      	str	r2, [r3, #16]
 80090a6:	e001      	b.n	80090ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80090a8:	2301      	movs	r3, #1
 80090aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	78db      	ldrb	r3, [r3, #3]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d007      	beq.n	80090c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80090b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	8912      	ldrh	r2, [r2, #8]
 80090ba:	fb03 f202 	mul.w	r2, r3, r2
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	611a      	str	r2, [r3, #16]
 80090c2:	e003      	b.n	80090cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	695a      	ldr	r2, [r3, #20]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090d6:	04d9      	lsls	r1, r3, #19
 80090d8:	4b63      	ldr	r3, [pc, #396]	; (8009268 <USB_HC_StartXfer+0x280>)
 80090da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80090dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	7a9b      	ldrb	r3, [r3, #10]
 80090e2:	075b      	lsls	r3, r3, #29
 80090e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80090e8:	69f9      	ldr	r1, [r7, #28]
 80090ea:	0148      	lsls	r0, r1, #5
 80090ec:	6a39      	ldr	r1, [r7, #32]
 80090ee:	4401      	add	r1, r0
 80090f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80090f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d009      	beq.n	8009112 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	68d9      	ldr	r1, [r3, #12]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	4413      	add	r3, r2
 800910a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800910e:	460a      	mov	r2, r1
 8009110:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	bf0c      	ite	eq
 8009122:	2301      	moveq	r3, #1
 8009124:	2300      	movne	r3, #0
 8009126:	b2db      	uxtb	r3, r3
 8009128:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	4413      	add	r3, r2
 8009132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	6a3a      	ldr	r2, [r7, #32]
 800913e:	440a      	add	r2, r1
 8009140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009144:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009148:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	4413      	add	r3, r2
 8009152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	7e7b      	ldrb	r3, [r7, #25]
 800915a:	075b      	lsls	r3, r3, #29
 800915c:	69f9      	ldr	r1, [r7, #28]
 800915e:	0148      	lsls	r0, r1, #5
 8009160:	6a39      	ldr	r1, [r7, #32]
 8009162:	4401      	add	r1, r0
 8009164:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009168:	4313      	orrs	r3, r2
 800916a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	4413      	add	r3, r2
 8009174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009182:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	78db      	ldrb	r3, [r3, #3]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009192:	613b      	str	r3, [r7, #16]
 8009194:	e003      	b.n	800919e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800919c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b2:	461a      	mov	r2, r3
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	e04e      	b.n	8009260 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	78db      	ldrb	r3, [r3, #3]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d149      	bne.n	800925e <USB_HC_StartXfer+0x276>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d045      	beq.n	800925e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	79db      	ldrb	r3, [r3, #7]
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d830      	bhi.n	800923c <USB_HC_StartXfer+0x254>
 80091da:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <USB_HC_StartXfer+0x1f8>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	08009215 	.word	0x08009215
 80091e8:	080091f1 	.word	0x080091f1
 80091ec:	08009215 	.word	0x08009215
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	3303      	adds	r3, #3
 80091f6:	089b      	lsrs	r3, r3, #2
 80091f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80091fa:	8afa      	ldrh	r2, [r7, #22]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	b29b      	uxth	r3, r3
 8009202:	429a      	cmp	r2, r3
 8009204:	d91c      	bls.n	8009240 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	f043 0220 	orr.w	r2, r3, #32
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	619a      	str	r2, [r3, #24]
        }
        break;
 8009212:	e015      	b.n	8009240 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	3303      	adds	r3, #3
 800921a:	089b      	lsrs	r3, r3, #2
 800921c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800921e:	8afa      	ldrh	r2, [r7, #22]
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	b29b      	uxth	r3, r3
 800922a:	429a      	cmp	r2, r3
 800922c:	d90a      	bls.n	8009244 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	619a      	str	r2, [r3, #24]
        }
        break;
 800923a:	e003      	b.n	8009244 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800923c:	bf00      	nop
 800923e:	e002      	b.n	8009246 <USB_HC_StartXfer+0x25e>
        break;
 8009240:	bf00      	nop
 8009242:	e000      	b.n	8009246 <USB_HC_StartXfer+0x25e>
        break;
 8009244:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	68d9      	ldr	r1, [r3, #12]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	785a      	ldrb	r2, [r3, #1]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	b29b      	uxth	r3, r3
 8009254:	2000      	movs	r0, #0
 8009256:	9000      	str	r0, [sp, #0]
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff fb31 	bl	80088c0 <USB_WritePacket>
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3728      	adds	r7, #40	; 0x28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	1ff80000 	.word	0x1ff80000

0800926c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	b29b      	uxth	r3, r3
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800928e:	b480      	push	{r7}
 8009290:	b089      	sub	sp, #36	; 0x24
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	460b      	mov	r3, r1
 8009298:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	0c9b      	lsrs	r3, r3, #18
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	0fdb      	lsrs	r3, r3, #31
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d104      	bne.n	80092e8 <USB_HC_Halt+0x5a>
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e0c8      	b.n	800947a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <USB_HC_Halt+0x66>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d163      	bne.n	80093bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	0151      	lsls	r1, r2, #5
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	440a      	add	r2, r1
 800930a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800930e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009312:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 80ab 	bne.w	8009478 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d133      	bne.n	8009396 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	4413      	add	r3, r2
 8009336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	440a      	add	r2, r1
 8009344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800934c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	440a      	add	r2, r1
 8009364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800936c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3301      	adds	r3, #1
 8009372:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800937a:	d81d      	bhi.n	80093b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	4413      	add	r3, r2
 8009384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800938e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009392:	d0ec      	beq.n	800936e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009394:	e070      	b.n	8009478 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093b6:	e05f      	b.n	8009478 <USB_HC_Halt+0x1ea>
            break;
 80093b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093ba:	e05d      	b.n	8009478 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	69fa      	ldr	r2, [r7, #28]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d133      	bne.n	8009454 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	440a      	add	r2, r1
 8009402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800940a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	4413      	add	r3, r2
 8009414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	440a      	add	r2, r1
 8009422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800942a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009438:	d81d      	bhi.n	8009476 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800944c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009450:	d0ec      	beq.n	800942c <USB_HC_Halt+0x19e>
 8009452:	e011      	b.n	8009478 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	440a      	add	r2, r1
 800946a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	e000      	b.n	8009478 <USB_HC_Halt+0x1ea>
          break;
 8009476:	bf00      	nop
    }
  }

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3724      	adds	r7, #36	; 0x24
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
	...

08009488 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800949c:	2301      	movs	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	04da      	lsls	r2, r3, #19
 80094a4:	4b15      	ldr	r3, [pc, #84]	; (80094fc <USB_DoPing+0x74>)
 80094a6:	4013      	ands	r3, r2
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e6:	461a      	mov	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	1ff80000 	.word	0x1ff80000

08009500 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff f911 	bl	800873c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800951a:	2110      	movs	r1, #16
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff f96b 	bl	80087f8 <USB_FlushTxFifo>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff f997 	bl	8008860 <USB_FlushRxFifo>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800953c:	2300      	movs	r3, #0
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	e01f      	b.n	8009582 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	4413      	add	r3, r2
 800954a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009558:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009560:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009568:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	4413      	add	r3, r2
 8009572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009576:	461a      	mov	r2, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	3301      	adds	r3, #1
 8009580:	61bb      	str	r3, [r7, #24]
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b0f      	cmp	r3, #15
 8009586:	d9dc      	bls.n	8009542 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009588:	2300      	movs	r3, #0
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	e034      	b.n	80095f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	4413      	add	r3, r2
 8009596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c2:	461a      	mov	r2, r3
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095d4:	d80c      	bhi.n	80095f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095ec:	d0ec      	beq.n	80095c8 <USB_StopHost+0xc8>
 80095ee:	e000      	b.n	80095f2 <USB_StopHost+0xf2>
        break;
 80095f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	3301      	adds	r3, #1
 80095f6:	61bb      	str	r3, [r7, #24]
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	2b0f      	cmp	r3, #15
 80095fc:	d9c7      	bls.n	800958e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009604:	461a      	mov	r2, r3
 8009606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800960a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009612:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff f880 	bl	800871a <USB_EnableGlobalInt>

  return ret;
 800961a:	7ffb      	ldrb	r3, [r7, #31]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009624:	b590      	push	{r4, r7, lr}
 8009626:	b089      	sub	sp, #36	; 0x24
 8009628:	af04      	add	r7, sp, #16
 800962a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800962c:	2301      	movs	r3, #1
 800962e:	2202      	movs	r2, #2
 8009630:	2102      	movs	r1, #2
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fc66 	bl	8009f04 <USBH_FindInterface>
 8009638:	4603      	mov	r3, r0
 800963a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	2bff      	cmp	r3, #255	; 0xff
 8009640:	d002      	beq.n	8009648 <USBH_CDC_InterfaceInit+0x24>
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d901      	bls.n	800964c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	e13d      	b.n	80098c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fc3b 	bl	8009ecc <USBH_SelectInterface>
 8009656:	4603      	mov	r3, r0
 8009658:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009660:	2302      	movs	r3, #2
 8009662:	e131      	b.n	80098c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800966a:	2050      	movs	r0, #80	; 0x50
 800966c:	f002 fafa 	bl	800bc64 <malloc>
 8009670:	4603      	mov	r3, r0
 8009672:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009684:	2302      	movs	r3, #2
 8009686:	e11f      	b.n	80098c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009688:	2250      	movs	r2, #80	; 0x50
 800968a:	2100      	movs	r1, #0
 800968c:	68b8      	ldr	r0, [r7, #8]
 800968e:	f002 faf9 	bl	800bc84 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	211a      	movs	r1, #26
 8009698:	fb01 f303 	mul.w	r3, r1, r3
 800969c:	4413      	add	r3, r2
 800969e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	b25b      	sxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da15      	bge.n	80096d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	211a      	movs	r1, #26
 80096b0:	fb01 f303 	mul.w	r3, r1, r3
 80096b4:	4413      	add	r3, r2
 80096b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	211a      	movs	r1, #26
 80096c6:	fb01 f303 	mul.w	r3, r1, r3
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80096d0:	881a      	ldrh	r2, [r3, #0]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	785b      	ldrb	r3, [r3, #1]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 ff2c 	bl	800b53a <USBH_AllocPipe>
 80096e2:	4603      	mov	r3, r0
 80096e4:	461a      	mov	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	7819      	ldrb	r1, [r3, #0]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	7858      	ldrb	r0, [r3, #1]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	8952      	ldrh	r2, [r2, #10]
 8009702:	9202      	str	r2, [sp, #8]
 8009704:	2203      	movs	r2, #3
 8009706:	9201      	str	r2, [sp, #4]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	4623      	mov	r3, r4
 800970c:	4602      	mov	r2, r0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fee4 	bl	800b4dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2200      	movs	r2, #0
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f002 f9f3 	bl	800bb08 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009722:	2300      	movs	r3, #0
 8009724:	2200      	movs	r2, #0
 8009726:	210a      	movs	r1, #10
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fbeb 	bl	8009f04 <USBH_FindInterface>
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	2bff      	cmp	r3, #255	; 0xff
 8009736:	d002      	beq.n	800973e <USBH_CDC_InterfaceInit+0x11a>
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d901      	bls.n	8009742 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800973e:	2302      	movs	r3, #2
 8009740:	e0c2      	b.n	80098c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	211a      	movs	r1, #26
 8009748:	fb01 f303 	mul.w	r3, r1, r3
 800974c:	4413      	add	r3, r2
 800974e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b25b      	sxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	da16      	bge.n	8009788 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	211a      	movs	r1, #26
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800976a:	781a      	ldrb	r2, [r3, #0]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	211a      	movs	r1, #26
 8009776:	fb01 f303 	mul.w	r3, r1, r3
 800977a:	4413      	add	r3, r2
 800977c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009780:	881a      	ldrh	r2, [r3, #0]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	835a      	strh	r2, [r3, #26]
 8009786:	e015      	b.n	80097b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	211a      	movs	r1, #26
 800978e:	fb01 f303 	mul.w	r3, r1, r3
 8009792:	4413      	add	r3, r2
 8009794:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	211a      	movs	r1, #26
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80097ae:	881a      	ldrh	r2, [r3, #0]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	211a      	movs	r1, #26
 80097ba:	fb01 f303 	mul.w	r3, r1, r3
 80097be:	4413      	add	r3, r2
 80097c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	b25b      	sxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da16      	bge.n	80097fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	211a      	movs	r1, #26
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	211a      	movs	r1, #26
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80097f2:	881a      	ldrh	r2, [r3, #0]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	835a      	strh	r2, [r3, #26]
 80097f8:	e015      	b.n	8009826 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	211a      	movs	r1, #26
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	4413      	add	r3, r2
 8009806:	f203 3356 	addw	r3, r3, #854	; 0x356
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	211a      	movs	r1, #26
 8009816:	fb01 f303 	mul.w	r3, r1, r3
 800981a:	4413      	add	r3, r2
 800981c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009820:	881a      	ldrh	r2, [r3, #0]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	7b9b      	ldrb	r3, [r3, #14]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 fe84 	bl	800b53a <USBH_AllocPipe>
 8009832:	4603      	mov	r3, r0
 8009834:	461a      	mov	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	7bdb      	ldrb	r3, [r3, #15]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 fe7a 	bl	800b53a <USBH_AllocPipe>
 8009846:	4603      	mov	r3, r0
 8009848:	461a      	mov	r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	7b59      	ldrb	r1, [r3, #13]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	7b98      	ldrb	r0, [r3, #14]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	8b12      	ldrh	r2, [r2, #24]
 8009866:	9202      	str	r2, [sp, #8]
 8009868:	2202      	movs	r2, #2
 800986a:	9201      	str	r2, [sp, #4]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4623      	mov	r3, r4
 8009870:	4602      	mov	r2, r0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 fe32 	bl	800b4dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	7b19      	ldrb	r1, [r3, #12]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	7bd8      	ldrb	r0, [r3, #15]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	8b52      	ldrh	r2, [r2, #26]
 8009890:	9202      	str	r2, [sp, #8]
 8009892:	2202      	movs	r2, #2
 8009894:	9201      	str	r2, [sp, #4]
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	4623      	mov	r3, r4
 800989a:	4602      	mov	r2, r0
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 fe1d 	bl	800b4dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	7b5b      	ldrb	r3, [r3, #13]
 80098ae:	2200      	movs	r2, #0
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f002 f928 	bl	800bb08 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	7b1b      	ldrb	r3, [r3, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f002 f921 	bl	800bb08 <USBH_LL_SetToggle>

  return USBH_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd90      	pop	{r4, r7, pc}

080098d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 fe12 	bl	800b51a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 fe3d 	bl	800b57c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	7b1b      	ldrb	r3, [r3, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00e      	beq.n	800992e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	7b1b      	ldrb	r3, [r3, #12]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 fdff 	bl	800b51a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	7b1b      	ldrb	r3, [r3, #12]
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f001 fe2a 	bl	800b57c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	7b5b      	ldrb	r3, [r3, #13]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00e      	beq.n	8009954 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	7b5b      	ldrb	r3, [r3, #13]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 fdec 	bl	800b51a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	7b5b      	ldrb	r3, [r3, #13]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 fe17 	bl	800b57c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	4618      	mov	r0, r3
 800996a:	f002 f983 	bl	800bc74 <free>
    phost->pActiveClass->pData = 0U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009974:	2200      	movs	r2, #0
 8009976:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3340      	adds	r3, #64	; 0x40
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f8b1 	bl	8009b02 <GetLineCoding>
 80099a0:	4603      	mov	r3, r0
 80099a2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099b0:	2102      	movs	r1, #2
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80099b6:	7afb      	ldrb	r3, [r7, #11]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80099c8:	2301      	movs	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d877      	bhi.n	8009ad4 <USBH_CDC_Process+0x114>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <USBH_CDC_Process+0x2c>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a01 	.word	0x08009a01
 80099f0:	08009a07 	.word	0x08009a07
 80099f4:	08009a37 	.word	0x08009a37
 80099f8:	08009aab 	.word	0x08009aab
 80099fc:	08009ab9 	.word	0x08009ab9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
      break;
 8009a04:	e06d      	b.n	8009ae2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f897 	bl	8009b40 <SetLineCoding>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a24:	e058      	b.n	8009ad8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d055      	beq.n	8009ad8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2204      	movs	r2, #4
 8009a30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009a34:	e050      	b.n	8009ad8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	3340      	adds	r3, #64	; 0x40
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f860 	bl	8009b02 <GetLineCoding>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d126      	bne.n	8009a9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5e:	791b      	ldrb	r3, [r3, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d13b      	bne.n	8009adc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d133      	bne.n	8009adc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d12b      	bne.n	8009adc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d124      	bne.n	8009adc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f958 	bl	8009d48 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a98:	e020      	b.n	8009adc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d01d      	beq.n	8009adc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009aa8:	e018      	b.n	8009adc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f867 	bl	8009b7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f8da 	bl	8009c6a <CDC_ProcessReception>
      break;
 8009ab6:	e014      	b.n	8009ae2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009ab8:	2100      	movs	r1, #0
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 ffef 	bl	800aa9e <USBH_ClrFeature>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009ad2:	e005      	b.n	8009ae0 <USBH_CDC_Process+0x120>

    default:
      break;
 8009ad4:	bf00      	nop
 8009ad6:	e004      	b.n	8009ae2 <USBH_CDC_Process+0x122>
      break;
 8009ad8:	bf00      	nop
 8009ada:	e002      	b.n	8009ae2 <USBH_CDC_Process+0x122>
      break;
 8009adc:	bf00      	nop
 8009ade:	e000      	b.n	8009ae2 <USBH_CDC_Process+0x122>
      break;
 8009ae0:	bf00      	nop

  }

  return status;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	22a1      	movs	r2, #161	; 0xa1
 8009b10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2221      	movs	r2, #33	; 0x21
 8009b16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2207      	movs	r2, #7
 8009b28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2207      	movs	r2, #7
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 fa81 	bl	800b038 <USBH_CtlReq>
 8009b36:	4603      	mov	r3, r0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2221      	movs	r2, #33	; 0x21
 8009b4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2220      	movs	r2, #32
 8009b54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2207      	movs	r2, #7
 8009b66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2207      	movs	r2, #7
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f001 fa62 	bl	800b038 <USBH_CtlReq>
 8009b74:	4603      	mov	r3, r0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b086      	sub	sp, #24
 8009b82:	af02      	add	r7, sp, #8
 8009b84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b90:	2300      	movs	r3, #0
 8009b92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d002      	beq.n	8009ba4 <CDC_ProcessTransmission+0x26>
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d023      	beq.n	8009bea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009ba2:	e05e      	b.n	8009c62 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	8b12      	ldrh	r2, [r2, #24]
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d90b      	bls.n	8009bc8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	69d9      	ldr	r1, [r3, #28]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8b1a      	ldrh	r2, [r3, #24]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	7b5b      	ldrb	r3, [r3, #13]
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	9000      	str	r0, [sp, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 fc48 	bl	800b456 <USBH_BulkSendData>
 8009bc6:	e00b      	b.n	8009be0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	7b5b      	ldrb	r3, [r3, #13]
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	9000      	str	r0, [sp, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fc3b 	bl	800b456 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009be8:	e03b      	b.n	8009c62 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	7b5b      	ldrb	r3, [r3, #13]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f001 ff5f 	bl	800bab4 <USBH_LL_GetURBState>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d128      	bne.n	8009c52 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	8b12      	ldrh	r2, [r2, #24]
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d90e      	bls.n	8009c2a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	8b12      	ldrh	r2, [r2, #24]
 8009c14:	1a9a      	subs	r2, r3, r2
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	8b12      	ldrh	r2, [r2, #24]
 8009c22:	441a      	add	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	61da      	str	r2, [r3, #28]
 8009c28:	e002      	b.n	8009c30 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d004      	beq.n	8009c42 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009c40:	e00e      	b.n	8009c60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f868 	bl	8009d20 <USBH_CDC_TransmitCallback>
      break;
 8009c50:	e006      	b.n	8009c60 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d103      	bne.n	8009c60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009c60:	bf00      	nop
  }
}
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b086      	sub	sp, #24
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d002      	beq.n	8009c90 <CDC_ProcessReception+0x26>
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d00e      	beq.n	8009cac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009c8e:	e043      	b.n	8009d18 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6a19      	ldr	r1, [r3, #32]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	8b5a      	ldrh	r2, [r3, #26]
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	7b1b      	ldrb	r3, [r3, #12]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 fbff 	bl	800b4a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2204      	movs	r2, #4
 8009ca6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009caa:	e035      	b.n	8009d18 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	7b1b      	ldrb	r3, [r3, #12]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fefe 	bl	800bab4 <USBH_LL_GetURBState>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009cbc:	7cfb      	ldrb	r3, [r7, #19]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d129      	bne.n	8009d16 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	7b1b      	ldrb	r3, [r3, #12]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 fe61 	bl	800b990 <USBH_LL_GetLastXferSize>
 8009cce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d016      	beq.n	8009d08 <CDC_ProcessReception+0x9e>
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	8b5b      	ldrh	r3, [r3, #26]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d910      	bls.n	8009d08 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	1ad2      	subs	r2, r2, r3
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	6a1a      	ldr	r2, [r3, #32]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	441a      	add	r2, r3
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2203      	movs	r2, #3
 8009d02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009d06:	e006      	b.n	8009d16 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f80f 	bl	8009d34 <USBH_CDC_ReceiveCallback>
      break;
 8009d16:	bf00      	nop
  }
}
 8009d18:	bf00      	nop
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009d70:	2302      	movs	r3, #2
 8009d72:	e029      	b.n	8009dc8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	79fa      	ldrb	r2, [r7, #7]
 8009d78:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f81f 	bl	8009dd0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f001 fd31 	bl	800b828 <USBH_LL_Init>

  return USBH_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e009      	b.n	8009df6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	33e0      	adds	r3, #224	; 0xe0
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	2200      	movs	r2, #0
 8009dee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3301      	adds	r3, #1
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b0f      	cmp	r3, #15
 8009dfa:	d9f2      	bls.n	8009de2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e009      	b.n	8009e16 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3301      	adds	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e1c:	d3f1      	bcc.n	8009e02 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2240      	movs	r2, #64	; 0x40
 8009e42:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d016      	beq.n	8009eba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10e      	bne.n	8009eb4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e9c:	1c59      	adds	r1, r3, #1
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	33de      	adds	r3, #222	; 0xde
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
 8009eb2:	e004      	b.n	8009ebe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	73fb      	strb	r3, [r7, #15]
 8009eb8:	e001      	b.n	8009ebe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009eba:	2302      	movs	r3, #2
 8009ebc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d204      	bcs.n	8009ef2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	78fa      	ldrb	r2, [r7, #3]
 8009eec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009ef0:	e001      	b.n	8009ef6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	4611      	mov	r1, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	70fb      	strb	r3, [r7, #3]
 8009f16:	460b      	mov	r3, r1
 8009f18:	70bb      	strb	r3, [r7, #2]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f2e:	e025      	b.n	8009f7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	221a      	movs	r2, #26
 8009f34:	fb02 f303 	mul.w	r3, r2, r3
 8009f38:	3308      	adds	r3, #8
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	3302      	adds	r3, #2
 8009f40:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	795b      	ldrb	r3, [r3, #5]
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d002      	beq.n	8009f52 <USBH_FindInterface+0x4e>
 8009f4c:	78fb      	ldrb	r3, [r7, #3]
 8009f4e:	2bff      	cmp	r3, #255	; 0xff
 8009f50:	d111      	bne.n	8009f76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f56:	78ba      	ldrb	r2, [r7, #2]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d002      	beq.n	8009f62 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f5c:	78bb      	ldrb	r3, [r7, #2]
 8009f5e:	2bff      	cmp	r3, #255	; 0xff
 8009f60:	d109      	bne.n	8009f76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f66:	787a      	ldrb	r2, [r7, #1]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d002      	beq.n	8009f72 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f6c:	787b      	ldrb	r3, [r7, #1]
 8009f6e:	2bff      	cmp	r3, #255	; 0xff
 8009f70:	d101      	bne.n	8009f76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	e006      	b.n	8009f84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d9d6      	bls.n	8009f30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009f82:	23ff      	movs	r3, #255	; 0xff
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	371c      	adds	r7, #28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fc81 	bl	800b8a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f001 fd9a 	bl	800bada <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af04      	add	r7, sp, #16
 8009fb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d102      	bne.n	8009fd2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2203      	movs	r2, #3
 8009fd0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b0b      	cmp	r3, #11
 8009fda:	f200 81be 	bhi.w	800a35a <USBH_Process+0x3aa>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <USBH_Process+0x34>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a015 	.word	0x0800a015
 8009fe8:	0800a047 	.word	0x0800a047
 8009fec:	0800a0af 	.word	0x0800a0af
 8009ff0:	0800a2f5 	.word	0x0800a2f5
 8009ff4:	0800a35b 	.word	0x0800a35b
 8009ff8:	0800a153 	.word	0x0800a153
 8009ffc:	0800a29b 	.word	0x0800a29b
 800a000:	0800a189 	.word	0x0800a189
 800a004:	0800a1a9 	.word	0x0800a1a9
 800a008:	0800a1c9 	.word	0x0800a1c9
 800a00c:	0800a20d 	.word	0x0800a20d
 800a010:	0800a2dd 	.word	0x0800a2dd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 819e 	beq.w	800a35e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a028:	20c8      	movs	r0, #200	; 0xc8
 800a02a:	f001 fd9d 	bl	800bb68 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f001 fc93 	bl	800b95a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a044:	e18b      	b.n	800a35e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d107      	bne.n	800a060 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a05e:	e18d      	b.n	800a37c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a06a:	d914      	bls.n	800a096 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a072:	3301      	adds	r3, #1
 800a074:	b2da      	uxtb	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a082:	2b03      	cmp	r3, #3
 800a084:	d903      	bls.n	800a08e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	220d      	movs	r2, #13
 800a08a:	701a      	strb	r2, [r3, #0]
      break;
 800a08c:	e176      	b.n	800a37c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
      break;
 800a094:	e172      	b.n	800a37c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a09c:	f103 020a 	add.w	r2, r3, #10
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a0a6:	200a      	movs	r0, #10
 800a0a8:	f001 fd5e 	bl	800bb68 <USBH_Delay>
      break;
 800a0ac:	e166      	b.n	800a37c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0be:	2104      	movs	r1, #4
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a0c4:	2064      	movs	r0, #100	; 0x64
 800a0c6:	f001 fd4f 	bl	800bb68 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 fc1e 	bl	800b90c <USBH_LL_GetSpeed>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2205      	movs	r2, #5
 800a0de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 fa29 	bl	800b53a <USBH_AllocPipe>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a0f0:	2180      	movs	r1, #128	; 0x80
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 fa21 	bl	800b53a <USBH_AllocPipe>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	7919      	ldrb	r1, [r3, #4]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a114:	b292      	uxth	r2, r2
 800a116:	9202      	str	r2, [sp, #8]
 800a118:	2200      	movs	r2, #0
 800a11a:	9201      	str	r2, [sp, #4]
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	4603      	mov	r3, r0
 800a120:	2280      	movs	r2, #128	; 0x80
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 f9da 	bl	800b4dc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7959      	ldrb	r1, [r3, #5]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a13c:	b292      	uxth	r2, r2
 800a13e:	9202      	str	r2, [sp, #8]
 800a140:	2200      	movs	r2, #0
 800a142:	9201      	str	r2, [sp, #4]
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	4603      	mov	r3, r0
 800a148:	2200      	movs	r2, #0
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 f9c6 	bl	800b4dc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a150:	e114      	b.n	800a37c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f918 	bl	800a388 <USBH_HandleEnum>
 800a158:	4603      	mov	r3, r0
 800a15a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 80fe 	bne.w	800a362 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a174:	2b01      	cmp	r3, #1
 800a176:	d103      	bne.n	800a180 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2208      	movs	r2, #8
 800a17c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a17e:	e0f0      	b.n	800a362 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2207      	movs	r2, #7
 800a184:	701a      	strb	r2, [r3, #0]
      break;
 800a186:	e0ec      	b.n	800a362 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 80e9 	beq.w	800a366 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a19a:	2101      	movs	r1, #1
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2208      	movs	r2, #8
 800a1a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a1a6:	e0de      	b.n	800a366 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fc2c 	bl	800aa10 <USBH_SetCfg>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f040 80d5 	bne.w	800a36a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2209      	movs	r2, #9
 800a1c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1c6:	e0d0      	b.n	800a36a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d016      	beq.n	800a204 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fc3c 	bl	800aa56 <USBH_SetFeature>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	220a      	movs	r2, #10
 800a1ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1f0:	e0bd      	b.n	800a36e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	f040 80b9 	bne.w	800a36e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	220a      	movs	r2, #10
 800a200:	701a      	strb	r2, [r3, #0]
      break;
 800a202:	e0b4      	b.n	800a36e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	220a      	movs	r2, #10
 800a208:	701a      	strb	r2, [r3, #0]
      break;
 800a20a:	e0b0      	b.n	800a36e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 80ad 	beq.w	800a372 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a220:	2300      	movs	r3, #0
 800a222:	73fb      	strb	r3, [r7, #15]
 800a224:	e016      	b.n	800a254 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	32de      	adds	r2, #222	; 0xde
 800a22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a230:	791a      	ldrb	r2, [r3, #4]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a238:	429a      	cmp	r2, r3
 800a23a:	d108      	bne.n	800a24e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a23c:	7bfa      	ldrb	r2, [r7, #15]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32de      	adds	r2, #222	; 0xde
 800a242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a24c:	e005      	b.n	800a25a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	3301      	adds	r3, #1
 800a252:	73fb      	strb	r3, [r7, #15]
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0e5      	beq.n	800a226 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d016      	beq.n	800a292 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	4798      	blx	r3
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d109      	bne.n	800a28a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2206      	movs	r2, #6
 800a27a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a282:	2103      	movs	r1, #3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a288:	e073      	b.n	800a372 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	220d      	movs	r2, #13
 800a28e:	701a      	strb	r2, [r3, #0]
      break;
 800a290:	e06f      	b.n	800a372 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	220d      	movs	r2, #13
 800a296:	701a      	strb	r2, [r3, #0]
      break;
 800a298:	e06b      	b.n	800a372 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d017      	beq.n	800a2d4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	4798      	blx	r3
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d103      	bne.n	800a2c4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	220b      	movs	r2, #11
 800a2c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a2c2:	e058      	b.n	800a376 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d154      	bne.n	800a376 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	220d      	movs	r2, #13
 800a2d0:	701a      	strb	r2, [r3, #0]
      break;
 800a2d2:	e050      	b.n	800a376 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	220d      	movs	r2, #13
 800a2d8:	701a      	strb	r2, [r3, #0]
      break;
 800a2da:	e04c      	b.n	800a376 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d049      	beq.n	800a37a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
      }
      break;
 800a2f2:	e042      	b.n	800a37a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fd67 	bl	8009dd0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d009      	beq.n	800a320 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d005      	beq.n	800a336 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a330:	2105      	movs	r1, #5
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d107      	bne.n	800a352 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff fe20 	bl	8009f90 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a350:	e014      	b.n	800a37c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 faa4 	bl	800b8a0 <USBH_LL_Start>
      break;
 800a358:	e010      	b.n	800a37c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a35a:	bf00      	nop
 800a35c:	e00e      	b.n	800a37c <USBH_Process+0x3cc>
      break;
 800a35e:	bf00      	nop
 800a360:	e00c      	b.n	800a37c <USBH_Process+0x3cc>
      break;
 800a362:	bf00      	nop
 800a364:	e00a      	b.n	800a37c <USBH_Process+0x3cc>
    break;
 800a366:	bf00      	nop
 800a368:	e008      	b.n	800a37c <USBH_Process+0x3cc>
      break;
 800a36a:	bf00      	nop
 800a36c:	e006      	b.n	800a37c <USBH_Process+0x3cc>
      break;
 800a36e:	bf00      	nop
 800a370:	e004      	b.n	800a37c <USBH_Process+0x3cc>
      break;
 800a372:	bf00      	nop
 800a374:	e002      	b.n	800a37c <USBH_Process+0x3cc>
      break;
 800a376:	bf00      	nop
 800a378:	e000      	b.n	800a37c <USBH_Process+0x3cc>
      break;
 800a37a:	bf00      	nop
  }
  return USBH_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop

0800a388 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af04      	add	r7, sp, #16
 800a38e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a390:	2301      	movs	r3, #1
 800a392:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a394:	2301      	movs	r3, #1
 800a396:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	785b      	ldrb	r3, [r3, #1]
 800a39c:	2b07      	cmp	r3, #7
 800a39e:	f200 81c1 	bhi.w	800a724 <USBH_HandleEnum+0x39c>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <USBH_HandleEnum+0x20>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	0800a487 	.word	0x0800a487
 800a3b0:	0800a4f1 	.word	0x0800a4f1
 800a3b4:	0800a57f 	.word	0x0800a57f
 800a3b8:	0800a5e9 	.word	0x0800a5e9
 800a3bc:	0800a659 	.word	0x0800a659
 800a3c0:	0800a69f 	.word	0x0800a69f
 800a3c4:	0800a6e5 	.word	0x0800a6e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a3c8:	2108      	movs	r1, #8
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa50 	bl	800a870 <USBH_Get_DevDesc>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d130      	bne.n	800a43c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	7919      	ldrb	r1, [r3, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a3fe:	b292      	uxth	r2, r2
 800a400:	9202      	str	r2, [sp, #8]
 800a402:	2200      	movs	r2, #0
 800a404:	9201      	str	r2, [sp, #4]
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	4603      	mov	r3, r0
 800a40a:	2280      	movs	r2, #128	; 0x80
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 f865 	bl	800b4dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	7959      	ldrb	r1, [r3, #5]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a426:	b292      	uxth	r2, r2
 800a428:	9202      	str	r2, [sp, #8]
 800a42a:	2200      	movs	r2, #0
 800a42c:	9201      	str	r2, [sp, #4]
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	4603      	mov	r3, r0
 800a432:	2200      	movs	r2, #0
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f851 	bl	800b4dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a43a:	e175      	b.n	800a728 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	2b03      	cmp	r3, #3
 800a440:	f040 8172 	bne.w	800a728 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a44a:	3301      	adds	r3, #1
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d903      	bls.n	800a466 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	220d      	movs	r2, #13
 800a462:	701a      	strb	r2, [r3, #0]
      break;
 800a464:	e160      	b.n	800a728 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	795b      	ldrb	r3, [r3, #5]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 f885 	bl	800b57c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	791b      	ldrb	r3, [r3, #4]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 f87f 	bl	800b57c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
      break;
 800a484:	e150      	b.n	800a728 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a486:	2112      	movs	r1, #18
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f9f1 	bl	800a870 <USBH_Get_DevDesc>
 800a48e:	4603      	mov	r3, r0
 800a490:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d103      	bne.n	800a4a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2202      	movs	r2, #2
 800a49c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a49e:	e145      	b.n	800a72c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	f040 8142 	bne.w	800a72c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d903      	bls.n	800a4ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	220d      	movs	r2, #13
 800a4c6:	701a      	strb	r2, [r3, #0]
      break;
 800a4c8:	e130      	b.n	800a72c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	795b      	ldrb	r3, [r3, #5]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 f853 	bl	800b57c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	791b      	ldrb	r3, [r3, #4]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 f84d 	bl	800b57c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	701a      	strb	r2, [r3, #0]
      break;
 800a4ee:	e11d      	b.n	800a72c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa68 	bl	800a9c8 <USBH_SetAddress>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4fc:	7bbb      	ldrb	r3, [r7, #14]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d132      	bne.n	800a568 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a502:	2002      	movs	r0, #2
 800a504:	f001 fb30 	bl	800bb68 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2203      	movs	r2, #3
 800a514:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	7919      	ldrb	r1, [r3, #4]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a52a:	b292      	uxth	r2, r2
 800a52c:	9202      	str	r2, [sp, #8]
 800a52e:	2200      	movs	r2, #0
 800a530:	9201      	str	r2, [sp, #4]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	4603      	mov	r3, r0
 800a536:	2280      	movs	r2, #128	; 0x80
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 ffcf 	bl	800b4dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7959      	ldrb	r1, [r3, #5]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a552:	b292      	uxth	r2, r2
 800a554:	9202      	str	r2, [sp, #8]
 800a556:	2200      	movs	r2, #0
 800a558:	9201      	str	r2, [sp, #4]
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	4603      	mov	r3, r0
 800a55e:	2200      	movs	r2, #0
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 ffbb 	bl	800b4dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a566:	e0e3      	b.n	800a730 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a568:	7bbb      	ldrb	r3, [r7, #14]
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	f040 80e0 	bne.w	800a730 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	220d      	movs	r2, #13
 800a574:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	705a      	strb	r2, [r3, #1]
      break;
 800a57c:	e0d8      	b.n	800a730 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a57e:	2109      	movs	r1, #9
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f99d 	bl	800a8c0 <USBH_Get_CfgDesc>
 800a586:	4603      	mov	r3, r0
 800a588:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d103      	bne.n	800a598 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2204      	movs	r2, #4
 800a594:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a596:	e0cd      	b.n	800a734 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a598:	7bbb      	ldrb	r3, [r7, #14]
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	f040 80ca 	bne.w	800a734 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d903      	bls.n	800a5c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	220d      	movs	r2, #13
 800a5be:	701a      	strb	r2, [r3, #0]
      break;
 800a5c0:	e0b8      	b.n	800a734 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	795b      	ldrb	r3, [r3, #5]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 ffd7 	bl	800b57c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	791b      	ldrb	r3, [r3, #4]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 ffd1 	bl	800b57c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
      break;
 800a5e6:	e0a5      	b.n	800a734 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f965 	bl	800a8c0 <USBH_Get_CfgDesc>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d103      	bne.n	800a608 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2205      	movs	r2, #5
 800a604:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a606:	e097      	b.n	800a738 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	f040 8094 	bne.w	800a738 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a616:	3301      	adds	r3, #1
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a626:	2b03      	cmp	r3, #3
 800a628:	d903      	bls.n	800a632 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	220d      	movs	r2, #13
 800a62e:	701a      	strb	r2, [r3, #0]
      break;
 800a630:	e082      	b.n	800a738 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	795b      	ldrb	r3, [r3, #5]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 ff9f 	bl	800b57c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	791b      	ldrb	r3, [r3, #4]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 ff99 	bl	800b57c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	701a      	strb	r2, [r3, #0]
      break;
 800a656:	e06f      	b.n	800a738 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d019      	beq.n	800a696 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a66e:	23ff      	movs	r3, #255	; 0xff
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f949 	bl	800a908 <USBH_Get_StringDesc>
 800a676:	4603      	mov	r3, r0
 800a678:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d103      	bne.n	800a688 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2206      	movs	r2, #6
 800a684:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a686:	e059      	b.n	800a73c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d156      	bne.n	800a73c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2206      	movs	r2, #6
 800a692:	705a      	strb	r2, [r3, #1]
      break;
 800a694:	e052      	b.n	800a73c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2206      	movs	r2, #6
 800a69a:	705a      	strb	r2, [r3, #1]
      break;
 800a69c:	e04e      	b.n	800a73c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d019      	beq.n	800a6dc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a6b4:	23ff      	movs	r3, #255	; 0xff
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f926 	bl	800a908 <USBH_Get_StringDesc>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d103      	bne.n	800a6ce <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2207      	movs	r2, #7
 800a6ca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a6cc:	e038      	b.n	800a740 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d135      	bne.n	800a740 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2207      	movs	r2, #7
 800a6d8:	705a      	strb	r2, [r3, #1]
      break;
 800a6da:	e031      	b.n	800a740 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2207      	movs	r2, #7
 800a6e0:	705a      	strb	r2, [r3, #1]
      break;
 800a6e2:	e02d      	b.n	800a740 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d017      	beq.n	800a71e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a6fa:	23ff      	movs	r3, #255	; 0xff
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f903 	bl	800a908 <USBH_Get_StringDesc>
 800a702:	4603      	mov	r3, r0
 800a704:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a710:	e018      	b.n	800a744 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d115      	bne.n	800a744 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
      break;
 800a71c:	e012      	b.n	800a744 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73fb      	strb	r3, [r7, #15]
      break;
 800a722:	e00f      	b.n	800a744 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a724:	bf00      	nop
 800a726:	e00e      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a728:	bf00      	nop
 800a72a:	e00c      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a72c:	bf00      	nop
 800a72e:	e00a      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a730:	bf00      	nop
 800a732:	e008      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a734:	bf00      	nop
 800a736:	e006      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a738:	bf00      	nop
 800a73a:	e004      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a73c:	bf00      	nop
 800a73e:	e002      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a740:	bf00      	nop
 800a742:	e000      	b.n	800a746 <USBH_HandleEnum+0x3be>
      break;
 800a744:	bf00      	nop
  }
  return Status;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a762:	bf00      	nop
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f804 	bl	800a792 <USBH_HandleSof>
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b0b      	cmp	r3, #11
 800a7a2:	d10a      	bne.n	800a7ba <USBH_HandleSof+0x28>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d005      	beq.n	800a7ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a7d2:	bf00      	nop
}
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a7ee:	bf00      	nop
}
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f001 f844 	bl	800b8d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	791b      	ldrb	r3, [r3, #4]
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fe91 	bl	800b57c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	795b      	ldrb	r3, [r3, #5]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fe8b 	bl	800b57c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af02      	add	r7, sp, #8
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	b29b      	uxth	r3, r3
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	4613      	mov	r3, r2
 800a88a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a88e:	2100      	movs	r1, #0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f864 	bl	800a95e <USBH_GetDescriptor>
 800a896:	4603      	mov	r3, r0
 800a898:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	b292      	uxth	r2, r2
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f000 f918 	bl	800aae6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af02      	add	r7, sp, #8
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	331c      	adds	r3, #28
 800a8d0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a8d2:	887b      	ldrh	r3, [r7, #2]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8dc:	2100      	movs	r1, #0
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f83d 	bl	800a95e <USBH_GetDescriptor>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d107      	bne.n	800a8fe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a8ee:	887b      	ldrh	r3, [r7, #2]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	68b9      	ldr	r1, [r7, #8]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f987 	bl	800ac08 <USBH_ParseCfgDesc>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af02      	add	r7, sp, #8
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	607a      	str	r2, [r7, #4]
 800a912:	461a      	mov	r2, r3
 800a914:	460b      	mov	r3, r1
 800a916:	72fb      	strb	r3, [r7, #11]
 800a918:	4613      	mov	r3, r2
 800a91a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a924:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a92c:	893b      	ldrh	r3, [r7, #8]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	460b      	mov	r3, r1
 800a932:	2100      	movs	r1, #0
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 f812 	bl	800a95e <USBH_GetDescriptor>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d107      	bne.n	800a954 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a94a:	893a      	ldrh	r2, [r7, #8]
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 fb24 	bl	800af9c <USBH_ParseStringDesc>
  }

  return status;
 800a954:	7dfb      	ldrb	r3, [r7, #23]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	607b      	str	r3, [r7, #4]
 800a968:	460b      	mov	r3, r1
 800a96a:	72fb      	strb	r3, [r7, #11]
 800a96c:	4613      	mov	r3, r2
 800a96e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	789b      	ldrb	r3, [r3, #2]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d11c      	bne.n	800a9b2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a978:	7afb      	ldrb	r3, [r7, #11]
 800a97a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2206      	movs	r2, #6
 800a988:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	893a      	ldrh	r2, [r7, #8]
 800a98e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a990:	893b      	ldrh	r3, [r7, #8]
 800a992:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a99a:	d104      	bne.n	800a9a6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f240 4209 	movw	r2, #1033	; 0x409
 800a9a2:	829a      	strh	r2, [r3, #20]
 800a9a4:	e002      	b.n	800a9ac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8b3a      	ldrh	r2, [r7, #24]
 800a9b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a9b2:	8b3b      	ldrh	r3, [r7, #24]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 fb3d 	bl	800b038 <USBH_CtlReq>
 800a9be:	4603      	mov	r3, r0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	789b      	ldrb	r3, [r3, #2]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10f      	bne.n	800a9fc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2205      	movs	r2, #5
 800a9e6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fb19 	bl	800b038 <USBH_CtlReq>
 800aa06:	4603      	mov	r3, r0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	789b      	ldrb	r3, [r3, #2]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d10e      	bne.n	800aa42 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2209      	movs	r2, #9
 800aa2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	887a      	ldrh	r2, [r7, #2]
 800aa34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa42:	2200      	movs	r2, #0
 800aa44:	2100      	movs	r1, #0
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 faf6 	bl	800b038 <USBH_CtlReq>
 800aa4c:	4603      	mov	r3, r0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	789b      	ldrb	r3, [r3, #2]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d10f      	bne.n	800aa8a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2203      	movs	r2, #3
 800aa74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fad2 	bl	800b038 <USBH_CtlReq>
 800aa94:	4603      	mov	r3, r0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	789b      	ldrb	r3, [r3, #2]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d10f      	bne.n	800aad2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2202      	movs	r2, #2
 800aab6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800aad2:	2200      	movs	r2, #0
 800aad4:	2100      	movs	r1, #0
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 faae 	bl	800b038 <USBH_CtlReq>
 800aadc:	4603      	mov	r3, r0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	785a      	ldrb	r2, [r3, #1]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3302      	adds	r3, #2
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	3303      	adds	r3, #3
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	791a      	ldrb	r2, [r3, #4]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	795a      	ldrb	r2, [r3, #5]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	799a      	ldrb	r2, [r3, #6]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	79da      	ldrb	r2, [r3, #7]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	79db      	ldrb	r3, [r3, #7]
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	dc11      	bgt.n	800ab6c <USBH_ParseDevDesc+0x86>
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	db16      	blt.n	800ab7a <USBH_ParseDevDesc+0x94>
 800ab4c:	3b08      	subs	r3, #8
 800ab4e:	2201      	movs	r2, #1
 800ab50:	fa02 f303 	lsl.w	r3, r2, r3
 800ab54:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ab58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bf14      	ite	ne
 800ab60:	2301      	movne	r3, #1
 800ab62:	2300      	moveq	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d102      	bne.n	800ab70 <USBH_ParseDevDesc+0x8a>
 800ab6a:	e006      	b.n	800ab7a <USBH_ParseDevDesc+0x94>
 800ab6c:	2b40      	cmp	r3, #64	; 0x40
 800ab6e:	d104      	bne.n	800ab7a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	79da      	ldrb	r2, [r3, #7]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	71da      	strb	r2, [r3, #7]
      break;
 800ab78:	e003      	b.n	800ab82 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2240      	movs	r2, #64	; 0x40
 800ab7e:	71da      	strb	r2, [r3, #7]
      break;
 800ab80:	bf00      	nop
  }

  if (length > 8U)
 800ab82:	88fb      	ldrh	r3, [r7, #6]
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d939      	bls.n	800abfc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	3308      	adds	r3, #8
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	3309      	adds	r3, #9
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	330a      	adds	r3, #10
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b29a      	uxth	r2, r3
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	330b      	adds	r3, #11
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	021b      	lsls	r3, r3, #8
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	4313      	orrs	r3, r2
 800abba:	b29a      	uxth	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	330c      	adds	r3, #12
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	330d      	adds	r3, #13
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	021b      	lsls	r3, r3, #8
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4313      	orrs	r3, r2
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	7b9a      	ldrb	r2, [r3, #14]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	7bda      	ldrb	r2, [r3, #15]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	7c1a      	ldrb	r2, [r3, #16]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	7c5a      	ldrb	r2, [r3, #17]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	745a      	strb	r2, [r3, #17]
  }
}
 800abfc:	bf00      	nop
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08c      	sub	sp, #48	; 0x30
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac1c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	785a      	ldrb	r2, [r3, #1]
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	3302      	adds	r3, #2
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	3303      	adds	r3, #3
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	021b      	lsls	r3, r3, #8
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac64:	bf28      	it	cs
 800ac66:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	791a      	ldrb	r2, [r3, #4]
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	795a      	ldrb	r2, [r3, #5]
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	799a      	ldrb	r2, [r3, #6]
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	79da      	ldrb	r2, [r3, #7]
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	7a1a      	ldrb	r2, [r3, #8]
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b09      	cmp	r3, #9
 800ac9e:	d002      	beq.n	800aca6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	2209      	movs	r2, #9
 800aca4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	2b09      	cmp	r3, #9
 800acaa:	f240 809d 	bls.w	800ade8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800acae:	2309      	movs	r3, #9
 800acb0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800acb6:	e081      	b.n	800adbc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800acb8:	f107 0316 	add.w	r3, r7, #22
 800acbc:	4619      	mov	r1, r3
 800acbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acc0:	f000 f99f 	bl	800b002 <USBH_GetNextDesc>
 800acc4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	785b      	ldrb	r3, [r3, #1]
 800acca:	2b04      	cmp	r3, #4
 800accc:	d176      	bne.n	800adbc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b09      	cmp	r3, #9
 800acd4:	d002      	beq.n	800acdc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	2209      	movs	r2, #9
 800acda:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800acdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ace0:	221a      	movs	r2, #26
 800ace2:	fb02 f303 	mul.w	r3, r2, r3
 800ace6:	3308      	adds	r3, #8
 800ace8:	6a3a      	ldr	r2, [r7, #32]
 800acea:	4413      	add	r3, r2
 800acec:	3302      	adds	r3, #2
 800acee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800acf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acf2:	69f8      	ldr	r0, [r7, #28]
 800acf4:	f000 f87e 	bl	800adf4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad02:	e043      	b.n	800ad8c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad04:	f107 0316 	add.w	r3, r7, #22
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad0c:	f000 f979 	bl	800b002 <USBH_GetNextDesc>
 800ad10:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	2b05      	cmp	r3, #5
 800ad18:	d138      	bne.n	800ad8c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	795b      	ldrb	r3, [r3, #5]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d10f      	bne.n	800ad42 <USBH_ParseCfgDesc+0x13a>
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	799b      	ldrb	r3, [r3, #6]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d10b      	bne.n	800ad42 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	79db      	ldrb	r3, [r3, #7]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10f      	bne.n	800ad52 <USBH_ParseCfgDesc+0x14a>
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b09      	cmp	r3, #9
 800ad38:	d00b      	beq.n	800ad52 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	2209      	movs	r2, #9
 800ad3e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ad40:	e007      	b.n	800ad52 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	2b07      	cmp	r3, #7
 800ad48:	d004      	beq.n	800ad54 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	2207      	movs	r2, #7
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e000      	b.n	800ad54 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ad52:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ad54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ad5c:	3201      	adds	r2, #1
 800ad5e:	00d2      	lsls	r2, r2, #3
 800ad60:	211a      	movs	r1, #26
 800ad62:	fb01 f303 	mul.w	r3, r1, r3
 800ad66:	4413      	add	r3, r2
 800ad68:	3308      	adds	r3, #8
 800ad6a:	6a3a      	ldr	r2, [r7, #32]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	3304      	adds	r3, #4
 800ad70:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ad72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad74:	69b9      	ldr	r1, [r7, #24]
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 f86b 	bl	800ae52 <USBH_ParseEPDesc>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ad82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad86:	3301      	adds	r3, #1
 800ad88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	791b      	ldrb	r3, [r3, #4]
 800ad90:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d204      	bcs.n	800ada2 <USBH_ParseCfgDesc+0x19a>
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	885a      	ldrh	r2, [r3, #2]
 800ad9c:	8afb      	ldrh	r3, [r7, #22]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d8b0      	bhi.n	800ad04 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	791b      	ldrb	r3, [r3, #4]
 800ada6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800adaa:	429a      	cmp	r2, r3
 800adac:	d201      	bcs.n	800adb2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800adae:	2303      	movs	r3, #3
 800adb0:	e01c      	b.n	800adec <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800adb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adb6:	3301      	adds	r3, #1
 800adb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800adbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d805      	bhi.n	800add0 <USBH_ParseCfgDesc+0x1c8>
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	885a      	ldrh	r2, [r3, #2]
 800adc8:	8afb      	ldrh	r3, [r7, #22]
 800adca:	429a      	cmp	r2, r3
 800adcc:	f63f af74 	bhi.w	800acb8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	791b      	ldrb	r3, [r3, #4]
 800add4:	2b02      	cmp	r3, #2
 800add6:	bf28      	it	cs
 800add8:	2302      	movcs	r3, #2
 800adda:	b2db      	uxtb	r3, r3
 800addc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d201      	bcs.n	800ade8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e001      	b.n	800adec <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ade8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800adec:	4618      	mov	r0, r3
 800adee:	3730      	adds	r7, #48	; 0x30
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	785a      	ldrb	r2, [r3, #1]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	789a      	ldrb	r2, [r3, #2]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	78da      	ldrb	r2, [r3, #3]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	791a      	ldrb	r2, [r3, #4]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	795a      	ldrb	r2, [r3, #5]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	799a      	ldrb	r2, [r3, #6]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	79da      	ldrb	r2, [r3, #7]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	7a1a      	ldrb	r2, [r3, #8]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	721a      	strb	r2, [r3, #8]
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b087      	sub	sp, #28
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	60f8      	str	r0, [r7, #12]
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	781a      	ldrb	r2, [r3, #0]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	785a      	ldrb	r2, [r3, #1]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	789a      	ldrb	r2, [r3, #2]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	78da      	ldrb	r2, [r3, #3]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3304      	adds	r3, #4
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3305      	adds	r3, #5
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	4313      	orrs	r3, r2
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	799a      	ldrb	r2, [r3, #6]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	889b      	ldrh	r3, [r3, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d102      	bne.n	800aeb4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	75fb      	strb	r3, [r7, #23]
 800aeb2:	e033      	b.n	800af1c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	889b      	ldrh	r3, [r3, #4]
 800aeb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aebc:	f023 0307 	bic.w	r3, r3, #7
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	889b      	ldrh	r3, [r3, #4]
 800aeca:	b21a      	sxth	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3304      	adds	r3, #4
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	b299      	uxth	r1, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3305      	adds	r3, #5
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	b29b      	uxth	r3, r3
 800aee0:	430b      	orrs	r3, r1
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d110      	bne.n	800af0e <USBH_ParseEPDesc+0xbc>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3304      	adds	r3, #4
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b299      	uxth	r1, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3305      	adds	r3, #5
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	021b      	lsls	r3, r3, #8
 800aefe:	b29b      	uxth	r3, r3
 800af00:	430b      	orrs	r3, r1
 800af02:	b29b      	uxth	r3, r3
 800af04:	b21b      	sxth	r3, r3
 800af06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af0a:	b21b      	sxth	r3, r3
 800af0c:	e001      	b.n	800af12 <USBH_ParseEPDesc+0xc0>
 800af0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af12:	4313      	orrs	r3, r2
 800af14:	b21b      	sxth	r3, r3
 800af16:	b29a      	uxth	r2, r3
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af22:	2b00      	cmp	r3, #0
 800af24:	d116      	bne.n	800af54 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	f003 0303 	and.w	r3, r3, #3
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d005      	beq.n	800af3e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	78db      	ldrb	r3, [r3, #3]
 800af36:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d127      	bne.n	800af8e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	799b      	ldrb	r3, [r3, #6]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <USBH_ParseEPDesc+0xfc>
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	799b      	ldrb	r3, [r3, #6]
 800af4a:	2b10      	cmp	r3, #16
 800af4c:	d91f      	bls.n	800af8e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800af4e:	2303      	movs	r3, #3
 800af50:	75fb      	strb	r3, [r7, #23]
 800af52:	e01c      	b.n	800af8e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	78db      	ldrb	r3, [r3, #3]
 800af58:	f003 0303 	and.w	r3, r3, #3
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d10a      	bne.n	800af76 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	799b      	ldrb	r3, [r3, #6]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d003      	beq.n	800af70 <USBH_ParseEPDesc+0x11e>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	799b      	ldrb	r3, [r3, #6]
 800af6c:	2b10      	cmp	r3, #16
 800af6e:	d90e      	bls.n	800af8e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800af70:	2303      	movs	r3, #3
 800af72:	75fb      	strb	r3, [r7, #23]
 800af74:	e00b      	b.n	800af8e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	78db      	ldrb	r3, [r3, #3]
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	2b03      	cmp	r3, #3
 800af80:	d105      	bne.n	800af8e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	799b      	ldrb	r3, [r3, #6]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800af8a:	2303      	movs	r3, #3
 800af8c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af90:	4618      	mov	r0, r3
 800af92:	371c      	adds	r7, #28
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	4613      	mov	r3, r2
 800afa8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	3301      	adds	r3, #1
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d120      	bne.n	800aff6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	1e9a      	subs	r2, r3, #2
 800afba:	88fb      	ldrh	r3, [r7, #6]
 800afbc:	4293      	cmp	r3, r2
 800afbe:	bf28      	it	cs
 800afc0:	4613      	movcs	r3, r2
 800afc2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3302      	adds	r3, #2
 800afc8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800afca:	2300      	movs	r3, #0
 800afcc:	82fb      	strh	r3, [r7, #22]
 800afce:	e00b      	b.n	800afe8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800afd0:	8afb      	ldrh	r3, [r7, #22]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4413      	add	r3, r2
 800afd6:	781a      	ldrb	r2, [r3, #0]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	701a      	strb	r2, [r3, #0]
      pdest++;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	3301      	adds	r3, #1
 800afe0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800afe2:	8afb      	ldrh	r3, [r7, #22]
 800afe4:	3302      	adds	r3, #2
 800afe6:	82fb      	strh	r3, [r7, #22]
 800afe8:	8afa      	ldrh	r2, [r7, #22]
 800afea:	8abb      	ldrh	r3, [r7, #20]
 800afec:	429a      	cmp	r2, r3
 800afee:	d3ef      	bcc.n	800afd0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2200      	movs	r2, #0
 800aff4:	701a      	strb	r2, [r3, #0]
  }
}
 800aff6:	bf00      	nop
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b002:	b480      	push	{r7}
 800b004:	b085      	sub	sp, #20
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	881a      	ldrh	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	b29b      	uxth	r3, r3
 800b016:	4413      	add	r3, r2
 800b018:	b29a      	uxth	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4413      	add	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b046:	2301      	movs	r3, #1
 800b048:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	789b      	ldrb	r3, [r3, #2]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d002      	beq.n	800b058 <USBH_CtlReq+0x20>
 800b052:	2b02      	cmp	r3, #2
 800b054:	d00f      	beq.n	800b076 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b056:	e027      	b.n	800b0a8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	88fa      	ldrh	r2, [r7, #6]
 800b062:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2201      	movs	r2, #1
 800b068:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2202      	movs	r2, #2
 800b06e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b070:	2301      	movs	r3, #1
 800b072:	75fb      	strb	r3, [r7, #23]
      break;
 800b074:	e018      	b.n	800b0a8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 f81c 	bl	800b0b4 <USBH_HandleControl>
 800b07c:	4603      	mov	r3, r0
 800b07e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <USBH_CtlReq+0x54>
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d106      	bne.n	800b09a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2201      	movs	r2, #1
 800b090:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	761a      	strb	r2, [r3, #24]
      break;
 800b098:	e005      	b.n	800b0a6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d102      	bne.n	800b0a6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	709a      	strb	r2, [r3, #2]
      break;
 800b0a6:	bf00      	nop
  }
  return status;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	7e1b      	ldrb	r3, [r3, #24]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	2b0a      	cmp	r3, #10
 800b0cc:	f200 8156 	bhi.w	800b37c <USBH_HandleControl+0x2c8>
 800b0d0:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <USBH_HandleControl+0x24>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b105 	.word	0x0800b105
 800b0dc:	0800b11f 	.word	0x0800b11f
 800b0e0:	0800b189 	.word	0x0800b189
 800b0e4:	0800b1af 	.word	0x0800b1af
 800b0e8:	0800b1e7 	.word	0x0800b1e7
 800b0ec:	0800b211 	.word	0x0800b211
 800b0f0:	0800b263 	.word	0x0800b263
 800b0f4:	0800b285 	.word	0x0800b285
 800b0f8:	0800b2c1 	.word	0x0800b2c1
 800b0fc:	0800b2e7 	.word	0x0800b2e7
 800b100:	0800b325 	.word	0x0800b325
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f103 0110 	add.w	r1, r3, #16
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	795b      	ldrb	r3, [r3, #5]
 800b10e:	461a      	mov	r2, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f943 	bl	800b39c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2202      	movs	r2, #2
 800b11a:	761a      	strb	r2, [r3, #24]
      break;
 800b11c:	e139      	b.n	800b392 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	795b      	ldrb	r3, [r3, #5]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fcc5 	bl	800bab4 <USBH_LL_GetURBState>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d11e      	bne.n	800b172 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	7c1b      	ldrb	r3, [r3, #16]
 800b138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b13c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	8adb      	ldrh	r3, [r3, #22]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00a      	beq.n	800b15c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b146:	7b7b      	ldrb	r3, [r7, #13]
 800b148:	2b80      	cmp	r3, #128	; 0x80
 800b14a:	d103      	bne.n	800b154 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2203      	movs	r2, #3
 800b150:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b152:	e115      	b.n	800b380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2205      	movs	r2, #5
 800b158:	761a      	strb	r2, [r3, #24]
      break;
 800b15a:	e111      	b.n	800b380 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b15c:	7b7b      	ldrb	r3, [r7, #13]
 800b15e:	2b80      	cmp	r3, #128	; 0x80
 800b160:	d103      	bne.n	800b16a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2209      	movs	r2, #9
 800b166:	761a      	strb	r2, [r3, #24]
      break;
 800b168:	e10a      	b.n	800b380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2207      	movs	r2, #7
 800b16e:	761a      	strb	r2, [r3, #24]
      break;
 800b170:	e106      	b.n	800b380 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b04      	cmp	r3, #4
 800b176:	d003      	beq.n	800b180 <USBH_HandleControl+0xcc>
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	f040 8100 	bne.w	800b380 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	220b      	movs	r2, #11
 800b184:	761a      	strb	r2, [r3, #24]
      break;
 800b186:	e0fb      	b.n	800b380 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6899      	ldr	r1, [r3, #8]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	899a      	ldrh	r2, [r3, #12]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	791b      	ldrb	r3, [r3, #4]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f93a 	bl	800b41a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2204      	movs	r2, #4
 800b1aa:	761a      	strb	r2, [r3, #24]
      break;
 800b1ac:	e0f1      	b.n	800b392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	791b      	ldrb	r3, [r3, #4]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fc7d 	bl	800bab4 <USBH_LL_GetURBState>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d102      	bne.n	800b1ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2209      	movs	r2, #9
 800b1c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	2b05      	cmp	r3, #5
 800b1ce:	d102      	bne.n	800b1d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b1d4:	e0d6      	b.n	800b384 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	2b04      	cmp	r3, #4
 800b1da:	f040 80d3 	bne.w	800b384 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	220b      	movs	r2, #11
 800b1e2:	761a      	strb	r2, [r3, #24]
      break;
 800b1e4:	e0ce      	b.n	800b384 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6899      	ldr	r1, [r3, #8]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	899a      	ldrh	r2, [r3, #12]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	795b      	ldrb	r3, [r3, #5]
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	9000      	str	r0, [sp, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f8ea 	bl	800b3d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b202:	b29a      	uxth	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2206      	movs	r2, #6
 800b20c:	761a      	strb	r2, [r3, #24]
      break;
 800b20e:	e0c0      	b.n	800b392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	795b      	ldrb	r3, [r3, #5]
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fc4c 	bl	800bab4 <USBH_LL_GetURBState>
 800b21c:	4603      	mov	r3, r0
 800b21e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d103      	bne.n	800b22e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2207      	movs	r2, #7
 800b22a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b22c:	e0ac      	b.n	800b388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	2b05      	cmp	r3, #5
 800b232:	d105      	bne.n	800b240 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	220c      	movs	r2, #12
 800b238:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b23a:	2303      	movs	r3, #3
 800b23c:	73fb      	strb	r3, [r7, #15]
      break;
 800b23e:	e0a3      	b.n	800b388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d103      	bne.n	800b24e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2205      	movs	r2, #5
 800b24a:	761a      	strb	r2, [r3, #24]
      break;
 800b24c:	e09c      	b.n	800b388 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	2b04      	cmp	r3, #4
 800b252:	f040 8099 	bne.w	800b388 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	220b      	movs	r2, #11
 800b25a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b25c:	2302      	movs	r3, #2
 800b25e:	73fb      	strb	r3, [r7, #15]
      break;
 800b260:	e092      	b.n	800b388 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	791b      	ldrb	r3, [r3, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	2100      	movs	r1, #0
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f8d5 	bl	800b41a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2208      	movs	r2, #8
 800b280:	761a      	strb	r2, [r3, #24]

      break;
 800b282:	e086      	b.n	800b392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	791b      	ldrb	r3, [r3, #4]
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fc12 	bl	800bab4 <USBH_LL_GetURBState>
 800b290:	4603      	mov	r3, r0
 800b292:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d105      	bne.n	800b2a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	220d      	movs	r2, #13
 800b29e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b2a4:	e072      	b.n	800b38c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	d103      	bne.n	800b2b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	220b      	movs	r2, #11
 800b2b0:	761a      	strb	r2, [r3, #24]
      break;
 800b2b2:	e06b      	b.n	800b38c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	2b05      	cmp	r3, #5
 800b2b8:	d168      	bne.n	800b38c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b2be:	e065      	b.n	800b38c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	795b      	ldrb	r3, [r3, #5]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	9200      	str	r2, [sp, #0]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f87f 	bl	800b3d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	761a      	strb	r2, [r3, #24]
      break;
 800b2e4:	e055      	b.n	800b392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	795b      	ldrb	r3, [r3, #5]
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fbe1 	bl	800bab4 <USBH_LL_GetURBState>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b2f6:	7bbb      	ldrb	r3, [r7, #14]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d105      	bne.n	800b308 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	220d      	movs	r2, #13
 800b304:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b306:	e043      	b.n	800b390 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d103      	bne.n	800b316 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2209      	movs	r2, #9
 800b312:	761a      	strb	r2, [r3, #24]
      break;
 800b314:	e03c      	b.n	800b390 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b04      	cmp	r3, #4
 800b31a:	d139      	bne.n	800b390 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	220b      	movs	r2, #11
 800b320:	761a      	strb	r2, [r3, #24]
      break;
 800b322:	e035      	b.n	800b390 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7e5b      	ldrb	r3, [r3, #25]
 800b328:	3301      	adds	r3, #1
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	765a      	strb	r2, [r3, #25]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	7e5b      	ldrb	r3, [r3, #25]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d806      	bhi.n	800b346 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2201      	movs	r2, #1
 800b342:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b344:	e025      	b.n	800b392 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b34c:	2106      	movs	r1, #6
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	795b      	ldrb	r3, [r3, #5]
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f90c 	bl	800b57c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	791b      	ldrb	r3, [r3, #4]
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f906 	bl	800b57c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b376:	2302      	movs	r3, #2
 800b378:	73fb      	strb	r3, [r7, #15]
      break;
 800b37a:	e00a      	b.n	800b392 <USBH_HandleControl+0x2de>

    default:
      break;
 800b37c:	bf00      	nop
 800b37e:	e008      	b.n	800b392 <USBH_HandleControl+0x2de>
      break;
 800b380:	bf00      	nop
 800b382:	e006      	b.n	800b392 <USBH_HandleControl+0x2de>
      break;
 800b384:	bf00      	nop
 800b386:	e004      	b.n	800b392 <USBH_HandleControl+0x2de>
      break;
 800b388:	bf00      	nop
 800b38a:	e002      	b.n	800b392 <USBH_HandleControl+0x2de>
      break;
 800b38c:	bf00      	nop
 800b38e:	e000      	b.n	800b392 <USBH_HandleControl+0x2de>
      break;
 800b390:	bf00      	nop
  }

  return status;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af04      	add	r7, sp, #16
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b3aa:	79f9      	ldrb	r1, [r7, #7]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9303      	str	r3, [sp, #12]
 800b3b0:	2308      	movs	r3, #8
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	2300      	movs	r3, #0
 800b3be:	2200      	movs	r2, #0
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 fb46 	bl	800ba52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af04      	add	r7, sp, #16
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	4611      	mov	r1, r2
 800b3dc:	461a      	mov	r2, r3
 800b3de:	460b      	mov	r3, r1
 800b3e0:	80fb      	strh	r3, [r7, #6]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b3f4:	7979      	ldrb	r1, [r7, #5]
 800b3f6:	7e3b      	ldrb	r3, [r7, #24]
 800b3f8:	9303      	str	r3, [sp, #12]
 800b3fa:	88fb      	ldrh	r3, [r7, #6]
 800b3fc:	9302      	str	r3, [sp, #8]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	2301      	movs	r3, #1
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	2300      	movs	r3, #0
 800b408:	2200      	movs	r2, #0
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f000 fb21 	bl	800ba52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b088      	sub	sp, #32
 800b41e:	af04      	add	r7, sp, #16
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	4611      	mov	r1, r2
 800b426:	461a      	mov	r2, r3
 800b428:	460b      	mov	r3, r1
 800b42a:	80fb      	strh	r3, [r7, #6]
 800b42c:	4613      	mov	r3, r2
 800b42e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b430:	7979      	ldrb	r1, [r7, #5]
 800b432:	2300      	movs	r3, #0
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	2301      	movs	r3, #1
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	2300      	movs	r3, #0
 800b444:	2201      	movs	r2, #1
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 fb03 	bl	800ba52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b44c:	2300      	movs	r3, #0

}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b088      	sub	sp, #32
 800b45a:	af04      	add	r7, sp, #16
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	4611      	mov	r1, r2
 800b462:	461a      	mov	r2, r3
 800b464:	460b      	mov	r3, r1
 800b466:	80fb      	strh	r3, [r7, #6]
 800b468:	4613      	mov	r3, r2
 800b46a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b47a:	7979      	ldrb	r1, [r7, #5]
 800b47c:	7e3b      	ldrb	r3, [r7, #24]
 800b47e:	9303      	str	r3, [sp, #12]
 800b480:	88fb      	ldrh	r3, [r7, #6]
 800b482:	9302      	str	r3, [sp, #8]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	9301      	str	r3, [sp, #4]
 800b488:	2301      	movs	r3, #1
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	2302      	movs	r3, #2
 800b48e:	2200      	movs	r2, #0
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f000 fade 	bl	800ba52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af04      	add	r7, sp, #16
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	80fb      	strh	r3, [r7, #6]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4b6:	7979      	ldrb	r1, [r7, #5]
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	9302      	str	r3, [sp, #8]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 fac0 	bl	800ba52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af04      	add	r7, sp, #16
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	70fb      	strb	r3, [r7, #3]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	70bb      	strb	r3, [r7, #2]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b4f6:	7878      	ldrb	r0, [r7, #1]
 800b4f8:	78ba      	ldrb	r2, [r7, #2]
 800b4fa:	78f9      	ldrb	r1, [r7, #3]
 800b4fc:	8b3b      	ldrh	r3, [r7, #24]
 800b4fe:	9302      	str	r3, [sp, #8]
 800b500:	7d3b      	ldrb	r3, [r7, #20]
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	7c3b      	ldrb	r3, [r7, #16]
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	4603      	mov	r3, r0
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fa53 	bl	800b9b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	460b      	mov	r3, r1
 800b524:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b526:	78fb      	ldrb	r3, [r7, #3]
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fa72 	bl	800ba14 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b084      	sub	sp, #16
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f836 	bl	800b5b8 <USBH_GetFreePipe>
 800b54c:	4603      	mov	r3, r0
 800b54e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b550:	89fb      	ldrh	r3, [r7, #14]
 800b552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b556:	4293      	cmp	r3, r2
 800b558:	d00a      	beq.n	800b570 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b55a:	78fa      	ldrb	r2, [r7, #3]
 800b55c:	89fb      	ldrh	r3, [r7, #14]
 800b55e:	f003 030f 	and.w	r3, r3, #15
 800b562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	33e0      	adds	r3, #224	; 0xe0
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	440b      	add	r3, r1
 800b56e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b570:	89fb      	ldrh	r3, [r7, #14]
 800b572:	b2db      	uxtb	r3, r3
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	460b      	mov	r3, r1
 800b586:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	2b0f      	cmp	r3, #15
 800b58c:	d80d      	bhi.n	800b5aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b58e:	78fb      	ldrb	r3, [r7, #3]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	33e0      	adds	r3, #224	; 0xe0
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	33e0      	adds	r3, #224	; 0xe0
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]
 800b5c8:	e00f      	b.n	800b5ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	33e0      	adds	r3, #224	; 0xe0
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d102      	bne.n	800b5e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	e007      	b.n	800b5f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	73fb      	strb	r3, [r7, #15]
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	2b0f      	cmp	r3, #15
 800b5ee:	d9ec      	bls.n	800b5ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b5f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b604:	2201      	movs	r2, #1
 800b606:	490e      	ldr	r1, [pc, #56]	; (800b640 <MX_USB_HOST_Init+0x40>)
 800b608:	480e      	ldr	r0, [pc, #56]	; (800b644 <MX_USB_HOST_Init+0x44>)
 800b60a:	f7fe fba7 	bl	8009d5c <USBH_Init>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b614:	f7f7 fa8e 	bl	8002b34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b618:	490b      	ldr	r1, [pc, #44]	; (800b648 <MX_USB_HOST_Init+0x48>)
 800b61a:	480a      	ldr	r0, [pc, #40]	; (800b644 <MX_USB_HOST_Init+0x44>)
 800b61c:	f7fe fc2c 	bl	8009e78 <USBH_RegisterClass>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b626:	f7f7 fa85 	bl	8002b34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b62a:	4806      	ldr	r0, [pc, #24]	; (800b644 <MX_USB_HOST_Init+0x44>)
 800b62c:	f7fe fcb0 	bl	8009f90 <USBH_Start>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b636:	f7f7 fa7d 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b63a:	bf00      	nop
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	0800b661 	.word	0x0800b661
 800b644:	20000430 	.word	0x20000430
 800b648:	2000000c 	.word	0x2000000c

0800b64c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b650:	4802      	ldr	r0, [pc, #8]	; (800b65c <MX_USB_HOST_Process+0x10>)
 800b652:	f7fe fcad 	bl	8009fb0 <USBH_Process>
}
 800b656:	bf00      	nop
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20000430 	.word	0x20000430

0800b660 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	3b01      	subs	r3, #1
 800b670:	2b04      	cmp	r3, #4
 800b672:	d819      	bhi.n	800b6a8 <USBH_UserProcess+0x48>
 800b674:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <USBH_UserProcess+0x1c>)
 800b676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67a:	bf00      	nop
 800b67c:	0800b6a9 	.word	0x0800b6a9
 800b680:	0800b699 	.word	0x0800b699
 800b684:	0800b6a9 	.word	0x0800b6a9
 800b688:	0800b6a1 	.word	0x0800b6a1
 800b68c:	0800b691 	.word	0x0800b691
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b690:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <USBH_UserProcess+0x58>)
 800b692:	2203      	movs	r2, #3
 800b694:	701a      	strb	r2, [r3, #0]
  break;
 800b696:	e008      	b.n	800b6aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b698:	4b07      	ldr	r3, [pc, #28]	; (800b6b8 <USBH_UserProcess+0x58>)
 800b69a:	2202      	movs	r2, #2
 800b69c:	701a      	strb	r2, [r3, #0]
  break;
 800b69e:	e004      	b.n	800b6aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b6a0:	4b05      	ldr	r3, [pc, #20]	; (800b6b8 <USBH_UserProcess+0x58>)
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	701a      	strb	r2, [r3, #0]
  break;
 800b6a6:	e000      	b.n	800b6aa <USBH_UserProcess+0x4a>

  default:
  break;
 800b6a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b6aa:	bf00      	nop
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	20000808 	.word	0x20000808

0800b6bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08a      	sub	sp, #40	; 0x28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6c4:	f107 0314 	add.w	r3, r7, #20
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	605a      	str	r2, [r3, #4]
 800b6ce:	609a      	str	r2, [r3, #8]
 800b6d0:	60da      	str	r2, [r3, #12]
 800b6d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6dc:	d147      	bne.n	800b76e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6de:	2300      	movs	r3, #0
 800b6e0:	613b      	str	r3, [r7, #16]
 800b6e2:	4b25      	ldr	r3, [pc, #148]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e6:	4a24      	ldr	r2, [pc, #144]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b6e8:	f043 0301 	orr.w	r3, r3, #1
 800b6ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ee:	4b22      	ldr	r3, [pc, #136]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	613b      	str	r3, [r7, #16]
 800b6f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b6fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b700:	2300      	movs	r3, #0
 800b702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b708:	f107 0314 	add.w	r3, r7, #20
 800b70c:	4619      	mov	r1, r3
 800b70e:	481b      	ldr	r0, [pc, #108]	; (800b77c <HAL_HCD_MspInit+0xc0>)
 800b710:	f7f7 fe0c 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b714:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b71a:	2302      	movs	r3, #2
 800b71c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b722:	2303      	movs	r3, #3
 800b724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b726:	230a      	movs	r3, #10
 800b728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b72a:	f107 0314 	add.w	r3, r7, #20
 800b72e:	4619      	mov	r1, r3
 800b730:	4812      	ldr	r0, [pc, #72]	; (800b77c <HAL_HCD_MspInit+0xc0>)
 800b732:	f7f7 fdfb 	bl	800332c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b736:	4b10      	ldr	r3, [pc, #64]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b73a:	4a0f      	ldr	r2, [pc, #60]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b740:	6353      	str	r3, [r2, #52]	; 0x34
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	4b0c      	ldr	r3, [pc, #48]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b74a:	4a0b      	ldr	r2, [pc, #44]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b74c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b750:	6453      	str	r3, [r2, #68]	; 0x44
 800b752:	4b09      	ldr	r3, [pc, #36]	; (800b778 <HAL_HCD_MspInit+0xbc>)
 800b754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b75e:	2200      	movs	r2, #0
 800b760:	2100      	movs	r1, #0
 800b762:	2043      	movs	r0, #67	; 0x43
 800b764:	f7f7 fdab 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b768:	2043      	movs	r0, #67	; 0x43
 800b76a:	f7f7 fdc4 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b76e:	bf00      	nop
 800b770:	3728      	adds	r7, #40	; 0x28
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	40023800 	.word	0x40023800
 800b77c:	40020000 	.word	0x40020000

0800b780 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe ffed 	bl	800a76e <USBH_LL_IncTimer>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff f825 	bl	800a7fa <USBH_LL_Connect>
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff f82e 	bl	800a828 <USBH_LL_Disconnect>
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	70fb      	strb	r3, [r7, #3]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fe ffdf 	bl	800a7c2 <USBH_LL_PortEnabled>
}
 800b804:	bf00      	nop
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe ffdf 	bl	800a7de <USBH_LL_PortDisabled>
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b836:	2b01      	cmp	r3, #1
 800b838:	d12a      	bne.n	800b890 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b83a:	4a18      	ldr	r2, [pc, #96]	; (800b89c <USBH_LL_Init+0x74>)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a15      	ldr	r2, [pc, #84]	; (800b89c <USBH_LL_Init+0x74>)
 800b846:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b84a:	4b14      	ldr	r3, [pc, #80]	; (800b89c <USBH_LL_Init+0x74>)
 800b84c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b850:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b852:	4b12      	ldr	r3, [pc, #72]	; (800b89c <USBH_LL_Init+0x74>)
 800b854:	2208      	movs	r2, #8
 800b856:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b858:	4b10      	ldr	r3, [pc, #64]	; (800b89c <USBH_LL_Init+0x74>)
 800b85a:	2201      	movs	r2, #1
 800b85c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b85e:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <USBH_LL_Init+0x74>)
 800b860:	2200      	movs	r2, #0
 800b862:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b864:	4b0d      	ldr	r3, [pc, #52]	; (800b89c <USBH_LL_Init+0x74>)
 800b866:	2202      	movs	r2, #2
 800b868:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b86a:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <USBH_LL_Init+0x74>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b870:	480a      	ldr	r0, [pc, #40]	; (800b89c <USBH_LL_Init+0x74>)
 800b872:	f7f7 fef8 	bl	8003666 <HAL_HCD_Init>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b87c:	f7f7 f95a 	bl	8002b34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b880:	4806      	ldr	r0, [pc, #24]	; (800b89c <USBH_LL_Init+0x74>)
 800b882:	f7f8 fadc 	bl	8003e3e <HAL_HCD_GetCurrentFrame>
 800b886:	4603      	mov	r3, r0
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7fe ff60 	bl	800a750 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	2000080c 	.word	0x2000080c

0800b8a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7f8 fa4b 	bl	8003d52 <HAL_HCD_Start>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 f95c 	bl	800bb80 <USBH_Get_USB_Status>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b084      	sub	sp, #16
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f8 fa53 	bl	8003d98 <HAL_HCD_Stop>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f000 f941 	bl	800bb80 <USBH_Get_USB_Status>
 800b8fe:	4603      	mov	r3, r0
 800b900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b902:	7bbb      	ldrb	r3, [r7, #14]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b914:	2301      	movs	r3, #1
 800b916:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f8 fa9b 	bl	8003e5a <HAL_HCD_GetCurrentSpeed>
 800b924:	4603      	mov	r3, r0
 800b926:	2b02      	cmp	r3, #2
 800b928:	d00c      	beq.n	800b944 <USBH_LL_GetSpeed+0x38>
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d80d      	bhi.n	800b94a <USBH_LL_GetSpeed+0x3e>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <USBH_LL_GetSpeed+0x2c>
 800b932:	2b01      	cmp	r3, #1
 800b934:	d003      	beq.n	800b93e <USBH_LL_GetSpeed+0x32>
 800b936:	e008      	b.n	800b94a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b938:	2300      	movs	r3, #0
 800b93a:	73fb      	strb	r3, [r7, #15]
    break;
 800b93c:	e008      	b.n	800b950 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b93e:	2301      	movs	r3, #1
 800b940:	73fb      	strb	r3, [r7, #15]
    break;
 800b942:	e005      	b.n	800b950 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b944:	2302      	movs	r3, #2
 800b946:	73fb      	strb	r3, [r7, #15]
    break;
 800b948:	e002      	b.n	800b950 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b94a:	2301      	movs	r3, #1
 800b94c:	73fb      	strb	r3, [r7, #15]
    break;
 800b94e:	bf00      	nop
  }
  return  speed;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b970:	4618      	mov	r0, r3
 800b972:	f7f8 fa2e 	bl	8003dd2 <HAL_HCD_ResetPort>
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 f8ff 	bl	800bb80 <USBH_Get_USB_Status>
 800b982:	4603      	mov	r3, r0
 800b984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b986:	7bbb      	ldrb	r3, [r7, #14]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	460b      	mov	r3, r1
 800b99a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9a2:	78fa      	ldrb	r2, [r7, #3]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f8 fa35 	bl	8003e16 <HAL_HCD_HC_GetXferCount>
 800b9ac:	4603      	mov	r3, r0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9b6:	b590      	push	{r4, r7, lr}
 800b9b8:	b089      	sub	sp, #36	; 0x24
 800b9ba:	af04      	add	r7, sp, #16
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	70fb      	strb	r3, [r7, #3]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70bb      	strb	r3, [r7, #2]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b9de:	787c      	ldrb	r4, [r7, #1]
 800b9e0:	78ba      	ldrb	r2, [r7, #2]
 800b9e2:	78f9      	ldrb	r1, [r7, #3]
 800b9e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b9e6:	9302      	str	r3, [sp, #8]
 800b9e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	4623      	mov	r3, r4
 800b9f6:	f7f7 fe98 	bl	800372a <HAL_HCD_HC_Init>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 f8bd 	bl	800bb80 <USBH_Get_USB_Status>
 800ba06:	4603      	mov	r3, r0
 800ba08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd90      	pop	{r4, r7, pc}

0800ba14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba2e:	78fa      	ldrb	r2, [r7, #3]
 800ba30:	4611      	mov	r1, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7f7 ff08 	bl	8003848 <HAL_HCD_HC_Halt>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f89e 	bl	800bb80 <USBH_Get_USB_Status>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ba52:	b590      	push	{r4, r7, lr}
 800ba54:	b089      	sub	sp, #36	; 0x24
 800ba56:	af04      	add	r7, sp, #16
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	4608      	mov	r0, r1
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	461a      	mov	r2, r3
 800ba60:	4603      	mov	r3, r0
 800ba62:	70fb      	strb	r3, [r7, #3]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70bb      	strb	r3, [r7, #2]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba7a:	787c      	ldrb	r4, [r7, #1]
 800ba7c:	78ba      	ldrb	r2, [r7, #2]
 800ba7e:	78f9      	ldrb	r1, [r7, #3]
 800ba80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba88:	9302      	str	r3, [sp, #8]
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	4623      	mov	r3, r4
 800ba96:	f7f7 fefb 	bl	8003890 <HAL_HCD_HC_SubmitRequest>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 f86d 	bl	800bb80 <USBH_Get_USB_Status>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3714      	adds	r7, #20
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd90      	pop	{r4, r7, pc}

0800bab4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bac6:	78fa      	ldrb	r2, [r7, #3]
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f8 f98f 	bl	8003dee <HAL_HCD_HC_GetURBState>
 800bad0:	4603      	mov	r3, r0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800baec:	2b01      	cmp	r3, #1
 800baee:	d103      	bne.n	800baf8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f870 	bl	800bbd8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800baf8:	20c8      	movs	r0, #200	; 0xc8
 800bafa:	f7f7 fae1 	bl	80030c0 <HAL_Delay>
  return USBH_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	460b      	mov	r3, r1
 800bb12:	70fb      	strb	r3, [r7, #3]
 800bb14:	4613      	mov	r3, r2
 800bb16:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb1e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	212c      	movs	r1, #44	; 0x2c
 800bb26:	fb01 f303 	mul.w	r3, r1, r3
 800bb2a:	4413      	add	r3, r2
 800bb2c:	333b      	adds	r3, #59	; 0x3b
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d009      	beq.n	800bb48 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	212c      	movs	r1, #44	; 0x2c
 800bb3a:	fb01 f303 	mul.w	r3, r1, r3
 800bb3e:	4413      	add	r3, r2
 800bb40:	3354      	adds	r3, #84	; 0x54
 800bb42:	78ba      	ldrb	r2, [r7, #2]
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	e008      	b.n	800bb5a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bb48:	78fb      	ldrb	r3, [r7, #3]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	212c      	movs	r1, #44	; 0x2c
 800bb4e:	fb01 f303 	mul.w	r3, r1, r3
 800bb52:	4413      	add	r3, r2
 800bb54:	3355      	adds	r3, #85	; 0x55
 800bb56:	78ba      	ldrb	r2, [r7, #2]
 800bb58:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3714      	adds	r7, #20
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7f7 faa5 	bl	80030c0 <HAL_Delay>
}
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb8e:	79fb      	ldrb	r3, [r7, #7]
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d817      	bhi.n	800bbc4 <USBH_Get_USB_Status+0x44>
 800bb94:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <USBH_Get_USB_Status+0x1c>)
 800bb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9a:	bf00      	nop
 800bb9c:	0800bbad 	.word	0x0800bbad
 800bba0:	0800bbb3 	.word	0x0800bbb3
 800bba4:	0800bbb9 	.word	0x0800bbb9
 800bba8:	0800bbbf 	.word	0x0800bbbf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb0:	e00b      	b.n	800bbca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb6:	e008      	b.n	800bbca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	73fb      	strb	r3, [r7, #15]
    break;
 800bbbc:	e005      	b.n	800bbca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc2:	e002      	b.n	800bbca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc8:	bf00      	nop
  }
  return usb_status;
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bbe6:	79fb      	ldrb	r3, [r7, #7]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]
 800bbf0:	e001      	b.n	800bbf6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	4803      	ldr	r0, [pc, #12]	; (800bc0c <MX_DriverVbusFS+0x34>)
 800bbfe:	f7f7 fd19 	bl	8003634 <HAL_GPIO_WritePin>
}
 800bc02:	bf00      	nop
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	40020800 	.word	0x40020800

0800bc10 <__errno>:
 800bc10:	4b01      	ldr	r3, [pc, #4]	; (800bc18 <__errno+0x8>)
 800bc12:	6818      	ldr	r0, [r3, #0]
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	2000002c 	.word	0x2000002c

0800bc1c <__libc_init_array>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	4d0d      	ldr	r5, [pc, #52]	; (800bc54 <__libc_init_array+0x38>)
 800bc20:	4c0d      	ldr	r4, [pc, #52]	; (800bc58 <__libc_init_array+0x3c>)
 800bc22:	1b64      	subs	r4, r4, r5
 800bc24:	10a4      	asrs	r4, r4, #2
 800bc26:	2600      	movs	r6, #0
 800bc28:	42a6      	cmp	r6, r4
 800bc2a:	d109      	bne.n	800bc40 <__libc_init_array+0x24>
 800bc2c:	4d0b      	ldr	r5, [pc, #44]	; (800bc5c <__libc_init_array+0x40>)
 800bc2e:	4c0c      	ldr	r4, [pc, #48]	; (800bc60 <__libc_init_array+0x44>)
 800bc30:	f002 ff0a 	bl	800ea48 <_init>
 800bc34:	1b64      	subs	r4, r4, r5
 800bc36:	10a4      	asrs	r4, r4, #2
 800bc38:	2600      	movs	r6, #0
 800bc3a:	42a6      	cmp	r6, r4
 800bc3c:	d105      	bne.n	800bc4a <__libc_init_array+0x2e>
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}
 800bc40:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc44:	4798      	blx	r3
 800bc46:	3601      	adds	r6, #1
 800bc48:	e7ee      	b.n	800bc28 <__libc_init_array+0xc>
 800bc4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc4e:	4798      	blx	r3
 800bc50:	3601      	adds	r6, #1
 800bc52:	e7f2      	b.n	800bc3a <__libc_init_array+0x1e>
 800bc54:	0800ee7c 	.word	0x0800ee7c
 800bc58:	0800ee7c 	.word	0x0800ee7c
 800bc5c:	0800ee7c 	.word	0x0800ee7c
 800bc60:	0800ee80 	.word	0x0800ee80

0800bc64 <malloc>:
 800bc64:	4b02      	ldr	r3, [pc, #8]	; (800bc70 <malloc+0xc>)
 800bc66:	4601      	mov	r1, r0
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	f000 b87f 	b.w	800bd6c <_malloc_r>
 800bc6e:	bf00      	nop
 800bc70:	2000002c 	.word	0x2000002c

0800bc74 <free>:
 800bc74:	4b02      	ldr	r3, [pc, #8]	; (800bc80 <free+0xc>)
 800bc76:	4601      	mov	r1, r0
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	f000 b80b 	b.w	800bc94 <_free_r>
 800bc7e:	bf00      	nop
 800bc80:	2000002c 	.word	0x2000002c

0800bc84 <memset>:
 800bc84:	4402      	add	r2, r0
 800bc86:	4603      	mov	r3, r0
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d100      	bne.n	800bc8e <memset+0xa>
 800bc8c:	4770      	bx	lr
 800bc8e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc92:	e7f9      	b.n	800bc88 <memset+0x4>

0800bc94 <_free_r>:
 800bc94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc96:	2900      	cmp	r1, #0
 800bc98:	d044      	beq.n	800bd24 <_free_r+0x90>
 800bc9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc9e:	9001      	str	r0, [sp, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f1a1 0404 	sub.w	r4, r1, #4
 800bca6:	bfb8      	it	lt
 800bca8:	18e4      	addlt	r4, r4, r3
 800bcaa:	f001 fbf9 	bl	800d4a0 <__malloc_lock>
 800bcae:	4a1e      	ldr	r2, [pc, #120]	; (800bd28 <_free_r+0x94>)
 800bcb0:	9801      	ldr	r0, [sp, #4]
 800bcb2:	6813      	ldr	r3, [r2, #0]
 800bcb4:	b933      	cbnz	r3, 800bcc4 <_free_r+0x30>
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	6014      	str	r4, [r2, #0]
 800bcba:	b003      	add	sp, #12
 800bcbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcc0:	f001 bbf4 	b.w	800d4ac <__malloc_unlock>
 800bcc4:	42a3      	cmp	r3, r4
 800bcc6:	d908      	bls.n	800bcda <_free_r+0x46>
 800bcc8:	6825      	ldr	r5, [r4, #0]
 800bcca:	1961      	adds	r1, r4, r5
 800bccc:	428b      	cmp	r3, r1
 800bcce:	bf01      	itttt	eq
 800bcd0:	6819      	ldreq	r1, [r3, #0]
 800bcd2:	685b      	ldreq	r3, [r3, #4]
 800bcd4:	1949      	addeq	r1, r1, r5
 800bcd6:	6021      	streq	r1, [r4, #0]
 800bcd8:	e7ed      	b.n	800bcb6 <_free_r+0x22>
 800bcda:	461a      	mov	r2, r3
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	b10b      	cbz	r3, 800bce4 <_free_r+0x50>
 800bce0:	42a3      	cmp	r3, r4
 800bce2:	d9fa      	bls.n	800bcda <_free_r+0x46>
 800bce4:	6811      	ldr	r1, [r2, #0]
 800bce6:	1855      	adds	r5, r2, r1
 800bce8:	42a5      	cmp	r5, r4
 800bcea:	d10b      	bne.n	800bd04 <_free_r+0x70>
 800bcec:	6824      	ldr	r4, [r4, #0]
 800bcee:	4421      	add	r1, r4
 800bcf0:	1854      	adds	r4, r2, r1
 800bcf2:	42a3      	cmp	r3, r4
 800bcf4:	6011      	str	r1, [r2, #0]
 800bcf6:	d1e0      	bne.n	800bcba <_free_r+0x26>
 800bcf8:	681c      	ldr	r4, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	6053      	str	r3, [r2, #4]
 800bcfe:	4421      	add	r1, r4
 800bd00:	6011      	str	r1, [r2, #0]
 800bd02:	e7da      	b.n	800bcba <_free_r+0x26>
 800bd04:	d902      	bls.n	800bd0c <_free_r+0x78>
 800bd06:	230c      	movs	r3, #12
 800bd08:	6003      	str	r3, [r0, #0]
 800bd0a:	e7d6      	b.n	800bcba <_free_r+0x26>
 800bd0c:	6825      	ldr	r5, [r4, #0]
 800bd0e:	1961      	adds	r1, r4, r5
 800bd10:	428b      	cmp	r3, r1
 800bd12:	bf04      	itt	eq
 800bd14:	6819      	ldreq	r1, [r3, #0]
 800bd16:	685b      	ldreq	r3, [r3, #4]
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	bf04      	itt	eq
 800bd1c:	1949      	addeq	r1, r1, r5
 800bd1e:	6021      	streq	r1, [r4, #0]
 800bd20:	6054      	str	r4, [r2, #4]
 800bd22:	e7ca      	b.n	800bcba <_free_r+0x26>
 800bd24:	b003      	add	sp, #12
 800bd26:	bd30      	pop	{r4, r5, pc}
 800bd28:	20000b10 	.word	0x20000b10

0800bd2c <sbrk_aligned>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	4e0e      	ldr	r6, [pc, #56]	; (800bd68 <sbrk_aligned+0x3c>)
 800bd30:	460c      	mov	r4, r1
 800bd32:	6831      	ldr	r1, [r6, #0]
 800bd34:	4605      	mov	r5, r0
 800bd36:	b911      	cbnz	r1, 800bd3e <sbrk_aligned+0x12>
 800bd38:	f000 fcf6 	bl	800c728 <_sbrk_r>
 800bd3c:	6030      	str	r0, [r6, #0]
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4628      	mov	r0, r5
 800bd42:	f000 fcf1 	bl	800c728 <_sbrk_r>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	d00a      	beq.n	800bd60 <sbrk_aligned+0x34>
 800bd4a:	1cc4      	adds	r4, r0, #3
 800bd4c:	f024 0403 	bic.w	r4, r4, #3
 800bd50:	42a0      	cmp	r0, r4
 800bd52:	d007      	beq.n	800bd64 <sbrk_aligned+0x38>
 800bd54:	1a21      	subs	r1, r4, r0
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 fce6 	bl	800c728 <_sbrk_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d101      	bne.n	800bd64 <sbrk_aligned+0x38>
 800bd60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bd64:	4620      	mov	r0, r4
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	20000b14 	.word	0x20000b14

0800bd6c <_malloc_r>:
 800bd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd70:	1ccd      	adds	r5, r1, #3
 800bd72:	f025 0503 	bic.w	r5, r5, #3
 800bd76:	3508      	adds	r5, #8
 800bd78:	2d0c      	cmp	r5, #12
 800bd7a:	bf38      	it	cc
 800bd7c:	250c      	movcc	r5, #12
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	4607      	mov	r7, r0
 800bd82:	db01      	blt.n	800bd88 <_malloc_r+0x1c>
 800bd84:	42a9      	cmp	r1, r5
 800bd86:	d905      	bls.n	800bd94 <_malloc_r+0x28>
 800bd88:	230c      	movs	r3, #12
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	4630      	mov	r0, r6
 800bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd94:	4e2e      	ldr	r6, [pc, #184]	; (800be50 <_malloc_r+0xe4>)
 800bd96:	f001 fb83 	bl	800d4a0 <__malloc_lock>
 800bd9a:	6833      	ldr	r3, [r6, #0]
 800bd9c:	461c      	mov	r4, r3
 800bd9e:	bb34      	cbnz	r4, 800bdee <_malloc_r+0x82>
 800bda0:	4629      	mov	r1, r5
 800bda2:	4638      	mov	r0, r7
 800bda4:	f7ff ffc2 	bl	800bd2c <sbrk_aligned>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	4604      	mov	r4, r0
 800bdac:	d14d      	bne.n	800be4a <_malloc_r+0xde>
 800bdae:	6834      	ldr	r4, [r6, #0]
 800bdb0:	4626      	mov	r6, r4
 800bdb2:	2e00      	cmp	r6, #0
 800bdb4:	d140      	bne.n	800be38 <_malloc_r+0xcc>
 800bdb6:	6823      	ldr	r3, [r4, #0]
 800bdb8:	4631      	mov	r1, r6
 800bdba:	4638      	mov	r0, r7
 800bdbc:	eb04 0803 	add.w	r8, r4, r3
 800bdc0:	f000 fcb2 	bl	800c728 <_sbrk_r>
 800bdc4:	4580      	cmp	r8, r0
 800bdc6:	d13a      	bne.n	800be3e <_malloc_r+0xd2>
 800bdc8:	6821      	ldr	r1, [r4, #0]
 800bdca:	3503      	adds	r5, #3
 800bdcc:	1a6d      	subs	r5, r5, r1
 800bdce:	f025 0503 	bic.w	r5, r5, #3
 800bdd2:	3508      	adds	r5, #8
 800bdd4:	2d0c      	cmp	r5, #12
 800bdd6:	bf38      	it	cc
 800bdd8:	250c      	movcc	r5, #12
 800bdda:	4629      	mov	r1, r5
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7ff ffa5 	bl	800bd2c <sbrk_aligned>
 800bde2:	3001      	adds	r0, #1
 800bde4:	d02b      	beq.n	800be3e <_malloc_r+0xd2>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	442b      	add	r3, r5
 800bdea:	6023      	str	r3, [r4, #0]
 800bdec:	e00e      	b.n	800be0c <_malloc_r+0xa0>
 800bdee:	6822      	ldr	r2, [r4, #0]
 800bdf0:	1b52      	subs	r2, r2, r5
 800bdf2:	d41e      	bmi.n	800be32 <_malloc_r+0xc6>
 800bdf4:	2a0b      	cmp	r2, #11
 800bdf6:	d916      	bls.n	800be26 <_malloc_r+0xba>
 800bdf8:	1961      	adds	r1, r4, r5
 800bdfa:	42a3      	cmp	r3, r4
 800bdfc:	6025      	str	r5, [r4, #0]
 800bdfe:	bf18      	it	ne
 800be00:	6059      	strne	r1, [r3, #4]
 800be02:	6863      	ldr	r3, [r4, #4]
 800be04:	bf08      	it	eq
 800be06:	6031      	streq	r1, [r6, #0]
 800be08:	5162      	str	r2, [r4, r5]
 800be0a:	604b      	str	r3, [r1, #4]
 800be0c:	4638      	mov	r0, r7
 800be0e:	f104 060b 	add.w	r6, r4, #11
 800be12:	f001 fb4b 	bl	800d4ac <__malloc_unlock>
 800be16:	f026 0607 	bic.w	r6, r6, #7
 800be1a:	1d23      	adds	r3, r4, #4
 800be1c:	1af2      	subs	r2, r6, r3
 800be1e:	d0b6      	beq.n	800bd8e <_malloc_r+0x22>
 800be20:	1b9b      	subs	r3, r3, r6
 800be22:	50a3      	str	r3, [r4, r2]
 800be24:	e7b3      	b.n	800bd8e <_malloc_r+0x22>
 800be26:	6862      	ldr	r2, [r4, #4]
 800be28:	42a3      	cmp	r3, r4
 800be2a:	bf0c      	ite	eq
 800be2c:	6032      	streq	r2, [r6, #0]
 800be2e:	605a      	strne	r2, [r3, #4]
 800be30:	e7ec      	b.n	800be0c <_malloc_r+0xa0>
 800be32:	4623      	mov	r3, r4
 800be34:	6864      	ldr	r4, [r4, #4]
 800be36:	e7b2      	b.n	800bd9e <_malloc_r+0x32>
 800be38:	4634      	mov	r4, r6
 800be3a:	6876      	ldr	r6, [r6, #4]
 800be3c:	e7b9      	b.n	800bdb2 <_malloc_r+0x46>
 800be3e:	230c      	movs	r3, #12
 800be40:	603b      	str	r3, [r7, #0]
 800be42:	4638      	mov	r0, r7
 800be44:	f001 fb32 	bl	800d4ac <__malloc_unlock>
 800be48:	e7a1      	b.n	800bd8e <_malloc_r+0x22>
 800be4a:	6025      	str	r5, [r4, #0]
 800be4c:	e7de      	b.n	800be0c <_malloc_r+0xa0>
 800be4e:	bf00      	nop
 800be50:	20000b10 	.word	0x20000b10

0800be54 <__cvt>:
 800be54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	ec55 4b10 	vmov	r4, r5, d0
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	460e      	mov	r6, r1
 800be60:	4619      	mov	r1, r3
 800be62:	462b      	mov	r3, r5
 800be64:	bfbb      	ittet	lt
 800be66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be6a:	461d      	movlt	r5, r3
 800be6c:	2300      	movge	r3, #0
 800be6e:	232d      	movlt	r3, #45	; 0x2d
 800be70:	700b      	strb	r3, [r1, #0]
 800be72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be78:	4691      	mov	r9, r2
 800be7a:	f023 0820 	bic.w	r8, r3, #32
 800be7e:	bfbc      	itt	lt
 800be80:	4622      	movlt	r2, r4
 800be82:	4614      	movlt	r4, r2
 800be84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be88:	d005      	beq.n	800be96 <__cvt+0x42>
 800be8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800be8e:	d100      	bne.n	800be92 <__cvt+0x3e>
 800be90:	3601      	adds	r6, #1
 800be92:	2102      	movs	r1, #2
 800be94:	e000      	b.n	800be98 <__cvt+0x44>
 800be96:	2103      	movs	r1, #3
 800be98:	ab03      	add	r3, sp, #12
 800be9a:	9301      	str	r3, [sp, #4]
 800be9c:	ab02      	add	r3, sp, #8
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	ec45 4b10 	vmov	d0, r4, r5
 800bea4:	4653      	mov	r3, sl
 800bea6:	4632      	mov	r2, r6
 800bea8:	f000 fcfa 	bl	800c8a0 <_dtoa_r>
 800beac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800beb0:	4607      	mov	r7, r0
 800beb2:	d102      	bne.n	800beba <__cvt+0x66>
 800beb4:	f019 0f01 	tst.w	r9, #1
 800beb8:	d022      	beq.n	800bf00 <__cvt+0xac>
 800beba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bebe:	eb07 0906 	add.w	r9, r7, r6
 800bec2:	d110      	bne.n	800bee6 <__cvt+0x92>
 800bec4:	783b      	ldrb	r3, [r7, #0]
 800bec6:	2b30      	cmp	r3, #48	; 0x30
 800bec8:	d10a      	bne.n	800bee0 <__cvt+0x8c>
 800beca:	2200      	movs	r2, #0
 800becc:	2300      	movs	r3, #0
 800bece:	4620      	mov	r0, r4
 800bed0:	4629      	mov	r1, r5
 800bed2:	f7f4 fe01 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed6:	b918      	cbnz	r0, 800bee0 <__cvt+0x8c>
 800bed8:	f1c6 0601 	rsb	r6, r6, #1
 800bedc:	f8ca 6000 	str.w	r6, [sl]
 800bee0:	f8da 3000 	ldr.w	r3, [sl]
 800bee4:	4499      	add	r9, r3
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	4620      	mov	r0, r4
 800beec:	4629      	mov	r1, r5
 800beee:	f7f4 fdf3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bef2:	b108      	cbz	r0, 800bef8 <__cvt+0xa4>
 800bef4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bef8:	2230      	movs	r2, #48	; 0x30
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	454b      	cmp	r3, r9
 800befe:	d307      	bcc.n	800bf10 <__cvt+0xbc>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf04:	1bdb      	subs	r3, r3, r7
 800bf06:	4638      	mov	r0, r7
 800bf08:	6013      	str	r3, [r2, #0]
 800bf0a:	b004      	add	sp, #16
 800bf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf10:	1c59      	adds	r1, r3, #1
 800bf12:	9103      	str	r1, [sp, #12]
 800bf14:	701a      	strb	r2, [r3, #0]
 800bf16:	e7f0      	b.n	800befa <__cvt+0xa6>

0800bf18 <__exponent>:
 800bf18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	bfb8      	it	lt
 800bf20:	4249      	neglt	r1, r1
 800bf22:	f803 2b02 	strb.w	r2, [r3], #2
 800bf26:	bfb4      	ite	lt
 800bf28:	222d      	movlt	r2, #45	; 0x2d
 800bf2a:	222b      	movge	r2, #43	; 0x2b
 800bf2c:	2909      	cmp	r1, #9
 800bf2e:	7042      	strb	r2, [r0, #1]
 800bf30:	dd2a      	ble.n	800bf88 <__exponent+0x70>
 800bf32:	f10d 0407 	add.w	r4, sp, #7
 800bf36:	46a4      	mov	ip, r4
 800bf38:	270a      	movs	r7, #10
 800bf3a:	46a6      	mov	lr, r4
 800bf3c:	460a      	mov	r2, r1
 800bf3e:	fb91 f6f7 	sdiv	r6, r1, r7
 800bf42:	fb07 1516 	mls	r5, r7, r6, r1
 800bf46:	3530      	adds	r5, #48	; 0x30
 800bf48:	2a63      	cmp	r2, #99	; 0x63
 800bf4a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bf4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bf52:	4631      	mov	r1, r6
 800bf54:	dcf1      	bgt.n	800bf3a <__exponent+0x22>
 800bf56:	3130      	adds	r1, #48	; 0x30
 800bf58:	f1ae 0502 	sub.w	r5, lr, #2
 800bf5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bf60:	1c44      	adds	r4, r0, #1
 800bf62:	4629      	mov	r1, r5
 800bf64:	4561      	cmp	r1, ip
 800bf66:	d30a      	bcc.n	800bf7e <__exponent+0x66>
 800bf68:	f10d 0209 	add.w	r2, sp, #9
 800bf6c:	eba2 020e 	sub.w	r2, r2, lr
 800bf70:	4565      	cmp	r5, ip
 800bf72:	bf88      	it	hi
 800bf74:	2200      	movhi	r2, #0
 800bf76:	4413      	add	r3, r2
 800bf78:	1a18      	subs	r0, r3, r0
 800bf7a:	b003      	add	sp, #12
 800bf7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf82:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bf86:	e7ed      	b.n	800bf64 <__exponent+0x4c>
 800bf88:	2330      	movs	r3, #48	; 0x30
 800bf8a:	3130      	adds	r1, #48	; 0x30
 800bf8c:	7083      	strb	r3, [r0, #2]
 800bf8e:	70c1      	strb	r1, [r0, #3]
 800bf90:	1d03      	adds	r3, r0, #4
 800bf92:	e7f1      	b.n	800bf78 <__exponent+0x60>

0800bf94 <_printf_float>:
 800bf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf98:	ed2d 8b02 	vpush	{d8}
 800bf9c:	b08d      	sub	sp, #52	; 0x34
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bfa4:	4616      	mov	r6, r2
 800bfa6:	461f      	mov	r7, r3
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	f001 fa67 	bl	800d47c <_localeconv_r>
 800bfae:	f8d0 a000 	ldr.w	sl, [r0]
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	f7f4 f914 	bl	80001e0 <strlen>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	930a      	str	r3, [sp, #40]	; 0x28
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	9305      	str	r3, [sp, #20]
 800bfc0:	f8d8 3000 	ldr.w	r3, [r8]
 800bfc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bfc8:	3307      	adds	r3, #7
 800bfca:	f023 0307 	bic.w	r3, r3, #7
 800bfce:	f103 0208 	add.w	r2, r3, #8
 800bfd2:	f8c8 2000 	str.w	r2, [r8]
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bfde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bfe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bfe6:	9307      	str	r3, [sp, #28]
 800bfe8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bfec:	ee08 0a10 	vmov	s16, r0
 800bff0:	4b9f      	ldr	r3, [pc, #636]	; (800c270 <_printf_float+0x2dc>)
 800bff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bffa:	f7f4 fd9f 	bl	8000b3c <__aeabi_dcmpun>
 800bffe:	bb88      	cbnz	r0, 800c064 <_printf_float+0xd0>
 800c000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c004:	4b9a      	ldr	r3, [pc, #616]	; (800c270 <_printf_float+0x2dc>)
 800c006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c00a:	f7f4 fd79 	bl	8000b00 <__aeabi_dcmple>
 800c00e:	bb48      	cbnz	r0, 800c064 <_printf_float+0xd0>
 800c010:	2200      	movs	r2, #0
 800c012:	2300      	movs	r3, #0
 800c014:	4640      	mov	r0, r8
 800c016:	4649      	mov	r1, r9
 800c018:	f7f4 fd68 	bl	8000aec <__aeabi_dcmplt>
 800c01c:	b110      	cbz	r0, 800c024 <_printf_float+0x90>
 800c01e:	232d      	movs	r3, #45	; 0x2d
 800c020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c024:	4b93      	ldr	r3, [pc, #588]	; (800c274 <_printf_float+0x2e0>)
 800c026:	4894      	ldr	r0, [pc, #592]	; (800c278 <_printf_float+0x2e4>)
 800c028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c02c:	bf94      	ite	ls
 800c02e:	4698      	movls	r8, r3
 800c030:	4680      	movhi	r8, r0
 800c032:	2303      	movs	r3, #3
 800c034:	6123      	str	r3, [r4, #16]
 800c036:	9b05      	ldr	r3, [sp, #20]
 800c038:	f023 0204 	bic.w	r2, r3, #4
 800c03c:	6022      	str	r2, [r4, #0]
 800c03e:	f04f 0900 	mov.w	r9, #0
 800c042:	9700      	str	r7, [sp, #0]
 800c044:	4633      	mov	r3, r6
 800c046:	aa0b      	add	r2, sp, #44	; 0x2c
 800c048:	4621      	mov	r1, r4
 800c04a:	4628      	mov	r0, r5
 800c04c:	f000 f9d8 	bl	800c400 <_printf_common>
 800c050:	3001      	adds	r0, #1
 800c052:	f040 8090 	bne.w	800c176 <_printf_float+0x1e2>
 800c056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c05a:	b00d      	add	sp, #52	; 0x34
 800c05c:	ecbd 8b02 	vpop	{d8}
 800c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c064:	4642      	mov	r2, r8
 800c066:	464b      	mov	r3, r9
 800c068:	4640      	mov	r0, r8
 800c06a:	4649      	mov	r1, r9
 800c06c:	f7f4 fd66 	bl	8000b3c <__aeabi_dcmpun>
 800c070:	b140      	cbz	r0, 800c084 <_printf_float+0xf0>
 800c072:	464b      	mov	r3, r9
 800c074:	2b00      	cmp	r3, #0
 800c076:	bfbc      	itt	lt
 800c078:	232d      	movlt	r3, #45	; 0x2d
 800c07a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c07e:	487f      	ldr	r0, [pc, #508]	; (800c27c <_printf_float+0x2e8>)
 800c080:	4b7f      	ldr	r3, [pc, #508]	; (800c280 <_printf_float+0x2ec>)
 800c082:	e7d1      	b.n	800c028 <_printf_float+0x94>
 800c084:	6863      	ldr	r3, [r4, #4]
 800c086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c08a:	9206      	str	r2, [sp, #24]
 800c08c:	1c5a      	adds	r2, r3, #1
 800c08e:	d13f      	bne.n	800c110 <_printf_float+0x17c>
 800c090:	2306      	movs	r3, #6
 800c092:	6063      	str	r3, [r4, #4]
 800c094:	9b05      	ldr	r3, [sp, #20]
 800c096:	6861      	ldr	r1, [r4, #4]
 800c098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c09c:	2300      	movs	r3, #0
 800c09e:	9303      	str	r3, [sp, #12]
 800c0a0:	ab0a      	add	r3, sp, #40	; 0x28
 800c0a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c0a6:	ab09      	add	r3, sp, #36	; 0x24
 800c0a8:	ec49 8b10 	vmov	d0, r8, r9
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	6022      	str	r2, [r4, #0]
 800c0b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f7ff fecd 	bl	800be54 <__cvt>
 800c0ba:	9b06      	ldr	r3, [sp, #24]
 800c0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0be:	2b47      	cmp	r3, #71	; 0x47
 800c0c0:	4680      	mov	r8, r0
 800c0c2:	d108      	bne.n	800c0d6 <_printf_float+0x142>
 800c0c4:	1cc8      	adds	r0, r1, #3
 800c0c6:	db02      	blt.n	800c0ce <_printf_float+0x13a>
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	4299      	cmp	r1, r3
 800c0cc:	dd41      	ble.n	800c152 <_printf_float+0x1be>
 800c0ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800c0d2:	fa5f fb8b 	uxtb.w	fp, fp
 800c0d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0da:	d820      	bhi.n	800c11e <_printf_float+0x18a>
 800c0dc:	3901      	subs	r1, #1
 800c0de:	465a      	mov	r2, fp
 800c0e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c0e4:	9109      	str	r1, [sp, #36]	; 0x24
 800c0e6:	f7ff ff17 	bl	800bf18 <__exponent>
 800c0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ec:	1813      	adds	r3, r2, r0
 800c0ee:	2a01      	cmp	r2, #1
 800c0f0:	4681      	mov	r9, r0
 800c0f2:	6123      	str	r3, [r4, #16]
 800c0f4:	dc02      	bgt.n	800c0fc <_printf_float+0x168>
 800c0f6:	6822      	ldr	r2, [r4, #0]
 800c0f8:	07d2      	lsls	r2, r2, #31
 800c0fa:	d501      	bpl.n	800c100 <_printf_float+0x16c>
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c104:	2b00      	cmp	r3, #0
 800c106:	d09c      	beq.n	800c042 <_printf_float+0xae>
 800c108:	232d      	movs	r3, #45	; 0x2d
 800c10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c10e:	e798      	b.n	800c042 <_printf_float+0xae>
 800c110:	9a06      	ldr	r2, [sp, #24]
 800c112:	2a47      	cmp	r2, #71	; 0x47
 800c114:	d1be      	bne.n	800c094 <_printf_float+0x100>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1bc      	bne.n	800c094 <_printf_float+0x100>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e7b9      	b.n	800c092 <_printf_float+0xfe>
 800c11e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c122:	d118      	bne.n	800c156 <_printf_float+0x1c2>
 800c124:	2900      	cmp	r1, #0
 800c126:	6863      	ldr	r3, [r4, #4]
 800c128:	dd0b      	ble.n	800c142 <_printf_float+0x1ae>
 800c12a:	6121      	str	r1, [r4, #16]
 800c12c:	b913      	cbnz	r3, 800c134 <_printf_float+0x1a0>
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	07d0      	lsls	r0, r2, #31
 800c132:	d502      	bpl.n	800c13a <_printf_float+0x1a6>
 800c134:	3301      	adds	r3, #1
 800c136:	440b      	add	r3, r1
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c13c:	f04f 0900 	mov.w	r9, #0
 800c140:	e7de      	b.n	800c100 <_printf_float+0x16c>
 800c142:	b913      	cbnz	r3, 800c14a <_printf_float+0x1b6>
 800c144:	6822      	ldr	r2, [r4, #0]
 800c146:	07d2      	lsls	r2, r2, #31
 800c148:	d501      	bpl.n	800c14e <_printf_float+0x1ba>
 800c14a:	3302      	adds	r3, #2
 800c14c:	e7f4      	b.n	800c138 <_printf_float+0x1a4>
 800c14e:	2301      	movs	r3, #1
 800c150:	e7f2      	b.n	800c138 <_printf_float+0x1a4>
 800c152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c158:	4299      	cmp	r1, r3
 800c15a:	db05      	blt.n	800c168 <_printf_float+0x1d4>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	6121      	str	r1, [r4, #16]
 800c160:	07d8      	lsls	r0, r3, #31
 800c162:	d5ea      	bpl.n	800c13a <_printf_float+0x1a6>
 800c164:	1c4b      	adds	r3, r1, #1
 800c166:	e7e7      	b.n	800c138 <_printf_float+0x1a4>
 800c168:	2900      	cmp	r1, #0
 800c16a:	bfd4      	ite	le
 800c16c:	f1c1 0202 	rsble	r2, r1, #2
 800c170:	2201      	movgt	r2, #1
 800c172:	4413      	add	r3, r2
 800c174:	e7e0      	b.n	800c138 <_printf_float+0x1a4>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	055a      	lsls	r2, r3, #21
 800c17a:	d407      	bmi.n	800c18c <_printf_float+0x1f8>
 800c17c:	6923      	ldr	r3, [r4, #16]
 800c17e:	4642      	mov	r2, r8
 800c180:	4631      	mov	r1, r6
 800c182:	4628      	mov	r0, r5
 800c184:	47b8      	blx	r7
 800c186:	3001      	adds	r0, #1
 800c188:	d12c      	bne.n	800c1e4 <_printf_float+0x250>
 800c18a:	e764      	b.n	800c056 <_printf_float+0xc2>
 800c18c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c190:	f240 80e0 	bls.w	800c354 <_printf_float+0x3c0>
 800c194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c198:	2200      	movs	r2, #0
 800c19a:	2300      	movs	r3, #0
 800c19c:	f7f4 fc9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d034      	beq.n	800c20e <_printf_float+0x27a>
 800c1a4:	4a37      	ldr	r2, [pc, #220]	; (800c284 <_printf_float+0x2f0>)
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	47b8      	blx	r7
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	f43f af51 	beq.w	800c056 <_printf_float+0xc2>
 800c1b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	db02      	blt.n	800c1c2 <_printf_float+0x22e>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	07d8      	lsls	r0, r3, #31
 800c1c0:	d510      	bpl.n	800c1e4 <_printf_float+0x250>
 800c1c2:	ee18 3a10 	vmov	r3, s16
 800c1c6:	4652      	mov	r2, sl
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	47b8      	blx	r7
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	f43f af41 	beq.w	800c056 <_printf_float+0xc2>
 800c1d4:	f04f 0800 	mov.w	r8, #0
 800c1d8:	f104 091a 	add.w	r9, r4, #26
 800c1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	4543      	cmp	r3, r8
 800c1e2:	dc09      	bgt.n	800c1f8 <_printf_float+0x264>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	079b      	lsls	r3, r3, #30
 800c1e8:	f100 8105 	bmi.w	800c3f6 <_printf_float+0x462>
 800c1ec:	68e0      	ldr	r0, [r4, #12]
 800c1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1f0:	4298      	cmp	r0, r3
 800c1f2:	bfb8      	it	lt
 800c1f4:	4618      	movlt	r0, r3
 800c1f6:	e730      	b.n	800c05a <_printf_float+0xc6>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	464a      	mov	r2, r9
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f af27 	beq.w	800c056 <_printf_float+0xc2>
 800c208:	f108 0801 	add.w	r8, r8, #1
 800c20c:	e7e6      	b.n	800c1dc <_printf_float+0x248>
 800c20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c210:	2b00      	cmp	r3, #0
 800c212:	dc39      	bgt.n	800c288 <_printf_float+0x2f4>
 800c214:	4a1b      	ldr	r2, [pc, #108]	; (800c284 <_printf_float+0x2f0>)
 800c216:	2301      	movs	r3, #1
 800c218:	4631      	mov	r1, r6
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	f43f af19 	beq.w	800c056 <_printf_float+0xc2>
 800c224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c228:	4313      	orrs	r3, r2
 800c22a:	d102      	bne.n	800c232 <_printf_float+0x29e>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	07d9      	lsls	r1, r3, #31
 800c230:	d5d8      	bpl.n	800c1e4 <_printf_float+0x250>
 800c232:	ee18 3a10 	vmov	r3, s16
 800c236:	4652      	mov	r2, sl
 800c238:	4631      	mov	r1, r6
 800c23a:	4628      	mov	r0, r5
 800c23c:	47b8      	blx	r7
 800c23e:	3001      	adds	r0, #1
 800c240:	f43f af09 	beq.w	800c056 <_printf_float+0xc2>
 800c244:	f04f 0900 	mov.w	r9, #0
 800c248:	f104 0a1a 	add.w	sl, r4, #26
 800c24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c24e:	425b      	negs	r3, r3
 800c250:	454b      	cmp	r3, r9
 800c252:	dc01      	bgt.n	800c258 <_printf_float+0x2c4>
 800c254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c256:	e792      	b.n	800c17e <_printf_float+0x1ea>
 800c258:	2301      	movs	r3, #1
 800c25a:	4652      	mov	r2, sl
 800c25c:	4631      	mov	r1, r6
 800c25e:	4628      	mov	r0, r5
 800c260:	47b8      	blx	r7
 800c262:	3001      	adds	r0, #1
 800c264:	f43f aef7 	beq.w	800c056 <_printf_float+0xc2>
 800c268:	f109 0901 	add.w	r9, r9, #1
 800c26c:	e7ee      	b.n	800c24c <_printf_float+0x2b8>
 800c26e:	bf00      	nop
 800c270:	7fefffff 	.word	0x7fefffff
 800c274:	0800ea9c 	.word	0x0800ea9c
 800c278:	0800eaa0 	.word	0x0800eaa0
 800c27c:	0800eaa8 	.word	0x0800eaa8
 800c280:	0800eaa4 	.word	0x0800eaa4
 800c284:	0800eaac 	.word	0x0800eaac
 800c288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c28a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c28c:	429a      	cmp	r2, r3
 800c28e:	bfa8      	it	ge
 800c290:	461a      	movge	r2, r3
 800c292:	2a00      	cmp	r2, #0
 800c294:	4691      	mov	r9, r2
 800c296:	dc37      	bgt.n	800c308 <_printf_float+0x374>
 800c298:	f04f 0b00 	mov.w	fp, #0
 800c29c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2a0:	f104 021a 	add.w	r2, r4, #26
 800c2a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2a6:	9305      	str	r3, [sp, #20]
 800c2a8:	eba3 0309 	sub.w	r3, r3, r9
 800c2ac:	455b      	cmp	r3, fp
 800c2ae:	dc33      	bgt.n	800c318 <_printf_float+0x384>
 800c2b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	db3b      	blt.n	800c330 <_printf_float+0x39c>
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	07da      	lsls	r2, r3, #31
 800c2bc:	d438      	bmi.n	800c330 <_printf_float+0x39c>
 800c2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c0:	9a05      	ldr	r2, [sp, #20]
 800c2c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2c4:	1a9a      	subs	r2, r3, r2
 800c2c6:	eba3 0901 	sub.w	r9, r3, r1
 800c2ca:	4591      	cmp	r9, r2
 800c2cc:	bfa8      	it	ge
 800c2ce:	4691      	movge	r9, r2
 800c2d0:	f1b9 0f00 	cmp.w	r9, #0
 800c2d4:	dc35      	bgt.n	800c342 <_printf_float+0x3ae>
 800c2d6:	f04f 0800 	mov.w	r8, #0
 800c2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2de:	f104 0a1a 	add.w	sl, r4, #26
 800c2e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	eba3 0309 	sub.w	r3, r3, r9
 800c2ec:	4543      	cmp	r3, r8
 800c2ee:	f77f af79 	ble.w	800c1e4 <_printf_float+0x250>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	4652      	mov	r2, sl
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	47b8      	blx	r7
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	f43f aeaa 	beq.w	800c056 <_printf_float+0xc2>
 800c302:	f108 0801 	add.w	r8, r8, #1
 800c306:	e7ec      	b.n	800c2e2 <_printf_float+0x34e>
 800c308:	4613      	mov	r3, r2
 800c30a:	4631      	mov	r1, r6
 800c30c:	4642      	mov	r2, r8
 800c30e:	4628      	mov	r0, r5
 800c310:	47b8      	blx	r7
 800c312:	3001      	adds	r0, #1
 800c314:	d1c0      	bne.n	800c298 <_printf_float+0x304>
 800c316:	e69e      	b.n	800c056 <_printf_float+0xc2>
 800c318:	2301      	movs	r3, #1
 800c31a:	4631      	mov	r1, r6
 800c31c:	4628      	mov	r0, r5
 800c31e:	9205      	str	r2, [sp, #20]
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	f43f ae97 	beq.w	800c056 <_printf_float+0xc2>
 800c328:	9a05      	ldr	r2, [sp, #20]
 800c32a:	f10b 0b01 	add.w	fp, fp, #1
 800c32e:	e7b9      	b.n	800c2a4 <_printf_float+0x310>
 800c330:	ee18 3a10 	vmov	r3, s16
 800c334:	4652      	mov	r2, sl
 800c336:	4631      	mov	r1, r6
 800c338:	4628      	mov	r0, r5
 800c33a:	47b8      	blx	r7
 800c33c:	3001      	adds	r0, #1
 800c33e:	d1be      	bne.n	800c2be <_printf_float+0x32a>
 800c340:	e689      	b.n	800c056 <_printf_float+0xc2>
 800c342:	9a05      	ldr	r2, [sp, #20]
 800c344:	464b      	mov	r3, r9
 800c346:	4442      	add	r2, r8
 800c348:	4631      	mov	r1, r6
 800c34a:	4628      	mov	r0, r5
 800c34c:	47b8      	blx	r7
 800c34e:	3001      	adds	r0, #1
 800c350:	d1c1      	bne.n	800c2d6 <_printf_float+0x342>
 800c352:	e680      	b.n	800c056 <_printf_float+0xc2>
 800c354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c356:	2a01      	cmp	r2, #1
 800c358:	dc01      	bgt.n	800c35e <_printf_float+0x3ca>
 800c35a:	07db      	lsls	r3, r3, #31
 800c35c:	d538      	bpl.n	800c3d0 <_printf_float+0x43c>
 800c35e:	2301      	movs	r3, #1
 800c360:	4642      	mov	r2, r8
 800c362:	4631      	mov	r1, r6
 800c364:	4628      	mov	r0, r5
 800c366:	47b8      	blx	r7
 800c368:	3001      	adds	r0, #1
 800c36a:	f43f ae74 	beq.w	800c056 <_printf_float+0xc2>
 800c36e:	ee18 3a10 	vmov	r3, s16
 800c372:	4652      	mov	r2, sl
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	f43f ae6b 	beq.w	800c056 <_printf_float+0xc2>
 800c380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c384:	2200      	movs	r2, #0
 800c386:	2300      	movs	r3, #0
 800c388:	f7f4 fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800c38c:	b9d8      	cbnz	r0, 800c3c6 <_printf_float+0x432>
 800c38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c390:	f108 0201 	add.w	r2, r8, #1
 800c394:	3b01      	subs	r3, #1
 800c396:	4631      	mov	r1, r6
 800c398:	4628      	mov	r0, r5
 800c39a:	47b8      	blx	r7
 800c39c:	3001      	adds	r0, #1
 800c39e:	d10e      	bne.n	800c3be <_printf_float+0x42a>
 800c3a0:	e659      	b.n	800c056 <_printf_float+0xc2>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	4652      	mov	r2, sl
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	47b8      	blx	r7
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	f43f ae52 	beq.w	800c056 <_printf_float+0xc2>
 800c3b2:	f108 0801 	add.w	r8, r8, #1
 800c3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	4543      	cmp	r3, r8
 800c3bc:	dcf1      	bgt.n	800c3a2 <_printf_float+0x40e>
 800c3be:	464b      	mov	r3, r9
 800c3c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3c4:	e6dc      	b.n	800c180 <_printf_float+0x1ec>
 800c3c6:	f04f 0800 	mov.w	r8, #0
 800c3ca:	f104 0a1a 	add.w	sl, r4, #26
 800c3ce:	e7f2      	b.n	800c3b6 <_printf_float+0x422>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	4642      	mov	r2, r8
 800c3d4:	e7df      	b.n	800c396 <_printf_float+0x402>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	464a      	mov	r2, r9
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f43f ae38 	beq.w	800c056 <_printf_float+0xc2>
 800c3e6:	f108 0801 	add.w	r8, r8, #1
 800c3ea:	68e3      	ldr	r3, [r4, #12]
 800c3ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3ee:	1a5b      	subs	r3, r3, r1
 800c3f0:	4543      	cmp	r3, r8
 800c3f2:	dcf0      	bgt.n	800c3d6 <_printf_float+0x442>
 800c3f4:	e6fa      	b.n	800c1ec <_printf_float+0x258>
 800c3f6:	f04f 0800 	mov.w	r8, #0
 800c3fa:	f104 0919 	add.w	r9, r4, #25
 800c3fe:	e7f4      	b.n	800c3ea <_printf_float+0x456>

0800c400 <_printf_common>:
 800c400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c404:	4616      	mov	r6, r2
 800c406:	4699      	mov	r9, r3
 800c408:	688a      	ldr	r2, [r1, #8]
 800c40a:	690b      	ldr	r3, [r1, #16]
 800c40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c410:	4293      	cmp	r3, r2
 800c412:	bfb8      	it	lt
 800c414:	4613      	movlt	r3, r2
 800c416:	6033      	str	r3, [r6, #0]
 800c418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c41c:	4607      	mov	r7, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	b10a      	cbz	r2, 800c426 <_printf_common+0x26>
 800c422:	3301      	adds	r3, #1
 800c424:	6033      	str	r3, [r6, #0]
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	0699      	lsls	r1, r3, #26
 800c42a:	bf42      	ittt	mi
 800c42c:	6833      	ldrmi	r3, [r6, #0]
 800c42e:	3302      	addmi	r3, #2
 800c430:	6033      	strmi	r3, [r6, #0]
 800c432:	6825      	ldr	r5, [r4, #0]
 800c434:	f015 0506 	ands.w	r5, r5, #6
 800c438:	d106      	bne.n	800c448 <_printf_common+0x48>
 800c43a:	f104 0a19 	add.w	sl, r4, #25
 800c43e:	68e3      	ldr	r3, [r4, #12]
 800c440:	6832      	ldr	r2, [r6, #0]
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	42ab      	cmp	r3, r5
 800c446:	dc26      	bgt.n	800c496 <_printf_common+0x96>
 800c448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c44c:	1e13      	subs	r3, r2, #0
 800c44e:	6822      	ldr	r2, [r4, #0]
 800c450:	bf18      	it	ne
 800c452:	2301      	movne	r3, #1
 800c454:	0692      	lsls	r2, r2, #26
 800c456:	d42b      	bmi.n	800c4b0 <_printf_common+0xb0>
 800c458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c45c:	4649      	mov	r1, r9
 800c45e:	4638      	mov	r0, r7
 800c460:	47c0      	blx	r8
 800c462:	3001      	adds	r0, #1
 800c464:	d01e      	beq.n	800c4a4 <_printf_common+0xa4>
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	68e5      	ldr	r5, [r4, #12]
 800c46a:	6832      	ldr	r2, [r6, #0]
 800c46c:	f003 0306 	and.w	r3, r3, #6
 800c470:	2b04      	cmp	r3, #4
 800c472:	bf08      	it	eq
 800c474:	1aad      	subeq	r5, r5, r2
 800c476:	68a3      	ldr	r3, [r4, #8]
 800c478:	6922      	ldr	r2, [r4, #16]
 800c47a:	bf0c      	ite	eq
 800c47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c480:	2500      	movne	r5, #0
 800c482:	4293      	cmp	r3, r2
 800c484:	bfc4      	itt	gt
 800c486:	1a9b      	subgt	r3, r3, r2
 800c488:	18ed      	addgt	r5, r5, r3
 800c48a:	2600      	movs	r6, #0
 800c48c:	341a      	adds	r4, #26
 800c48e:	42b5      	cmp	r5, r6
 800c490:	d11a      	bne.n	800c4c8 <_printf_common+0xc8>
 800c492:	2000      	movs	r0, #0
 800c494:	e008      	b.n	800c4a8 <_printf_common+0xa8>
 800c496:	2301      	movs	r3, #1
 800c498:	4652      	mov	r2, sl
 800c49a:	4649      	mov	r1, r9
 800c49c:	4638      	mov	r0, r7
 800c49e:	47c0      	blx	r8
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d103      	bne.n	800c4ac <_printf_common+0xac>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ac:	3501      	adds	r5, #1
 800c4ae:	e7c6      	b.n	800c43e <_printf_common+0x3e>
 800c4b0:	18e1      	adds	r1, r4, r3
 800c4b2:	1c5a      	adds	r2, r3, #1
 800c4b4:	2030      	movs	r0, #48	; 0x30
 800c4b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4ba:	4422      	add	r2, r4
 800c4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4c4:	3302      	adds	r3, #2
 800c4c6:	e7c7      	b.n	800c458 <_printf_common+0x58>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	4622      	mov	r2, r4
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	47c0      	blx	r8
 800c4d2:	3001      	adds	r0, #1
 800c4d4:	d0e6      	beq.n	800c4a4 <_printf_common+0xa4>
 800c4d6:	3601      	adds	r6, #1
 800c4d8:	e7d9      	b.n	800c48e <_printf_common+0x8e>
	...

0800c4dc <_printf_i>:
 800c4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e0:	7e0f      	ldrb	r7, [r1, #24]
 800c4e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4e4:	2f78      	cmp	r7, #120	; 0x78
 800c4e6:	4691      	mov	r9, r2
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	469a      	mov	sl, r3
 800c4ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4f2:	d807      	bhi.n	800c504 <_printf_i+0x28>
 800c4f4:	2f62      	cmp	r7, #98	; 0x62
 800c4f6:	d80a      	bhi.n	800c50e <_printf_i+0x32>
 800c4f8:	2f00      	cmp	r7, #0
 800c4fa:	f000 80d8 	beq.w	800c6ae <_printf_i+0x1d2>
 800c4fe:	2f58      	cmp	r7, #88	; 0x58
 800c500:	f000 80a3 	beq.w	800c64a <_printf_i+0x16e>
 800c504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c50c:	e03a      	b.n	800c584 <_printf_i+0xa8>
 800c50e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c512:	2b15      	cmp	r3, #21
 800c514:	d8f6      	bhi.n	800c504 <_printf_i+0x28>
 800c516:	a101      	add	r1, pc, #4	; (adr r1, 800c51c <_printf_i+0x40>)
 800c518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c51c:	0800c575 	.word	0x0800c575
 800c520:	0800c589 	.word	0x0800c589
 800c524:	0800c505 	.word	0x0800c505
 800c528:	0800c505 	.word	0x0800c505
 800c52c:	0800c505 	.word	0x0800c505
 800c530:	0800c505 	.word	0x0800c505
 800c534:	0800c589 	.word	0x0800c589
 800c538:	0800c505 	.word	0x0800c505
 800c53c:	0800c505 	.word	0x0800c505
 800c540:	0800c505 	.word	0x0800c505
 800c544:	0800c505 	.word	0x0800c505
 800c548:	0800c695 	.word	0x0800c695
 800c54c:	0800c5b9 	.word	0x0800c5b9
 800c550:	0800c677 	.word	0x0800c677
 800c554:	0800c505 	.word	0x0800c505
 800c558:	0800c505 	.word	0x0800c505
 800c55c:	0800c6b7 	.word	0x0800c6b7
 800c560:	0800c505 	.word	0x0800c505
 800c564:	0800c5b9 	.word	0x0800c5b9
 800c568:	0800c505 	.word	0x0800c505
 800c56c:	0800c505 	.word	0x0800c505
 800c570:	0800c67f 	.word	0x0800c67f
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	1d1a      	adds	r2, r3, #4
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	602a      	str	r2, [r5, #0]
 800c57c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c584:	2301      	movs	r3, #1
 800c586:	e0a3      	b.n	800c6d0 <_printf_i+0x1f4>
 800c588:	6820      	ldr	r0, [r4, #0]
 800c58a:	6829      	ldr	r1, [r5, #0]
 800c58c:	0606      	lsls	r6, r0, #24
 800c58e:	f101 0304 	add.w	r3, r1, #4
 800c592:	d50a      	bpl.n	800c5aa <_printf_i+0xce>
 800c594:	680e      	ldr	r6, [r1, #0]
 800c596:	602b      	str	r3, [r5, #0]
 800c598:	2e00      	cmp	r6, #0
 800c59a:	da03      	bge.n	800c5a4 <_printf_i+0xc8>
 800c59c:	232d      	movs	r3, #45	; 0x2d
 800c59e:	4276      	negs	r6, r6
 800c5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5a4:	485e      	ldr	r0, [pc, #376]	; (800c720 <_printf_i+0x244>)
 800c5a6:	230a      	movs	r3, #10
 800c5a8:	e019      	b.n	800c5de <_printf_i+0x102>
 800c5aa:	680e      	ldr	r6, [r1, #0]
 800c5ac:	602b      	str	r3, [r5, #0]
 800c5ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5b2:	bf18      	it	ne
 800c5b4:	b236      	sxthne	r6, r6
 800c5b6:	e7ef      	b.n	800c598 <_printf_i+0xbc>
 800c5b8:	682b      	ldr	r3, [r5, #0]
 800c5ba:	6820      	ldr	r0, [r4, #0]
 800c5bc:	1d19      	adds	r1, r3, #4
 800c5be:	6029      	str	r1, [r5, #0]
 800c5c0:	0601      	lsls	r1, r0, #24
 800c5c2:	d501      	bpl.n	800c5c8 <_printf_i+0xec>
 800c5c4:	681e      	ldr	r6, [r3, #0]
 800c5c6:	e002      	b.n	800c5ce <_printf_i+0xf2>
 800c5c8:	0646      	lsls	r6, r0, #25
 800c5ca:	d5fb      	bpl.n	800c5c4 <_printf_i+0xe8>
 800c5cc:	881e      	ldrh	r6, [r3, #0]
 800c5ce:	4854      	ldr	r0, [pc, #336]	; (800c720 <_printf_i+0x244>)
 800c5d0:	2f6f      	cmp	r7, #111	; 0x6f
 800c5d2:	bf0c      	ite	eq
 800c5d4:	2308      	moveq	r3, #8
 800c5d6:	230a      	movne	r3, #10
 800c5d8:	2100      	movs	r1, #0
 800c5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5de:	6865      	ldr	r5, [r4, #4]
 800c5e0:	60a5      	str	r5, [r4, #8]
 800c5e2:	2d00      	cmp	r5, #0
 800c5e4:	bfa2      	ittt	ge
 800c5e6:	6821      	ldrge	r1, [r4, #0]
 800c5e8:	f021 0104 	bicge.w	r1, r1, #4
 800c5ec:	6021      	strge	r1, [r4, #0]
 800c5ee:	b90e      	cbnz	r6, 800c5f4 <_printf_i+0x118>
 800c5f0:	2d00      	cmp	r5, #0
 800c5f2:	d04d      	beq.n	800c690 <_printf_i+0x1b4>
 800c5f4:	4615      	mov	r5, r2
 800c5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5fa:	fb03 6711 	mls	r7, r3, r1, r6
 800c5fe:	5dc7      	ldrb	r7, [r0, r7]
 800c600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c604:	4637      	mov	r7, r6
 800c606:	42bb      	cmp	r3, r7
 800c608:	460e      	mov	r6, r1
 800c60a:	d9f4      	bls.n	800c5f6 <_printf_i+0x11a>
 800c60c:	2b08      	cmp	r3, #8
 800c60e:	d10b      	bne.n	800c628 <_printf_i+0x14c>
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	07de      	lsls	r6, r3, #31
 800c614:	d508      	bpl.n	800c628 <_printf_i+0x14c>
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	6861      	ldr	r1, [r4, #4]
 800c61a:	4299      	cmp	r1, r3
 800c61c:	bfde      	ittt	le
 800c61e:	2330      	movle	r3, #48	; 0x30
 800c620:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c624:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c628:	1b52      	subs	r2, r2, r5
 800c62a:	6122      	str	r2, [r4, #16]
 800c62c:	f8cd a000 	str.w	sl, [sp]
 800c630:	464b      	mov	r3, r9
 800c632:	aa03      	add	r2, sp, #12
 800c634:	4621      	mov	r1, r4
 800c636:	4640      	mov	r0, r8
 800c638:	f7ff fee2 	bl	800c400 <_printf_common>
 800c63c:	3001      	adds	r0, #1
 800c63e:	d14c      	bne.n	800c6da <_printf_i+0x1fe>
 800c640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c644:	b004      	add	sp, #16
 800c646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c64a:	4835      	ldr	r0, [pc, #212]	; (800c720 <_printf_i+0x244>)
 800c64c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c650:	6829      	ldr	r1, [r5, #0]
 800c652:	6823      	ldr	r3, [r4, #0]
 800c654:	f851 6b04 	ldr.w	r6, [r1], #4
 800c658:	6029      	str	r1, [r5, #0]
 800c65a:	061d      	lsls	r5, r3, #24
 800c65c:	d514      	bpl.n	800c688 <_printf_i+0x1ac>
 800c65e:	07df      	lsls	r7, r3, #31
 800c660:	bf44      	itt	mi
 800c662:	f043 0320 	orrmi.w	r3, r3, #32
 800c666:	6023      	strmi	r3, [r4, #0]
 800c668:	b91e      	cbnz	r6, 800c672 <_printf_i+0x196>
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	f023 0320 	bic.w	r3, r3, #32
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	2310      	movs	r3, #16
 800c674:	e7b0      	b.n	800c5d8 <_printf_i+0xfc>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	f043 0320 	orr.w	r3, r3, #32
 800c67c:	6023      	str	r3, [r4, #0]
 800c67e:	2378      	movs	r3, #120	; 0x78
 800c680:	4828      	ldr	r0, [pc, #160]	; (800c724 <_printf_i+0x248>)
 800c682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c686:	e7e3      	b.n	800c650 <_printf_i+0x174>
 800c688:	0659      	lsls	r1, r3, #25
 800c68a:	bf48      	it	mi
 800c68c:	b2b6      	uxthmi	r6, r6
 800c68e:	e7e6      	b.n	800c65e <_printf_i+0x182>
 800c690:	4615      	mov	r5, r2
 800c692:	e7bb      	b.n	800c60c <_printf_i+0x130>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	6826      	ldr	r6, [r4, #0]
 800c698:	6961      	ldr	r1, [r4, #20]
 800c69a:	1d18      	adds	r0, r3, #4
 800c69c:	6028      	str	r0, [r5, #0]
 800c69e:	0635      	lsls	r5, r6, #24
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	d501      	bpl.n	800c6a8 <_printf_i+0x1cc>
 800c6a4:	6019      	str	r1, [r3, #0]
 800c6a6:	e002      	b.n	800c6ae <_printf_i+0x1d2>
 800c6a8:	0670      	lsls	r0, r6, #25
 800c6aa:	d5fb      	bpl.n	800c6a4 <_printf_i+0x1c8>
 800c6ac:	8019      	strh	r1, [r3, #0]
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	6123      	str	r3, [r4, #16]
 800c6b2:	4615      	mov	r5, r2
 800c6b4:	e7ba      	b.n	800c62c <_printf_i+0x150>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	1d1a      	adds	r2, r3, #4
 800c6ba:	602a      	str	r2, [r5, #0]
 800c6bc:	681d      	ldr	r5, [r3, #0]
 800c6be:	6862      	ldr	r2, [r4, #4]
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f7f3 fd94 	bl	80001f0 <memchr>
 800c6c8:	b108      	cbz	r0, 800c6ce <_printf_i+0x1f2>
 800c6ca:	1b40      	subs	r0, r0, r5
 800c6cc:	6060      	str	r0, [r4, #4]
 800c6ce:	6863      	ldr	r3, [r4, #4]
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6d8:	e7a8      	b.n	800c62c <_printf_i+0x150>
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	462a      	mov	r2, r5
 800c6de:	4649      	mov	r1, r9
 800c6e0:	4640      	mov	r0, r8
 800c6e2:	47d0      	blx	sl
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d0ab      	beq.n	800c640 <_printf_i+0x164>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	079b      	lsls	r3, r3, #30
 800c6ec:	d413      	bmi.n	800c716 <_printf_i+0x23a>
 800c6ee:	68e0      	ldr	r0, [r4, #12]
 800c6f0:	9b03      	ldr	r3, [sp, #12]
 800c6f2:	4298      	cmp	r0, r3
 800c6f4:	bfb8      	it	lt
 800c6f6:	4618      	movlt	r0, r3
 800c6f8:	e7a4      	b.n	800c644 <_printf_i+0x168>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	4632      	mov	r2, r6
 800c6fe:	4649      	mov	r1, r9
 800c700:	4640      	mov	r0, r8
 800c702:	47d0      	blx	sl
 800c704:	3001      	adds	r0, #1
 800c706:	d09b      	beq.n	800c640 <_printf_i+0x164>
 800c708:	3501      	adds	r5, #1
 800c70a:	68e3      	ldr	r3, [r4, #12]
 800c70c:	9903      	ldr	r1, [sp, #12]
 800c70e:	1a5b      	subs	r3, r3, r1
 800c710:	42ab      	cmp	r3, r5
 800c712:	dcf2      	bgt.n	800c6fa <_printf_i+0x21e>
 800c714:	e7eb      	b.n	800c6ee <_printf_i+0x212>
 800c716:	2500      	movs	r5, #0
 800c718:	f104 0619 	add.w	r6, r4, #25
 800c71c:	e7f5      	b.n	800c70a <_printf_i+0x22e>
 800c71e:	bf00      	nop
 800c720:	0800eaae 	.word	0x0800eaae
 800c724:	0800eabf 	.word	0x0800eabf

0800c728 <_sbrk_r>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	4d06      	ldr	r5, [pc, #24]	; (800c744 <_sbrk_r+0x1c>)
 800c72c:	2300      	movs	r3, #0
 800c72e:	4604      	mov	r4, r0
 800c730:	4608      	mov	r0, r1
 800c732:	602b      	str	r3, [r5, #0]
 800c734:	f7f6 fb6e 	bl	8002e14 <_sbrk>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	d102      	bne.n	800c742 <_sbrk_r+0x1a>
 800c73c:	682b      	ldr	r3, [r5, #0]
 800c73e:	b103      	cbz	r3, 800c742 <_sbrk_r+0x1a>
 800c740:	6023      	str	r3, [r4, #0]
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	20000b18 	.word	0x20000b18

0800c748 <siprintf>:
 800c748:	b40e      	push	{r1, r2, r3}
 800c74a:	b500      	push	{lr}
 800c74c:	b09c      	sub	sp, #112	; 0x70
 800c74e:	ab1d      	add	r3, sp, #116	; 0x74
 800c750:	9002      	str	r0, [sp, #8]
 800c752:	9006      	str	r0, [sp, #24]
 800c754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c758:	4809      	ldr	r0, [pc, #36]	; (800c780 <siprintf+0x38>)
 800c75a:	9107      	str	r1, [sp, #28]
 800c75c:	9104      	str	r1, [sp, #16]
 800c75e:	4909      	ldr	r1, [pc, #36]	; (800c784 <siprintf+0x3c>)
 800c760:	f853 2b04 	ldr.w	r2, [r3], #4
 800c764:	9105      	str	r1, [sp, #20]
 800c766:	6800      	ldr	r0, [r0, #0]
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	a902      	add	r1, sp, #8
 800c76c:	f001 fa9a 	bl	800dca4 <_svfiprintf_r>
 800c770:	9b02      	ldr	r3, [sp, #8]
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	b01c      	add	sp, #112	; 0x70
 800c778:	f85d eb04 	ldr.w	lr, [sp], #4
 800c77c:	b003      	add	sp, #12
 800c77e:	4770      	bx	lr
 800c780:	2000002c 	.word	0x2000002c
 800c784:	ffff0208 	.word	0xffff0208

0800c788 <quorem>:
 800c788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	6903      	ldr	r3, [r0, #16]
 800c78e:	690c      	ldr	r4, [r1, #16]
 800c790:	42a3      	cmp	r3, r4
 800c792:	4607      	mov	r7, r0
 800c794:	f2c0 8081 	blt.w	800c89a <quorem+0x112>
 800c798:	3c01      	subs	r4, #1
 800c79a:	f101 0814 	add.w	r8, r1, #20
 800c79e:	f100 0514 	add.w	r5, r0, #20
 800c7a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c7b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c7c0:	d331      	bcc.n	800c826 <quorem+0x9e>
 800c7c2:	f04f 0e00 	mov.w	lr, #0
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	46ac      	mov	ip, r5
 800c7ca:	46f2      	mov	sl, lr
 800c7cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7d0:	b293      	uxth	r3, r2
 800c7d2:	fb06 e303 	mla	r3, r6, r3, lr
 800c7d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	ebaa 0303 	sub.w	r3, sl, r3
 800c7e0:	f8dc a000 	ldr.w	sl, [ip]
 800c7e4:	0c12      	lsrs	r2, r2, #16
 800c7e6:	fa13 f38a 	uxtah	r3, r3, sl
 800c7ea:	fb06 e202 	mla	r2, r6, r2, lr
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	9b00      	ldr	r3, [sp, #0]
 800c7f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7f6:	b292      	uxth	r2, r2
 800c7f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c800:	f8bd 3000 	ldrh.w	r3, [sp]
 800c804:	4581      	cmp	r9, r0
 800c806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c80a:	f84c 3b04 	str.w	r3, [ip], #4
 800c80e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c812:	d2db      	bcs.n	800c7cc <quorem+0x44>
 800c814:	f855 300b 	ldr.w	r3, [r5, fp]
 800c818:	b92b      	cbnz	r3, 800c826 <quorem+0x9e>
 800c81a:	9b01      	ldr	r3, [sp, #4]
 800c81c:	3b04      	subs	r3, #4
 800c81e:	429d      	cmp	r5, r3
 800c820:	461a      	mov	r2, r3
 800c822:	d32e      	bcc.n	800c882 <quorem+0xfa>
 800c824:	613c      	str	r4, [r7, #16]
 800c826:	4638      	mov	r0, r7
 800c828:	f001 f8c8 	bl	800d9bc <__mcmp>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	db24      	blt.n	800c87a <quorem+0xf2>
 800c830:	3601      	adds	r6, #1
 800c832:	4628      	mov	r0, r5
 800c834:	f04f 0c00 	mov.w	ip, #0
 800c838:	f858 2b04 	ldr.w	r2, [r8], #4
 800c83c:	f8d0 e000 	ldr.w	lr, [r0]
 800c840:	b293      	uxth	r3, r2
 800c842:	ebac 0303 	sub.w	r3, ip, r3
 800c846:	0c12      	lsrs	r2, r2, #16
 800c848:	fa13 f38e 	uxtah	r3, r3, lr
 800c84c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c854:	b29b      	uxth	r3, r3
 800c856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c85a:	45c1      	cmp	r9, r8
 800c85c:	f840 3b04 	str.w	r3, [r0], #4
 800c860:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c864:	d2e8      	bcs.n	800c838 <quorem+0xb0>
 800c866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c86a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c86e:	b922      	cbnz	r2, 800c87a <quorem+0xf2>
 800c870:	3b04      	subs	r3, #4
 800c872:	429d      	cmp	r5, r3
 800c874:	461a      	mov	r2, r3
 800c876:	d30a      	bcc.n	800c88e <quorem+0x106>
 800c878:	613c      	str	r4, [r7, #16]
 800c87a:	4630      	mov	r0, r6
 800c87c:	b003      	add	sp, #12
 800c87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c882:	6812      	ldr	r2, [r2, #0]
 800c884:	3b04      	subs	r3, #4
 800c886:	2a00      	cmp	r2, #0
 800c888:	d1cc      	bne.n	800c824 <quorem+0x9c>
 800c88a:	3c01      	subs	r4, #1
 800c88c:	e7c7      	b.n	800c81e <quorem+0x96>
 800c88e:	6812      	ldr	r2, [r2, #0]
 800c890:	3b04      	subs	r3, #4
 800c892:	2a00      	cmp	r2, #0
 800c894:	d1f0      	bne.n	800c878 <quorem+0xf0>
 800c896:	3c01      	subs	r4, #1
 800c898:	e7eb      	b.n	800c872 <quorem+0xea>
 800c89a:	2000      	movs	r0, #0
 800c89c:	e7ee      	b.n	800c87c <quorem+0xf4>
	...

0800c8a0 <_dtoa_r>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	ed2d 8b04 	vpush	{d8-d9}
 800c8a8:	ec57 6b10 	vmov	r6, r7, d0
 800c8ac:	b093      	sub	sp, #76	; 0x4c
 800c8ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c8b4:	9106      	str	r1, [sp, #24]
 800c8b6:	ee10 aa10 	vmov	sl, s0
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8be:	930c      	str	r3, [sp, #48]	; 0x30
 800c8c0:	46bb      	mov	fp, r7
 800c8c2:	b975      	cbnz	r5, 800c8e2 <_dtoa_r+0x42>
 800c8c4:	2010      	movs	r0, #16
 800c8c6:	f7ff f9cd 	bl	800bc64 <malloc>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	6260      	str	r0, [r4, #36]	; 0x24
 800c8ce:	b920      	cbnz	r0, 800c8da <_dtoa_r+0x3a>
 800c8d0:	4ba7      	ldr	r3, [pc, #668]	; (800cb70 <_dtoa_r+0x2d0>)
 800c8d2:	21ea      	movs	r1, #234	; 0xea
 800c8d4:	48a7      	ldr	r0, [pc, #668]	; (800cb74 <_dtoa_r+0x2d4>)
 800c8d6:	f001 fae5 	bl	800dea4 <__assert_func>
 800c8da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8de:	6005      	str	r5, [r0, #0]
 800c8e0:	60c5      	str	r5, [r0, #12]
 800c8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8e4:	6819      	ldr	r1, [r3, #0]
 800c8e6:	b151      	cbz	r1, 800c8fe <_dtoa_r+0x5e>
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	604a      	str	r2, [r1, #4]
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	4093      	lsls	r3, r2
 800c8f0:	608b      	str	r3, [r1, #8]
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 fe20 	bl	800d538 <_Bfree>
 800c8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	1e3b      	subs	r3, r7, #0
 800c900:	bfaa      	itet	ge
 800c902:	2300      	movge	r3, #0
 800c904:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c908:	f8c8 3000 	strge.w	r3, [r8]
 800c90c:	4b9a      	ldr	r3, [pc, #616]	; (800cb78 <_dtoa_r+0x2d8>)
 800c90e:	bfbc      	itt	lt
 800c910:	2201      	movlt	r2, #1
 800c912:	f8c8 2000 	strlt.w	r2, [r8]
 800c916:	ea33 030b 	bics.w	r3, r3, fp
 800c91a:	d11b      	bne.n	800c954 <_dtoa_r+0xb4>
 800c91c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c91e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c928:	4333      	orrs	r3, r6
 800c92a:	f000 8592 	beq.w	800d452 <_dtoa_r+0xbb2>
 800c92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c930:	b963      	cbnz	r3, 800c94c <_dtoa_r+0xac>
 800c932:	4b92      	ldr	r3, [pc, #584]	; (800cb7c <_dtoa_r+0x2dc>)
 800c934:	e022      	b.n	800c97c <_dtoa_r+0xdc>
 800c936:	4b92      	ldr	r3, [pc, #584]	; (800cb80 <_dtoa_r+0x2e0>)
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	3308      	adds	r3, #8
 800c93c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	9801      	ldr	r0, [sp, #4]
 800c942:	b013      	add	sp, #76	; 0x4c
 800c944:	ecbd 8b04 	vpop	{d8-d9}
 800c948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94c:	4b8b      	ldr	r3, [pc, #556]	; (800cb7c <_dtoa_r+0x2dc>)
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	3303      	adds	r3, #3
 800c952:	e7f3      	b.n	800c93c <_dtoa_r+0x9c>
 800c954:	2200      	movs	r2, #0
 800c956:	2300      	movs	r3, #0
 800c958:	4650      	mov	r0, sl
 800c95a:	4659      	mov	r1, fp
 800c95c:	f7f4 f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 800c960:	ec4b ab19 	vmov	d9, sl, fp
 800c964:	4680      	mov	r8, r0
 800c966:	b158      	cbz	r0, 800c980 <_dtoa_r+0xe0>
 800c968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c96a:	2301      	movs	r3, #1
 800c96c:	6013      	str	r3, [r2, #0]
 800c96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c970:	2b00      	cmp	r3, #0
 800c972:	f000 856b 	beq.w	800d44c <_dtoa_r+0xbac>
 800c976:	4883      	ldr	r0, [pc, #524]	; (800cb84 <_dtoa_r+0x2e4>)
 800c978:	6018      	str	r0, [r3, #0]
 800c97a:	1e43      	subs	r3, r0, #1
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	e7df      	b.n	800c940 <_dtoa_r+0xa0>
 800c980:	ec4b ab10 	vmov	d0, sl, fp
 800c984:	aa10      	add	r2, sp, #64	; 0x40
 800c986:	a911      	add	r1, sp, #68	; 0x44
 800c988:	4620      	mov	r0, r4
 800c98a:	f001 f8bd 	bl	800db08 <__d2b>
 800c98e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c992:	ee08 0a10 	vmov	s16, r0
 800c996:	2d00      	cmp	r5, #0
 800c998:	f000 8084 	beq.w	800caa4 <_dtoa_r+0x204>
 800c99c:	ee19 3a90 	vmov	r3, s19
 800c9a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c9a8:	4656      	mov	r6, sl
 800c9aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c9ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c9b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c9b6:	4b74      	ldr	r3, [pc, #464]	; (800cb88 <_dtoa_r+0x2e8>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f3 fc6b 	bl	8000298 <__aeabi_dsub>
 800c9c2:	a365      	add	r3, pc, #404	; (adr r3, 800cb58 <_dtoa_r+0x2b8>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fe1e 	bl	8000608 <__aeabi_dmul>
 800c9cc:	a364      	add	r3, pc, #400	; (adr r3, 800cb60 <_dtoa_r+0x2c0>)
 800c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d2:	f7f3 fc63 	bl	800029c <__adddf3>
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	4628      	mov	r0, r5
 800c9da:	460f      	mov	r7, r1
 800c9dc:	f7f3 fdaa 	bl	8000534 <__aeabi_i2d>
 800c9e0:	a361      	add	r3, pc, #388	; (adr r3, 800cb68 <_dtoa_r+0x2c8>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fe0f 	bl	8000608 <__aeabi_dmul>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	4639      	mov	r1, r7
 800c9f2:	f7f3 fc53 	bl	800029c <__adddf3>
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	460f      	mov	r7, r1
 800c9fa:	f7f4 f8b5 	bl	8000b68 <__aeabi_d2iz>
 800c9fe:	2200      	movs	r2, #0
 800ca00:	9000      	str	r0, [sp, #0]
 800ca02:	2300      	movs	r3, #0
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f7f4 f870 	bl	8000aec <__aeabi_dcmplt>
 800ca0c:	b150      	cbz	r0, 800ca24 <_dtoa_r+0x184>
 800ca0e:	9800      	ldr	r0, [sp, #0]
 800ca10:	f7f3 fd90 	bl	8000534 <__aeabi_i2d>
 800ca14:	4632      	mov	r2, r6
 800ca16:	463b      	mov	r3, r7
 800ca18:	f7f4 f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca1c:	b910      	cbnz	r0, 800ca24 <_dtoa_r+0x184>
 800ca1e:	9b00      	ldr	r3, [sp, #0]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	9b00      	ldr	r3, [sp, #0]
 800ca26:	2b16      	cmp	r3, #22
 800ca28:	d85a      	bhi.n	800cae0 <_dtoa_r+0x240>
 800ca2a:	9a00      	ldr	r2, [sp, #0]
 800ca2c:	4b57      	ldr	r3, [pc, #348]	; (800cb8c <_dtoa_r+0x2ec>)
 800ca2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	ec51 0b19 	vmov	r0, r1, d9
 800ca3a:	f7f4 f857 	bl	8000aec <__aeabi_dcmplt>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d050      	beq.n	800cae4 <_dtoa_r+0x244>
 800ca42:	9b00      	ldr	r3, [sp, #0]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	2300      	movs	r3, #0
 800ca4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca4e:	1b5d      	subs	r5, r3, r5
 800ca50:	1e6b      	subs	r3, r5, #1
 800ca52:	9305      	str	r3, [sp, #20]
 800ca54:	bf45      	ittet	mi
 800ca56:	f1c5 0301 	rsbmi	r3, r5, #1
 800ca5a:	9304      	strmi	r3, [sp, #16]
 800ca5c:	2300      	movpl	r3, #0
 800ca5e:	2300      	movmi	r3, #0
 800ca60:	bf4c      	ite	mi
 800ca62:	9305      	strmi	r3, [sp, #20]
 800ca64:	9304      	strpl	r3, [sp, #16]
 800ca66:	9b00      	ldr	r3, [sp, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	db3d      	blt.n	800cae8 <_dtoa_r+0x248>
 800ca6c:	9b05      	ldr	r3, [sp, #20]
 800ca6e:	9a00      	ldr	r2, [sp, #0]
 800ca70:	920a      	str	r2, [sp, #40]	; 0x28
 800ca72:	4413      	add	r3, r2
 800ca74:	9305      	str	r3, [sp, #20]
 800ca76:	2300      	movs	r3, #0
 800ca78:	9307      	str	r3, [sp, #28]
 800ca7a:	9b06      	ldr	r3, [sp, #24]
 800ca7c:	2b09      	cmp	r3, #9
 800ca7e:	f200 8089 	bhi.w	800cb94 <_dtoa_r+0x2f4>
 800ca82:	2b05      	cmp	r3, #5
 800ca84:	bfc4      	itt	gt
 800ca86:	3b04      	subgt	r3, #4
 800ca88:	9306      	strgt	r3, [sp, #24]
 800ca8a:	9b06      	ldr	r3, [sp, #24]
 800ca8c:	f1a3 0302 	sub.w	r3, r3, #2
 800ca90:	bfcc      	ite	gt
 800ca92:	2500      	movgt	r5, #0
 800ca94:	2501      	movle	r5, #1
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	f200 8087 	bhi.w	800cbaa <_dtoa_r+0x30a>
 800ca9c:	e8df f003 	tbb	[pc, r3]
 800caa0:	59383a2d 	.word	0x59383a2d
 800caa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800caa8:	441d      	add	r5, r3
 800caaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800caae:	2b20      	cmp	r3, #32
 800cab0:	bfc1      	itttt	gt
 800cab2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cab6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800caba:	fa0b f303 	lslgt.w	r3, fp, r3
 800cabe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cac2:	bfda      	itte	le
 800cac4:	f1c3 0320 	rsble	r3, r3, #32
 800cac8:	fa06 f003 	lslle.w	r0, r6, r3
 800cacc:	4318      	orrgt	r0, r3
 800cace:	f7f3 fd21 	bl	8000514 <__aeabi_ui2d>
 800cad2:	2301      	movs	r3, #1
 800cad4:	4606      	mov	r6, r0
 800cad6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cada:	3d01      	subs	r5, #1
 800cadc:	930e      	str	r3, [sp, #56]	; 0x38
 800cade:	e76a      	b.n	800c9b6 <_dtoa_r+0x116>
 800cae0:	2301      	movs	r3, #1
 800cae2:	e7b2      	b.n	800ca4a <_dtoa_r+0x1aa>
 800cae4:	900b      	str	r0, [sp, #44]	; 0x2c
 800cae6:	e7b1      	b.n	800ca4c <_dtoa_r+0x1ac>
 800cae8:	9b04      	ldr	r3, [sp, #16]
 800caea:	9a00      	ldr	r2, [sp, #0]
 800caec:	1a9b      	subs	r3, r3, r2
 800caee:	9304      	str	r3, [sp, #16]
 800caf0:	4253      	negs	r3, r2
 800caf2:	9307      	str	r3, [sp, #28]
 800caf4:	2300      	movs	r3, #0
 800caf6:	930a      	str	r3, [sp, #40]	; 0x28
 800caf8:	e7bf      	b.n	800ca7a <_dtoa_r+0x1da>
 800cafa:	2300      	movs	r3, #0
 800cafc:	9308      	str	r3, [sp, #32]
 800cafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	dc55      	bgt.n	800cbb0 <_dtoa_r+0x310>
 800cb04:	2301      	movs	r3, #1
 800cb06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb0e:	e00c      	b.n	800cb2a <_dtoa_r+0x28a>
 800cb10:	2301      	movs	r3, #1
 800cb12:	e7f3      	b.n	800cafc <_dtoa_r+0x25c>
 800cb14:	2300      	movs	r3, #0
 800cb16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb18:	9308      	str	r3, [sp, #32]
 800cb1a:	9b00      	ldr	r3, [sp, #0]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	9302      	str	r3, [sp, #8]
 800cb20:	3301      	adds	r3, #1
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	9303      	str	r3, [sp, #12]
 800cb26:	bfb8      	it	lt
 800cb28:	2301      	movlt	r3, #1
 800cb2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	6042      	str	r2, [r0, #4]
 800cb30:	2204      	movs	r2, #4
 800cb32:	f102 0614 	add.w	r6, r2, #20
 800cb36:	429e      	cmp	r6, r3
 800cb38:	6841      	ldr	r1, [r0, #4]
 800cb3a:	d93d      	bls.n	800cbb8 <_dtoa_r+0x318>
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f000 fcbb 	bl	800d4b8 <_Balloc>
 800cb42:	9001      	str	r0, [sp, #4]
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d13b      	bne.n	800cbc0 <_dtoa_r+0x320>
 800cb48:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <_dtoa_r+0x2f0>)
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb50:	e6c0      	b.n	800c8d4 <_dtoa_r+0x34>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e7df      	b.n	800cb16 <_dtoa_r+0x276>
 800cb56:	bf00      	nop
 800cb58:	636f4361 	.word	0x636f4361
 800cb5c:	3fd287a7 	.word	0x3fd287a7
 800cb60:	8b60c8b3 	.word	0x8b60c8b3
 800cb64:	3fc68a28 	.word	0x3fc68a28
 800cb68:	509f79fb 	.word	0x509f79fb
 800cb6c:	3fd34413 	.word	0x3fd34413
 800cb70:	0800eadd 	.word	0x0800eadd
 800cb74:	0800eaf4 	.word	0x0800eaf4
 800cb78:	7ff00000 	.word	0x7ff00000
 800cb7c:	0800ead9 	.word	0x0800ead9
 800cb80:	0800ead0 	.word	0x0800ead0
 800cb84:	0800eaad 	.word	0x0800eaad
 800cb88:	3ff80000 	.word	0x3ff80000
 800cb8c:	0800ebe8 	.word	0x0800ebe8
 800cb90:	0800eb4f 	.word	0x0800eb4f
 800cb94:	2501      	movs	r5, #1
 800cb96:	2300      	movs	r3, #0
 800cb98:	9306      	str	r3, [sp, #24]
 800cb9a:	9508      	str	r5, [sp, #32]
 800cb9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cba0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cba4:	2200      	movs	r2, #0
 800cba6:	2312      	movs	r3, #18
 800cba8:	e7b0      	b.n	800cb0c <_dtoa_r+0x26c>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	9308      	str	r3, [sp, #32]
 800cbae:	e7f5      	b.n	800cb9c <_dtoa_r+0x2fc>
 800cbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cbb6:	e7b8      	b.n	800cb2a <_dtoa_r+0x28a>
 800cbb8:	3101      	adds	r1, #1
 800cbba:	6041      	str	r1, [r0, #4]
 800cbbc:	0052      	lsls	r2, r2, #1
 800cbbe:	e7b8      	b.n	800cb32 <_dtoa_r+0x292>
 800cbc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbc2:	9a01      	ldr	r2, [sp, #4]
 800cbc4:	601a      	str	r2, [r3, #0]
 800cbc6:	9b03      	ldr	r3, [sp, #12]
 800cbc8:	2b0e      	cmp	r3, #14
 800cbca:	f200 809d 	bhi.w	800cd08 <_dtoa_r+0x468>
 800cbce:	2d00      	cmp	r5, #0
 800cbd0:	f000 809a 	beq.w	800cd08 <_dtoa_r+0x468>
 800cbd4:	9b00      	ldr	r3, [sp, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dd32      	ble.n	800cc40 <_dtoa_r+0x3a0>
 800cbda:	4ab7      	ldr	r2, [pc, #732]	; (800ceb8 <_dtoa_r+0x618>)
 800cbdc:	f003 030f 	and.w	r3, r3, #15
 800cbe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cbe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbe8:	9b00      	ldr	r3, [sp, #0]
 800cbea:	05d8      	lsls	r0, r3, #23
 800cbec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cbf0:	d516      	bpl.n	800cc20 <_dtoa_r+0x380>
 800cbf2:	4bb2      	ldr	r3, [pc, #712]	; (800cebc <_dtoa_r+0x61c>)
 800cbf4:	ec51 0b19 	vmov	r0, r1, d9
 800cbf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbfc:	f7f3 fe2e 	bl	800085c <__aeabi_ddiv>
 800cc00:	f007 070f 	and.w	r7, r7, #15
 800cc04:	4682      	mov	sl, r0
 800cc06:	468b      	mov	fp, r1
 800cc08:	2503      	movs	r5, #3
 800cc0a:	4eac      	ldr	r6, [pc, #688]	; (800cebc <_dtoa_r+0x61c>)
 800cc0c:	b957      	cbnz	r7, 800cc24 <_dtoa_r+0x384>
 800cc0e:	4642      	mov	r2, r8
 800cc10:	464b      	mov	r3, r9
 800cc12:	4650      	mov	r0, sl
 800cc14:	4659      	mov	r1, fp
 800cc16:	f7f3 fe21 	bl	800085c <__aeabi_ddiv>
 800cc1a:	4682      	mov	sl, r0
 800cc1c:	468b      	mov	fp, r1
 800cc1e:	e028      	b.n	800cc72 <_dtoa_r+0x3d2>
 800cc20:	2502      	movs	r5, #2
 800cc22:	e7f2      	b.n	800cc0a <_dtoa_r+0x36a>
 800cc24:	07f9      	lsls	r1, r7, #31
 800cc26:	d508      	bpl.n	800cc3a <_dtoa_r+0x39a>
 800cc28:	4640      	mov	r0, r8
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc30:	f7f3 fcea 	bl	8000608 <__aeabi_dmul>
 800cc34:	3501      	adds	r5, #1
 800cc36:	4680      	mov	r8, r0
 800cc38:	4689      	mov	r9, r1
 800cc3a:	107f      	asrs	r7, r7, #1
 800cc3c:	3608      	adds	r6, #8
 800cc3e:	e7e5      	b.n	800cc0c <_dtoa_r+0x36c>
 800cc40:	f000 809b 	beq.w	800cd7a <_dtoa_r+0x4da>
 800cc44:	9b00      	ldr	r3, [sp, #0]
 800cc46:	4f9d      	ldr	r7, [pc, #628]	; (800cebc <_dtoa_r+0x61c>)
 800cc48:	425e      	negs	r6, r3
 800cc4a:	4b9b      	ldr	r3, [pc, #620]	; (800ceb8 <_dtoa_r+0x618>)
 800cc4c:	f006 020f 	and.w	r2, r6, #15
 800cc50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	ec51 0b19 	vmov	r0, r1, d9
 800cc5c:	f7f3 fcd4 	bl	8000608 <__aeabi_dmul>
 800cc60:	1136      	asrs	r6, r6, #4
 800cc62:	4682      	mov	sl, r0
 800cc64:	468b      	mov	fp, r1
 800cc66:	2300      	movs	r3, #0
 800cc68:	2502      	movs	r5, #2
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d17a      	bne.n	800cd64 <_dtoa_r+0x4c4>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1d3      	bne.n	800cc1a <_dtoa_r+0x37a>
 800cc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 8082 	beq.w	800cd7e <_dtoa_r+0x4de>
 800cc7a:	4b91      	ldr	r3, [pc, #580]	; (800cec0 <_dtoa_r+0x620>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4650      	mov	r0, sl
 800cc80:	4659      	mov	r1, fp
 800cc82:	f7f3 ff33 	bl	8000aec <__aeabi_dcmplt>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d079      	beq.n	800cd7e <_dtoa_r+0x4de>
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d076      	beq.n	800cd7e <_dtoa_r+0x4de>
 800cc90:	9b02      	ldr	r3, [sp, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	dd36      	ble.n	800cd04 <_dtoa_r+0x464>
 800cc96:	9b00      	ldr	r3, [sp, #0]
 800cc98:	4650      	mov	r0, sl
 800cc9a:	4659      	mov	r1, fp
 800cc9c:	1e5f      	subs	r7, r3, #1
 800cc9e:	2200      	movs	r2, #0
 800cca0:	4b88      	ldr	r3, [pc, #544]	; (800cec4 <_dtoa_r+0x624>)
 800cca2:	f7f3 fcb1 	bl	8000608 <__aeabi_dmul>
 800cca6:	9e02      	ldr	r6, [sp, #8]
 800cca8:	4682      	mov	sl, r0
 800ccaa:	468b      	mov	fp, r1
 800ccac:	3501      	adds	r5, #1
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f7f3 fc40 	bl	8000534 <__aeabi_i2d>
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	465b      	mov	r3, fp
 800ccb8:	f7f3 fca6 	bl	8000608 <__aeabi_dmul>
 800ccbc:	4b82      	ldr	r3, [pc, #520]	; (800cec8 <_dtoa_r+0x628>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f7f3 faec 	bl	800029c <__adddf3>
 800ccc4:	46d0      	mov	r8, sl
 800ccc6:	46d9      	mov	r9, fp
 800ccc8:	4682      	mov	sl, r0
 800ccca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ccce:	2e00      	cmp	r6, #0
 800ccd0:	d158      	bne.n	800cd84 <_dtoa_r+0x4e4>
 800ccd2:	4b7e      	ldr	r3, [pc, #504]	; (800cecc <_dtoa_r+0x62c>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	4640      	mov	r0, r8
 800ccd8:	4649      	mov	r1, r9
 800ccda:	f7f3 fadd 	bl	8000298 <__aeabi_dsub>
 800ccde:	4652      	mov	r2, sl
 800cce0:	465b      	mov	r3, fp
 800cce2:	4680      	mov	r8, r0
 800cce4:	4689      	mov	r9, r1
 800cce6:	f7f3 ff1f 	bl	8000b28 <__aeabi_dcmpgt>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	f040 8295 	bne.w	800d21a <_dtoa_r+0x97a>
 800ccf0:	4652      	mov	r2, sl
 800ccf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	f7f3 fef7 	bl	8000aec <__aeabi_dcmplt>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f040 8289 	bne.w	800d216 <_dtoa_r+0x976>
 800cd04:	ec5b ab19 	vmov	sl, fp, d9
 800cd08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f2c0 8148 	blt.w	800cfa0 <_dtoa_r+0x700>
 800cd10:	9a00      	ldr	r2, [sp, #0]
 800cd12:	2a0e      	cmp	r2, #14
 800cd14:	f300 8144 	bgt.w	800cfa0 <_dtoa_r+0x700>
 800cd18:	4b67      	ldr	r3, [pc, #412]	; (800ceb8 <_dtoa_r+0x618>)
 800cd1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f280 80d5 	bge.w	800ced4 <_dtoa_r+0x634>
 800cd2a:	9b03      	ldr	r3, [sp, #12]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f300 80d1 	bgt.w	800ced4 <_dtoa_r+0x634>
 800cd32:	f040 826f 	bne.w	800d214 <_dtoa_r+0x974>
 800cd36:	4b65      	ldr	r3, [pc, #404]	; (800cecc <_dtoa_r+0x62c>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	f7f3 fc63 	bl	8000608 <__aeabi_dmul>
 800cd42:	4652      	mov	r2, sl
 800cd44:	465b      	mov	r3, fp
 800cd46:	f7f3 fee5 	bl	8000b14 <__aeabi_dcmpge>
 800cd4a:	9e03      	ldr	r6, [sp, #12]
 800cd4c:	4637      	mov	r7, r6
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	f040 8245 	bne.w	800d1de <_dtoa_r+0x93e>
 800cd54:	9d01      	ldr	r5, [sp, #4]
 800cd56:	2331      	movs	r3, #49	; 0x31
 800cd58:	f805 3b01 	strb.w	r3, [r5], #1
 800cd5c:	9b00      	ldr	r3, [sp, #0]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	e240      	b.n	800d1e6 <_dtoa_r+0x946>
 800cd64:	07f2      	lsls	r2, r6, #31
 800cd66:	d505      	bpl.n	800cd74 <_dtoa_r+0x4d4>
 800cd68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd6c:	f7f3 fc4c 	bl	8000608 <__aeabi_dmul>
 800cd70:	3501      	adds	r5, #1
 800cd72:	2301      	movs	r3, #1
 800cd74:	1076      	asrs	r6, r6, #1
 800cd76:	3708      	adds	r7, #8
 800cd78:	e777      	b.n	800cc6a <_dtoa_r+0x3ca>
 800cd7a:	2502      	movs	r5, #2
 800cd7c:	e779      	b.n	800cc72 <_dtoa_r+0x3d2>
 800cd7e:	9f00      	ldr	r7, [sp, #0]
 800cd80:	9e03      	ldr	r6, [sp, #12]
 800cd82:	e794      	b.n	800ccae <_dtoa_r+0x40e>
 800cd84:	9901      	ldr	r1, [sp, #4]
 800cd86:	4b4c      	ldr	r3, [pc, #304]	; (800ceb8 <_dtoa_r+0x618>)
 800cd88:	4431      	add	r1, r6
 800cd8a:	910d      	str	r1, [sp, #52]	; 0x34
 800cd8c:	9908      	ldr	r1, [sp, #32]
 800cd8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cd92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd96:	2900      	cmp	r1, #0
 800cd98:	d043      	beq.n	800ce22 <_dtoa_r+0x582>
 800cd9a:	494d      	ldr	r1, [pc, #308]	; (800ced0 <_dtoa_r+0x630>)
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	f7f3 fd5d 	bl	800085c <__aeabi_ddiv>
 800cda2:	4652      	mov	r2, sl
 800cda4:	465b      	mov	r3, fp
 800cda6:	f7f3 fa77 	bl	8000298 <__aeabi_dsub>
 800cdaa:	9d01      	ldr	r5, [sp, #4]
 800cdac:	4682      	mov	sl, r0
 800cdae:	468b      	mov	fp, r1
 800cdb0:	4649      	mov	r1, r9
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	f7f3 fed8 	bl	8000b68 <__aeabi_d2iz>
 800cdb8:	4606      	mov	r6, r0
 800cdba:	f7f3 fbbb 	bl	8000534 <__aeabi_i2d>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fa67 	bl	8000298 <__aeabi_dsub>
 800cdca:	3630      	adds	r6, #48	; 0x30
 800cdcc:	f805 6b01 	strb.w	r6, [r5], #1
 800cdd0:	4652      	mov	r2, sl
 800cdd2:	465b      	mov	r3, fp
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	4689      	mov	r9, r1
 800cdd8:	f7f3 fe88 	bl	8000aec <__aeabi_dcmplt>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d163      	bne.n	800cea8 <_dtoa_r+0x608>
 800cde0:	4642      	mov	r2, r8
 800cde2:	464b      	mov	r3, r9
 800cde4:	4936      	ldr	r1, [pc, #216]	; (800cec0 <_dtoa_r+0x620>)
 800cde6:	2000      	movs	r0, #0
 800cde8:	f7f3 fa56 	bl	8000298 <__aeabi_dsub>
 800cdec:	4652      	mov	r2, sl
 800cdee:	465b      	mov	r3, fp
 800cdf0:	f7f3 fe7c 	bl	8000aec <__aeabi_dcmplt>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f040 80b5 	bne.w	800cf64 <_dtoa_r+0x6c4>
 800cdfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdfc:	429d      	cmp	r5, r3
 800cdfe:	d081      	beq.n	800cd04 <_dtoa_r+0x464>
 800ce00:	4b30      	ldr	r3, [pc, #192]	; (800cec4 <_dtoa_r+0x624>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	4650      	mov	r0, sl
 800ce06:	4659      	mov	r1, fp
 800ce08:	f7f3 fbfe 	bl	8000608 <__aeabi_dmul>
 800ce0c:	4b2d      	ldr	r3, [pc, #180]	; (800cec4 <_dtoa_r+0x624>)
 800ce0e:	4682      	mov	sl, r0
 800ce10:	468b      	mov	fp, r1
 800ce12:	4640      	mov	r0, r8
 800ce14:	4649      	mov	r1, r9
 800ce16:	2200      	movs	r2, #0
 800ce18:	f7f3 fbf6 	bl	8000608 <__aeabi_dmul>
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	4689      	mov	r9, r1
 800ce20:	e7c6      	b.n	800cdb0 <_dtoa_r+0x510>
 800ce22:	4650      	mov	r0, sl
 800ce24:	4659      	mov	r1, fp
 800ce26:	f7f3 fbef 	bl	8000608 <__aeabi_dmul>
 800ce2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce2c:	9d01      	ldr	r5, [sp, #4]
 800ce2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce30:	4682      	mov	sl, r0
 800ce32:	468b      	mov	fp, r1
 800ce34:	4649      	mov	r1, r9
 800ce36:	4640      	mov	r0, r8
 800ce38:	f7f3 fe96 	bl	8000b68 <__aeabi_d2iz>
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	f7f3 fb79 	bl	8000534 <__aeabi_i2d>
 800ce42:	3630      	adds	r6, #48	; 0x30
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4640      	mov	r0, r8
 800ce4a:	4649      	mov	r1, r9
 800ce4c:	f7f3 fa24 	bl	8000298 <__aeabi_dsub>
 800ce50:	f805 6b01 	strb.w	r6, [r5], #1
 800ce54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce56:	429d      	cmp	r5, r3
 800ce58:	4680      	mov	r8, r0
 800ce5a:	4689      	mov	r9, r1
 800ce5c:	f04f 0200 	mov.w	r2, #0
 800ce60:	d124      	bne.n	800ceac <_dtoa_r+0x60c>
 800ce62:	4b1b      	ldr	r3, [pc, #108]	; (800ced0 <_dtoa_r+0x630>)
 800ce64:	4650      	mov	r0, sl
 800ce66:	4659      	mov	r1, fp
 800ce68:	f7f3 fa18 	bl	800029c <__adddf3>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	4640      	mov	r0, r8
 800ce72:	4649      	mov	r1, r9
 800ce74:	f7f3 fe58 	bl	8000b28 <__aeabi_dcmpgt>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d173      	bne.n	800cf64 <_dtoa_r+0x6c4>
 800ce7c:	4652      	mov	r2, sl
 800ce7e:	465b      	mov	r3, fp
 800ce80:	4913      	ldr	r1, [pc, #76]	; (800ced0 <_dtoa_r+0x630>)
 800ce82:	2000      	movs	r0, #0
 800ce84:	f7f3 fa08 	bl	8000298 <__aeabi_dsub>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	4649      	mov	r1, r9
 800ce90:	f7f3 fe2c 	bl	8000aec <__aeabi_dcmplt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	f43f af35 	beq.w	800cd04 <_dtoa_r+0x464>
 800ce9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ce9c:	1e6b      	subs	r3, r5, #1
 800ce9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cea0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cea4:	2b30      	cmp	r3, #48	; 0x30
 800cea6:	d0f8      	beq.n	800ce9a <_dtoa_r+0x5fa>
 800cea8:	9700      	str	r7, [sp, #0]
 800ceaa:	e049      	b.n	800cf40 <_dtoa_r+0x6a0>
 800ceac:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <_dtoa_r+0x624>)
 800ceae:	f7f3 fbab 	bl	8000608 <__aeabi_dmul>
 800ceb2:	4680      	mov	r8, r0
 800ceb4:	4689      	mov	r9, r1
 800ceb6:	e7bd      	b.n	800ce34 <_dtoa_r+0x594>
 800ceb8:	0800ebe8 	.word	0x0800ebe8
 800cebc:	0800ebc0 	.word	0x0800ebc0
 800cec0:	3ff00000 	.word	0x3ff00000
 800cec4:	40240000 	.word	0x40240000
 800cec8:	401c0000 	.word	0x401c0000
 800cecc:	40140000 	.word	0x40140000
 800ced0:	3fe00000 	.word	0x3fe00000
 800ced4:	9d01      	ldr	r5, [sp, #4]
 800ced6:	4656      	mov	r6, sl
 800ced8:	465f      	mov	r7, fp
 800ceda:	4642      	mov	r2, r8
 800cedc:	464b      	mov	r3, r9
 800cede:	4630      	mov	r0, r6
 800cee0:	4639      	mov	r1, r7
 800cee2:	f7f3 fcbb 	bl	800085c <__aeabi_ddiv>
 800cee6:	f7f3 fe3f 	bl	8000b68 <__aeabi_d2iz>
 800ceea:	4682      	mov	sl, r0
 800ceec:	f7f3 fb22 	bl	8000534 <__aeabi_i2d>
 800cef0:	4642      	mov	r2, r8
 800cef2:	464b      	mov	r3, r9
 800cef4:	f7f3 fb88 	bl	8000608 <__aeabi_dmul>
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4630      	mov	r0, r6
 800cefe:	4639      	mov	r1, r7
 800cf00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cf04:	f7f3 f9c8 	bl	8000298 <__aeabi_dsub>
 800cf08:	f805 6b01 	strb.w	r6, [r5], #1
 800cf0c:	9e01      	ldr	r6, [sp, #4]
 800cf0e:	9f03      	ldr	r7, [sp, #12]
 800cf10:	1bae      	subs	r6, r5, r6
 800cf12:	42b7      	cmp	r7, r6
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	d135      	bne.n	800cf86 <_dtoa_r+0x6e6>
 800cf1a:	f7f3 f9bf 	bl	800029c <__adddf3>
 800cf1e:	4642      	mov	r2, r8
 800cf20:	464b      	mov	r3, r9
 800cf22:	4606      	mov	r6, r0
 800cf24:	460f      	mov	r7, r1
 800cf26:	f7f3 fdff 	bl	8000b28 <__aeabi_dcmpgt>
 800cf2a:	b9d0      	cbnz	r0, 800cf62 <_dtoa_r+0x6c2>
 800cf2c:	4642      	mov	r2, r8
 800cf2e:	464b      	mov	r3, r9
 800cf30:	4630      	mov	r0, r6
 800cf32:	4639      	mov	r1, r7
 800cf34:	f7f3 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf38:	b110      	cbz	r0, 800cf40 <_dtoa_r+0x6a0>
 800cf3a:	f01a 0f01 	tst.w	sl, #1
 800cf3e:	d110      	bne.n	800cf62 <_dtoa_r+0x6c2>
 800cf40:	4620      	mov	r0, r4
 800cf42:	ee18 1a10 	vmov	r1, s16
 800cf46:	f000 faf7 	bl	800d538 <_Bfree>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9800      	ldr	r0, [sp, #0]
 800cf4e:	702b      	strb	r3, [r5, #0]
 800cf50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf52:	3001      	adds	r0, #1
 800cf54:	6018      	str	r0, [r3, #0]
 800cf56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f43f acf1 	beq.w	800c940 <_dtoa_r+0xa0>
 800cf5e:	601d      	str	r5, [r3, #0]
 800cf60:	e4ee      	b.n	800c940 <_dtoa_r+0xa0>
 800cf62:	9f00      	ldr	r7, [sp, #0]
 800cf64:	462b      	mov	r3, r5
 800cf66:	461d      	mov	r5, r3
 800cf68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf6c:	2a39      	cmp	r2, #57	; 0x39
 800cf6e:	d106      	bne.n	800cf7e <_dtoa_r+0x6de>
 800cf70:	9a01      	ldr	r2, [sp, #4]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d1f7      	bne.n	800cf66 <_dtoa_r+0x6c6>
 800cf76:	9901      	ldr	r1, [sp, #4]
 800cf78:	2230      	movs	r2, #48	; 0x30
 800cf7a:	3701      	adds	r7, #1
 800cf7c:	700a      	strb	r2, [r1, #0]
 800cf7e:	781a      	ldrb	r2, [r3, #0]
 800cf80:	3201      	adds	r2, #1
 800cf82:	701a      	strb	r2, [r3, #0]
 800cf84:	e790      	b.n	800cea8 <_dtoa_r+0x608>
 800cf86:	4ba6      	ldr	r3, [pc, #664]	; (800d220 <_dtoa_r+0x980>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f7f3 fb3d 	bl	8000608 <__aeabi_dmul>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	2300      	movs	r3, #0
 800cf92:	4606      	mov	r6, r0
 800cf94:	460f      	mov	r7, r1
 800cf96:	f7f3 fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d09d      	beq.n	800ceda <_dtoa_r+0x63a>
 800cf9e:	e7cf      	b.n	800cf40 <_dtoa_r+0x6a0>
 800cfa0:	9a08      	ldr	r2, [sp, #32]
 800cfa2:	2a00      	cmp	r2, #0
 800cfa4:	f000 80d7 	beq.w	800d156 <_dtoa_r+0x8b6>
 800cfa8:	9a06      	ldr	r2, [sp, #24]
 800cfaa:	2a01      	cmp	r2, #1
 800cfac:	f300 80ba 	bgt.w	800d124 <_dtoa_r+0x884>
 800cfb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfb2:	2a00      	cmp	r2, #0
 800cfb4:	f000 80b2 	beq.w	800d11c <_dtoa_r+0x87c>
 800cfb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cfbc:	9e07      	ldr	r6, [sp, #28]
 800cfbe:	9d04      	ldr	r5, [sp, #16]
 800cfc0:	9a04      	ldr	r2, [sp, #16]
 800cfc2:	441a      	add	r2, r3
 800cfc4:	9204      	str	r2, [sp, #16]
 800cfc6:	9a05      	ldr	r2, [sp, #20]
 800cfc8:	2101      	movs	r1, #1
 800cfca:	441a      	add	r2, r3
 800cfcc:	4620      	mov	r0, r4
 800cfce:	9205      	str	r2, [sp, #20]
 800cfd0:	f000 fb6a 	bl	800d6a8 <__i2b>
 800cfd4:	4607      	mov	r7, r0
 800cfd6:	2d00      	cmp	r5, #0
 800cfd8:	dd0c      	ble.n	800cff4 <_dtoa_r+0x754>
 800cfda:	9b05      	ldr	r3, [sp, #20]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dd09      	ble.n	800cff4 <_dtoa_r+0x754>
 800cfe0:	42ab      	cmp	r3, r5
 800cfe2:	9a04      	ldr	r2, [sp, #16]
 800cfe4:	bfa8      	it	ge
 800cfe6:	462b      	movge	r3, r5
 800cfe8:	1ad2      	subs	r2, r2, r3
 800cfea:	9204      	str	r2, [sp, #16]
 800cfec:	9a05      	ldr	r2, [sp, #20]
 800cfee:	1aed      	subs	r5, r5, r3
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	9305      	str	r3, [sp, #20]
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	b31b      	cbz	r3, 800d040 <_dtoa_r+0x7a0>
 800cff8:	9b08      	ldr	r3, [sp, #32]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f000 80af 	beq.w	800d15e <_dtoa_r+0x8be>
 800d000:	2e00      	cmp	r6, #0
 800d002:	dd13      	ble.n	800d02c <_dtoa_r+0x78c>
 800d004:	4639      	mov	r1, r7
 800d006:	4632      	mov	r2, r6
 800d008:	4620      	mov	r0, r4
 800d00a:	f000 fc0d 	bl	800d828 <__pow5mult>
 800d00e:	ee18 2a10 	vmov	r2, s16
 800d012:	4601      	mov	r1, r0
 800d014:	4607      	mov	r7, r0
 800d016:	4620      	mov	r0, r4
 800d018:	f000 fb5c 	bl	800d6d4 <__multiply>
 800d01c:	ee18 1a10 	vmov	r1, s16
 800d020:	4680      	mov	r8, r0
 800d022:	4620      	mov	r0, r4
 800d024:	f000 fa88 	bl	800d538 <_Bfree>
 800d028:	ee08 8a10 	vmov	s16, r8
 800d02c:	9b07      	ldr	r3, [sp, #28]
 800d02e:	1b9a      	subs	r2, r3, r6
 800d030:	d006      	beq.n	800d040 <_dtoa_r+0x7a0>
 800d032:	ee18 1a10 	vmov	r1, s16
 800d036:	4620      	mov	r0, r4
 800d038:	f000 fbf6 	bl	800d828 <__pow5mult>
 800d03c:	ee08 0a10 	vmov	s16, r0
 800d040:	2101      	movs	r1, #1
 800d042:	4620      	mov	r0, r4
 800d044:	f000 fb30 	bl	800d6a8 <__i2b>
 800d048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	4606      	mov	r6, r0
 800d04e:	f340 8088 	ble.w	800d162 <_dtoa_r+0x8c2>
 800d052:	461a      	mov	r2, r3
 800d054:	4601      	mov	r1, r0
 800d056:	4620      	mov	r0, r4
 800d058:	f000 fbe6 	bl	800d828 <__pow5mult>
 800d05c:	9b06      	ldr	r3, [sp, #24]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	4606      	mov	r6, r0
 800d062:	f340 8081 	ble.w	800d168 <_dtoa_r+0x8c8>
 800d066:	f04f 0800 	mov.w	r8, #0
 800d06a:	6933      	ldr	r3, [r6, #16]
 800d06c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d070:	6918      	ldr	r0, [r3, #16]
 800d072:	f000 fac9 	bl	800d608 <__hi0bits>
 800d076:	f1c0 0020 	rsb	r0, r0, #32
 800d07a:	9b05      	ldr	r3, [sp, #20]
 800d07c:	4418      	add	r0, r3
 800d07e:	f010 001f 	ands.w	r0, r0, #31
 800d082:	f000 8092 	beq.w	800d1aa <_dtoa_r+0x90a>
 800d086:	f1c0 0320 	rsb	r3, r0, #32
 800d08a:	2b04      	cmp	r3, #4
 800d08c:	f340 808a 	ble.w	800d1a4 <_dtoa_r+0x904>
 800d090:	f1c0 001c 	rsb	r0, r0, #28
 800d094:	9b04      	ldr	r3, [sp, #16]
 800d096:	4403      	add	r3, r0
 800d098:	9304      	str	r3, [sp, #16]
 800d09a:	9b05      	ldr	r3, [sp, #20]
 800d09c:	4403      	add	r3, r0
 800d09e:	4405      	add	r5, r0
 800d0a0:	9305      	str	r3, [sp, #20]
 800d0a2:	9b04      	ldr	r3, [sp, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dd07      	ble.n	800d0b8 <_dtoa_r+0x818>
 800d0a8:	ee18 1a10 	vmov	r1, s16
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f000 fc14 	bl	800d8dc <__lshift>
 800d0b4:	ee08 0a10 	vmov	s16, r0
 800d0b8:	9b05      	ldr	r3, [sp, #20]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dd05      	ble.n	800d0ca <_dtoa_r+0x82a>
 800d0be:	4631      	mov	r1, r6
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 fc0a 	bl	800d8dc <__lshift>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d06e      	beq.n	800d1ae <_dtoa_r+0x90e>
 800d0d0:	ee18 0a10 	vmov	r0, s16
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	f000 fc71 	bl	800d9bc <__mcmp>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	da67      	bge.n	800d1ae <_dtoa_r+0x90e>
 800d0de:	9b00      	ldr	r3, [sp, #0]
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	ee18 1a10 	vmov	r1, s16
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	220a      	movs	r2, #10
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f000 fa45 	bl	800d57c <__multadd>
 800d0f2:	9b08      	ldr	r3, [sp, #32]
 800d0f4:	ee08 0a10 	vmov	s16, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 81b1 	beq.w	800d460 <_dtoa_r+0xbc0>
 800d0fe:	2300      	movs	r3, #0
 800d100:	4639      	mov	r1, r7
 800d102:	220a      	movs	r2, #10
 800d104:	4620      	mov	r0, r4
 800d106:	f000 fa39 	bl	800d57c <__multadd>
 800d10a:	9b02      	ldr	r3, [sp, #8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	4607      	mov	r7, r0
 800d110:	f300 808e 	bgt.w	800d230 <_dtoa_r+0x990>
 800d114:	9b06      	ldr	r3, [sp, #24]
 800d116:	2b02      	cmp	r3, #2
 800d118:	dc51      	bgt.n	800d1be <_dtoa_r+0x91e>
 800d11a:	e089      	b.n	800d230 <_dtoa_r+0x990>
 800d11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d11e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d122:	e74b      	b.n	800cfbc <_dtoa_r+0x71c>
 800d124:	9b03      	ldr	r3, [sp, #12]
 800d126:	1e5e      	subs	r6, r3, #1
 800d128:	9b07      	ldr	r3, [sp, #28]
 800d12a:	42b3      	cmp	r3, r6
 800d12c:	bfbf      	itttt	lt
 800d12e:	9b07      	ldrlt	r3, [sp, #28]
 800d130:	9607      	strlt	r6, [sp, #28]
 800d132:	1af2      	sublt	r2, r6, r3
 800d134:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d136:	bfb6      	itet	lt
 800d138:	189b      	addlt	r3, r3, r2
 800d13a:	1b9e      	subge	r6, r3, r6
 800d13c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d13e:	9b03      	ldr	r3, [sp, #12]
 800d140:	bfb8      	it	lt
 800d142:	2600      	movlt	r6, #0
 800d144:	2b00      	cmp	r3, #0
 800d146:	bfb7      	itett	lt
 800d148:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d14c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d150:	1a9d      	sublt	r5, r3, r2
 800d152:	2300      	movlt	r3, #0
 800d154:	e734      	b.n	800cfc0 <_dtoa_r+0x720>
 800d156:	9e07      	ldr	r6, [sp, #28]
 800d158:	9d04      	ldr	r5, [sp, #16]
 800d15a:	9f08      	ldr	r7, [sp, #32]
 800d15c:	e73b      	b.n	800cfd6 <_dtoa_r+0x736>
 800d15e:	9a07      	ldr	r2, [sp, #28]
 800d160:	e767      	b.n	800d032 <_dtoa_r+0x792>
 800d162:	9b06      	ldr	r3, [sp, #24]
 800d164:	2b01      	cmp	r3, #1
 800d166:	dc18      	bgt.n	800d19a <_dtoa_r+0x8fa>
 800d168:	f1ba 0f00 	cmp.w	sl, #0
 800d16c:	d115      	bne.n	800d19a <_dtoa_r+0x8fa>
 800d16e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d172:	b993      	cbnz	r3, 800d19a <_dtoa_r+0x8fa>
 800d174:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d178:	0d1b      	lsrs	r3, r3, #20
 800d17a:	051b      	lsls	r3, r3, #20
 800d17c:	b183      	cbz	r3, 800d1a0 <_dtoa_r+0x900>
 800d17e:	9b04      	ldr	r3, [sp, #16]
 800d180:	3301      	adds	r3, #1
 800d182:	9304      	str	r3, [sp, #16]
 800d184:	9b05      	ldr	r3, [sp, #20]
 800d186:	3301      	adds	r3, #1
 800d188:	9305      	str	r3, [sp, #20]
 800d18a:	f04f 0801 	mov.w	r8, #1
 800d18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d190:	2b00      	cmp	r3, #0
 800d192:	f47f af6a 	bne.w	800d06a <_dtoa_r+0x7ca>
 800d196:	2001      	movs	r0, #1
 800d198:	e76f      	b.n	800d07a <_dtoa_r+0x7da>
 800d19a:	f04f 0800 	mov.w	r8, #0
 800d19e:	e7f6      	b.n	800d18e <_dtoa_r+0x8ee>
 800d1a0:	4698      	mov	r8, r3
 800d1a2:	e7f4      	b.n	800d18e <_dtoa_r+0x8ee>
 800d1a4:	f43f af7d 	beq.w	800d0a2 <_dtoa_r+0x802>
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	301c      	adds	r0, #28
 800d1ac:	e772      	b.n	800d094 <_dtoa_r+0x7f4>
 800d1ae:	9b03      	ldr	r3, [sp, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dc37      	bgt.n	800d224 <_dtoa_r+0x984>
 800d1b4:	9b06      	ldr	r3, [sp, #24]
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	dd34      	ble.n	800d224 <_dtoa_r+0x984>
 800d1ba:	9b03      	ldr	r3, [sp, #12]
 800d1bc:	9302      	str	r3, [sp, #8]
 800d1be:	9b02      	ldr	r3, [sp, #8]
 800d1c0:	b96b      	cbnz	r3, 800d1de <_dtoa_r+0x93e>
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	2205      	movs	r2, #5
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f000 f9d8 	bl	800d57c <__multadd>
 800d1cc:	4601      	mov	r1, r0
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	ee18 0a10 	vmov	r0, s16
 800d1d4:	f000 fbf2 	bl	800d9bc <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	f73f adbb 	bgt.w	800cd54 <_dtoa_r+0x4b4>
 800d1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e0:	9d01      	ldr	r5, [sp, #4]
 800d1e2:	43db      	mvns	r3, r3
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	f04f 0800 	mov.w	r8, #0
 800d1ea:	4631      	mov	r1, r6
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 f9a3 	bl	800d538 <_Bfree>
 800d1f2:	2f00      	cmp	r7, #0
 800d1f4:	f43f aea4 	beq.w	800cf40 <_dtoa_r+0x6a0>
 800d1f8:	f1b8 0f00 	cmp.w	r8, #0
 800d1fc:	d005      	beq.n	800d20a <_dtoa_r+0x96a>
 800d1fe:	45b8      	cmp	r8, r7
 800d200:	d003      	beq.n	800d20a <_dtoa_r+0x96a>
 800d202:	4641      	mov	r1, r8
 800d204:	4620      	mov	r0, r4
 800d206:	f000 f997 	bl	800d538 <_Bfree>
 800d20a:	4639      	mov	r1, r7
 800d20c:	4620      	mov	r0, r4
 800d20e:	f000 f993 	bl	800d538 <_Bfree>
 800d212:	e695      	b.n	800cf40 <_dtoa_r+0x6a0>
 800d214:	2600      	movs	r6, #0
 800d216:	4637      	mov	r7, r6
 800d218:	e7e1      	b.n	800d1de <_dtoa_r+0x93e>
 800d21a:	9700      	str	r7, [sp, #0]
 800d21c:	4637      	mov	r7, r6
 800d21e:	e599      	b.n	800cd54 <_dtoa_r+0x4b4>
 800d220:	40240000 	.word	0x40240000
 800d224:	9b08      	ldr	r3, [sp, #32]
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 80ca 	beq.w	800d3c0 <_dtoa_r+0xb20>
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	9302      	str	r3, [sp, #8]
 800d230:	2d00      	cmp	r5, #0
 800d232:	dd05      	ble.n	800d240 <_dtoa_r+0x9a0>
 800d234:	4639      	mov	r1, r7
 800d236:	462a      	mov	r2, r5
 800d238:	4620      	mov	r0, r4
 800d23a:	f000 fb4f 	bl	800d8dc <__lshift>
 800d23e:	4607      	mov	r7, r0
 800d240:	f1b8 0f00 	cmp.w	r8, #0
 800d244:	d05b      	beq.n	800d2fe <_dtoa_r+0xa5e>
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 f935 	bl	800d4b8 <_Balloc>
 800d24e:	4605      	mov	r5, r0
 800d250:	b928      	cbnz	r0, 800d25e <_dtoa_r+0x9be>
 800d252:	4b87      	ldr	r3, [pc, #540]	; (800d470 <_dtoa_r+0xbd0>)
 800d254:	4602      	mov	r2, r0
 800d256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d25a:	f7ff bb3b 	b.w	800c8d4 <_dtoa_r+0x34>
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	3202      	adds	r2, #2
 800d262:	0092      	lsls	r2, r2, #2
 800d264:	f107 010c 	add.w	r1, r7, #12
 800d268:	300c      	adds	r0, #12
 800d26a:	f000 f90b 	bl	800d484 <memcpy>
 800d26e:	2201      	movs	r2, #1
 800d270:	4629      	mov	r1, r5
 800d272:	4620      	mov	r0, r4
 800d274:	f000 fb32 	bl	800d8dc <__lshift>
 800d278:	9b01      	ldr	r3, [sp, #4]
 800d27a:	f103 0901 	add.w	r9, r3, #1
 800d27e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d282:	4413      	add	r3, r2
 800d284:	9305      	str	r3, [sp, #20]
 800d286:	f00a 0301 	and.w	r3, sl, #1
 800d28a:	46b8      	mov	r8, r7
 800d28c:	9304      	str	r3, [sp, #16]
 800d28e:	4607      	mov	r7, r0
 800d290:	4631      	mov	r1, r6
 800d292:	ee18 0a10 	vmov	r0, s16
 800d296:	f7ff fa77 	bl	800c788 <quorem>
 800d29a:	4641      	mov	r1, r8
 800d29c:	9002      	str	r0, [sp, #8]
 800d29e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d2a2:	ee18 0a10 	vmov	r0, s16
 800d2a6:	f000 fb89 	bl	800d9bc <__mcmp>
 800d2aa:	463a      	mov	r2, r7
 800d2ac:	9003      	str	r0, [sp, #12]
 800d2ae:	4631      	mov	r1, r6
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f000 fb9f 	bl	800d9f4 <__mdiff>
 800d2b6:	68c2      	ldr	r2, [r0, #12]
 800d2b8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d2bc:	4605      	mov	r5, r0
 800d2be:	bb02      	cbnz	r2, 800d302 <_dtoa_r+0xa62>
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	ee18 0a10 	vmov	r0, s16
 800d2c6:	f000 fb79 	bl	800d9bc <__mcmp>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	9207      	str	r2, [sp, #28]
 800d2d2:	f000 f931 	bl	800d538 <_Bfree>
 800d2d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d2da:	ea43 0102 	orr.w	r1, r3, r2
 800d2de:	9b04      	ldr	r3, [sp, #16]
 800d2e0:	430b      	orrs	r3, r1
 800d2e2:	464d      	mov	r5, r9
 800d2e4:	d10f      	bne.n	800d306 <_dtoa_r+0xa66>
 800d2e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d2ea:	d02a      	beq.n	800d342 <_dtoa_r+0xaa2>
 800d2ec:	9b03      	ldr	r3, [sp, #12]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	dd02      	ble.n	800d2f8 <_dtoa_r+0xa58>
 800d2f2:	9b02      	ldr	r3, [sp, #8]
 800d2f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d2f8:	f88b a000 	strb.w	sl, [fp]
 800d2fc:	e775      	b.n	800d1ea <_dtoa_r+0x94a>
 800d2fe:	4638      	mov	r0, r7
 800d300:	e7ba      	b.n	800d278 <_dtoa_r+0x9d8>
 800d302:	2201      	movs	r2, #1
 800d304:	e7e2      	b.n	800d2cc <_dtoa_r+0xa2c>
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	db04      	blt.n	800d316 <_dtoa_r+0xa76>
 800d30c:	9906      	ldr	r1, [sp, #24]
 800d30e:	430b      	orrs	r3, r1
 800d310:	9904      	ldr	r1, [sp, #16]
 800d312:	430b      	orrs	r3, r1
 800d314:	d122      	bne.n	800d35c <_dtoa_r+0xabc>
 800d316:	2a00      	cmp	r2, #0
 800d318:	ddee      	ble.n	800d2f8 <_dtoa_r+0xa58>
 800d31a:	ee18 1a10 	vmov	r1, s16
 800d31e:	2201      	movs	r2, #1
 800d320:	4620      	mov	r0, r4
 800d322:	f000 fadb 	bl	800d8dc <__lshift>
 800d326:	4631      	mov	r1, r6
 800d328:	ee08 0a10 	vmov	s16, r0
 800d32c:	f000 fb46 	bl	800d9bc <__mcmp>
 800d330:	2800      	cmp	r0, #0
 800d332:	dc03      	bgt.n	800d33c <_dtoa_r+0xa9c>
 800d334:	d1e0      	bne.n	800d2f8 <_dtoa_r+0xa58>
 800d336:	f01a 0f01 	tst.w	sl, #1
 800d33a:	d0dd      	beq.n	800d2f8 <_dtoa_r+0xa58>
 800d33c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d340:	d1d7      	bne.n	800d2f2 <_dtoa_r+0xa52>
 800d342:	2339      	movs	r3, #57	; 0x39
 800d344:	f88b 3000 	strb.w	r3, [fp]
 800d348:	462b      	mov	r3, r5
 800d34a:	461d      	mov	r5, r3
 800d34c:	3b01      	subs	r3, #1
 800d34e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d352:	2a39      	cmp	r2, #57	; 0x39
 800d354:	d071      	beq.n	800d43a <_dtoa_r+0xb9a>
 800d356:	3201      	adds	r2, #1
 800d358:	701a      	strb	r2, [r3, #0]
 800d35a:	e746      	b.n	800d1ea <_dtoa_r+0x94a>
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	dd07      	ble.n	800d370 <_dtoa_r+0xad0>
 800d360:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d364:	d0ed      	beq.n	800d342 <_dtoa_r+0xaa2>
 800d366:	f10a 0301 	add.w	r3, sl, #1
 800d36a:	f88b 3000 	strb.w	r3, [fp]
 800d36e:	e73c      	b.n	800d1ea <_dtoa_r+0x94a>
 800d370:	9b05      	ldr	r3, [sp, #20]
 800d372:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d376:	4599      	cmp	r9, r3
 800d378:	d047      	beq.n	800d40a <_dtoa_r+0xb6a>
 800d37a:	ee18 1a10 	vmov	r1, s16
 800d37e:	2300      	movs	r3, #0
 800d380:	220a      	movs	r2, #10
 800d382:	4620      	mov	r0, r4
 800d384:	f000 f8fa 	bl	800d57c <__multadd>
 800d388:	45b8      	cmp	r8, r7
 800d38a:	ee08 0a10 	vmov	s16, r0
 800d38e:	f04f 0300 	mov.w	r3, #0
 800d392:	f04f 020a 	mov.w	r2, #10
 800d396:	4641      	mov	r1, r8
 800d398:	4620      	mov	r0, r4
 800d39a:	d106      	bne.n	800d3aa <_dtoa_r+0xb0a>
 800d39c:	f000 f8ee 	bl	800d57c <__multadd>
 800d3a0:	4680      	mov	r8, r0
 800d3a2:	4607      	mov	r7, r0
 800d3a4:	f109 0901 	add.w	r9, r9, #1
 800d3a8:	e772      	b.n	800d290 <_dtoa_r+0x9f0>
 800d3aa:	f000 f8e7 	bl	800d57c <__multadd>
 800d3ae:	4639      	mov	r1, r7
 800d3b0:	4680      	mov	r8, r0
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	220a      	movs	r2, #10
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 f8e0 	bl	800d57c <__multadd>
 800d3bc:	4607      	mov	r7, r0
 800d3be:	e7f1      	b.n	800d3a4 <_dtoa_r+0xb04>
 800d3c0:	9b03      	ldr	r3, [sp, #12]
 800d3c2:	9302      	str	r3, [sp, #8]
 800d3c4:	9d01      	ldr	r5, [sp, #4]
 800d3c6:	ee18 0a10 	vmov	r0, s16
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	f7ff f9dc 	bl	800c788 <quorem>
 800d3d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d3d4:	9b01      	ldr	r3, [sp, #4]
 800d3d6:	f805 ab01 	strb.w	sl, [r5], #1
 800d3da:	1aea      	subs	r2, r5, r3
 800d3dc:	9b02      	ldr	r3, [sp, #8]
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	dd09      	ble.n	800d3f6 <_dtoa_r+0xb56>
 800d3e2:	ee18 1a10 	vmov	r1, s16
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	220a      	movs	r2, #10
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f000 f8c6 	bl	800d57c <__multadd>
 800d3f0:	ee08 0a10 	vmov	s16, r0
 800d3f4:	e7e7      	b.n	800d3c6 <_dtoa_r+0xb26>
 800d3f6:	9b02      	ldr	r3, [sp, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	bfc8      	it	gt
 800d3fc:	461d      	movgt	r5, r3
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	bfd8      	it	le
 800d402:	2501      	movle	r5, #1
 800d404:	441d      	add	r5, r3
 800d406:	f04f 0800 	mov.w	r8, #0
 800d40a:	ee18 1a10 	vmov	r1, s16
 800d40e:	2201      	movs	r2, #1
 800d410:	4620      	mov	r0, r4
 800d412:	f000 fa63 	bl	800d8dc <__lshift>
 800d416:	4631      	mov	r1, r6
 800d418:	ee08 0a10 	vmov	s16, r0
 800d41c:	f000 face 	bl	800d9bc <__mcmp>
 800d420:	2800      	cmp	r0, #0
 800d422:	dc91      	bgt.n	800d348 <_dtoa_r+0xaa8>
 800d424:	d102      	bne.n	800d42c <_dtoa_r+0xb8c>
 800d426:	f01a 0f01 	tst.w	sl, #1
 800d42a:	d18d      	bne.n	800d348 <_dtoa_r+0xaa8>
 800d42c:	462b      	mov	r3, r5
 800d42e:	461d      	mov	r5, r3
 800d430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d434:	2a30      	cmp	r2, #48	; 0x30
 800d436:	d0fa      	beq.n	800d42e <_dtoa_r+0xb8e>
 800d438:	e6d7      	b.n	800d1ea <_dtoa_r+0x94a>
 800d43a:	9a01      	ldr	r2, [sp, #4]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d184      	bne.n	800d34a <_dtoa_r+0xaaa>
 800d440:	9b00      	ldr	r3, [sp, #0]
 800d442:	3301      	adds	r3, #1
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	2331      	movs	r3, #49	; 0x31
 800d448:	7013      	strb	r3, [r2, #0]
 800d44a:	e6ce      	b.n	800d1ea <_dtoa_r+0x94a>
 800d44c:	4b09      	ldr	r3, [pc, #36]	; (800d474 <_dtoa_r+0xbd4>)
 800d44e:	f7ff ba95 	b.w	800c97c <_dtoa_r+0xdc>
 800d452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d454:	2b00      	cmp	r3, #0
 800d456:	f47f aa6e 	bne.w	800c936 <_dtoa_r+0x96>
 800d45a:	4b07      	ldr	r3, [pc, #28]	; (800d478 <_dtoa_r+0xbd8>)
 800d45c:	f7ff ba8e 	b.w	800c97c <_dtoa_r+0xdc>
 800d460:	9b02      	ldr	r3, [sp, #8]
 800d462:	2b00      	cmp	r3, #0
 800d464:	dcae      	bgt.n	800d3c4 <_dtoa_r+0xb24>
 800d466:	9b06      	ldr	r3, [sp, #24]
 800d468:	2b02      	cmp	r3, #2
 800d46a:	f73f aea8 	bgt.w	800d1be <_dtoa_r+0x91e>
 800d46e:	e7a9      	b.n	800d3c4 <_dtoa_r+0xb24>
 800d470:	0800eb4f 	.word	0x0800eb4f
 800d474:	0800eaac 	.word	0x0800eaac
 800d478:	0800ead0 	.word	0x0800ead0

0800d47c <_localeconv_r>:
 800d47c:	4800      	ldr	r0, [pc, #0]	; (800d480 <_localeconv_r+0x4>)
 800d47e:	4770      	bx	lr
 800d480:	20000180 	.word	0x20000180

0800d484 <memcpy>:
 800d484:	440a      	add	r2, r1
 800d486:	4291      	cmp	r1, r2
 800d488:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d48c:	d100      	bne.n	800d490 <memcpy+0xc>
 800d48e:	4770      	bx	lr
 800d490:	b510      	push	{r4, lr}
 800d492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d49a:	4291      	cmp	r1, r2
 800d49c:	d1f9      	bne.n	800d492 <memcpy+0xe>
 800d49e:	bd10      	pop	{r4, pc}

0800d4a0 <__malloc_lock>:
 800d4a0:	4801      	ldr	r0, [pc, #4]	; (800d4a8 <__malloc_lock+0x8>)
 800d4a2:	f000 bd30 	b.w	800df06 <__retarget_lock_acquire_recursive>
 800d4a6:	bf00      	nop
 800d4a8:	20000b1c 	.word	0x20000b1c

0800d4ac <__malloc_unlock>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	; (800d4b4 <__malloc_unlock+0x8>)
 800d4ae:	f000 bd2b 	b.w	800df08 <__retarget_lock_release_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	20000b1c 	.word	0x20000b1c

0800d4b8 <_Balloc>:
 800d4b8:	b570      	push	{r4, r5, r6, lr}
 800d4ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4bc:	4604      	mov	r4, r0
 800d4be:	460d      	mov	r5, r1
 800d4c0:	b976      	cbnz	r6, 800d4e0 <_Balloc+0x28>
 800d4c2:	2010      	movs	r0, #16
 800d4c4:	f7fe fbce 	bl	800bc64 <malloc>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	6260      	str	r0, [r4, #36]	; 0x24
 800d4cc:	b920      	cbnz	r0, 800d4d8 <_Balloc+0x20>
 800d4ce:	4b18      	ldr	r3, [pc, #96]	; (800d530 <_Balloc+0x78>)
 800d4d0:	4818      	ldr	r0, [pc, #96]	; (800d534 <_Balloc+0x7c>)
 800d4d2:	2166      	movs	r1, #102	; 0x66
 800d4d4:	f000 fce6 	bl	800dea4 <__assert_func>
 800d4d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4dc:	6006      	str	r6, [r0, #0]
 800d4de:	60c6      	str	r6, [r0, #12]
 800d4e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4e2:	68f3      	ldr	r3, [r6, #12]
 800d4e4:	b183      	cbz	r3, 800d508 <_Balloc+0x50>
 800d4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4ee:	b9b8      	cbnz	r0, 800d520 <_Balloc+0x68>
 800d4f0:	2101      	movs	r1, #1
 800d4f2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4f6:	1d72      	adds	r2, r6, #5
 800d4f8:	0092      	lsls	r2, r2, #2
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fb60 	bl	800dbc0 <_calloc_r>
 800d500:	b160      	cbz	r0, 800d51c <_Balloc+0x64>
 800d502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d506:	e00e      	b.n	800d526 <_Balloc+0x6e>
 800d508:	2221      	movs	r2, #33	; 0x21
 800d50a:	2104      	movs	r1, #4
 800d50c:	4620      	mov	r0, r4
 800d50e:	f000 fb57 	bl	800dbc0 <_calloc_r>
 800d512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d514:	60f0      	str	r0, [r6, #12]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1e4      	bne.n	800d4e6 <_Balloc+0x2e>
 800d51c:	2000      	movs	r0, #0
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	6802      	ldr	r2, [r0, #0]
 800d522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d526:	2300      	movs	r3, #0
 800d528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d52c:	e7f7      	b.n	800d51e <_Balloc+0x66>
 800d52e:	bf00      	nop
 800d530:	0800eadd 	.word	0x0800eadd
 800d534:	0800eb60 	.word	0x0800eb60

0800d538 <_Bfree>:
 800d538:	b570      	push	{r4, r5, r6, lr}
 800d53a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d53c:	4605      	mov	r5, r0
 800d53e:	460c      	mov	r4, r1
 800d540:	b976      	cbnz	r6, 800d560 <_Bfree+0x28>
 800d542:	2010      	movs	r0, #16
 800d544:	f7fe fb8e 	bl	800bc64 <malloc>
 800d548:	4602      	mov	r2, r0
 800d54a:	6268      	str	r0, [r5, #36]	; 0x24
 800d54c:	b920      	cbnz	r0, 800d558 <_Bfree+0x20>
 800d54e:	4b09      	ldr	r3, [pc, #36]	; (800d574 <_Bfree+0x3c>)
 800d550:	4809      	ldr	r0, [pc, #36]	; (800d578 <_Bfree+0x40>)
 800d552:	218a      	movs	r1, #138	; 0x8a
 800d554:	f000 fca6 	bl	800dea4 <__assert_func>
 800d558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d55c:	6006      	str	r6, [r0, #0]
 800d55e:	60c6      	str	r6, [r0, #12]
 800d560:	b13c      	cbz	r4, 800d572 <_Bfree+0x3a>
 800d562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d564:	6862      	ldr	r2, [r4, #4]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d56c:	6021      	str	r1, [r4, #0]
 800d56e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d572:	bd70      	pop	{r4, r5, r6, pc}
 800d574:	0800eadd 	.word	0x0800eadd
 800d578:	0800eb60 	.word	0x0800eb60

0800d57c <__multadd>:
 800d57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d580:	690d      	ldr	r5, [r1, #16]
 800d582:	4607      	mov	r7, r0
 800d584:	460c      	mov	r4, r1
 800d586:	461e      	mov	r6, r3
 800d588:	f101 0c14 	add.w	ip, r1, #20
 800d58c:	2000      	movs	r0, #0
 800d58e:	f8dc 3000 	ldr.w	r3, [ip]
 800d592:	b299      	uxth	r1, r3
 800d594:	fb02 6101 	mla	r1, r2, r1, r6
 800d598:	0c1e      	lsrs	r6, r3, #16
 800d59a:	0c0b      	lsrs	r3, r1, #16
 800d59c:	fb02 3306 	mla	r3, r2, r6, r3
 800d5a0:	b289      	uxth	r1, r1
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d5a8:	4285      	cmp	r5, r0
 800d5aa:	f84c 1b04 	str.w	r1, [ip], #4
 800d5ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d5b2:	dcec      	bgt.n	800d58e <__multadd+0x12>
 800d5b4:	b30e      	cbz	r6, 800d5fa <__multadd+0x7e>
 800d5b6:	68a3      	ldr	r3, [r4, #8]
 800d5b8:	42ab      	cmp	r3, r5
 800d5ba:	dc19      	bgt.n	800d5f0 <__multadd+0x74>
 800d5bc:	6861      	ldr	r1, [r4, #4]
 800d5be:	4638      	mov	r0, r7
 800d5c0:	3101      	adds	r1, #1
 800d5c2:	f7ff ff79 	bl	800d4b8 <_Balloc>
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	b928      	cbnz	r0, 800d5d6 <__multadd+0x5a>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <__multadd+0x84>)
 800d5ce:	480d      	ldr	r0, [pc, #52]	; (800d604 <__multadd+0x88>)
 800d5d0:	21b5      	movs	r1, #181	; 0xb5
 800d5d2:	f000 fc67 	bl	800dea4 <__assert_func>
 800d5d6:	6922      	ldr	r2, [r4, #16]
 800d5d8:	3202      	adds	r2, #2
 800d5da:	f104 010c 	add.w	r1, r4, #12
 800d5de:	0092      	lsls	r2, r2, #2
 800d5e0:	300c      	adds	r0, #12
 800d5e2:	f7ff ff4f 	bl	800d484 <memcpy>
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f7ff ffa5 	bl	800d538 <_Bfree>
 800d5ee:	4644      	mov	r4, r8
 800d5f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5f4:	3501      	adds	r5, #1
 800d5f6:	615e      	str	r6, [r3, #20]
 800d5f8:	6125      	str	r5, [r4, #16]
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	0800eb4f 	.word	0x0800eb4f
 800d604:	0800eb60 	.word	0x0800eb60

0800d608 <__hi0bits>:
 800d608:	0c03      	lsrs	r3, r0, #16
 800d60a:	041b      	lsls	r3, r3, #16
 800d60c:	b9d3      	cbnz	r3, 800d644 <__hi0bits+0x3c>
 800d60e:	0400      	lsls	r0, r0, #16
 800d610:	2310      	movs	r3, #16
 800d612:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d616:	bf04      	itt	eq
 800d618:	0200      	lsleq	r0, r0, #8
 800d61a:	3308      	addeq	r3, #8
 800d61c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d620:	bf04      	itt	eq
 800d622:	0100      	lsleq	r0, r0, #4
 800d624:	3304      	addeq	r3, #4
 800d626:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d62a:	bf04      	itt	eq
 800d62c:	0080      	lsleq	r0, r0, #2
 800d62e:	3302      	addeq	r3, #2
 800d630:	2800      	cmp	r0, #0
 800d632:	db05      	blt.n	800d640 <__hi0bits+0x38>
 800d634:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d638:	f103 0301 	add.w	r3, r3, #1
 800d63c:	bf08      	it	eq
 800d63e:	2320      	moveq	r3, #32
 800d640:	4618      	mov	r0, r3
 800d642:	4770      	bx	lr
 800d644:	2300      	movs	r3, #0
 800d646:	e7e4      	b.n	800d612 <__hi0bits+0xa>

0800d648 <__lo0bits>:
 800d648:	6803      	ldr	r3, [r0, #0]
 800d64a:	f013 0207 	ands.w	r2, r3, #7
 800d64e:	4601      	mov	r1, r0
 800d650:	d00b      	beq.n	800d66a <__lo0bits+0x22>
 800d652:	07da      	lsls	r2, r3, #31
 800d654:	d423      	bmi.n	800d69e <__lo0bits+0x56>
 800d656:	0798      	lsls	r0, r3, #30
 800d658:	bf49      	itett	mi
 800d65a:	085b      	lsrmi	r3, r3, #1
 800d65c:	089b      	lsrpl	r3, r3, #2
 800d65e:	2001      	movmi	r0, #1
 800d660:	600b      	strmi	r3, [r1, #0]
 800d662:	bf5c      	itt	pl
 800d664:	600b      	strpl	r3, [r1, #0]
 800d666:	2002      	movpl	r0, #2
 800d668:	4770      	bx	lr
 800d66a:	b298      	uxth	r0, r3
 800d66c:	b9a8      	cbnz	r0, 800d69a <__lo0bits+0x52>
 800d66e:	0c1b      	lsrs	r3, r3, #16
 800d670:	2010      	movs	r0, #16
 800d672:	b2da      	uxtb	r2, r3
 800d674:	b90a      	cbnz	r2, 800d67a <__lo0bits+0x32>
 800d676:	3008      	adds	r0, #8
 800d678:	0a1b      	lsrs	r3, r3, #8
 800d67a:	071a      	lsls	r2, r3, #28
 800d67c:	bf04      	itt	eq
 800d67e:	091b      	lsreq	r3, r3, #4
 800d680:	3004      	addeq	r0, #4
 800d682:	079a      	lsls	r2, r3, #30
 800d684:	bf04      	itt	eq
 800d686:	089b      	lsreq	r3, r3, #2
 800d688:	3002      	addeq	r0, #2
 800d68a:	07da      	lsls	r2, r3, #31
 800d68c:	d403      	bmi.n	800d696 <__lo0bits+0x4e>
 800d68e:	085b      	lsrs	r3, r3, #1
 800d690:	f100 0001 	add.w	r0, r0, #1
 800d694:	d005      	beq.n	800d6a2 <__lo0bits+0x5a>
 800d696:	600b      	str	r3, [r1, #0]
 800d698:	4770      	bx	lr
 800d69a:	4610      	mov	r0, r2
 800d69c:	e7e9      	b.n	800d672 <__lo0bits+0x2a>
 800d69e:	2000      	movs	r0, #0
 800d6a0:	4770      	bx	lr
 800d6a2:	2020      	movs	r0, #32
 800d6a4:	4770      	bx	lr
	...

0800d6a8 <__i2b>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	f7ff ff03 	bl	800d4b8 <_Balloc>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	b928      	cbnz	r0, 800d6c2 <__i2b+0x1a>
 800d6b6:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <__i2b+0x24>)
 800d6b8:	4805      	ldr	r0, [pc, #20]	; (800d6d0 <__i2b+0x28>)
 800d6ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d6be:	f000 fbf1 	bl	800dea4 <__assert_func>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	6144      	str	r4, [r0, #20]
 800d6c6:	6103      	str	r3, [r0, #16]
 800d6c8:	bd10      	pop	{r4, pc}
 800d6ca:	bf00      	nop
 800d6cc:	0800eb4f 	.word	0x0800eb4f
 800d6d0:	0800eb60 	.word	0x0800eb60

0800d6d4 <__multiply>:
 800d6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	4691      	mov	r9, r2
 800d6da:	690a      	ldr	r2, [r1, #16]
 800d6dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	bfb8      	it	lt
 800d6e4:	460b      	movlt	r3, r1
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	bfbc      	itt	lt
 800d6ea:	464c      	movlt	r4, r9
 800d6ec:	4699      	movlt	r9, r3
 800d6ee:	6927      	ldr	r7, [r4, #16]
 800d6f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d6f4:	68a3      	ldr	r3, [r4, #8]
 800d6f6:	6861      	ldr	r1, [r4, #4]
 800d6f8:	eb07 060a 	add.w	r6, r7, sl
 800d6fc:	42b3      	cmp	r3, r6
 800d6fe:	b085      	sub	sp, #20
 800d700:	bfb8      	it	lt
 800d702:	3101      	addlt	r1, #1
 800d704:	f7ff fed8 	bl	800d4b8 <_Balloc>
 800d708:	b930      	cbnz	r0, 800d718 <__multiply+0x44>
 800d70a:	4602      	mov	r2, r0
 800d70c:	4b44      	ldr	r3, [pc, #272]	; (800d820 <__multiply+0x14c>)
 800d70e:	4845      	ldr	r0, [pc, #276]	; (800d824 <__multiply+0x150>)
 800d710:	f240 115d 	movw	r1, #349	; 0x15d
 800d714:	f000 fbc6 	bl	800dea4 <__assert_func>
 800d718:	f100 0514 	add.w	r5, r0, #20
 800d71c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d720:	462b      	mov	r3, r5
 800d722:	2200      	movs	r2, #0
 800d724:	4543      	cmp	r3, r8
 800d726:	d321      	bcc.n	800d76c <__multiply+0x98>
 800d728:	f104 0314 	add.w	r3, r4, #20
 800d72c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d730:	f109 0314 	add.w	r3, r9, #20
 800d734:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d738:	9202      	str	r2, [sp, #8]
 800d73a:	1b3a      	subs	r2, r7, r4
 800d73c:	3a15      	subs	r2, #21
 800d73e:	f022 0203 	bic.w	r2, r2, #3
 800d742:	3204      	adds	r2, #4
 800d744:	f104 0115 	add.w	r1, r4, #21
 800d748:	428f      	cmp	r7, r1
 800d74a:	bf38      	it	cc
 800d74c:	2204      	movcc	r2, #4
 800d74e:	9201      	str	r2, [sp, #4]
 800d750:	9a02      	ldr	r2, [sp, #8]
 800d752:	9303      	str	r3, [sp, #12]
 800d754:	429a      	cmp	r2, r3
 800d756:	d80c      	bhi.n	800d772 <__multiply+0x9e>
 800d758:	2e00      	cmp	r6, #0
 800d75a:	dd03      	ble.n	800d764 <__multiply+0x90>
 800d75c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d760:	2b00      	cmp	r3, #0
 800d762:	d05a      	beq.n	800d81a <__multiply+0x146>
 800d764:	6106      	str	r6, [r0, #16]
 800d766:	b005      	add	sp, #20
 800d768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76c:	f843 2b04 	str.w	r2, [r3], #4
 800d770:	e7d8      	b.n	800d724 <__multiply+0x50>
 800d772:	f8b3 a000 	ldrh.w	sl, [r3]
 800d776:	f1ba 0f00 	cmp.w	sl, #0
 800d77a:	d024      	beq.n	800d7c6 <__multiply+0xf2>
 800d77c:	f104 0e14 	add.w	lr, r4, #20
 800d780:	46a9      	mov	r9, r5
 800d782:	f04f 0c00 	mov.w	ip, #0
 800d786:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d78a:	f8d9 1000 	ldr.w	r1, [r9]
 800d78e:	fa1f fb82 	uxth.w	fp, r2
 800d792:	b289      	uxth	r1, r1
 800d794:	fb0a 110b 	mla	r1, sl, fp, r1
 800d798:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d79c:	f8d9 2000 	ldr.w	r2, [r9]
 800d7a0:	4461      	add	r1, ip
 800d7a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d7aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7ae:	b289      	uxth	r1, r1
 800d7b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d7b4:	4577      	cmp	r7, lr
 800d7b6:	f849 1b04 	str.w	r1, [r9], #4
 800d7ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7be:	d8e2      	bhi.n	800d786 <__multiply+0xb2>
 800d7c0:	9a01      	ldr	r2, [sp, #4]
 800d7c2:	f845 c002 	str.w	ip, [r5, r2]
 800d7c6:	9a03      	ldr	r2, [sp, #12]
 800d7c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	f1b9 0f00 	cmp.w	r9, #0
 800d7d2:	d020      	beq.n	800d816 <__multiply+0x142>
 800d7d4:	6829      	ldr	r1, [r5, #0]
 800d7d6:	f104 0c14 	add.w	ip, r4, #20
 800d7da:	46ae      	mov	lr, r5
 800d7dc:	f04f 0a00 	mov.w	sl, #0
 800d7e0:	f8bc b000 	ldrh.w	fp, [ip]
 800d7e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d7e8:	fb09 220b 	mla	r2, r9, fp, r2
 800d7ec:	4492      	add	sl, r2
 800d7ee:	b289      	uxth	r1, r1
 800d7f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d7f4:	f84e 1b04 	str.w	r1, [lr], #4
 800d7f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d7fc:	f8be 1000 	ldrh.w	r1, [lr]
 800d800:	0c12      	lsrs	r2, r2, #16
 800d802:	fb09 1102 	mla	r1, r9, r2, r1
 800d806:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d80a:	4567      	cmp	r7, ip
 800d80c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d810:	d8e6      	bhi.n	800d7e0 <__multiply+0x10c>
 800d812:	9a01      	ldr	r2, [sp, #4]
 800d814:	50a9      	str	r1, [r5, r2]
 800d816:	3504      	adds	r5, #4
 800d818:	e79a      	b.n	800d750 <__multiply+0x7c>
 800d81a:	3e01      	subs	r6, #1
 800d81c:	e79c      	b.n	800d758 <__multiply+0x84>
 800d81e:	bf00      	nop
 800d820:	0800eb4f 	.word	0x0800eb4f
 800d824:	0800eb60 	.word	0x0800eb60

0800d828 <__pow5mult>:
 800d828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d82c:	4615      	mov	r5, r2
 800d82e:	f012 0203 	ands.w	r2, r2, #3
 800d832:	4606      	mov	r6, r0
 800d834:	460f      	mov	r7, r1
 800d836:	d007      	beq.n	800d848 <__pow5mult+0x20>
 800d838:	4c25      	ldr	r4, [pc, #148]	; (800d8d0 <__pow5mult+0xa8>)
 800d83a:	3a01      	subs	r2, #1
 800d83c:	2300      	movs	r3, #0
 800d83e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d842:	f7ff fe9b 	bl	800d57c <__multadd>
 800d846:	4607      	mov	r7, r0
 800d848:	10ad      	asrs	r5, r5, #2
 800d84a:	d03d      	beq.n	800d8c8 <__pow5mult+0xa0>
 800d84c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d84e:	b97c      	cbnz	r4, 800d870 <__pow5mult+0x48>
 800d850:	2010      	movs	r0, #16
 800d852:	f7fe fa07 	bl	800bc64 <malloc>
 800d856:	4602      	mov	r2, r0
 800d858:	6270      	str	r0, [r6, #36]	; 0x24
 800d85a:	b928      	cbnz	r0, 800d868 <__pow5mult+0x40>
 800d85c:	4b1d      	ldr	r3, [pc, #116]	; (800d8d4 <__pow5mult+0xac>)
 800d85e:	481e      	ldr	r0, [pc, #120]	; (800d8d8 <__pow5mult+0xb0>)
 800d860:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d864:	f000 fb1e 	bl	800dea4 <__assert_func>
 800d868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d86c:	6004      	str	r4, [r0, #0]
 800d86e:	60c4      	str	r4, [r0, #12]
 800d870:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d878:	b94c      	cbnz	r4, 800d88e <__pow5mult+0x66>
 800d87a:	f240 2171 	movw	r1, #625	; 0x271
 800d87e:	4630      	mov	r0, r6
 800d880:	f7ff ff12 	bl	800d6a8 <__i2b>
 800d884:	2300      	movs	r3, #0
 800d886:	f8c8 0008 	str.w	r0, [r8, #8]
 800d88a:	4604      	mov	r4, r0
 800d88c:	6003      	str	r3, [r0, #0]
 800d88e:	f04f 0900 	mov.w	r9, #0
 800d892:	07eb      	lsls	r3, r5, #31
 800d894:	d50a      	bpl.n	800d8ac <__pow5mult+0x84>
 800d896:	4639      	mov	r1, r7
 800d898:	4622      	mov	r2, r4
 800d89a:	4630      	mov	r0, r6
 800d89c:	f7ff ff1a 	bl	800d6d4 <__multiply>
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	4680      	mov	r8, r0
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f7ff fe47 	bl	800d538 <_Bfree>
 800d8aa:	4647      	mov	r7, r8
 800d8ac:	106d      	asrs	r5, r5, #1
 800d8ae:	d00b      	beq.n	800d8c8 <__pow5mult+0xa0>
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	b938      	cbnz	r0, 800d8c4 <__pow5mult+0x9c>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f7ff ff0b 	bl	800d6d4 <__multiply>
 800d8be:	6020      	str	r0, [r4, #0]
 800d8c0:	f8c0 9000 	str.w	r9, [r0]
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	e7e4      	b.n	800d892 <__pow5mult+0x6a>
 800d8c8:	4638      	mov	r0, r7
 800d8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ce:	bf00      	nop
 800d8d0:	0800ecb0 	.word	0x0800ecb0
 800d8d4:	0800eadd 	.word	0x0800eadd
 800d8d8:	0800eb60 	.word	0x0800eb60

0800d8dc <__lshift>:
 800d8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	6849      	ldr	r1, [r1, #4]
 800d8e4:	6923      	ldr	r3, [r4, #16]
 800d8e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8ea:	68a3      	ldr	r3, [r4, #8]
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	4691      	mov	r9, r2
 800d8f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8f4:	f108 0601 	add.w	r6, r8, #1
 800d8f8:	42b3      	cmp	r3, r6
 800d8fa:	db0b      	blt.n	800d914 <__lshift+0x38>
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	f7ff fddb 	bl	800d4b8 <_Balloc>
 800d902:	4605      	mov	r5, r0
 800d904:	b948      	cbnz	r0, 800d91a <__lshift+0x3e>
 800d906:	4602      	mov	r2, r0
 800d908:	4b2a      	ldr	r3, [pc, #168]	; (800d9b4 <__lshift+0xd8>)
 800d90a:	482b      	ldr	r0, [pc, #172]	; (800d9b8 <__lshift+0xdc>)
 800d90c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d910:	f000 fac8 	bl	800dea4 <__assert_func>
 800d914:	3101      	adds	r1, #1
 800d916:	005b      	lsls	r3, r3, #1
 800d918:	e7ee      	b.n	800d8f8 <__lshift+0x1c>
 800d91a:	2300      	movs	r3, #0
 800d91c:	f100 0114 	add.w	r1, r0, #20
 800d920:	f100 0210 	add.w	r2, r0, #16
 800d924:	4618      	mov	r0, r3
 800d926:	4553      	cmp	r3, sl
 800d928:	db37      	blt.n	800d99a <__lshift+0xbe>
 800d92a:	6920      	ldr	r0, [r4, #16]
 800d92c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d930:	f104 0314 	add.w	r3, r4, #20
 800d934:	f019 091f 	ands.w	r9, r9, #31
 800d938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d93c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d940:	d02f      	beq.n	800d9a2 <__lshift+0xc6>
 800d942:	f1c9 0e20 	rsb	lr, r9, #32
 800d946:	468a      	mov	sl, r1
 800d948:	f04f 0c00 	mov.w	ip, #0
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	fa02 f209 	lsl.w	r2, r2, r9
 800d952:	ea42 020c 	orr.w	r2, r2, ip
 800d956:	f84a 2b04 	str.w	r2, [sl], #4
 800d95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d95e:	4298      	cmp	r0, r3
 800d960:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d964:	d8f2      	bhi.n	800d94c <__lshift+0x70>
 800d966:	1b03      	subs	r3, r0, r4
 800d968:	3b15      	subs	r3, #21
 800d96a:	f023 0303 	bic.w	r3, r3, #3
 800d96e:	3304      	adds	r3, #4
 800d970:	f104 0215 	add.w	r2, r4, #21
 800d974:	4290      	cmp	r0, r2
 800d976:	bf38      	it	cc
 800d978:	2304      	movcc	r3, #4
 800d97a:	f841 c003 	str.w	ip, [r1, r3]
 800d97e:	f1bc 0f00 	cmp.w	ip, #0
 800d982:	d001      	beq.n	800d988 <__lshift+0xac>
 800d984:	f108 0602 	add.w	r6, r8, #2
 800d988:	3e01      	subs	r6, #1
 800d98a:	4638      	mov	r0, r7
 800d98c:	612e      	str	r6, [r5, #16]
 800d98e:	4621      	mov	r1, r4
 800d990:	f7ff fdd2 	bl	800d538 <_Bfree>
 800d994:	4628      	mov	r0, r5
 800d996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d99e:	3301      	adds	r3, #1
 800d9a0:	e7c1      	b.n	800d926 <__lshift+0x4a>
 800d9a2:	3904      	subs	r1, #4
 800d9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9ac:	4298      	cmp	r0, r3
 800d9ae:	d8f9      	bhi.n	800d9a4 <__lshift+0xc8>
 800d9b0:	e7ea      	b.n	800d988 <__lshift+0xac>
 800d9b2:	bf00      	nop
 800d9b4:	0800eb4f 	.word	0x0800eb4f
 800d9b8:	0800eb60 	.word	0x0800eb60

0800d9bc <__mcmp>:
 800d9bc:	b530      	push	{r4, r5, lr}
 800d9be:	6902      	ldr	r2, [r0, #16]
 800d9c0:	690c      	ldr	r4, [r1, #16]
 800d9c2:	1b12      	subs	r2, r2, r4
 800d9c4:	d10e      	bne.n	800d9e4 <__mcmp+0x28>
 800d9c6:	f100 0314 	add.w	r3, r0, #20
 800d9ca:	3114      	adds	r1, #20
 800d9cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d9d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d9d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d9d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d9dc:	42a5      	cmp	r5, r4
 800d9de:	d003      	beq.n	800d9e8 <__mcmp+0x2c>
 800d9e0:	d305      	bcc.n	800d9ee <__mcmp+0x32>
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	bd30      	pop	{r4, r5, pc}
 800d9e8:	4283      	cmp	r3, r0
 800d9ea:	d3f3      	bcc.n	800d9d4 <__mcmp+0x18>
 800d9ec:	e7fa      	b.n	800d9e4 <__mcmp+0x28>
 800d9ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9f2:	e7f7      	b.n	800d9e4 <__mcmp+0x28>

0800d9f4 <__mdiff>:
 800d9f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	4620      	mov	r0, r4
 800da00:	4690      	mov	r8, r2
 800da02:	f7ff ffdb 	bl	800d9bc <__mcmp>
 800da06:	1e05      	subs	r5, r0, #0
 800da08:	d110      	bne.n	800da2c <__mdiff+0x38>
 800da0a:	4629      	mov	r1, r5
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7ff fd53 	bl	800d4b8 <_Balloc>
 800da12:	b930      	cbnz	r0, 800da22 <__mdiff+0x2e>
 800da14:	4b3a      	ldr	r3, [pc, #232]	; (800db00 <__mdiff+0x10c>)
 800da16:	4602      	mov	r2, r0
 800da18:	f240 2132 	movw	r1, #562	; 0x232
 800da1c:	4839      	ldr	r0, [pc, #228]	; (800db04 <__mdiff+0x110>)
 800da1e:	f000 fa41 	bl	800dea4 <__assert_func>
 800da22:	2301      	movs	r3, #1
 800da24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2c:	bfa4      	itt	ge
 800da2e:	4643      	movge	r3, r8
 800da30:	46a0      	movge	r8, r4
 800da32:	4630      	mov	r0, r6
 800da34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da38:	bfa6      	itte	ge
 800da3a:	461c      	movge	r4, r3
 800da3c:	2500      	movge	r5, #0
 800da3e:	2501      	movlt	r5, #1
 800da40:	f7ff fd3a 	bl	800d4b8 <_Balloc>
 800da44:	b920      	cbnz	r0, 800da50 <__mdiff+0x5c>
 800da46:	4b2e      	ldr	r3, [pc, #184]	; (800db00 <__mdiff+0x10c>)
 800da48:	4602      	mov	r2, r0
 800da4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da4e:	e7e5      	b.n	800da1c <__mdiff+0x28>
 800da50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da54:	6926      	ldr	r6, [r4, #16]
 800da56:	60c5      	str	r5, [r0, #12]
 800da58:	f104 0914 	add.w	r9, r4, #20
 800da5c:	f108 0514 	add.w	r5, r8, #20
 800da60:	f100 0e14 	add.w	lr, r0, #20
 800da64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800da68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da6c:	f108 0210 	add.w	r2, r8, #16
 800da70:	46f2      	mov	sl, lr
 800da72:	2100      	movs	r1, #0
 800da74:	f859 3b04 	ldr.w	r3, [r9], #4
 800da78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da7c:	fa1f f883 	uxth.w	r8, r3
 800da80:	fa11 f18b 	uxtah	r1, r1, fp
 800da84:	0c1b      	lsrs	r3, r3, #16
 800da86:	eba1 0808 	sub.w	r8, r1, r8
 800da8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da92:	fa1f f888 	uxth.w	r8, r8
 800da96:	1419      	asrs	r1, r3, #16
 800da98:	454e      	cmp	r6, r9
 800da9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da9e:	f84a 3b04 	str.w	r3, [sl], #4
 800daa2:	d8e7      	bhi.n	800da74 <__mdiff+0x80>
 800daa4:	1b33      	subs	r3, r6, r4
 800daa6:	3b15      	subs	r3, #21
 800daa8:	f023 0303 	bic.w	r3, r3, #3
 800daac:	3304      	adds	r3, #4
 800daae:	3415      	adds	r4, #21
 800dab0:	42a6      	cmp	r6, r4
 800dab2:	bf38      	it	cc
 800dab4:	2304      	movcc	r3, #4
 800dab6:	441d      	add	r5, r3
 800dab8:	4473      	add	r3, lr
 800daba:	469e      	mov	lr, r3
 800dabc:	462e      	mov	r6, r5
 800dabe:	4566      	cmp	r6, ip
 800dac0:	d30e      	bcc.n	800dae0 <__mdiff+0xec>
 800dac2:	f10c 0203 	add.w	r2, ip, #3
 800dac6:	1b52      	subs	r2, r2, r5
 800dac8:	f022 0203 	bic.w	r2, r2, #3
 800dacc:	3d03      	subs	r5, #3
 800dace:	45ac      	cmp	ip, r5
 800dad0:	bf38      	it	cc
 800dad2:	2200      	movcc	r2, #0
 800dad4:	441a      	add	r2, r3
 800dad6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dada:	b17b      	cbz	r3, 800dafc <__mdiff+0x108>
 800dadc:	6107      	str	r7, [r0, #16]
 800dade:	e7a3      	b.n	800da28 <__mdiff+0x34>
 800dae0:	f856 8b04 	ldr.w	r8, [r6], #4
 800dae4:	fa11 f288 	uxtah	r2, r1, r8
 800dae8:	1414      	asrs	r4, r2, #16
 800daea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800daee:	b292      	uxth	r2, r2
 800daf0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800daf4:	f84e 2b04 	str.w	r2, [lr], #4
 800daf8:	1421      	asrs	r1, r4, #16
 800dafa:	e7e0      	b.n	800dabe <__mdiff+0xca>
 800dafc:	3f01      	subs	r7, #1
 800dafe:	e7ea      	b.n	800dad6 <__mdiff+0xe2>
 800db00:	0800eb4f 	.word	0x0800eb4f
 800db04:	0800eb60 	.word	0x0800eb60

0800db08 <__d2b>:
 800db08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db0c:	4689      	mov	r9, r1
 800db0e:	2101      	movs	r1, #1
 800db10:	ec57 6b10 	vmov	r6, r7, d0
 800db14:	4690      	mov	r8, r2
 800db16:	f7ff fccf 	bl	800d4b8 <_Balloc>
 800db1a:	4604      	mov	r4, r0
 800db1c:	b930      	cbnz	r0, 800db2c <__d2b+0x24>
 800db1e:	4602      	mov	r2, r0
 800db20:	4b25      	ldr	r3, [pc, #148]	; (800dbb8 <__d2b+0xb0>)
 800db22:	4826      	ldr	r0, [pc, #152]	; (800dbbc <__d2b+0xb4>)
 800db24:	f240 310a 	movw	r1, #778	; 0x30a
 800db28:	f000 f9bc 	bl	800dea4 <__assert_func>
 800db2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db34:	bb35      	cbnz	r5, 800db84 <__d2b+0x7c>
 800db36:	2e00      	cmp	r6, #0
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	d028      	beq.n	800db8e <__d2b+0x86>
 800db3c:	4668      	mov	r0, sp
 800db3e:	9600      	str	r6, [sp, #0]
 800db40:	f7ff fd82 	bl	800d648 <__lo0bits>
 800db44:	9900      	ldr	r1, [sp, #0]
 800db46:	b300      	cbz	r0, 800db8a <__d2b+0x82>
 800db48:	9a01      	ldr	r2, [sp, #4]
 800db4a:	f1c0 0320 	rsb	r3, r0, #32
 800db4e:	fa02 f303 	lsl.w	r3, r2, r3
 800db52:	430b      	orrs	r3, r1
 800db54:	40c2      	lsrs	r2, r0
 800db56:	6163      	str	r3, [r4, #20]
 800db58:	9201      	str	r2, [sp, #4]
 800db5a:	9b01      	ldr	r3, [sp, #4]
 800db5c:	61a3      	str	r3, [r4, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	bf14      	ite	ne
 800db62:	2202      	movne	r2, #2
 800db64:	2201      	moveq	r2, #1
 800db66:	6122      	str	r2, [r4, #16]
 800db68:	b1d5      	cbz	r5, 800dba0 <__d2b+0x98>
 800db6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db6e:	4405      	add	r5, r0
 800db70:	f8c9 5000 	str.w	r5, [r9]
 800db74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db78:	f8c8 0000 	str.w	r0, [r8]
 800db7c:	4620      	mov	r0, r4
 800db7e:	b003      	add	sp, #12
 800db80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db88:	e7d5      	b.n	800db36 <__d2b+0x2e>
 800db8a:	6161      	str	r1, [r4, #20]
 800db8c:	e7e5      	b.n	800db5a <__d2b+0x52>
 800db8e:	a801      	add	r0, sp, #4
 800db90:	f7ff fd5a 	bl	800d648 <__lo0bits>
 800db94:	9b01      	ldr	r3, [sp, #4]
 800db96:	6163      	str	r3, [r4, #20]
 800db98:	2201      	movs	r2, #1
 800db9a:	6122      	str	r2, [r4, #16]
 800db9c:	3020      	adds	r0, #32
 800db9e:	e7e3      	b.n	800db68 <__d2b+0x60>
 800dba0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dba4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dba8:	f8c9 0000 	str.w	r0, [r9]
 800dbac:	6918      	ldr	r0, [r3, #16]
 800dbae:	f7ff fd2b 	bl	800d608 <__hi0bits>
 800dbb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbb6:	e7df      	b.n	800db78 <__d2b+0x70>
 800dbb8:	0800eb4f 	.word	0x0800eb4f
 800dbbc:	0800eb60 	.word	0x0800eb60

0800dbc0 <_calloc_r>:
 800dbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbc2:	fba1 2402 	umull	r2, r4, r1, r2
 800dbc6:	b94c      	cbnz	r4, 800dbdc <_calloc_r+0x1c>
 800dbc8:	4611      	mov	r1, r2
 800dbca:	9201      	str	r2, [sp, #4]
 800dbcc:	f7fe f8ce 	bl	800bd6c <_malloc_r>
 800dbd0:	9a01      	ldr	r2, [sp, #4]
 800dbd2:	4605      	mov	r5, r0
 800dbd4:	b930      	cbnz	r0, 800dbe4 <_calloc_r+0x24>
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	b003      	add	sp, #12
 800dbda:	bd30      	pop	{r4, r5, pc}
 800dbdc:	220c      	movs	r2, #12
 800dbde:	6002      	str	r2, [r0, #0]
 800dbe0:	2500      	movs	r5, #0
 800dbe2:	e7f8      	b.n	800dbd6 <_calloc_r+0x16>
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	f7fe f84d 	bl	800bc84 <memset>
 800dbea:	e7f4      	b.n	800dbd6 <_calloc_r+0x16>

0800dbec <__ssputs_r>:
 800dbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf0:	688e      	ldr	r6, [r1, #8]
 800dbf2:	429e      	cmp	r6, r3
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	4690      	mov	r8, r2
 800dbfa:	461f      	mov	r7, r3
 800dbfc:	d838      	bhi.n	800dc70 <__ssputs_r+0x84>
 800dbfe:	898a      	ldrh	r2, [r1, #12]
 800dc00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc04:	d032      	beq.n	800dc6c <__ssputs_r+0x80>
 800dc06:	6825      	ldr	r5, [r4, #0]
 800dc08:	6909      	ldr	r1, [r1, #16]
 800dc0a:	eba5 0901 	sub.w	r9, r5, r1
 800dc0e:	6965      	ldr	r5, [r4, #20]
 800dc10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc18:	3301      	adds	r3, #1
 800dc1a:	444b      	add	r3, r9
 800dc1c:	106d      	asrs	r5, r5, #1
 800dc1e:	429d      	cmp	r5, r3
 800dc20:	bf38      	it	cc
 800dc22:	461d      	movcc	r5, r3
 800dc24:	0553      	lsls	r3, r2, #21
 800dc26:	d531      	bpl.n	800dc8c <__ssputs_r+0xa0>
 800dc28:	4629      	mov	r1, r5
 800dc2a:	f7fe f89f 	bl	800bd6c <_malloc_r>
 800dc2e:	4606      	mov	r6, r0
 800dc30:	b950      	cbnz	r0, 800dc48 <__ssputs_r+0x5c>
 800dc32:	230c      	movs	r3, #12
 800dc34:	f8ca 3000 	str.w	r3, [sl]
 800dc38:	89a3      	ldrh	r3, [r4, #12]
 800dc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc3e:	81a3      	strh	r3, [r4, #12]
 800dc40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc48:	6921      	ldr	r1, [r4, #16]
 800dc4a:	464a      	mov	r2, r9
 800dc4c:	f7ff fc1a 	bl	800d484 <memcpy>
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc5a:	81a3      	strh	r3, [r4, #12]
 800dc5c:	6126      	str	r6, [r4, #16]
 800dc5e:	6165      	str	r5, [r4, #20]
 800dc60:	444e      	add	r6, r9
 800dc62:	eba5 0509 	sub.w	r5, r5, r9
 800dc66:	6026      	str	r6, [r4, #0]
 800dc68:	60a5      	str	r5, [r4, #8]
 800dc6a:	463e      	mov	r6, r7
 800dc6c:	42be      	cmp	r6, r7
 800dc6e:	d900      	bls.n	800dc72 <__ssputs_r+0x86>
 800dc70:	463e      	mov	r6, r7
 800dc72:	6820      	ldr	r0, [r4, #0]
 800dc74:	4632      	mov	r2, r6
 800dc76:	4641      	mov	r1, r8
 800dc78:	f000 f959 	bl	800df2e <memmove>
 800dc7c:	68a3      	ldr	r3, [r4, #8]
 800dc7e:	1b9b      	subs	r3, r3, r6
 800dc80:	60a3      	str	r3, [r4, #8]
 800dc82:	6823      	ldr	r3, [r4, #0]
 800dc84:	4433      	add	r3, r6
 800dc86:	6023      	str	r3, [r4, #0]
 800dc88:	2000      	movs	r0, #0
 800dc8a:	e7db      	b.n	800dc44 <__ssputs_r+0x58>
 800dc8c:	462a      	mov	r2, r5
 800dc8e:	f000 f968 	bl	800df62 <_realloc_r>
 800dc92:	4606      	mov	r6, r0
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d1e1      	bne.n	800dc5c <__ssputs_r+0x70>
 800dc98:	6921      	ldr	r1, [r4, #16]
 800dc9a:	4650      	mov	r0, sl
 800dc9c:	f7fd fffa 	bl	800bc94 <_free_r>
 800dca0:	e7c7      	b.n	800dc32 <__ssputs_r+0x46>
	...

0800dca4 <_svfiprintf_r>:
 800dca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca8:	4698      	mov	r8, r3
 800dcaa:	898b      	ldrh	r3, [r1, #12]
 800dcac:	061b      	lsls	r3, r3, #24
 800dcae:	b09d      	sub	sp, #116	; 0x74
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	460d      	mov	r5, r1
 800dcb4:	4614      	mov	r4, r2
 800dcb6:	d50e      	bpl.n	800dcd6 <_svfiprintf_r+0x32>
 800dcb8:	690b      	ldr	r3, [r1, #16]
 800dcba:	b963      	cbnz	r3, 800dcd6 <_svfiprintf_r+0x32>
 800dcbc:	2140      	movs	r1, #64	; 0x40
 800dcbe:	f7fe f855 	bl	800bd6c <_malloc_r>
 800dcc2:	6028      	str	r0, [r5, #0]
 800dcc4:	6128      	str	r0, [r5, #16]
 800dcc6:	b920      	cbnz	r0, 800dcd2 <_svfiprintf_r+0x2e>
 800dcc8:	230c      	movs	r3, #12
 800dcca:	603b      	str	r3, [r7, #0]
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcd0:	e0d1      	b.n	800de76 <_svfiprintf_r+0x1d2>
 800dcd2:	2340      	movs	r3, #64	; 0x40
 800dcd4:	616b      	str	r3, [r5, #20]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcda:	2320      	movs	r3, #32
 800dcdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dce0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dce4:	2330      	movs	r3, #48	; 0x30
 800dce6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de90 <_svfiprintf_r+0x1ec>
 800dcea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcee:	f04f 0901 	mov.w	r9, #1
 800dcf2:	4623      	mov	r3, r4
 800dcf4:	469a      	mov	sl, r3
 800dcf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcfa:	b10a      	cbz	r2, 800dd00 <_svfiprintf_r+0x5c>
 800dcfc:	2a25      	cmp	r2, #37	; 0x25
 800dcfe:	d1f9      	bne.n	800dcf4 <_svfiprintf_r+0x50>
 800dd00:	ebba 0b04 	subs.w	fp, sl, r4
 800dd04:	d00b      	beq.n	800dd1e <_svfiprintf_r+0x7a>
 800dd06:	465b      	mov	r3, fp
 800dd08:	4622      	mov	r2, r4
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f7ff ff6d 	bl	800dbec <__ssputs_r>
 800dd12:	3001      	adds	r0, #1
 800dd14:	f000 80aa 	beq.w	800de6c <_svfiprintf_r+0x1c8>
 800dd18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd1a:	445a      	add	r2, fp
 800dd1c:	9209      	str	r2, [sp, #36]	; 0x24
 800dd1e:	f89a 3000 	ldrb.w	r3, [sl]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 80a2 	beq.w	800de6c <_svfiprintf_r+0x1c8>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd32:	f10a 0a01 	add.w	sl, sl, #1
 800dd36:	9304      	str	r3, [sp, #16]
 800dd38:	9307      	str	r3, [sp, #28]
 800dd3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd3e:	931a      	str	r3, [sp, #104]	; 0x68
 800dd40:	4654      	mov	r4, sl
 800dd42:	2205      	movs	r2, #5
 800dd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd48:	4851      	ldr	r0, [pc, #324]	; (800de90 <_svfiprintf_r+0x1ec>)
 800dd4a:	f7f2 fa51 	bl	80001f0 <memchr>
 800dd4e:	9a04      	ldr	r2, [sp, #16]
 800dd50:	b9d8      	cbnz	r0, 800dd8a <_svfiprintf_r+0xe6>
 800dd52:	06d0      	lsls	r0, r2, #27
 800dd54:	bf44      	itt	mi
 800dd56:	2320      	movmi	r3, #32
 800dd58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd5c:	0711      	lsls	r1, r2, #28
 800dd5e:	bf44      	itt	mi
 800dd60:	232b      	movmi	r3, #43	; 0x2b
 800dd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd66:	f89a 3000 	ldrb.w	r3, [sl]
 800dd6a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd6c:	d015      	beq.n	800dd9a <_svfiprintf_r+0xf6>
 800dd6e:	9a07      	ldr	r2, [sp, #28]
 800dd70:	4654      	mov	r4, sl
 800dd72:	2000      	movs	r0, #0
 800dd74:	f04f 0c0a 	mov.w	ip, #10
 800dd78:	4621      	mov	r1, r4
 800dd7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd7e:	3b30      	subs	r3, #48	; 0x30
 800dd80:	2b09      	cmp	r3, #9
 800dd82:	d94e      	bls.n	800de22 <_svfiprintf_r+0x17e>
 800dd84:	b1b0      	cbz	r0, 800ddb4 <_svfiprintf_r+0x110>
 800dd86:	9207      	str	r2, [sp, #28]
 800dd88:	e014      	b.n	800ddb4 <_svfiprintf_r+0x110>
 800dd8a:	eba0 0308 	sub.w	r3, r0, r8
 800dd8e:	fa09 f303 	lsl.w	r3, r9, r3
 800dd92:	4313      	orrs	r3, r2
 800dd94:	9304      	str	r3, [sp, #16]
 800dd96:	46a2      	mov	sl, r4
 800dd98:	e7d2      	b.n	800dd40 <_svfiprintf_r+0x9c>
 800dd9a:	9b03      	ldr	r3, [sp, #12]
 800dd9c:	1d19      	adds	r1, r3, #4
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	9103      	str	r1, [sp, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	bfbb      	ittet	lt
 800dda6:	425b      	neglt	r3, r3
 800dda8:	f042 0202 	orrlt.w	r2, r2, #2
 800ddac:	9307      	strge	r3, [sp, #28]
 800ddae:	9307      	strlt	r3, [sp, #28]
 800ddb0:	bfb8      	it	lt
 800ddb2:	9204      	strlt	r2, [sp, #16]
 800ddb4:	7823      	ldrb	r3, [r4, #0]
 800ddb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ddb8:	d10c      	bne.n	800ddd4 <_svfiprintf_r+0x130>
 800ddba:	7863      	ldrb	r3, [r4, #1]
 800ddbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ddbe:	d135      	bne.n	800de2c <_svfiprintf_r+0x188>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	1d1a      	adds	r2, r3, #4
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	9203      	str	r2, [sp, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	bfb8      	it	lt
 800ddcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ddd0:	3402      	adds	r4, #2
 800ddd2:	9305      	str	r3, [sp, #20]
 800ddd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dea0 <_svfiprintf_r+0x1fc>
 800ddd8:	7821      	ldrb	r1, [r4, #0]
 800ddda:	2203      	movs	r2, #3
 800dddc:	4650      	mov	r0, sl
 800ddde:	f7f2 fa07 	bl	80001f0 <memchr>
 800dde2:	b140      	cbz	r0, 800ddf6 <_svfiprintf_r+0x152>
 800dde4:	2340      	movs	r3, #64	; 0x40
 800dde6:	eba0 000a 	sub.w	r0, r0, sl
 800ddea:	fa03 f000 	lsl.w	r0, r3, r0
 800ddee:	9b04      	ldr	r3, [sp, #16]
 800ddf0:	4303      	orrs	r3, r0
 800ddf2:	3401      	adds	r4, #1
 800ddf4:	9304      	str	r3, [sp, #16]
 800ddf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfa:	4826      	ldr	r0, [pc, #152]	; (800de94 <_svfiprintf_r+0x1f0>)
 800ddfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de00:	2206      	movs	r2, #6
 800de02:	f7f2 f9f5 	bl	80001f0 <memchr>
 800de06:	2800      	cmp	r0, #0
 800de08:	d038      	beq.n	800de7c <_svfiprintf_r+0x1d8>
 800de0a:	4b23      	ldr	r3, [pc, #140]	; (800de98 <_svfiprintf_r+0x1f4>)
 800de0c:	bb1b      	cbnz	r3, 800de56 <_svfiprintf_r+0x1b2>
 800de0e:	9b03      	ldr	r3, [sp, #12]
 800de10:	3307      	adds	r3, #7
 800de12:	f023 0307 	bic.w	r3, r3, #7
 800de16:	3308      	adds	r3, #8
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de1c:	4433      	add	r3, r6
 800de1e:	9309      	str	r3, [sp, #36]	; 0x24
 800de20:	e767      	b.n	800dcf2 <_svfiprintf_r+0x4e>
 800de22:	fb0c 3202 	mla	r2, ip, r2, r3
 800de26:	460c      	mov	r4, r1
 800de28:	2001      	movs	r0, #1
 800de2a:	e7a5      	b.n	800dd78 <_svfiprintf_r+0xd4>
 800de2c:	2300      	movs	r3, #0
 800de2e:	3401      	adds	r4, #1
 800de30:	9305      	str	r3, [sp, #20]
 800de32:	4619      	mov	r1, r3
 800de34:	f04f 0c0a 	mov.w	ip, #10
 800de38:	4620      	mov	r0, r4
 800de3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de3e:	3a30      	subs	r2, #48	; 0x30
 800de40:	2a09      	cmp	r2, #9
 800de42:	d903      	bls.n	800de4c <_svfiprintf_r+0x1a8>
 800de44:	2b00      	cmp	r3, #0
 800de46:	d0c5      	beq.n	800ddd4 <_svfiprintf_r+0x130>
 800de48:	9105      	str	r1, [sp, #20]
 800de4a:	e7c3      	b.n	800ddd4 <_svfiprintf_r+0x130>
 800de4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de50:	4604      	mov	r4, r0
 800de52:	2301      	movs	r3, #1
 800de54:	e7f0      	b.n	800de38 <_svfiprintf_r+0x194>
 800de56:	ab03      	add	r3, sp, #12
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	462a      	mov	r2, r5
 800de5c:	4b0f      	ldr	r3, [pc, #60]	; (800de9c <_svfiprintf_r+0x1f8>)
 800de5e:	a904      	add	r1, sp, #16
 800de60:	4638      	mov	r0, r7
 800de62:	f7fe f897 	bl	800bf94 <_printf_float>
 800de66:	1c42      	adds	r2, r0, #1
 800de68:	4606      	mov	r6, r0
 800de6a:	d1d6      	bne.n	800de1a <_svfiprintf_r+0x176>
 800de6c:	89ab      	ldrh	r3, [r5, #12]
 800de6e:	065b      	lsls	r3, r3, #25
 800de70:	f53f af2c 	bmi.w	800dccc <_svfiprintf_r+0x28>
 800de74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de76:	b01d      	add	sp, #116	; 0x74
 800de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7c:	ab03      	add	r3, sp, #12
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	462a      	mov	r2, r5
 800de82:	4b06      	ldr	r3, [pc, #24]	; (800de9c <_svfiprintf_r+0x1f8>)
 800de84:	a904      	add	r1, sp, #16
 800de86:	4638      	mov	r0, r7
 800de88:	f7fe fb28 	bl	800c4dc <_printf_i>
 800de8c:	e7eb      	b.n	800de66 <_svfiprintf_r+0x1c2>
 800de8e:	bf00      	nop
 800de90:	0800ecbc 	.word	0x0800ecbc
 800de94:	0800ecc6 	.word	0x0800ecc6
 800de98:	0800bf95 	.word	0x0800bf95
 800de9c:	0800dbed 	.word	0x0800dbed
 800dea0:	0800ecc2 	.word	0x0800ecc2

0800dea4 <__assert_func>:
 800dea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dea6:	4614      	mov	r4, r2
 800dea8:	461a      	mov	r2, r3
 800deaa:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <__assert_func+0x2c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4605      	mov	r5, r0
 800deb0:	68d8      	ldr	r0, [r3, #12]
 800deb2:	b14c      	cbz	r4, 800dec8 <__assert_func+0x24>
 800deb4:	4b07      	ldr	r3, [pc, #28]	; (800ded4 <__assert_func+0x30>)
 800deb6:	9100      	str	r1, [sp, #0]
 800deb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800debc:	4906      	ldr	r1, [pc, #24]	; (800ded8 <__assert_func+0x34>)
 800debe:	462b      	mov	r3, r5
 800dec0:	f000 f80e 	bl	800dee0 <fiprintf>
 800dec4:	f000 faa4 	bl	800e410 <abort>
 800dec8:	4b04      	ldr	r3, [pc, #16]	; (800dedc <__assert_func+0x38>)
 800deca:	461c      	mov	r4, r3
 800decc:	e7f3      	b.n	800deb6 <__assert_func+0x12>
 800dece:	bf00      	nop
 800ded0:	2000002c 	.word	0x2000002c
 800ded4:	0800eccd 	.word	0x0800eccd
 800ded8:	0800ecda 	.word	0x0800ecda
 800dedc:	0800ed08 	.word	0x0800ed08

0800dee0 <fiprintf>:
 800dee0:	b40e      	push	{r1, r2, r3}
 800dee2:	b503      	push	{r0, r1, lr}
 800dee4:	4601      	mov	r1, r0
 800dee6:	ab03      	add	r3, sp, #12
 800dee8:	4805      	ldr	r0, [pc, #20]	; (800df00 <fiprintf+0x20>)
 800deea:	f853 2b04 	ldr.w	r2, [r3], #4
 800deee:	6800      	ldr	r0, [r0, #0]
 800def0:	9301      	str	r3, [sp, #4]
 800def2:	f000 f88f 	bl	800e014 <_vfiprintf_r>
 800def6:	b002      	add	sp, #8
 800def8:	f85d eb04 	ldr.w	lr, [sp], #4
 800defc:	b003      	add	sp, #12
 800defe:	4770      	bx	lr
 800df00:	2000002c 	.word	0x2000002c

0800df04 <__retarget_lock_init_recursive>:
 800df04:	4770      	bx	lr

0800df06 <__retarget_lock_acquire_recursive>:
 800df06:	4770      	bx	lr

0800df08 <__retarget_lock_release_recursive>:
 800df08:	4770      	bx	lr

0800df0a <__ascii_mbtowc>:
 800df0a:	b082      	sub	sp, #8
 800df0c:	b901      	cbnz	r1, 800df10 <__ascii_mbtowc+0x6>
 800df0e:	a901      	add	r1, sp, #4
 800df10:	b142      	cbz	r2, 800df24 <__ascii_mbtowc+0x1a>
 800df12:	b14b      	cbz	r3, 800df28 <__ascii_mbtowc+0x1e>
 800df14:	7813      	ldrb	r3, [r2, #0]
 800df16:	600b      	str	r3, [r1, #0]
 800df18:	7812      	ldrb	r2, [r2, #0]
 800df1a:	1e10      	subs	r0, r2, #0
 800df1c:	bf18      	it	ne
 800df1e:	2001      	movne	r0, #1
 800df20:	b002      	add	sp, #8
 800df22:	4770      	bx	lr
 800df24:	4610      	mov	r0, r2
 800df26:	e7fb      	b.n	800df20 <__ascii_mbtowc+0x16>
 800df28:	f06f 0001 	mvn.w	r0, #1
 800df2c:	e7f8      	b.n	800df20 <__ascii_mbtowc+0x16>

0800df2e <memmove>:
 800df2e:	4288      	cmp	r0, r1
 800df30:	b510      	push	{r4, lr}
 800df32:	eb01 0402 	add.w	r4, r1, r2
 800df36:	d902      	bls.n	800df3e <memmove+0x10>
 800df38:	4284      	cmp	r4, r0
 800df3a:	4623      	mov	r3, r4
 800df3c:	d807      	bhi.n	800df4e <memmove+0x20>
 800df3e:	1e43      	subs	r3, r0, #1
 800df40:	42a1      	cmp	r1, r4
 800df42:	d008      	beq.n	800df56 <memmove+0x28>
 800df44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df48:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df4c:	e7f8      	b.n	800df40 <memmove+0x12>
 800df4e:	4402      	add	r2, r0
 800df50:	4601      	mov	r1, r0
 800df52:	428a      	cmp	r2, r1
 800df54:	d100      	bne.n	800df58 <memmove+0x2a>
 800df56:	bd10      	pop	{r4, pc}
 800df58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df60:	e7f7      	b.n	800df52 <memmove+0x24>

0800df62 <_realloc_r>:
 800df62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df66:	4680      	mov	r8, r0
 800df68:	4614      	mov	r4, r2
 800df6a:	460e      	mov	r6, r1
 800df6c:	b921      	cbnz	r1, 800df78 <_realloc_r+0x16>
 800df6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df72:	4611      	mov	r1, r2
 800df74:	f7fd befa 	b.w	800bd6c <_malloc_r>
 800df78:	b92a      	cbnz	r2, 800df86 <_realloc_r+0x24>
 800df7a:	f7fd fe8b 	bl	800bc94 <_free_r>
 800df7e:	4625      	mov	r5, r4
 800df80:	4628      	mov	r0, r5
 800df82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df86:	f000 fc67 	bl	800e858 <_malloc_usable_size_r>
 800df8a:	4284      	cmp	r4, r0
 800df8c:	4607      	mov	r7, r0
 800df8e:	d802      	bhi.n	800df96 <_realloc_r+0x34>
 800df90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df94:	d812      	bhi.n	800dfbc <_realloc_r+0x5a>
 800df96:	4621      	mov	r1, r4
 800df98:	4640      	mov	r0, r8
 800df9a:	f7fd fee7 	bl	800bd6c <_malloc_r>
 800df9e:	4605      	mov	r5, r0
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d0ed      	beq.n	800df80 <_realloc_r+0x1e>
 800dfa4:	42bc      	cmp	r4, r7
 800dfa6:	4622      	mov	r2, r4
 800dfa8:	4631      	mov	r1, r6
 800dfaa:	bf28      	it	cs
 800dfac:	463a      	movcs	r2, r7
 800dfae:	f7ff fa69 	bl	800d484 <memcpy>
 800dfb2:	4631      	mov	r1, r6
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	f7fd fe6d 	bl	800bc94 <_free_r>
 800dfba:	e7e1      	b.n	800df80 <_realloc_r+0x1e>
 800dfbc:	4635      	mov	r5, r6
 800dfbe:	e7df      	b.n	800df80 <_realloc_r+0x1e>

0800dfc0 <__sfputc_r>:
 800dfc0:	6893      	ldr	r3, [r2, #8]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	b410      	push	{r4}
 800dfc8:	6093      	str	r3, [r2, #8]
 800dfca:	da08      	bge.n	800dfde <__sfputc_r+0x1e>
 800dfcc:	6994      	ldr	r4, [r2, #24]
 800dfce:	42a3      	cmp	r3, r4
 800dfd0:	db01      	blt.n	800dfd6 <__sfputc_r+0x16>
 800dfd2:	290a      	cmp	r1, #10
 800dfd4:	d103      	bne.n	800dfde <__sfputc_r+0x1e>
 800dfd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfda:	f000 b94b 	b.w	800e274 <__swbuf_r>
 800dfde:	6813      	ldr	r3, [r2, #0]
 800dfe0:	1c58      	adds	r0, r3, #1
 800dfe2:	6010      	str	r0, [r2, #0]
 800dfe4:	7019      	strb	r1, [r3, #0]
 800dfe6:	4608      	mov	r0, r1
 800dfe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <__sfputs_r>:
 800dfee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff0:	4606      	mov	r6, r0
 800dff2:	460f      	mov	r7, r1
 800dff4:	4614      	mov	r4, r2
 800dff6:	18d5      	adds	r5, r2, r3
 800dff8:	42ac      	cmp	r4, r5
 800dffa:	d101      	bne.n	800e000 <__sfputs_r+0x12>
 800dffc:	2000      	movs	r0, #0
 800dffe:	e007      	b.n	800e010 <__sfputs_r+0x22>
 800e000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e004:	463a      	mov	r2, r7
 800e006:	4630      	mov	r0, r6
 800e008:	f7ff ffda 	bl	800dfc0 <__sfputc_r>
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	d1f3      	bne.n	800dff8 <__sfputs_r+0xa>
 800e010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e014 <_vfiprintf_r>:
 800e014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e018:	460d      	mov	r5, r1
 800e01a:	b09d      	sub	sp, #116	; 0x74
 800e01c:	4614      	mov	r4, r2
 800e01e:	4698      	mov	r8, r3
 800e020:	4606      	mov	r6, r0
 800e022:	b118      	cbz	r0, 800e02c <_vfiprintf_r+0x18>
 800e024:	6983      	ldr	r3, [r0, #24]
 800e026:	b90b      	cbnz	r3, 800e02c <_vfiprintf_r+0x18>
 800e028:	f000 fb14 	bl	800e654 <__sinit>
 800e02c:	4b89      	ldr	r3, [pc, #548]	; (800e254 <_vfiprintf_r+0x240>)
 800e02e:	429d      	cmp	r5, r3
 800e030:	d11b      	bne.n	800e06a <_vfiprintf_r+0x56>
 800e032:	6875      	ldr	r5, [r6, #4]
 800e034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e036:	07d9      	lsls	r1, r3, #31
 800e038:	d405      	bmi.n	800e046 <_vfiprintf_r+0x32>
 800e03a:	89ab      	ldrh	r3, [r5, #12]
 800e03c:	059a      	lsls	r2, r3, #22
 800e03e:	d402      	bmi.n	800e046 <_vfiprintf_r+0x32>
 800e040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e042:	f7ff ff60 	bl	800df06 <__retarget_lock_acquire_recursive>
 800e046:	89ab      	ldrh	r3, [r5, #12]
 800e048:	071b      	lsls	r3, r3, #28
 800e04a:	d501      	bpl.n	800e050 <_vfiprintf_r+0x3c>
 800e04c:	692b      	ldr	r3, [r5, #16]
 800e04e:	b9eb      	cbnz	r3, 800e08c <_vfiprintf_r+0x78>
 800e050:	4629      	mov	r1, r5
 800e052:	4630      	mov	r0, r6
 800e054:	f000 f96e 	bl	800e334 <__swsetup_r>
 800e058:	b1c0      	cbz	r0, 800e08c <_vfiprintf_r+0x78>
 800e05a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e05c:	07dc      	lsls	r4, r3, #31
 800e05e:	d50e      	bpl.n	800e07e <_vfiprintf_r+0x6a>
 800e060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e064:	b01d      	add	sp, #116	; 0x74
 800e066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06a:	4b7b      	ldr	r3, [pc, #492]	; (800e258 <_vfiprintf_r+0x244>)
 800e06c:	429d      	cmp	r5, r3
 800e06e:	d101      	bne.n	800e074 <_vfiprintf_r+0x60>
 800e070:	68b5      	ldr	r5, [r6, #8]
 800e072:	e7df      	b.n	800e034 <_vfiprintf_r+0x20>
 800e074:	4b79      	ldr	r3, [pc, #484]	; (800e25c <_vfiprintf_r+0x248>)
 800e076:	429d      	cmp	r5, r3
 800e078:	bf08      	it	eq
 800e07a:	68f5      	ldreq	r5, [r6, #12]
 800e07c:	e7da      	b.n	800e034 <_vfiprintf_r+0x20>
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	0598      	lsls	r0, r3, #22
 800e082:	d4ed      	bmi.n	800e060 <_vfiprintf_r+0x4c>
 800e084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e086:	f7ff ff3f 	bl	800df08 <__retarget_lock_release_recursive>
 800e08a:	e7e9      	b.n	800e060 <_vfiprintf_r+0x4c>
 800e08c:	2300      	movs	r3, #0
 800e08e:	9309      	str	r3, [sp, #36]	; 0x24
 800e090:	2320      	movs	r3, #32
 800e092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e096:	f8cd 800c 	str.w	r8, [sp, #12]
 800e09a:	2330      	movs	r3, #48	; 0x30
 800e09c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e260 <_vfiprintf_r+0x24c>
 800e0a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0a4:	f04f 0901 	mov.w	r9, #1
 800e0a8:	4623      	mov	r3, r4
 800e0aa:	469a      	mov	sl, r3
 800e0ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b0:	b10a      	cbz	r2, 800e0b6 <_vfiprintf_r+0xa2>
 800e0b2:	2a25      	cmp	r2, #37	; 0x25
 800e0b4:	d1f9      	bne.n	800e0aa <_vfiprintf_r+0x96>
 800e0b6:	ebba 0b04 	subs.w	fp, sl, r4
 800e0ba:	d00b      	beq.n	800e0d4 <_vfiprintf_r+0xc0>
 800e0bc:	465b      	mov	r3, fp
 800e0be:	4622      	mov	r2, r4
 800e0c0:	4629      	mov	r1, r5
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f7ff ff93 	bl	800dfee <__sfputs_r>
 800e0c8:	3001      	adds	r0, #1
 800e0ca:	f000 80aa 	beq.w	800e222 <_vfiprintf_r+0x20e>
 800e0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0d0:	445a      	add	r2, fp
 800e0d2:	9209      	str	r2, [sp, #36]	; 0x24
 800e0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f000 80a2 	beq.w	800e222 <_vfiprintf_r+0x20e>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0e8:	f10a 0a01 	add.w	sl, sl, #1
 800e0ec:	9304      	str	r3, [sp, #16]
 800e0ee:	9307      	str	r3, [sp, #28]
 800e0f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0f4:	931a      	str	r3, [sp, #104]	; 0x68
 800e0f6:	4654      	mov	r4, sl
 800e0f8:	2205      	movs	r2, #5
 800e0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0fe:	4858      	ldr	r0, [pc, #352]	; (800e260 <_vfiprintf_r+0x24c>)
 800e100:	f7f2 f876 	bl	80001f0 <memchr>
 800e104:	9a04      	ldr	r2, [sp, #16]
 800e106:	b9d8      	cbnz	r0, 800e140 <_vfiprintf_r+0x12c>
 800e108:	06d1      	lsls	r1, r2, #27
 800e10a:	bf44      	itt	mi
 800e10c:	2320      	movmi	r3, #32
 800e10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e112:	0713      	lsls	r3, r2, #28
 800e114:	bf44      	itt	mi
 800e116:	232b      	movmi	r3, #43	; 0x2b
 800e118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e11c:	f89a 3000 	ldrb.w	r3, [sl]
 800e120:	2b2a      	cmp	r3, #42	; 0x2a
 800e122:	d015      	beq.n	800e150 <_vfiprintf_r+0x13c>
 800e124:	9a07      	ldr	r2, [sp, #28]
 800e126:	4654      	mov	r4, sl
 800e128:	2000      	movs	r0, #0
 800e12a:	f04f 0c0a 	mov.w	ip, #10
 800e12e:	4621      	mov	r1, r4
 800e130:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e134:	3b30      	subs	r3, #48	; 0x30
 800e136:	2b09      	cmp	r3, #9
 800e138:	d94e      	bls.n	800e1d8 <_vfiprintf_r+0x1c4>
 800e13a:	b1b0      	cbz	r0, 800e16a <_vfiprintf_r+0x156>
 800e13c:	9207      	str	r2, [sp, #28]
 800e13e:	e014      	b.n	800e16a <_vfiprintf_r+0x156>
 800e140:	eba0 0308 	sub.w	r3, r0, r8
 800e144:	fa09 f303 	lsl.w	r3, r9, r3
 800e148:	4313      	orrs	r3, r2
 800e14a:	9304      	str	r3, [sp, #16]
 800e14c:	46a2      	mov	sl, r4
 800e14e:	e7d2      	b.n	800e0f6 <_vfiprintf_r+0xe2>
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	1d19      	adds	r1, r3, #4
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	9103      	str	r1, [sp, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	bfbb      	ittet	lt
 800e15c:	425b      	neglt	r3, r3
 800e15e:	f042 0202 	orrlt.w	r2, r2, #2
 800e162:	9307      	strge	r3, [sp, #28]
 800e164:	9307      	strlt	r3, [sp, #28]
 800e166:	bfb8      	it	lt
 800e168:	9204      	strlt	r2, [sp, #16]
 800e16a:	7823      	ldrb	r3, [r4, #0]
 800e16c:	2b2e      	cmp	r3, #46	; 0x2e
 800e16e:	d10c      	bne.n	800e18a <_vfiprintf_r+0x176>
 800e170:	7863      	ldrb	r3, [r4, #1]
 800e172:	2b2a      	cmp	r3, #42	; 0x2a
 800e174:	d135      	bne.n	800e1e2 <_vfiprintf_r+0x1ce>
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	1d1a      	adds	r2, r3, #4
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	9203      	str	r2, [sp, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	bfb8      	it	lt
 800e182:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e186:	3402      	adds	r4, #2
 800e188:	9305      	str	r3, [sp, #20]
 800e18a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e270 <_vfiprintf_r+0x25c>
 800e18e:	7821      	ldrb	r1, [r4, #0]
 800e190:	2203      	movs	r2, #3
 800e192:	4650      	mov	r0, sl
 800e194:	f7f2 f82c 	bl	80001f0 <memchr>
 800e198:	b140      	cbz	r0, 800e1ac <_vfiprintf_r+0x198>
 800e19a:	2340      	movs	r3, #64	; 0x40
 800e19c:	eba0 000a 	sub.w	r0, r0, sl
 800e1a0:	fa03 f000 	lsl.w	r0, r3, r0
 800e1a4:	9b04      	ldr	r3, [sp, #16]
 800e1a6:	4303      	orrs	r3, r0
 800e1a8:	3401      	adds	r4, #1
 800e1aa:	9304      	str	r3, [sp, #16]
 800e1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1b0:	482c      	ldr	r0, [pc, #176]	; (800e264 <_vfiprintf_r+0x250>)
 800e1b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1b6:	2206      	movs	r2, #6
 800e1b8:	f7f2 f81a 	bl	80001f0 <memchr>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d03f      	beq.n	800e240 <_vfiprintf_r+0x22c>
 800e1c0:	4b29      	ldr	r3, [pc, #164]	; (800e268 <_vfiprintf_r+0x254>)
 800e1c2:	bb1b      	cbnz	r3, 800e20c <_vfiprintf_r+0x1f8>
 800e1c4:	9b03      	ldr	r3, [sp, #12]
 800e1c6:	3307      	adds	r3, #7
 800e1c8:	f023 0307 	bic.w	r3, r3, #7
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	9303      	str	r3, [sp, #12]
 800e1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d2:	443b      	add	r3, r7
 800e1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e1d6:	e767      	b.n	800e0a8 <_vfiprintf_r+0x94>
 800e1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1dc:	460c      	mov	r4, r1
 800e1de:	2001      	movs	r0, #1
 800e1e0:	e7a5      	b.n	800e12e <_vfiprintf_r+0x11a>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	3401      	adds	r4, #1
 800e1e6:	9305      	str	r3, [sp, #20]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	f04f 0c0a 	mov.w	ip, #10
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1f4:	3a30      	subs	r2, #48	; 0x30
 800e1f6:	2a09      	cmp	r2, #9
 800e1f8:	d903      	bls.n	800e202 <_vfiprintf_r+0x1ee>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d0c5      	beq.n	800e18a <_vfiprintf_r+0x176>
 800e1fe:	9105      	str	r1, [sp, #20]
 800e200:	e7c3      	b.n	800e18a <_vfiprintf_r+0x176>
 800e202:	fb0c 2101 	mla	r1, ip, r1, r2
 800e206:	4604      	mov	r4, r0
 800e208:	2301      	movs	r3, #1
 800e20a:	e7f0      	b.n	800e1ee <_vfiprintf_r+0x1da>
 800e20c:	ab03      	add	r3, sp, #12
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	462a      	mov	r2, r5
 800e212:	4b16      	ldr	r3, [pc, #88]	; (800e26c <_vfiprintf_r+0x258>)
 800e214:	a904      	add	r1, sp, #16
 800e216:	4630      	mov	r0, r6
 800e218:	f7fd febc 	bl	800bf94 <_printf_float>
 800e21c:	4607      	mov	r7, r0
 800e21e:	1c78      	adds	r0, r7, #1
 800e220:	d1d6      	bne.n	800e1d0 <_vfiprintf_r+0x1bc>
 800e222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e224:	07d9      	lsls	r1, r3, #31
 800e226:	d405      	bmi.n	800e234 <_vfiprintf_r+0x220>
 800e228:	89ab      	ldrh	r3, [r5, #12]
 800e22a:	059a      	lsls	r2, r3, #22
 800e22c:	d402      	bmi.n	800e234 <_vfiprintf_r+0x220>
 800e22e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e230:	f7ff fe6a 	bl	800df08 <__retarget_lock_release_recursive>
 800e234:	89ab      	ldrh	r3, [r5, #12]
 800e236:	065b      	lsls	r3, r3, #25
 800e238:	f53f af12 	bmi.w	800e060 <_vfiprintf_r+0x4c>
 800e23c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e23e:	e711      	b.n	800e064 <_vfiprintf_r+0x50>
 800e240:	ab03      	add	r3, sp, #12
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	462a      	mov	r2, r5
 800e246:	4b09      	ldr	r3, [pc, #36]	; (800e26c <_vfiprintf_r+0x258>)
 800e248:	a904      	add	r1, sp, #16
 800e24a:	4630      	mov	r0, r6
 800e24c:	f7fe f946 	bl	800c4dc <_printf_i>
 800e250:	e7e4      	b.n	800e21c <_vfiprintf_r+0x208>
 800e252:	bf00      	nop
 800e254:	0800ee34 	.word	0x0800ee34
 800e258:	0800ee54 	.word	0x0800ee54
 800e25c:	0800ee14 	.word	0x0800ee14
 800e260:	0800ecbc 	.word	0x0800ecbc
 800e264:	0800ecc6 	.word	0x0800ecc6
 800e268:	0800bf95 	.word	0x0800bf95
 800e26c:	0800dfef 	.word	0x0800dfef
 800e270:	0800ecc2 	.word	0x0800ecc2

0800e274 <__swbuf_r>:
 800e274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e276:	460e      	mov	r6, r1
 800e278:	4614      	mov	r4, r2
 800e27a:	4605      	mov	r5, r0
 800e27c:	b118      	cbz	r0, 800e286 <__swbuf_r+0x12>
 800e27e:	6983      	ldr	r3, [r0, #24]
 800e280:	b90b      	cbnz	r3, 800e286 <__swbuf_r+0x12>
 800e282:	f000 f9e7 	bl	800e654 <__sinit>
 800e286:	4b21      	ldr	r3, [pc, #132]	; (800e30c <__swbuf_r+0x98>)
 800e288:	429c      	cmp	r4, r3
 800e28a:	d12b      	bne.n	800e2e4 <__swbuf_r+0x70>
 800e28c:	686c      	ldr	r4, [r5, #4]
 800e28e:	69a3      	ldr	r3, [r4, #24]
 800e290:	60a3      	str	r3, [r4, #8]
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	071a      	lsls	r2, r3, #28
 800e296:	d52f      	bpl.n	800e2f8 <__swbuf_r+0x84>
 800e298:	6923      	ldr	r3, [r4, #16]
 800e29a:	b36b      	cbz	r3, 800e2f8 <__swbuf_r+0x84>
 800e29c:	6923      	ldr	r3, [r4, #16]
 800e29e:	6820      	ldr	r0, [r4, #0]
 800e2a0:	1ac0      	subs	r0, r0, r3
 800e2a2:	6963      	ldr	r3, [r4, #20]
 800e2a4:	b2f6      	uxtb	r6, r6
 800e2a6:	4283      	cmp	r3, r0
 800e2a8:	4637      	mov	r7, r6
 800e2aa:	dc04      	bgt.n	800e2b6 <__swbuf_r+0x42>
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f000 f93c 	bl	800e52c <_fflush_r>
 800e2b4:	bb30      	cbnz	r0, 800e304 <__swbuf_r+0x90>
 800e2b6:	68a3      	ldr	r3, [r4, #8]
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	60a3      	str	r3, [r4, #8]
 800e2bc:	6823      	ldr	r3, [r4, #0]
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	6022      	str	r2, [r4, #0]
 800e2c2:	701e      	strb	r6, [r3, #0]
 800e2c4:	6963      	ldr	r3, [r4, #20]
 800e2c6:	3001      	adds	r0, #1
 800e2c8:	4283      	cmp	r3, r0
 800e2ca:	d004      	beq.n	800e2d6 <__swbuf_r+0x62>
 800e2cc:	89a3      	ldrh	r3, [r4, #12]
 800e2ce:	07db      	lsls	r3, r3, #31
 800e2d0:	d506      	bpl.n	800e2e0 <__swbuf_r+0x6c>
 800e2d2:	2e0a      	cmp	r6, #10
 800e2d4:	d104      	bne.n	800e2e0 <__swbuf_r+0x6c>
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	4628      	mov	r0, r5
 800e2da:	f000 f927 	bl	800e52c <_fflush_r>
 800e2de:	b988      	cbnz	r0, 800e304 <__swbuf_r+0x90>
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e4:	4b0a      	ldr	r3, [pc, #40]	; (800e310 <__swbuf_r+0x9c>)
 800e2e6:	429c      	cmp	r4, r3
 800e2e8:	d101      	bne.n	800e2ee <__swbuf_r+0x7a>
 800e2ea:	68ac      	ldr	r4, [r5, #8]
 800e2ec:	e7cf      	b.n	800e28e <__swbuf_r+0x1a>
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <__swbuf_r+0xa0>)
 800e2f0:	429c      	cmp	r4, r3
 800e2f2:	bf08      	it	eq
 800e2f4:	68ec      	ldreq	r4, [r5, #12]
 800e2f6:	e7ca      	b.n	800e28e <__swbuf_r+0x1a>
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f000 f81a 	bl	800e334 <__swsetup_r>
 800e300:	2800      	cmp	r0, #0
 800e302:	d0cb      	beq.n	800e29c <__swbuf_r+0x28>
 800e304:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e308:	e7ea      	b.n	800e2e0 <__swbuf_r+0x6c>
 800e30a:	bf00      	nop
 800e30c:	0800ee34 	.word	0x0800ee34
 800e310:	0800ee54 	.word	0x0800ee54
 800e314:	0800ee14 	.word	0x0800ee14

0800e318 <__ascii_wctomb>:
 800e318:	b149      	cbz	r1, 800e32e <__ascii_wctomb+0x16>
 800e31a:	2aff      	cmp	r2, #255	; 0xff
 800e31c:	bf85      	ittet	hi
 800e31e:	238a      	movhi	r3, #138	; 0x8a
 800e320:	6003      	strhi	r3, [r0, #0]
 800e322:	700a      	strbls	r2, [r1, #0]
 800e324:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e328:	bf98      	it	ls
 800e32a:	2001      	movls	r0, #1
 800e32c:	4770      	bx	lr
 800e32e:	4608      	mov	r0, r1
 800e330:	4770      	bx	lr
	...

0800e334 <__swsetup_r>:
 800e334:	4b32      	ldr	r3, [pc, #200]	; (800e400 <__swsetup_r+0xcc>)
 800e336:	b570      	push	{r4, r5, r6, lr}
 800e338:	681d      	ldr	r5, [r3, #0]
 800e33a:	4606      	mov	r6, r0
 800e33c:	460c      	mov	r4, r1
 800e33e:	b125      	cbz	r5, 800e34a <__swsetup_r+0x16>
 800e340:	69ab      	ldr	r3, [r5, #24]
 800e342:	b913      	cbnz	r3, 800e34a <__swsetup_r+0x16>
 800e344:	4628      	mov	r0, r5
 800e346:	f000 f985 	bl	800e654 <__sinit>
 800e34a:	4b2e      	ldr	r3, [pc, #184]	; (800e404 <__swsetup_r+0xd0>)
 800e34c:	429c      	cmp	r4, r3
 800e34e:	d10f      	bne.n	800e370 <__swsetup_r+0x3c>
 800e350:	686c      	ldr	r4, [r5, #4]
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e358:	0719      	lsls	r1, r3, #28
 800e35a:	d42c      	bmi.n	800e3b6 <__swsetup_r+0x82>
 800e35c:	06dd      	lsls	r5, r3, #27
 800e35e:	d411      	bmi.n	800e384 <__swsetup_r+0x50>
 800e360:	2309      	movs	r3, #9
 800e362:	6033      	str	r3, [r6, #0]
 800e364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e368:	81a3      	strh	r3, [r4, #12]
 800e36a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e36e:	e03e      	b.n	800e3ee <__swsetup_r+0xba>
 800e370:	4b25      	ldr	r3, [pc, #148]	; (800e408 <__swsetup_r+0xd4>)
 800e372:	429c      	cmp	r4, r3
 800e374:	d101      	bne.n	800e37a <__swsetup_r+0x46>
 800e376:	68ac      	ldr	r4, [r5, #8]
 800e378:	e7eb      	b.n	800e352 <__swsetup_r+0x1e>
 800e37a:	4b24      	ldr	r3, [pc, #144]	; (800e40c <__swsetup_r+0xd8>)
 800e37c:	429c      	cmp	r4, r3
 800e37e:	bf08      	it	eq
 800e380:	68ec      	ldreq	r4, [r5, #12]
 800e382:	e7e6      	b.n	800e352 <__swsetup_r+0x1e>
 800e384:	0758      	lsls	r0, r3, #29
 800e386:	d512      	bpl.n	800e3ae <__swsetup_r+0x7a>
 800e388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e38a:	b141      	cbz	r1, 800e39e <__swsetup_r+0x6a>
 800e38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e390:	4299      	cmp	r1, r3
 800e392:	d002      	beq.n	800e39a <__swsetup_r+0x66>
 800e394:	4630      	mov	r0, r6
 800e396:	f7fd fc7d 	bl	800bc94 <_free_r>
 800e39a:	2300      	movs	r3, #0
 800e39c:	6363      	str	r3, [r4, #52]	; 0x34
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3a4:	81a3      	strh	r3, [r4, #12]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	6063      	str	r3, [r4, #4]
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	f043 0308 	orr.w	r3, r3, #8
 800e3b4:	81a3      	strh	r3, [r4, #12]
 800e3b6:	6923      	ldr	r3, [r4, #16]
 800e3b8:	b94b      	cbnz	r3, 800e3ce <__swsetup_r+0x9a>
 800e3ba:	89a3      	ldrh	r3, [r4, #12]
 800e3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3c4:	d003      	beq.n	800e3ce <__swsetup_r+0x9a>
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f000 fa05 	bl	800e7d8 <__smakebuf_r>
 800e3ce:	89a0      	ldrh	r0, [r4, #12]
 800e3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3d4:	f010 0301 	ands.w	r3, r0, #1
 800e3d8:	d00a      	beq.n	800e3f0 <__swsetup_r+0xbc>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60a3      	str	r3, [r4, #8]
 800e3de:	6963      	ldr	r3, [r4, #20]
 800e3e0:	425b      	negs	r3, r3
 800e3e2:	61a3      	str	r3, [r4, #24]
 800e3e4:	6923      	ldr	r3, [r4, #16]
 800e3e6:	b943      	cbnz	r3, 800e3fa <__swsetup_r+0xc6>
 800e3e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3ec:	d1ba      	bne.n	800e364 <__swsetup_r+0x30>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	0781      	lsls	r1, r0, #30
 800e3f2:	bf58      	it	pl
 800e3f4:	6963      	ldrpl	r3, [r4, #20]
 800e3f6:	60a3      	str	r3, [r4, #8]
 800e3f8:	e7f4      	b.n	800e3e4 <__swsetup_r+0xb0>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e7f7      	b.n	800e3ee <__swsetup_r+0xba>
 800e3fe:	bf00      	nop
 800e400:	2000002c 	.word	0x2000002c
 800e404:	0800ee34 	.word	0x0800ee34
 800e408:	0800ee54 	.word	0x0800ee54
 800e40c:	0800ee14 	.word	0x0800ee14

0800e410 <abort>:
 800e410:	b508      	push	{r3, lr}
 800e412:	2006      	movs	r0, #6
 800e414:	f000 fa50 	bl	800e8b8 <raise>
 800e418:	2001      	movs	r0, #1
 800e41a:	f7f4 fc83 	bl	8002d24 <_exit>
	...

0800e420 <__sflush_r>:
 800e420:	898a      	ldrh	r2, [r1, #12]
 800e422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e426:	4605      	mov	r5, r0
 800e428:	0710      	lsls	r0, r2, #28
 800e42a:	460c      	mov	r4, r1
 800e42c:	d458      	bmi.n	800e4e0 <__sflush_r+0xc0>
 800e42e:	684b      	ldr	r3, [r1, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	dc05      	bgt.n	800e440 <__sflush_r+0x20>
 800e434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e436:	2b00      	cmp	r3, #0
 800e438:	dc02      	bgt.n	800e440 <__sflush_r+0x20>
 800e43a:	2000      	movs	r0, #0
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e442:	2e00      	cmp	r6, #0
 800e444:	d0f9      	beq.n	800e43a <__sflush_r+0x1a>
 800e446:	2300      	movs	r3, #0
 800e448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e44c:	682f      	ldr	r7, [r5, #0]
 800e44e:	602b      	str	r3, [r5, #0]
 800e450:	d032      	beq.n	800e4b8 <__sflush_r+0x98>
 800e452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	075a      	lsls	r2, r3, #29
 800e458:	d505      	bpl.n	800e466 <__sflush_r+0x46>
 800e45a:	6863      	ldr	r3, [r4, #4]
 800e45c:	1ac0      	subs	r0, r0, r3
 800e45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e460:	b10b      	cbz	r3, 800e466 <__sflush_r+0x46>
 800e462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e464:	1ac0      	subs	r0, r0, r3
 800e466:	2300      	movs	r3, #0
 800e468:	4602      	mov	r2, r0
 800e46a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e46c:	6a21      	ldr	r1, [r4, #32]
 800e46e:	4628      	mov	r0, r5
 800e470:	47b0      	blx	r6
 800e472:	1c43      	adds	r3, r0, #1
 800e474:	89a3      	ldrh	r3, [r4, #12]
 800e476:	d106      	bne.n	800e486 <__sflush_r+0x66>
 800e478:	6829      	ldr	r1, [r5, #0]
 800e47a:	291d      	cmp	r1, #29
 800e47c:	d82c      	bhi.n	800e4d8 <__sflush_r+0xb8>
 800e47e:	4a2a      	ldr	r2, [pc, #168]	; (800e528 <__sflush_r+0x108>)
 800e480:	40ca      	lsrs	r2, r1
 800e482:	07d6      	lsls	r6, r2, #31
 800e484:	d528      	bpl.n	800e4d8 <__sflush_r+0xb8>
 800e486:	2200      	movs	r2, #0
 800e488:	6062      	str	r2, [r4, #4]
 800e48a:	04d9      	lsls	r1, r3, #19
 800e48c:	6922      	ldr	r2, [r4, #16]
 800e48e:	6022      	str	r2, [r4, #0]
 800e490:	d504      	bpl.n	800e49c <__sflush_r+0x7c>
 800e492:	1c42      	adds	r2, r0, #1
 800e494:	d101      	bne.n	800e49a <__sflush_r+0x7a>
 800e496:	682b      	ldr	r3, [r5, #0]
 800e498:	b903      	cbnz	r3, 800e49c <__sflush_r+0x7c>
 800e49a:	6560      	str	r0, [r4, #84]	; 0x54
 800e49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e49e:	602f      	str	r7, [r5, #0]
 800e4a0:	2900      	cmp	r1, #0
 800e4a2:	d0ca      	beq.n	800e43a <__sflush_r+0x1a>
 800e4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4a8:	4299      	cmp	r1, r3
 800e4aa:	d002      	beq.n	800e4b2 <__sflush_r+0x92>
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f7fd fbf1 	bl	800bc94 <_free_r>
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	6360      	str	r0, [r4, #52]	; 0x34
 800e4b6:	e7c1      	b.n	800e43c <__sflush_r+0x1c>
 800e4b8:	6a21      	ldr	r1, [r4, #32]
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	4628      	mov	r0, r5
 800e4be:	47b0      	blx	r6
 800e4c0:	1c41      	adds	r1, r0, #1
 800e4c2:	d1c7      	bne.n	800e454 <__sflush_r+0x34>
 800e4c4:	682b      	ldr	r3, [r5, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d0c4      	beq.n	800e454 <__sflush_r+0x34>
 800e4ca:	2b1d      	cmp	r3, #29
 800e4cc:	d001      	beq.n	800e4d2 <__sflush_r+0xb2>
 800e4ce:	2b16      	cmp	r3, #22
 800e4d0:	d101      	bne.n	800e4d6 <__sflush_r+0xb6>
 800e4d2:	602f      	str	r7, [r5, #0]
 800e4d4:	e7b1      	b.n	800e43a <__sflush_r+0x1a>
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4dc:	81a3      	strh	r3, [r4, #12]
 800e4de:	e7ad      	b.n	800e43c <__sflush_r+0x1c>
 800e4e0:	690f      	ldr	r7, [r1, #16]
 800e4e2:	2f00      	cmp	r7, #0
 800e4e4:	d0a9      	beq.n	800e43a <__sflush_r+0x1a>
 800e4e6:	0793      	lsls	r3, r2, #30
 800e4e8:	680e      	ldr	r6, [r1, #0]
 800e4ea:	bf08      	it	eq
 800e4ec:	694b      	ldreq	r3, [r1, #20]
 800e4ee:	600f      	str	r7, [r1, #0]
 800e4f0:	bf18      	it	ne
 800e4f2:	2300      	movne	r3, #0
 800e4f4:	eba6 0807 	sub.w	r8, r6, r7
 800e4f8:	608b      	str	r3, [r1, #8]
 800e4fa:	f1b8 0f00 	cmp.w	r8, #0
 800e4fe:	dd9c      	ble.n	800e43a <__sflush_r+0x1a>
 800e500:	6a21      	ldr	r1, [r4, #32]
 800e502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e504:	4643      	mov	r3, r8
 800e506:	463a      	mov	r2, r7
 800e508:	4628      	mov	r0, r5
 800e50a:	47b0      	blx	r6
 800e50c:	2800      	cmp	r0, #0
 800e50e:	dc06      	bgt.n	800e51e <__sflush_r+0xfe>
 800e510:	89a3      	ldrh	r3, [r4, #12]
 800e512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e516:	81a3      	strh	r3, [r4, #12]
 800e518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e51c:	e78e      	b.n	800e43c <__sflush_r+0x1c>
 800e51e:	4407      	add	r7, r0
 800e520:	eba8 0800 	sub.w	r8, r8, r0
 800e524:	e7e9      	b.n	800e4fa <__sflush_r+0xda>
 800e526:	bf00      	nop
 800e528:	20400001 	.word	0x20400001

0800e52c <_fflush_r>:
 800e52c:	b538      	push	{r3, r4, r5, lr}
 800e52e:	690b      	ldr	r3, [r1, #16]
 800e530:	4605      	mov	r5, r0
 800e532:	460c      	mov	r4, r1
 800e534:	b913      	cbnz	r3, 800e53c <_fflush_r+0x10>
 800e536:	2500      	movs	r5, #0
 800e538:	4628      	mov	r0, r5
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	b118      	cbz	r0, 800e546 <_fflush_r+0x1a>
 800e53e:	6983      	ldr	r3, [r0, #24]
 800e540:	b90b      	cbnz	r3, 800e546 <_fflush_r+0x1a>
 800e542:	f000 f887 	bl	800e654 <__sinit>
 800e546:	4b14      	ldr	r3, [pc, #80]	; (800e598 <_fflush_r+0x6c>)
 800e548:	429c      	cmp	r4, r3
 800e54a:	d11b      	bne.n	800e584 <_fflush_r+0x58>
 800e54c:	686c      	ldr	r4, [r5, #4]
 800e54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d0ef      	beq.n	800e536 <_fflush_r+0xa>
 800e556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e558:	07d0      	lsls	r0, r2, #31
 800e55a:	d404      	bmi.n	800e566 <_fflush_r+0x3a>
 800e55c:	0599      	lsls	r1, r3, #22
 800e55e:	d402      	bmi.n	800e566 <_fflush_r+0x3a>
 800e560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e562:	f7ff fcd0 	bl	800df06 <__retarget_lock_acquire_recursive>
 800e566:	4628      	mov	r0, r5
 800e568:	4621      	mov	r1, r4
 800e56a:	f7ff ff59 	bl	800e420 <__sflush_r>
 800e56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e570:	07da      	lsls	r2, r3, #31
 800e572:	4605      	mov	r5, r0
 800e574:	d4e0      	bmi.n	800e538 <_fflush_r+0xc>
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	059b      	lsls	r3, r3, #22
 800e57a:	d4dd      	bmi.n	800e538 <_fflush_r+0xc>
 800e57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e57e:	f7ff fcc3 	bl	800df08 <__retarget_lock_release_recursive>
 800e582:	e7d9      	b.n	800e538 <_fflush_r+0xc>
 800e584:	4b05      	ldr	r3, [pc, #20]	; (800e59c <_fflush_r+0x70>)
 800e586:	429c      	cmp	r4, r3
 800e588:	d101      	bne.n	800e58e <_fflush_r+0x62>
 800e58a:	68ac      	ldr	r4, [r5, #8]
 800e58c:	e7df      	b.n	800e54e <_fflush_r+0x22>
 800e58e:	4b04      	ldr	r3, [pc, #16]	; (800e5a0 <_fflush_r+0x74>)
 800e590:	429c      	cmp	r4, r3
 800e592:	bf08      	it	eq
 800e594:	68ec      	ldreq	r4, [r5, #12]
 800e596:	e7da      	b.n	800e54e <_fflush_r+0x22>
 800e598:	0800ee34 	.word	0x0800ee34
 800e59c:	0800ee54 	.word	0x0800ee54
 800e5a0:	0800ee14 	.word	0x0800ee14

0800e5a4 <std>:
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	b510      	push	{r4, lr}
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	e9c0 3300 	strd	r3, r3, [r0]
 800e5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5b2:	6083      	str	r3, [r0, #8]
 800e5b4:	8181      	strh	r1, [r0, #12]
 800e5b6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5b8:	81c2      	strh	r2, [r0, #14]
 800e5ba:	6183      	str	r3, [r0, #24]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	2208      	movs	r2, #8
 800e5c0:	305c      	adds	r0, #92	; 0x5c
 800e5c2:	f7fd fb5f 	bl	800bc84 <memset>
 800e5c6:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <std+0x38>)
 800e5c8:	6263      	str	r3, [r4, #36]	; 0x24
 800e5ca:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <std+0x3c>)
 800e5cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5ce:	4b05      	ldr	r3, [pc, #20]	; (800e5e4 <std+0x40>)
 800e5d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5d2:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <std+0x44>)
 800e5d4:	6224      	str	r4, [r4, #32]
 800e5d6:	6323      	str	r3, [r4, #48]	; 0x30
 800e5d8:	bd10      	pop	{r4, pc}
 800e5da:	bf00      	nop
 800e5dc:	0800e8f1 	.word	0x0800e8f1
 800e5e0:	0800e913 	.word	0x0800e913
 800e5e4:	0800e94b 	.word	0x0800e94b
 800e5e8:	0800e96f 	.word	0x0800e96f

0800e5ec <_cleanup_r>:
 800e5ec:	4901      	ldr	r1, [pc, #4]	; (800e5f4 <_cleanup_r+0x8>)
 800e5ee:	f000 b8af 	b.w	800e750 <_fwalk_reent>
 800e5f2:	bf00      	nop
 800e5f4:	0800e52d 	.word	0x0800e52d

0800e5f8 <__sfmoreglue>:
 800e5f8:	b570      	push	{r4, r5, r6, lr}
 800e5fa:	2268      	movs	r2, #104	; 0x68
 800e5fc:	1e4d      	subs	r5, r1, #1
 800e5fe:	4355      	muls	r5, r2
 800e600:	460e      	mov	r6, r1
 800e602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e606:	f7fd fbb1 	bl	800bd6c <_malloc_r>
 800e60a:	4604      	mov	r4, r0
 800e60c:	b140      	cbz	r0, 800e620 <__sfmoreglue+0x28>
 800e60e:	2100      	movs	r1, #0
 800e610:	e9c0 1600 	strd	r1, r6, [r0]
 800e614:	300c      	adds	r0, #12
 800e616:	60a0      	str	r0, [r4, #8]
 800e618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e61c:	f7fd fb32 	bl	800bc84 <memset>
 800e620:	4620      	mov	r0, r4
 800e622:	bd70      	pop	{r4, r5, r6, pc}

0800e624 <__sfp_lock_acquire>:
 800e624:	4801      	ldr	r0, [pc, #4]	; (800e62c <__sfp_lock_acquire+0x8>)
 800e626:	f7ff bc6e 	b.w	800df06 <__retarget_lock_acquire_recursive>
 800e62a:	bf00      	nop
 800e62c:	20000b1d 	.word	0x20000b1d

0800e630 <__sfp_lock_release>:
 800e630:	4801      	ldr	r0, [pc, #4]	; (800e638 <__sfp_lock_release+0x8>)
 800e632:	f7ff bc69 	b.w	800df08 <__retarget_lock_release_recursive>
 800e636:	bf00      	nop
 800e638:	20000b1d 	.word	0x20000b1d

0800e63c <__sinit_lock_acquire>:
 800e63c:	4801      	ldr	r0, [pc, #4]	; (800e644 <__sinit_lock_acquire+0x8>)
 800e63e:	f7ff bc62 	b.w	800df06 <__retarget_lock_acquire_recursive>
 800e642:	bf00      	nop
 800e644:	20000b1e 	.word	0x20000b1e

0800e648 <__sinit_lock_release>:
 800e648:	4801      	ldr	r0, [pc, #4]	; (800e650 <__sinit_lock_release+0x8>)
 800e64a:	f7ff bc5d 	b.w	800df08 <__retarget_lock_release_recursive>
 800e64e:	bf00      	nop
 800e650:	20000b1e 	.word	0x20000b1e

0800e654 <__sinit>:
 800e654:	b510      	push	{r4, lr}
 800e656:	4604      	mov	r4, r0
 800e658:	f7ff fff0 	bl	800e63c <__sinit_lock_acquire>
 800e65c:	69a3      	ldr	r3, [r4, #24]
 800e65e:	b11b      	cbz	r3, 800e668 <__sinit+0x14>
 800e660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e664:	f7ff bff0 	b.w	800e648 <__sinit_lock_release>
 800e668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e66c:	6523      	str	r3, [r4, #80]	; 0x50
 800e66e:	4b13      	ldr	r3, [pc, #76]	; (800e6bc <__sinit+0x68>)
 800e670:	4a13      	ldr	r2, [pc, #76]	; (800e6c0 <__sinit+0x6c>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	62a2      	str	r2, [r4, #40]	; 0x28
 800e676:	42a3      	cmp	r3, r4
 800e678:	bf04      	itt	eq
 800e67a:	2301      	moveq	r3, #1
 800e67c:	61a3      	streq	r3, [r4, #24]
 800e67e:	4620      	mov	r0, r4
 800e680:	f000 f820 	bl	800e6c4 <__sfp>
 800e684:	6060      	str	r0, [r4, #4]
 800e686:	4620      	mov	r0, r4
 800e688:	f000 f81c 	bl	800e6c4 <__sfp>
 800e68c:	60a0      	str	r0, [r4, #8]
 800e68e:	4620      	mov	r0, r4
 800e690:	f000 f818 	bl	800e6c4 <__sfp>
 800e694:	2200      	movs	r2, #0
 800e696:	60e0      	str	r0, [r4, #12]
 800e698:	2104      	movs	r1, #4
 800e69a:	6860      	ldr	r0, [r4, #4]
 800e69c:	f7ff ff82 	bl	800e5a4 <std>
 800e6a0:	68a0      	ldr	r0, [r4, #8]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	2109      	movs	r1, #9
 800e6a6:	f7ff ff7d 	bl	800e5a4 <std>
 800e6aa:	68e0      	ldr	r0, [r4, #12]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	2112      	movs	r1, #18
 800e6b0:	f7ff ff78 	bl	800e5a4 <std>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	61a3      	str	r3, [r4, #24]
 800e6b8:	e7d2      	b.n	800e660 <__sinit+0xc>
 800e6ba:	bf00      	nop
 800e6bc:	0800ea98 	.word	0x0800ea98
 800e6c0:	0800e5ed 	.word	0x0800e5ed

0800e6c4 <__sfp>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	4607      	mov	r7, r0
 800e6c8:	f7ff ffac 	bl	800e624 <__sfp_lock_acquire>
 800e6cc:	4b1e      	ldr	r3, [pc, #120]	; (800e748 <__sfp+0x84>)
 800e6ce:	681e      	ldr	r6, [r3, #0]
 800e6d0:	69b3      	ldr	r3, [r6, #24]
 800e6d2:	b913      	cbnz	r3, 800e6da <__sfp+0x16>
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff ffbd 	bl	800e654 <__sinit>
 800e6da:	3648      	adds	r6, #72	; 0x48
 800e6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	d503      	bpl.n	800e6ec <__sfp+0x28>
 800e6e4:	6833      	ldr	r3, [r6, #0]
 800e6e6:	b30b      	cbz	r3, 800e72c <__sfp+0x68>
 800e6e8:	6836      	ldr	r6, [r6, #0]
 800e6ea:	e7f7      	b.n	800e6dc <__sfp+0x18>
 800e6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6f0:	b9d5      	cbnz	r5, 800e728 <__sfp+0x64>
 800e6f2:	4b16      	ldr	r3, [pc, #88]	; (800e74c <__sfp+0x88>)
 800e6f4:	60e3      	str	r3, [r4, #12]
 800e6f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6fa:	6665      	str	r5, [r4, #100]	; 0x64
 800e6fc:	f7ff fc02 	bl	800df04 <__retarget_lock_init_recursive>
 800e700:	f7ff ff96 	bl	800e630 <__sfp_lock_release>
 800e704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e70c:	6025      	str	r5, [r4, #0]
 800e70e:	61a5      	str	r5, [r4, #24]
 800e710:	2208      	movs	r2, #8
 800e712:	4629      	mov	r1, r5
 800e714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e718:	f7fd fab4 	bl	800bc84 <memset>
 800e71c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e724:	4620      	mov	r0, r4
 800e726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e728:	3468      	adds	r4, #104	; 0x68
 800e72a:	e7d9      	b.n	800e6e0 <__sfp+0x1c>
 800e72c:	2104      	movs	r1, #4
 800e72e:	4638      	mov	r0, r7
 800e730:	f7ff ff62 	bl	800e5f8 <__sfmoreglue>
 800e734:	4604      	mov	r4, r0
 800e736:	6030      	str	r0, [r6, #0]
 800e738:	2800      	cmp	r0, #0
 800e73a:	d1d5      	bne.n	800e6e8 <__sfp+0x24>
 800e73c:	f7ff ff78 	bl	800e630 <__sfp_lock_release>
 800e740:	230c      	movs	r3, #12
 800e742:	603b      	str	r3, [r7, #0]
 800e744:	e7ee      	b.n	800e724 <__sfp+0x60>
 800e746:	bf00      	nop
 800e748:	0800ea98 	.word	0x0800ea98
 800e74c:	ffff0001 	.word	0xffff0001

0800e750 <_fwalk_reent>:
 800e750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e754:	4606      	mov	r6, r0
 800e756:	4688      	mov	r8, r1
 800e758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e75c:	2700      	movs	r7, #0
 800e75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e762:	f1b9 0901 	subs.w	r9, r9, #1
 800e766:	d505      	bpl.n	800e774 <_fwalk_reent+0x24>
 800e768:	6824      	ldr	r4, [r4, #0]
 800e76a:	2c00      	cmp	r4, #0
 800e76c:	d1f7      	bne.n	800e75e <_fwalk_reent+0xe>
 800e76e:	4638      	mov	r0, r7
 800e770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e774:	89ab      	ldrh	r3, [r5, #12]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d907      	bls.n	800e78a <_fwalk_reent+0x3a>
 800e77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e77e:	3301      	adds	r3, #1
 800e780:	d003      	beq.n	800e78a <_fwalk_reent+0x3a>
 800e782:	4629      	mov	r1, r5
 800e784:	4630      	mov	r0, r6
 800e786:	47c0      	blx	r8
 800e788:	4307      	orrs	r7, r0
 800e78a:	3568      	adds	r5, #104	; 0x68
 800e78c:	e7e9      	b.n	800e762 <_fwalk_reent+0x12>

0800e78e <__swhatbuf_r>:
 800e78e:	b570      	push	{r4, r5, r6, lr}
 800e790:	460e      	mov	r6, r1
 800e792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e796:	2900      	cmp	r1, #0
 800e798:	b096      	sub	sp, #88	; 0x58
 800e79a:	4614      	mov	r4, r2
 800e79c:	461d      	mov	r5, r3
 800e79e:	da08      	bge.n	800e7b2 <__swhatbuf_r+0x24>
 800e7a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	602a      	str	r2, [r5, #0]
 800e7a8:	061a      	lsls	r2, r3, #24
 800e7aa:	d410      	bmi.n	800e7ce <__swhatbuf_r+0x40>
 800e7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7b0:	e00e      	b.n	800e7d0 <__swhatbuf_r+0x42>
 800e7b2:	466a      	mov	r2, sp
 800e7b4:	f000 f902 	bl	800e9bc <_fstat_r>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	dbf1      	blt.n	800e7a0 <__swhatbuf_r+0x12>
 800e7bc:	9a01      	ldr	r2, [sp, #4]
 800e7be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7c6:	425a      	negs	r2, r3
 800e7c8:	415a      	adcs	r2, r3
 800e7ca:	602a      	str	r2, [r5, #0]
 800e7cc:	e7ee      	b.n	800e7ac <__swhatbuf_r+0x1e>
 800e7ce:	2340      	movs	r3, #64	; 0x40
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	b016      	add	sp, #88	; 0x58
 800e7d6:	bd70      	pop	{r4, r5, r6, pc}

0800e7d8 <__smakebuf_r>:
 800e7d8:	898b      	ldrh	r3, [r1, #12]
 800e7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7dc:	079d      	lsls	r5, r3, #30
 800e7de:	4606      	mov	r6, r0
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	d507      	bpl.n	800e7f4 <__smakebuf_r+0x1c>
 800e7e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	6123      	str	r3, [r4, #16]
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	6163      	str	r3, [r4, #20]
 800e7f0:	b002      	add	sp, #8
 800e7f2:	bd70      	pop	{r4, r5, r6, pc}
 800e7f4:	ab01      	add	r3, sp, #4
 800e7f6:	466a      	mov	r2, sp
 800e7f8:	f7ff ffc9 	bl	800e78e <__swhatbuf_r>
 800e7fc:	9900      	ldr	r1, [sp, #0]
 800e7fe:	4605      	mov	r5, r0
 800e800:	4630      	mov	r0, r6
 800e802:	f7fd fab3 	bl	800bd6c <_malloc_r>
 800e806:	b948      	cbnz	r0, 800e81c <__smakebuf_r+0x44>
 800e808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80c:	059a      	lsls	r2, r3, #22
 800e80e:	d4ef      	bmi.n	800e7f0 <__smakebuf_r+0x18>
 800e810:	f023 0303 	bic.w	r3, r3, #3
 800e814:	f043 0302 	orr.w	r3, r3, #2
 800e818:	81a3      	strh	r3, [r4, #12]
 800e81a:	e7e3      	b.n	800e7e4 <__smakebuf_r+0xc>
 800e81c:	4b0d      	ldr	r3, [pc, #52]	; (800e854 <__smakebuf_r+0x7c>)
 800e81e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e820:	89a3      	ldrh	r3, [r4, #12]
 800e822:	6020      	str	r0, [r4, #0]
 800e824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e828:	81a3      	strh	r3, [r4, #12]
 800e82a:	9b00      	ldr	r3, [sp, #0]
 800e82c:	6163      	str	r3, [r4, #20]
 800e82e:	9b01      	ldr	r3, [sp, #4]
 800e830:	6120      	str	r0, [r4, #16]
 800e832:	b15b      	cbz	r3, 800e84c <__smakebuf_r+0x74>
 800e834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e838:	4630      	mov	r0, r6
 800e83a:	f000 f8d1 	bl	800e9e0 <_isatty_r>
 800e83e:	b128      	cbz	r0, 800e84c <__smakebuf_r+0x74>
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	f023 0303 	bic.w	r3, r3, #3
 800e846:	f043 0301 	orr.w	r3, r3, #1
 800e84a:	81a3      	strh	r3, [r4, #12]
 800e84c:	89a0      	ldrh	r0, [r4, #12]
 800e84e:	4305      	orrs	r5, r0
 800e850:	81a5      	strh	r5, [r4, #12]
 800e852:	e7cd      	b.n	800e7f0 <__smakebuf_r+0x18>
 800e854:	0800e5ed 	.word	0x0800e5ed

0800e858 <_malloc_usable_size_r>:
 800e858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e85c:	1f18      	subs	r0, r3, #4
 800e85e:	2b00      	cmp	r3, #0
 800e860:	bfbc      	itt	lt
 800e862:	580b      	ldrlt	r3, [r1, r0]
 800e864:	18c0      	addlt	r0, r0, r3
 800e866:	4770      	bx	lr

0800e868 <_raise_r>:
 800e868:	291f      	cmp	r1, #31
 800e86a:	b538      	push	{r3, r4, r5, lr}
 800e86c:	4604      	mov	r4, r0
 800e86e:	460d      	mov	r5, r1
 800e870:	d904      	bls.n	800e87c <_raise_r+0x14>
 800e872:	2316      	movs	r3, #22
 800e874:	6003      	str	r3, [r0, #0]
 800e876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e87a:	bd38      	pop	{r3, r4, r5, pc}
 800e87c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e87e:	b112      	cbz	r2, 800e886 <_raise_r+0x1e>
 800e880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e884:	b94b      	cbnz	r3, 800e89a <_raise_r+0x32>
 800e886:	4620      	mov	r0, r4
 800e888:	f000 f830 	bl	800e8ec <_getpid_r>
 800e88c:	462a      	mov	r2, r5
 800e88e:	4601      	mov	r1, r0
 800e890:	4620      	mov	r0, r4
 800e892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e896:	f000 b817 	b.w	800e8c8 <_kill_r>
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d00a      	beq.n	800e8b4 <_raise_r+0x4c>
 800e89e:	1c59      	adds	r1, r3, #1
 800e8a0:	d103      	bne.n	800e8aa <_raise_r+0x42>
 800e8a2:	2316      	movs	r3, #22
 800e8a4:	6003      	str	r3, [r0, #0]
 800e8a6:	2001      	movs	r0, #1
 800e8a8:	e7e7      	b.n	800e87a <_raise_r+0x12>
 800e8aa:	2400      	movs	r4, #0
 800e8ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	4798      	blx	r3
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	e7e0      	b.n	800e87a <_raise_r+0x12>

0800e8b8 <raise>:
 800e8b8:	4b02      	ldr	r3, [pc, #8]	; (800e8c4 <raise+0xc>)
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	6818      	ldr	r0, [r3, #0]
 800e8be:	f7ff bfd3 	b.w	800e868 <_raise_r>
 800e8c2:	bf00      	nop
 800e8c4:	2000002c 	.word	0x2000002c

0800e8c8 <_kill_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4d07      	ldr	r5, [pc, #28]	; (800e8e8 <_kill_r+0x20>)
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	602b      	str	r3, [r5, #0]
 800e8d6:	f7f4 fa15 	bl	8002d04 <_kill>
 800e8da:	1c43      	adds	r3, r0, #1
 800e8dc:	d102      	bne.n	800e8e4 <_kill_r+0x1c>
 800e8de:	682b      	ldr	r3, [r5, #0]
 800e8e0:	b103      	cbz	r3, 800e8e4 <_kill_r+0x1c>
 800e8e2:	6023      	str	r3, [r4, #0]
 800e8e4:	bd38      	pop	{r3, r4, r5, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20000b18 	.word	0x20000b18

0800e8ec <_getpid_r>:
 800e8ec:	f7f4 ba02 	b.w	8002cf4 <_getpid>

0800e8f0 <__sread>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f8:	f000 f894 	bl	800ea24 <_read_r>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	bfab      	itete	ge
 800e900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e902:	89a3      	ldrhlt	r3, [r4, #12]
 800e904:	181b      	addge	r3, r3, r0
 800e906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e90a:	bfac      	ite	ge
 800e90c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e90e:	81a3      	strhlt	r3, [r4, #12]
 800e910:	bd10      	pop	{r4, pc}

0800e912 <__swrite>:
 800e912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e916:	461f      	mov	r7, r3
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	05db      	lsls	r3, r3, #23
 800e91c:	4605      	mov	r5, r0
 800e91e:	460c      	mov	r4, r1
 800e920:	4616      	mov	r6, r2
 800e922:	d505      	bpl.n	800e930 <__swrite+0x1e>
 800e924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e928:	2302      	movs	r3, #2
 800e92a:	2200      	movs	r2, #0
 800e92c:	f000 f868 	bl	800ea00 <_lseek_r>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	4632      	mov	r2, r6
 800e93e:	463b      	mov	r3, r7
 800e940:	4628      	mov	r0, r5
 800e942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e946:	f000 b817 	b.w	800e978 <_write_r>

0800e94a <__sseek>:
 800e94a:	b510      	push	{r4, lr}
 800e94c:	460c      	mov	r4, r1
 800e94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e952:	f000 f855 	bl	800ea00 <_lseek_r>
 800e956:	1c43      	adds	r3, r0, #1
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	bf15      	itete	ne
 800e95c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e95e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e966:	81a3      	strheq	r3, [r4, #12]
 800e968:	bf18      	it	ne
 800e96a:	81a3      	strhne	r3, [r4, #12]
 800e96c:	bd10      	pop	{r4, pc}

0800e96e <__sclose>:
 800e96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e972:	f000 b813 	b.w	800e99c <_close_r>
	...

0800e978 <_write_r>:
 800e978:	b538      	push	{r3, r4, r5, lr}
 800e97a:	4d07      	ldr	r5, [pc, #28]	; (800e998 <_write_r+0x20>)
 800e97c:	4604      	mov	r4, r0
 800e97e:	4608      	mov	r0, r1
 800e980:	4611      	mov	r1, r2
 800e982:	2200      	movs	r2, #0
 800e984:	602a      	str	r2, [r5, #0]
 800e986:	461a      	mov	r2, r3
 800e988:	f7f4 f9f3 	bl	8002d72 <_write>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d102      	bne.n	800e996 <_write_r+0x1e>
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	b103      	cbz	r3, 800e996 <_write_r+0x1e>
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	20000b18 	.word	0x20000b18

0800e99c <_close_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4d06      	ldr	r5, [pc, #24]	; (800e9b8 <_close_r+0x1c>)
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	602b      	str	r3, [r5, #0]
 800e9a8:	f7f4 f9ff 	bl	8002daa <_close>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d102      	bne.n	800e9b6 <_close_r+0x1a>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	b103      	cbz	r3, 800e9b6 <_close_r+0x1a>
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	bd38      	pop	{r3, r4, r5, pc}
 800e9b8:	20000b18 	.word	0x20000b18

0800e9bc <_fstat_r>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4d07      	ldr	r5, [pc, #28]	; (800e9dc <_fstat_r+0x20>)
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	602b      	str	r3, [r5, #0]
 800e9ca:	f7f4 f9fa 	bl	8002dc2 <_fstat>
 800e9ce:	1c43      	adds	r3, r0, #1
 800e9d0:	d102      	bne.n	800e9d8 <_fstat_r+0x1c>
 800e9d2:	682b      	ldr	r3, [r5, #0]
 800e9d4:	b103      	cbz	r3, 800e9d8 <_fstat_r+0x1c>
 800e9d6:	6023      	str	r3, [r4, #0]
 800e9d8:	bd38      	pop	{r3, r4, r5, pc}
 800e9da:	bf00      	nop
 800e9dc:	20000b18 	.word	0x20000b18

0800e9e0 <_isatty_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d06      	ldr	r5, [pc, #24]	; (800e9fc <_isatty_r+0x1c>)
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	602b      	str	r3, [r5, #0]
 800e9ec:	f7f4 f9f9 	bl	8002de2 <_isatty>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_isatty_r+0x1a>
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_isatty_r+0x1a>
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	20000b18 	.word	0x20000b18

0800ea00 <_lseek_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	4d07      	ldr	r5, [pc, #28]	; (800ea20 <_lseek_r+0x20>)
 800ea04:	4604      	mov	r4, r0
 800ea06:	4608      	mov	r0, r1
 800ea08:	4611      	mov	r1, r2
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	602a      	str	r2, [r5, #0]
 800ea0e:	461a      	mov	r2, r3
 800ea10:	f7f4 f9f2 	bl	8002df8 <_lseek>
 800ea14:	1c43      	adds	r3, r0, #1
 800ea16:	d102      	bne.n	800ea1e <_lseek_r+0x1e>
 800ea18:	682b      	ldr	r3, [r5, #0]
 800ea1a:	b103      	cbz	r3, 800ea1e <_lseek_r+0x1e>
 800ea1c:	6023      	str	r3, [r4, #0]
 800ea1e:	bd38      	pop	{r3, r4, r5, pc}
 800ea20:	20000b18 	.word	0x20000b18

0800ea24 <_read_r>:
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	4d07      	ldr	r5, [pc, #28]	; (800ea44 <_read_r+0x20>)
 800ea28:	4604      	mov	r4, r0
 800ea2a:	4608      	mov	r0, r1
 800ea2c:	4611      	mov	r1, r2
 800ea2e:	2200      	movs	r2, #0
 800ea30:	602a      	str	r2, [r5, #0]
 800ea32:	461a      	mov	r2, r3
 800ea34:	f7f4 f980 	bl	8002d38 <_read>
 800ea38:	1c43      	adds	r3, r0, #1
 800ea3a:	d102      	bne.n	800ea42 <_read_r+0x1e>
 800ea3c:	682b      	ldr	r3, [r5, #0]
 800ea3e:	b103      	cbz	r3, 800ea42 <_read_r+0x1e>
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	20000b18 	.word	0x20000b18

0800ea48 <_init>:
 800ea48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea4a:	bf00      	nop
 800ea4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea4e:	bc08      	pop	{r3}
 800ea50:	469e      	mov	lr, r3
 800ea52:	4770      	bx	lr

0800ea54 <_fini>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	bf00      	nop
 800ea58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5a:	bc08      	pop	{r3}
 800ea5c:	469e      	mov	lr, r3
 800ea5e:	4770      	bx	lr
