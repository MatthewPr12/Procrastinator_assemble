
Procrastinator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d860  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800da00  0800da00  0001da00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de2c  0800de2c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800de2c  0800de2c  0001de2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de34  0800de34  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de34  0800de34  0001de34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de38  0800de38  0001de38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800de3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  200001fc  0800e038  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  0800e038  00020b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b99a  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f2  00000000  00000000  0003bbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000401b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  00041678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6e5  00000000  00000000  00042978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de92  00000000  00000000  0005e05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000923c0  00000000  00000000  0007beef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e2af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006734  00000000  00000000  0010e300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d9e8 	.word	0x0800d9e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800d9e8 	.word	0x0800d9e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2319      	movs	r3, #25
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	463b      	mov	r3, r7
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2288      	movs	r2, #136	; 0x88
 8001014:	21ec      	movs	r1, #236	; 0xec
 8001016:	4857      	ldr	r0, [pc, #348]	; (8001174 <TrimRead+0x178>)
 8001018:	f003 fd6a 	bl	8004af0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 800101c:	463b      	mov	r3, r7
 800101e:	3319      	adds	r3, #25
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	9202      	str	r2, [sp, #8]
 8001026:	2207      	movs	r2, #7
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	22e1      	movs	r2, #225	; 0xe1
 8001030:	21ec      	movs	r1, #236	; 0xec
 8001032:	4850      	ldr	r0, [pc, #320]	; (8001174 <TrimRead+0x178>)
 8001034:	f003 fd5c 	bl	8004af0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	783b      	ldrb	r3, [r7, #0]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <TrimRead+0x17c>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b48      	ldr	r3, [pc, #288]	; (800117c <TrimRead+0x180>)
 800105c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <TrimRead+0x184>)
 800106e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b40      	ldr	r3, [pc, #256]	; (8001184 <TrimRead+0x188>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001084:	7a7b      	ldrb	r3, [r7, #9]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <TrimRead+0x18c>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <TrimRead+0x190>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <TrimRead+0x194>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <TrimRead+0x198>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7c3b      	ldrb	r3, [r7, #16]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <TrimRead+0x19c>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010de:	7cfb      	ldrb	r3, [r7, #19]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7cbb      	ldrb	r3, [r7, #18]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <TrimRead+0x1a0>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	7d3b      	ldrb	r3, [r7, #20]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <TrimRead+0x1a4>)
 8001100:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <TrimRead+0x1a8>)
 8001112:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001114:	7e3b      	ldrb	r3, [r7, #24]
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <TrimRead+0x1ac>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 800111c:	7ebb      	ldrb	r3, [r7, #26]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7e7b      	ldrb	r3, [r7, #25]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <TrimRead+0x1b0>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800112e:	7efb      	ldrb	r3, [r7, #27]
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <TrimRead+0x1b4>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001136:	7f3b      	ldrb	r3, [r7, #28]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b21a      	sxth	r2, r3
 800113c:	7f7b      	ldrb	r3, [r7, #29]
 800113e:	b21b      	sxth	r3, r3
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <TrimRead+0x1b8>)
 800114c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800114e:	7fbb      	ldrb	r3, [r7, #30]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	b21a      	sxth	r2, r3
 8001154:	7f7b      	ldrb	r3, [r7, #29]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <TrimRead+0x1bc>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <TrimRead+0x1c0>)
 800116a:	801a      	strh	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000250 	.word	0x20000250
 8001178:	20000228 	.word	0x20000228
 800117c:	20000230 	.word	0x20000230
 8001180:	20000232 	.word	0x20000232
 8001184:	2000022a 	.word	0x2000022a
 8001188:	20000234 	.word	0x20000234
 800118c:	20000236 	.word	0x20000236
 8001190:	20000238 	.word	0x20000238
 8001194:	2000023a 	.word	0x2000023a
 8001198:	2000023c 	.word	0x2000023c
 800119c:	2000023e 	.word	0x2000023e
 80011a0:	20000240 	.word	0x20000240
 80011a4:	20000242 	.word	0x20000242
 80011a8:	2000022c 	.word	0x2000022c
 80011ac:	20000244 	.word	0x20000244
 80011b0:	2000022e 	.word	0x2000022e
 80011b4:	20000246 	.word	0x20000246
 80011b8:	20000248 	.word	0x20000248
 80011bc:	2000024a 	.word	0x2000024a

080011c0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4603      	mov	r3, r0
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	460b      	mov	r3, r1
 80011d8:	717b      	strb	r3, [r7, #5]
 80011da:	4613      	mov	r3, r2
 80011dc:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011de:	f7ff ff0d 	bl	8000ffc <TrimRead>


	uint8_t datatowrite = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011ea:	23b6      	movs	r3, #182	; 0xb6
 80011ec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	22e0      	movs	r2, #224	; 0xe0
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	4858      	ldr	r0, [pc, #352]	; (8001368 <BME280_Config+0x1a8>)
 8001206:	f003 fb79 	bl	80048fc <HAL_I2C_Mem_Write>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <BME280_Config+0x56>
	{
		return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001214:	e0a3      	b.n	800135e <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f001 fb4e 	bl	80028b8 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f107 030f 	add.w	r3, r7, #15
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	22f2      	movs	r2, #242	; 0xf2
 8001234:	21ec      	movs	r1, #236	; 0xec
 8001236:	484c      	ldr	r0, [pc, #304]	; (8001368 <BME280_Config+0x1a8>)
 8001238:	f003 fb60 	bl	80048fc <HAL_I2C_Mem_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <BME280_Config+0x88>
	{
		return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	e08a      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001248:	2064      	movs	r0, #100	; 0x64
 800124a:	f001 fb35 	bl	80028b8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030e 	add.w	r3, r7, #14
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	22f2      	movs	r2, #242	; 0xf2
 8001262:	21ec      	movs	r1, #236	; 0xec
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <BME280_Config+0x1a8>)
 8001266:	f003 fc43 	bl	8004af0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800126a:	7bba      	ldrb	r2, [r7, #14]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	429a      	cmp	r2, r3
 8001270:	d002      	beq.n	8001278 <BME280_Config+0xb8>
	{
		return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001276:	e072      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001278:	f897 3020 	ldrb.w	r3, [r7, #32]
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	b25a      	sxtb	r2, r3
 8001280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	22f5      	movs	r2, #245	; 0xf5
 80012a4:	21ec      	movs	r1, #236	; 0xec
 80012a6:	4830      	ldr	r0, [pc, #192]	; (8001368 <BME280_Config+0x1a8>)
 80012a8:	f003 fb28 	bl	80048fc <HAL_I2C_Mem_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <BME280_Config+0xf8>
	{
		return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	e052      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f001 fafd 	bl	80028b8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f107 030e 	add.w	r3, r7, #14
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	22f5      	movs	r2, #245	; 0xf5
 80012d2:	21ec      	movs	r1, #236	; 0xec
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <BME280_Config+0x1a8>)
 80012d6:	f003 fc0b 	bl	8004af0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012da:	7bba      	ldrb	r2, [r7, #14]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d002      	beq.n	80012e8 <BME280_Config+0x128>
	{
		return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e6:	e03a      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030f 	add.w	r3, r7, #15
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f4      	movs	r2, #244	; 0xf4
 8001318:	21ec      	movs	r1, #236	; 0xec
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <BME280_Config+0x1a8>)
 800131c:	f003 faee 	bl	80048fc <HAL_I2C_Mem_Write>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <BME280_Config+0x16c>
	{
		return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	e018      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f001 fac3 	bl	80028b8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030e 	add.w	r3, r7, #14
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	22f4      	movs	r2, #244	; 0xf4
 8001346:	21ec      	movs	r1, #236	; 0xec
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <BME280_Config+0x1a8>)
 800134a:	f003 fbd1 	bl	8004af0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	429a      	cmp	r2, r3
 8001354:	d002      	beq.n	800135c <BME280_Config+0x19c>
	{
		return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135a:	e000      	b.n	800135e <BME280_Config+0x19e>
	}

	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000250 	.word	0x20000250

0800136c <BMEReadRaw>:


int BMEReadRaw(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2301      	movs	r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <BMEReadRaw+0x8c>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	22d0      	movs	r2, #208	; 0xd0
 8001384:	21ec      	movs	r1, #236	; 0xec
 8001386:	481d      	ldr	r0, [pc, #116]	; (80013fc <BMEReadRaw+0x90>)
 8001388:	f003 fbb2 	bl	8004af0 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <BMEReadRaw+0x8c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b60      	cmp	r3, #96	; 0x60
 8001392:	d12a      	bne.n	80013ea <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2308      	movs	r3, #8
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	463b      	mov	r3, r7
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	22f7      	movs	r2, #247	; 0xf7
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <BMEReadRaw+0x90>)
 80013aa:	f003 fba1 	bl	8004af0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013ae:	783b      	ldrb	r3, [r7, #0]
 80013b0:	031a      	lsls	r2, r3, #12
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4313      	orrs	r3, r2
 80013b8:	78ba      	ldrb	r2, [r7, #2]
 80013ba:	0912      	lsrs	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	4313      	orrs	r3, r2
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <BMEReadRaw+0x94>)
 80013c2:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	031a      	lsls	r2, r3, #12
 80013c8:	793b      	ldrb	r3, [r7, #4]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4313      	orrs	r3, r2
 80013ce:	797a      	ldrb	r2, [r7, #5]
 80013d0:	0912      	lsrs	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	4313      	orrs	r3, r2
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <BMEReadRaw+0x98>)
 80013d8:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <BMEReadRaw+0x9c>)
 80013e4:	6013      	str	r3, [r2, #0]

		return 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e001      	b.n	80013ee <BMEReadRaw+0x82>
	}

	else return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000218 	.word	0x20000218
 80013fc:	20000250 	.word	0x20000250
 8001400:	20000220 	.word	0x20000220
 8001404:	2000021c 	.word	0x2000021c
 8001408:	20000224 	.word	0x20000224

0800140c <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	10da      	asrs	r2, r3, #3
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <BME280_compensate_T_int32+0x78>)
 8001422:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	12db      	asrs	r3, r3, #11
 800142c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	111b      	asrs	r3, r3, #4
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <BME280_compensate_T_int32+0x74>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	1112      	asrs	r2, r2, #4
 800143c:	4910      	ldr	r1, [pc, #64]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	1a52      	subs	r2, r2, r1
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	131b      	asrs	r3, r3, #12
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <BME280_compensate_T_int32+0x7c>)
 800144a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	139b      	asrs	r3, r3, #14
 8001454:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4413      	add	r3, r2
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <BME280_compensate_T_int32+0x80>)
 800145e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <BME280_compensate_T_int32+0x80>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3380      	adds	r3, #128	; 0x80
 800146c:	121b      	asrs	r3, r3, #8
 800146e:	60fb      	str	r3, [r7, #12]
	return T;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	4618      	mov	r0, r3
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000228 	.word	0x20000228
 8001484:	20000230 	.word	0x20000230
 8001488:	20000232 	.word	0x20000232
 800148c:	2000024c 	.word	0x2000024c

08001490 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001494:	b0ca      	sub	sp, #296	; 0x128
 8001496:	af00      	add	r7, sp, #0
 8001498:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800149c:	4baf      	ldr	r3, [pc, #700]	; (800175c <BME280_compensate_P_int64+0x2cc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	17da      	asrs	r2, r3, #31
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014aa:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 80014ae:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ba:	fb03 f102 	mul.w	r1, r3, r2
 80014be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	18ca      	adds	r2, r1, r3
 80014cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d0:	fba3 8903 	umull	r8, r9, r3, r3
 80014d4:	eb02 0309 	add.w	r3, r2, r9
 80014d8:	4699      	mov	r9, r3
 80014da:	4ba1      	ldr	r3, [pc, #644]	; (8001760 <BME280_compensate_P_int64+0x2d0>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014f0:	4603      	mov	r3, r0
 80014f2:	fb03 f209 	mul.w	r2, r3, r9
 80014f6:	460b      	mov	r3, r1
 80014f8:	fb08 f303 	mul.w	r3, r8, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	4602      	mov	r2, r0
 8001500:	fba8 1202 	umull	r1, r2, r8, r2
 8001504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001508:	460a      	mov	r2, r1
 800150a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800150e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001512:	4413      	add	r3, r2
 8001514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001518:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800151c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001520:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001524:	4b8f      	ldr	r3, [pc, #572]	; (8001764 <BME280_compensate_P_int64+0x2d4>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	b21b      	sxth	r3, r3
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001532:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001536:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800153e:	462a      	mov	r2, r5
 8001540:	fb02 f203 	mul.w	r2, r2, r3
 8001544:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001548:	4621      	mov	r1, r4
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	441a      	add	r2, r3
 8001550:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001554:	4621      	mov	r1, r4
 8001556:	fba3 1301 	umull	r1, r3, r3, r1
 800155a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800155e:	460b      	mov	r3, r1
 8001560:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800157a:	462b      	mov	r3, r5
 800157c:	0459      	lsls	r1, r3, #17
 800157e:	4623      	mov	r3, r4
 8001580:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001584:	4623      	mov	r3, r4
 8001586:	0458      	lsls	r0, r3, #17
 8001588:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800158c:	1814      	adds	r4, r2, r0
 800158e:	643c      	str	r4, [r7, #64]	; 0x40
 8001590:	414b      	adcs	r3, r1
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
 8001594:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001598:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <BME280_compensate_P_int64+0x2d8>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	17da      	asrs	r2, r3, #31
 80015a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ba:	00d9      	lsls	r1, r3, #3
 80015bc:	2000      	movs	r0, #0
 80015be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015c2:	1814      	adds	r4, r2, r0
 80015c4:	63bc      	str	r4, [r7, #56]	; 0x38
 80015c6:	414b      	adcs	r3, r1
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ca:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015da:	fb03 f102 	mul.w	r1, r3, r2
 80015de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	18ca      	adds	r2, r1, r3
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f0:	fba3 1303 	umull	r1, r3, r3, r3
 80015f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015f8:	460b      	mov	r3, r1
 80015fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <BME280_compensate_P_int64+0x2dc>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b21b      	sxth	r3, r3
 8001610:	17da      	asrs	r2, r3, #31
 8001612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001616:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800161a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800161e:	462b      	mov	r3, r5
 8001620:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001624:	4642      	mov	r2, r8
 8001626:	fb02 f203 	mul.w	r2, r2, r3
 800162a:	464b      	mov	r3, r9
 800162c:	4621      	mov	r1, r4
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	4622      	mov	r2, r4
 8001636:	4641      	mov	r1, r8
 8001638:	fba2 1201 	umull	r1, r2, r2, r1
 800163c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001640:	460a      	mov	r2, r1
 8001642:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001646:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800164a:	4413      	add	r3, r2
 800164c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800165c:	4623      	mov	r3, r4
 800165e:	0a18      	lsrs	r0, r3, #8
 8001660:	462b      	mov	r3, r5
 8001662:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001666:	462b      	mov	r3, r5
 8001668:	1219      	asrs	r1, r3, #8
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <BME280_compensate_P_int64+0x2e0>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001678:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800167c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001680:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001684:	464a      	mov	r2, r9
 8001686:	fb02 f203 	mul.w	r2, r2, r3
 800168a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800168e:	4644      	mov	r4, r8
 8001690:	fb04 f303 	mul.w	r3, r4, r3
 8001694:	441a      	add	r2, r3
 8001696:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169a:	4644      	mov	r4, r8
 800169c:	fba3 4304 	umull	r4, r3, r3, r4
 80016a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016a4:	4623      	mov	r3, r4
 80016a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016c0:	464c      	mov	r4, r9
 80016c2:	0323      	lsls	r3, r4, #12
 80016c4:	4644      	mov	r4, r8
 80016c6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016ca:	4644      	mov	r4, r8
 80016cc:	0322      	lsls	r2, r4, #12
 80016ce:	1884      	adds	r4, r0, r2
 80016d0:	633c      	str	r4, [r7, #48]	; 0x30
 80016d2:	eb41 0303 	adc.w	r3, r1, r3
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
 80016d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016e4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016e8:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <BME280_compensate_P_int64+0x2e4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001700:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001704:	462b      	mov	r3, r5
 8001706:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800170a:	4642      	mov	r2, r8
 800170c:	fb02 f203 	mul.w	r2, r2, r3
 8001710:	464b      	mov	r3, r9
 8001712:	4621      	mov	r1, r4
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	4622      	mov	r2, r4
 800171c:	4641      	mov	r1, r8
 800171e:	fba2 1201 	umull	r1, r2, r2, r1
 8001722:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001726:	460a      	mov	r2, r1
 8001728:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800172c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001730:	4413      	add	r3, r2
 8001732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001742:	4629      	mov	r1, r5
 8001744:	104a      	asrs	r2, r1, #1
 8001746:	4629      	mov	r1, r5
 8001748:	17cb      	asrs	r3, r1, #31
 800174a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800174e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001752:	4313      	orrs	r3, r2
 8001754:	d110      	bne.n	8001778 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001756:	2300      	movs	r3, #0
 8001758:	e154      	b.n	8001a04 <BME280_compensate_P_int64+0x574>
 800175a:	bf00      	nop
 800175c:	2000024c 	.word	0x2000024c
 8001760:	2000023c 	.word	0x2000023c
 8001764:	2000023a 	.word	0x2000023a
 8001768:	20000238 	.word	0x20000238
 800176c:	20000236 	.word	0x20000236
 8001770:	20000234 	.word	0x20000234
 8001774:	2000022a 	.word	0x2000022a
	}
	p = 1048576-adc_P;
 8001778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800177c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
 8001784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001786:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800178a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800178e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001792:	105b      	asrs	r3, r3, #1
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001798:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800179c:	07db      	lsls	r3, r3, #31
 800179e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017aa:	4621      	mov	r1, r4
 80017ac:	1a89      	subs	r1, r1, r2
 80017ae:	67b9      	str	r1, [r7, #120]	; 0x78
 80017b0:	4629      	mov	r1, r5
 80017b2:	eb61 0303 	sbc.w	r3, r1, r3
 80017b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017b8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017bc:	4622      	mov	r2, r4
 80017be:	462b      	mov	r3, r5
 80017c0:	1891      	adds	r1, r2, r2
 80017c2:	6239      	str	r1, [r7, #32]
 80017c4:	415b      	adcs	r3, r3
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017cc:	4621      	mov	r1, r4
 80017ce:	1851      	adds	r1, r2, r1
 80017d0:	61b9      	str	r1, [r7, #24]
 80017d2:	4629      	mov	r1, r5
 80017d4:	414b      	adcs	r3, r1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017e4:	4649      	mov	r1, r9
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4641      	mov	r1, r8
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	1889      	adds	r1, r1, r2
 80017f6:	6139      	str	r1, [r7, #16]
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb43 0101 	adc.w	r1, r3, r1
 80017fe:	6179      	str	r1, [r7, #20]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800180c:	4649      	mov	r1, r9
 800180e:	008b      	lsls	r3, r1, #2
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001816:	4641      	mov	r1, r8
 8001818:	008a      	lsls	r2, r1, #2
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4603      	mov	r3, r0
 8001820:	4622      	mov	r2, r4
 8001822:	189b      	adds	r3, r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	460b      	mov	r3, r1
 8001828:	462a      	mov	r2, r5
 800182a:	eb42 0303 	adc.w	r3, r2, r3
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800183c:	4649      	mov	r1, r9
 800183e:	008b      	lsls	r3, r1, #2
 8001840:	4641      	mov	r1, r8
 8001842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001846:	4641      	mov	r1, r8
 8001848:	008a      	lsls	r2, r1, #2
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	4603      	mov	r3, r0
 8001850:	4622      	mov	r2, r4
 8001852:	189b      	adds	r3, r3, r2
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
 8001856:	462b      	mov	r3, r5
 8001858:	460a      	mov	r2, r1
 800185a:	eb42 0303 	adc.w	r3, r2, r3
 800185e:	677b      	str	r3, [r7, #116]	; 0x74
 8001860:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001864:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001868:	f7ff f9f6 	bl	8000c58 <__aeabi_ldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <BME280_compensate_P_int64+0x580>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	b21b      	sxth	r3, r3
 800187c:	17da      	asrs	r2, r3, #31
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001880:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001882:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0b50      	lsrs	r0, r2, #13
 8001890:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001894:	1359      	asrs	r1, r3, #13
 8001896:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800189a:	462b      	mov	r3, r5
 800189c:	fb00 f203 	mul.w	r2, r0, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	fb03 f301 	mul.w	r3, r3, r1
 80018a6:	4413      	add	r3, r2
 80018a8:	4622      	mov	r2, r4
 80018aa:	fba2 1200 	umull	r1, r2, r2, r0
 80018ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018b2:	460a      	mov	r2, r1
 80018b4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018bc:	4413      	add	r3, r2
 80018be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0b50      	lsrs	r0, r2, #13
 80018d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018d4:	1359      	asrs	r1, r3, #13
 80018d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018da:	462b      	mov	r3, r5
 80018dc:	fb00 f203 	mul.w	r2, r0, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	fb03 f301 	mul.w	r3, r3, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	fba2 1200 	umull	r1, r2, r2, r0
 80018ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018f2:	460a      	mov	r2, r1
 80018f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018fc:	4413      	add	r3, r2
 80018fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800190e:	4621      	mov	r1, r4
 8001910:	0e4a      	lsrs	r2, r1, #25
 8001912:	4629      	mov	r1, r5
 8001914:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001918:	4629      	mov	r1, r5
 800191a:	164b      	asrs	r3, r1, #25
 800191c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <BME280_compensate_P_int64+0x584>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	663b      	str	r3, [r7, #96]	; 0x60
 800192c:	667a      	str	r2, [r7, #100]	; 0x64
 800192e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001932:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001936:	462a      	mov	r2, r5
 8001938:	fb02 f203 	mul.w	r2, r2, r3
 800193c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001940:	4621      	mov	r1, r4
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800194c:	4621      	mov	r1, r4
 800194e:	fba2 1201 	umull	r1, r2, r2, r1
 8001952:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001956:	460a      	mov	r2, r1
 8001958:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800195c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001960:	4413      	add	r3, r2
 8001962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001972:	4621      	mov	r1, r4
 8001974:	0cca      	lsrs	r2, r1, #19
 8001976:	4629      	mov	r1, r5
 8001978:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800197c:	4629      	mov	r1, r5
 800197e:	14cb      	asrs	r3, r1, #19
 8001980:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001984:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001988:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800198c:	1884      	adds	r4, r0, r2
 800198e:	65bc      	str	r4, [r7, #88]	; 0x58
 8001990:	eb41 0303 	adc.w	r3, r1, r3
 8001994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001996:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800199a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800199e:	4621      	mov	r1, r4
 80019a0:	1889      	adds	r1, r1, r2
 80019a2:	6539      	str	r1, [r7, #80]	; 0x50
 80019a4:	4629      	mov	r1, r5
 80019a6:	eb43 0101 	adc.w	r1, r3, r1
 80019aa:	6579      	str	r1, [r7, #84]	; 0x54
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019b8:	4623      	mov	r3, r4
 80019ba:	0a18      	lsrs	r0, r3, #8
 80019bc:	462b      	mov	r3, r5
 80019be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019c2:	462b      	mov	r3, r5
 80019c4:	1219      	asrs	r1, r3, #8
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <BME280_compensate_P_int64+0x588>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019e0:	464c      	mov	r4, r9
 80019e2:	0123      	lsls	r3, r4, #4
 80019e4:	4644      	mov	r4, r8
 80019e6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019ea:	4644      	mov	r4, r8
 80019ec:	0122      	lsls	r2, r4, #4
 80019ee:	1884      	adds	r4, r0, r2
 80019f0:	603c      	str	r4, [r7, #0]
 80019f2:	eb41 0303 	adc.w	r3, r1, r3
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019fc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a10:	20000242 	.word	0x20000242
 8001a14:	20000240 	.word	0x20000240
 8001a18:	2000023e 	.word	0x2000023e

08001a1c <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <bme280_compensate_H_int32+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a2c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	039a      	lsls	r2, r3, #14
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <bme280_compensate_H_int32+0xc0>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <bme280_compensate_H_int32+0xc4>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	4619      	mov	r1, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a50:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a52:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <bme280_compensate_H_int32+0xc8>)
 8001a54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a58:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a60:	1292      	asrs	r2, r2, #10
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <bme280_compensate_H_int32+0xcc>)
 8001a64:	8809      	ldrh	r1, [r1, #0]
 8001a66:	4608      	mov	r0, r1
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	fb00 f101 	mul.w	r1, r0, r1
 8001a6e:	12c9      	asrs	r1, r1, #11
 8001a70:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a74:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a78:	1292      	asrs	r2, r2, #10
 8001a7a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a7e:	491b      	ldr	r1, [pc, #108]	; (8001aec <bme280_compensate_H_int32+0xd0>)
 8001a80:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a84:	fb01 f202 	mul.w	r2, r1, r2
 8001a88:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a8c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	13db      	asrs	r3, r3, #15
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	13d2      	asrs	r2, r2, #15
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <bme280_compensate_H_int32+0xd4>)
 8001aa4:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001aaa:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ab8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ac0:	bfa8      	it	ge
 8001ac2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001ac6:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	131b      	asrs	r3, r3, #12
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	2000024c 	.word	0x2000024c
 8001adc:	20000246 	.word	0x20000246
 8001ae0:	20000248 	.word	0x20000248
 8001ae4:	2000024a 	.word	0x2000024a
 8001ae8:	2000022e 	.word	0x2000022e
 8001aec:	20000244 	.word	0x20000244
 8001af0:	2000022c 	.word	0x2000022c

08001af4 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001af8:	f7ff fc38 	bl	800136c <BMEReadRaw>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d163      	bne.n	8001bca <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <BME280_Measure+0xf4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b0a:	d104      	bne.n	8001b16 <BME280_Measure+0x22>
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <BME280_Measure+0xf8>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e016      	b.n	8001b44 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <BME280_Measure+0xf4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc76 	bl	800140c <BME280_compensate_T_int32>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd06 	bl	8000534 <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <BME280_Measure+0xfc>)
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f83d 	bl	8000bb8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <BME280_Measure+0xf8>)
 8001b42:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <BME280_Measure+0x100>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b4c:	d104      	bne.n	8001b58 <BME280_Measure+0x64>
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <BME280_Measure+0x104>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e016      	b.n	8001b86 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <BME280_Measure+0x100>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc97 	bl	8001490 <BME280_compensate_P_int64>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcd5 	bl	8000514 <__aeabi_ui2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <BME280_Measure+0x108>)
 8001b70:	f7fe fe74 	bl	800085c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f81c 	bl	8000bb8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <BME280_Measure+0x104>)
 8001b84:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <BME280_Measure+0x10c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	d104      	bne.n	8001b9a <BME280_Measure+0xa6>
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <BME280_Measure+0x110>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001b98:	e023      	b.n	8001be2 <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <BME280_Measure+0x10c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff3c 	bl	8001a1c <bme280_compensate_H_int32>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcb4 	bl	8000514 <__aeabi_ui2d>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <BME280_Measure+0x114>)
 8001bb2:	f7fe fe53 	bl	800085c <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe fffb 	bl	8000bb8 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <BME280_Measure+0x110>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	e00b      	b.n	8001be2 <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <BME280_Measure+0x110>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <BME280_Measure+0x110>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <BME280_Measure+0x104>)
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <BME280_Measure+0x104>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <BME280_Measure+0xf8>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000021c 	.word	0x2000021c
 8001bec:	20000378 	.word	0x20000378
 8001bf0:	40590000 	.word	0x40590000
 8001bf4:	20000220 	.word	0x20000220
 8001bf8:	2000037c 	.word	0x2000037c
 8001bfc:	40700000 	.word	0x40700000
 8001c00:	20000224 	.word	0x20000224
 8001c04:	20000380 	.word	0x20000380
 8001c08:	40900000 	.word	0x40900000

08001c0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a60      	ldr	r2, [pc, #384]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a59      	ldr	r2, [pc, #356]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a52      	ldr	r2, [pc, #328]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b50      	ldr	r3, [pc, #320]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b45      	ldr	r3, [pc, #276]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a44      	ldr	r2, [pc, #272]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a3d      	ldr	r2, [pc, #244]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <MX_GPIO_Init+0x1a0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2108      	movs	r1, #8
 8001cce:	4838      	ldr	r0, [pc, #224]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001cd0:	f001 f8ac 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4836      	ldr	r0, [pc, #216]	; (8001db4 <MX_GPIO_Init+0x1a8>)
 8001cda:	f001 f8a7 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001ce4:	4834      	ldr	r0, [pc, #208]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001ce6:	f001 f8a1 	bl	8002e2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001cea:	2304      	movs	r3, #4
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	482c      	ldr	r0, [pc, #176]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001cfe:	f000 ff11 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001d02:	2308      	movs	r3, #8
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	4825      	ldr	r0, [pc, #148]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001d1a:	f000 ff03 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001d1e:	2332      	movs	r3, #50	; 0x32
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d22:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	481f      	ldr	r0, [pc, #124]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001d34:	f000 fef6 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4819      	ldr	r0, [pc, #100]	; (8001db4 <MX_GPIO_Init+0x1a8>)
 8001d50:	f000 fee8 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	4814      	ldr	r0, [pc, #80]	; (8001dbc <MX_GPIO_Init+0x1b0>)
 8001d6a:	f000 fedb 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d6e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001d72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	4619      	mov	r1, r3
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001d88:	f000 fecc 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001da0:	f000 fec0 	bl	8002b24 <HAL_GPIO_Init>

}
 8001da4:	bf00      	nop
 8001da6:	3730      	adds	r7, #48	; 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <MX_I2C1_Init+0x54>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_I2C1_Init+0x58>)
 8001dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dfe:	f002 fc39 	bl	8004674 <HAL_I2C_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e08:	f000 fa90 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000250 	.word	0x20000250
 8001e14:	40005400 	.word	0x40005400
 8001e18:	000186a0 	.word	0x000186a0

08001e1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_I2C_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12c      	bne.n	8001e98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e60:	2312      	movs	r3, #18
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <HAL_I2C_MspInit+0x8c>)
 8001e78:	f000 fe54 	bl	8002b24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400

08001eac <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_I2S2_Init+0x50>)
 8001eb2:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <MX_I2S2_Init+0x54>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_I2S2_Init+0x50>)
 8001eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_I2S2_Init+0x50>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <MX_I2S2_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_I2S2_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_I2S2_Init+0x50>)
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <MX_I2S2_Init+0x58>)
 8001ed4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_I2S2_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_I2S2_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_I2S2_Init+0x50>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_I2S2_Init+0x50>)
 8001eea:	f003 fcb1 	bl	8005850 <HAL_I2S_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001ef4:	f000 fa1a 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200002a4 	.word	0x200002a4
 8001f00:	40003800 	.word	0x40003800
 8001f04:	00017700 	.word	0x00017700

08001f08 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f0e:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <MX_I2S3_Init+0x58>)
 8001f10:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f18:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <MX_I2S3_Init+0x5c>)
 8001f32:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_I2S3_Init+0x54>)
 8001f48:	f003 fc82 	bl	8005850 <HAL_I2S_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001f52:	f000 f9eb 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200002ec 	.word	0x200002ec
 8001f60:	40003c00 	.word	0x40003c00
 8001f64:	00017700 	.word	0x00017700

08001f68 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08e      	sub	sp, #56	; 0x38
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a59      	ldr	r2, [pc, #356]	; (80020ec <HAL_I2S_MspInit+0x184>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d15b      	bne.n	8002042 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
 8001f8e:	4b58      	ldr	r3, [pc, #352]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a57      	ldr	r2, [pc, #348]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	623b      	str	r3, [r7, #32]
 8001fa4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	4b51      	ldr	r3, [pc, #324]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a50      	ldr	r2, [pc, #320]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a49      	ldr	r2, [pc, #292]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	483e      	ldr	r0, [pc, #248]	; (80020f4 <HAL_I2S_MspInit+0x18c>)
 8001ffa:	f000 fd93 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001ffe:	2308      	movs	r3, #8
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800200e:	2305      	movs	r3, #5
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002016:	4619      	mov	r1, r3
 8002018:	4836      	ldr	r0, [pc, #216]	; (80020f4 <HAL_I2S_MspInit+0x18c>)
 800201a:	f000 fd83 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800201e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002030:	2305      	movs	r3, #5
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002038:	4619      	mov	r1, r3
 800203a:	482f      	ldr	r0, [pc, #188]	; (80020f8 <HAL_I2S_MspInit+0x190>)
 800203c:	f000 fd72 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002040:	e04f      	b.n	80020e2 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2d      	ldr	r2, [pc, #180]	; (80020fc <HAL_I2S_MspInit+0x194>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d14a      	bne.n	80020e2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8002056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_I2S_MspInit+0x188>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80020a0:	2310      	movs	r3, #16
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020b0:	2306      	movs	r3, #6
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	4811      	ldr	r0, [pc, #68]	; (8002100 <HAL_I2S_MspInit+0x198>)
 80020bc:	f000 fd32 	bl	8002b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80020c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020d2:	2306      	movs	r3, #6
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <HAL_I2S_MspInit+0x18c>)
 80020de:	f000 fd21 	bl	8002b24 <HAL_GPIO_Init>
}
 80020e2:	bf00      	nop
 80020e4:	3738      	adds	r7, #56	; 0x38
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40003800 	.word	0x40003800
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40003c00 	.word	0x40003c00
 8002100:	40020000 	.word	0x40020000

08002104 <uprintf>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void uprintf(char *str){
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100) != HAL_OK){
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe f867 	bl	80001e0 <strlen>
 8002112:	4603      	mov	r3, r0
 8002114:	b29a      	uxth	r2, r3
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <uprintf+0x30>)
 800211c:	f004 fef6 	bl	8006f0c <HAL_UART_Transmit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <uprintf+0x26>
	    	Error_Handler();
 8002126:	f000 f901 	bl	800232c <Error_Handler>
	    }
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200003e0 	.word	0x200003e0

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002140:	f000 fb48 	bl	80027d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002144:	f000 f86a 	bl	800221c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002148:	f000 f8d0 	bl	80022ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214c:	f7ff fd5e 	bl	8001c0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002150:	f7ff fe36 	bl	8001dc0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8002154:	f7ff feaa 	bl	8001eac <MX_I2S2_Init>
  MX_I2S3_Init();
 8002158:	f7ff fed6 	bl	8001f08 <MX_I2S3_Init>
  MX_SPI1_Init();
 800215c:	f000 f8ec 	bl	8002338 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8002160:	f008 fa1c 	bl	800a59c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8002164:	f000 fa9a 	bl	800269c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002168:	2304      	movs	r3, #4
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2303      	movs	r3, #3
 8002172:	2201      	movs	r2, #1
 8002174:	2105      	movs	r1, #5
 8002176:	2002      	movs	r0, #2
 8002178:	f7ff f822 	bl	80011c0 <BME280_Config>
  if(HAL_I2C_IsDeviceReady(&hi2c1, 0xEC, 2, 10)==HAL_OK){
 800217c:	230a      	movs	r3, #10
 800217e:	2202      	movs	r2, #2
 8002180:	21ec      	movs	r1, #236	; 0xec
 8002182:	481e      	ldr	r0, [pc, #120]	; (80021fc <main+0xc4>)
 8002184:	f002 feda 	bl	8004f3c <HAL_I2C_IsDeviceReady>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d105      	bne.n	800219a <main+0x62>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002194:	481a      	ldr	r0, [pc, #104]	; (8002200 <main+0xc8>)
 8002196:	f000 fe49 	bl	8002e2c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800219a:	f008 fa25 	bl	800a5e8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    BME280_Measure();
 800219e:	f7ff fca9 	bl	8001af4 <BME280_Measure>
    count++;
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <main+0xcc>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <main+0xcc>)
 80021ac:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "\tTemperature: %.2f \tPressure: %.2f\tHumidity: %.2f\n\r", Temperature, Pressure, Humidity);
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <main+0xd0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9d0 	bl	8000558 <__aeabi_f2d>
 80021b8:	4680      	mov	r8, r0
 80021ba:	4689      	mov	r9, r1
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <main+0xd4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9c9 	bl	8000558 <__aeabi_f2d>
 80021c6:	4604      	mov	r4, r0
 80021c8:	460d      	mov	r5, r1
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <main+0xd8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9c2 	bl	8000558 <__aeabi_f2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021dc:	e9cd 4500 	strd	r4, r5, [sp]
 80021e0:	4642      	mov	r2, r8
 80021e2:	464b      	mov	r3, r9
 80021e4:	490b      	ldr	r1, [pc, #44]	; (8002214 <main+0xdc>)
 80021e6:	480c      	ldr	r0, [pc, #48]	; (8002218 <main+0xe0>)
 80021e8:	f009 fa7c 	bl	800b6e4 <siprintf>
    uprintf(buffer);
 80021ec:	480a      	ldr	r0, [pc, #40]	; (8002218 <main+0xe0>)
 80021ee:	f7ff ff89 	bl	8002104 <uprintf>
//    if (HAL_UART_Transmit(&huart2, (uint8_t *)"Hello world\n", strlen("Hello world\n"), 100) != HAL_OK){
//    	Error_Handler();
//    }
    HAL_Delay(100);
 80021f2:	2064      	movs	r0, #100	; 0x64
 80021f4:	f000 fb60 	bl	80028b8 <HAL_Delay>
    MX_USB_HOST_Process();
 80021f8:	e7cf      	b.n	800219a <main+0x62>
 80021fa:	bf00      	nop
 80021fc:	20000250 	.word	0x20000250
 8002200:	40020c00 	.word	0x40020c00
 8002204:	20000374 	.word	0x20000374
 8002208:	20000378 	.word	0x20000378
 800220c:	2000037c 	.word	0x2000037c
 8002210:	20000380 	.word	0x20000380
 8002214:	0800da00 	.word	0x0800da00
 8002218:	20000334 	.word	0x20000334

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b094      	sub	sp, #80	; 0x50
 8002220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002222:	f107 0320 	add.w	r3, r7, #32
 8002226:	2230      	movs	r2, #48	; 0x30
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f008 fcf8 	bl	800ac20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <SystemClock_Config+0xc8>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <SystemClock_Config+0xc8>)
 800224a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <SystemClock_Config+0xc8>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <SystemClock_Config+0xcc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <SystemClock_Config+0xcc>)
 8002266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <SystemClock_Config+0xcc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002278:	2301      	movs	r3, #1
 800227a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800227c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002282:	2302      	movs	r3, #2
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800228c:	2304      	movs	r3, #4
 800228e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002290:	2348      	movs	r3, #72	; 0x48
 8002292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002294:	2302      	movs	r3, #2
 8002296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002298:	2303      	movs	r3, #3
 800229a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229c:	f107 0320 	add.w	r3, r7, #32
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 ff75 	bl	8006190 <HAL_RCC_OscConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022ac:	f000 f83e 	bl	800232c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b0:	230f      	movs	r3, #15
 80022b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b4:	2302      	movs	r3, #2
 80022b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	2102      	movs	r1, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 f9d7 	bl	8006680 <HAL_RCC_ClockConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022d8:	f000 f828 	bl	800232c <Error_Handler>
  }
}
 80022dc:	bf00      	nop
 80022de:	3750      	adds	r7, #80	; 0x50
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000

080022ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f2:	463b      	mov	r3, r7
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002302:	2301      	movs	r3, #1
 8002304:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002306:	23c8      	movs	r3, #200	; 0xc8
 8002308:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800230a:	2305      	movs	r3, #5
 800230c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800230e:	2302      	movs	r3, #2
 8002310:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	4618      	mov	r0, r3
 8002316:	f004 fbd3 	bl	8006ac0 <HAL_RCCEx_PeriphCLKConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002320:	f000 f804 	bl	800232c <Error_Handler>
  }
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002330:	b672      	cpsid	i
}
 8002332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002334:	e7fe      	b.n	8002334 <Error_Handler+0x8>
	...

08002338 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <MX_SPI1_Init+0x64>)
 800233e:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <MX_SPI1_Init+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <MX_SPI1_Init+0x64>)
 8002344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_SPI1_Init+0x64>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <MX_SPI1_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_SPI1_Init+0x64>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_SPI1_Init+0x64>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_SPI1_Init+0x64>)
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_SPI1_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <MX_SPI1_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_SPI1_Init+0x64>)
 8002378:	2200      	movs	r2, #0
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <MX_SPI1_Init+0x64>)
 800237e:	2200      	movs	r2, #0
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_SPI1_Init+0x64>)
 8002384:	220a      	movs	r2, #10
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002388:	4804      	ldr	r0, [pc, #16]	; (800239c <MX_SPI1_Init+0x64>)
 800238a:	f004 fce9 	bl	8006d60 <HAL_SPI_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002394:	f7ff ffca 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000384 	.word	0x20000384
 80023a0:	40013000 	.word	0x40013000

080023a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_SPI_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80023fe:	23e0      	movs	r3, #224	; 0xe0
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800240e:	2305      	movs	r3, #5
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_SPI_MspInit+0x8c>)
 800241a:	f000 fb83 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40013000 	.word	0x40013000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_MspInit+0x4c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_MspInit+0x4c>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_MspInit+0x4c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_MspInit+0x4c>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002472:	2007      	movs	r0, #7
 8002474:	f000 fb14 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <NMI_Handler+0x4>

0800248a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <HardFault_Handler+0x4>

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <MemManage_Handler+0x4>

08002496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d0:	f000 f9d2 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <OTG_FS_IRQHandler+0x10>)
 80024de:	f000 ff29 	bl	8003334 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000804 	.word	0x20000804

080024ec <_getpid>:
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	2301      	movs	r3, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_kill>:
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	f008 fb51 	bl	800abac <__errno>
 800250a:	4603      	mov	r3, r0
 800250c:	2216      	movs	r2, #22
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_exit>:
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ffe7 	bl	80024fc <_kill>
 800252e:	e7fe      	b.n	800252e <_exit+0x12>

08002530 <_read>:
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e00a      	b.n	8002558 <_read+0x28>
 8002542:	f3af 8000 	nop.w
 8002546:	4601      	mov	r1, r0
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	60ba      	str	r2, [r7, #8]
 800254e:	b2ca      	uxtb	r2, r1
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3301      	adds	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	dbf0      	blt.n	8002542 <_read+0x12>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <_write>:
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e009      	b.n	8002590 <_write+0x26>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	60ba      	str	r2, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f3af 8000 	nop.w
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	dbf1      	blt.n	800257c <_write+0x12>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_close>:
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_fstat>:
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	2300      	movs	r3, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_isatty>:
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	2301      	movs	r3, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_lseek>:
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <_sbrk>:
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <_sbrk+0x5c>)
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <_sbrk+0x60>)
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <_sbrk+0x22>
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <_sbrk+0x64>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <_sbrk+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d207      	bcs.n	800264c <_sbrk+0x40>
 800263c:	f008 fab6 	bl	800abac <__errno>
 8002640:	4603      	mov	r3, r0
 8002642:	220c      	movs	r2, #12
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264a:	e009      	b.n	8002660 <_sbrk+0x54>
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <_sbrk+0x64>)
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20020000 	.word	0x20020000
 800266c:	00000400 	.word	0x00000400
 8002670:	200003dc 	.word	0x200003dc
 8002674:	20000b18 	.word	0x20000b18

08002678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <SystemInit+0x20>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <SystemInit+0x20>)
 8002684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_USART2_UART_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026d4:	f004 fbcd 	bl	8006e72 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026de:	f7ff fe25 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200003e0 	.word	0x200003e0
 80026ec:	40004400 	.word	0x40004400

080026f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_UART_MspInit+0x84>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d12b      	bne.n	800276a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_UART_MspInit+0x88>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_UART_MspInit+0x88>)
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_UART_MspInit+0x88>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_UART_MspInit+0x88>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_UART_MspInit+0x88>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_UART_MspInit+0x88>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800274a:	230c      	movs	r3, #12
 800274c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800275a:	2307      	movs	r3, #7
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <HAL_UART_MspInit+0x8c>)
 8002766:	f000 f9dd 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800276a:	bf00      	nop
 800276c:	3728      	adds	r7, #40	; 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40004400 	.word	0x40004400
 8002778:	40023800 	.word	0x40023800
 800277c:	40020000 	.word	0x40020000

08002780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002784:	480d      	ldr	r0, [pc, #52]	; (80027bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002786:	490e      	ldr	r1, [pc, #56]	; (80027c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800278c:	e002      	b.n	8002794 <LoopCopyDataInit>

0800278e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002792:	3304      	adds	r3, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002798:	d3f9      	bcc.n	800278e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279a:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800279c:	4c0b      	ldr	r4, [pc, #44]	; (80027cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a0:	e001      	b.n	80027a6 <LoopFillZerobss>

080027a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a4:	3204      	adds	r2, #4

080027a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a8:	d3fb      	bcc.n	80027a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027aa:	f7ff ff65 	bl	8002678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ae:	f008 fa03 	bl	800abb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b2:	f7ff fcc1 	bl	8002138 <main>
  bx  lr    
 80027b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80027c4:	0800de3c 	.word	0x0800de3c
  ldr r2, =_sbss
 80027c8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80027cc:	20000b18 	.word	0x20000b18

080027d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <HAL_Init+0x40>)
 80027de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_Init+0x40>)
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_Init+0x40>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f000 f94f 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f808 	bl	8002818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002808:	f7ff fe14 	bl	8002434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00

08002818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_InitTick+0x54>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_InitTick+0x58>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f967 	bl	8002b0a <HAL_SYSTICK_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e00e      	b.n	8002864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d80a      	bhi.n	8002862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002854:	f000 f92f 	bl	8002ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4a06      	ldr	r2, [pc, #24]	; (8002874 <HAL_InitTick+0x5c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000000 	.word	0x20000000
 8002870:	20000008 	.word	0x20000008
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x20>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x24>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_IncTick+0x24>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000008 	.word	0x20000008
 800289c:	20000424 	.word	0x20000424

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000424 	.word	0x20000424

080028b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff ffee 	bl	80028a0 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d0:	d005      	beq.n	80028de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_Delay+0x44>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028de:	bf00      	nop
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8f7      	bhi.n	80028e0 <HAL_Delay+0x28>
  {
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000008 	.word	0x20000008

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	; (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
         );
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff3e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff8e 	bl	80029f4 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5d 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff31 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e159      	b.n	8002df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8148 	bne.w	8002dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d130      	bne.n	8002bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d123      	bne.n	8002c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80a2 	beq.w	8002dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cba:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc6:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	220f      	movs	r2, #15
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x202>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a48      	ldr	r2, [pc, #288]	; (8002e18 <HAL_GPIO_Init+0x2f4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x1fe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a47      	ldr	r2, [pc, #284]	; (8002e1c <HAL_GPIO_Init+0x2f8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x1fa>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a46      	ldr	r2, [pc, #280]	; (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a45      	ldr	r2, [pc, #276]	; (8002e24 <HAL_GPIO_Init+0x300>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x1f2>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e008      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d16:	2307      	movs	r3, #7
 8002d18:	e006      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e004      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d26:	2300      	movs	r3, #0
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f002 0203 	and.w	r2, r2, #3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4093      	lsls	r3, r2
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d38:	4935      	ldr	r1, [pc, #212]	; (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d94:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d9a:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dbe:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <HAL_GPIO_Init+0x304>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	f67f aea2 	bls.w	8002b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e60:	b08f      	sub	sp, #60	; 0x3c
 8002e62:	af0a      	add	r7, sp, #40	; 0x28
 8002e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e054      	b.n	8002f1a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f007 fbe4 	bl	800a658 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fc12 	bl	80076d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	687e      	ldr	r6, [r7, #4]
 8002ebc:	466d      	mov	r5, sp
 8002ebe:	f106 0410 	add.w	r4, r6, #16
 8002ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed2:	1d33      	adds	r3, r6, #4
 8002ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f004 fb8c 	bl	80075f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 fc09 	bl	80076fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	687e      	ldr	r6, [r7, #4]
 8002ef0:	466d      	mov	r5, sp
 8002ef2:	f106 0410 	add.w	r4, r6, #16
 8002ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f06:	1d33      	adds	r3, r6, #4
 8002f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0a:	6838      	ldr	r0, [r7, #0]
 8002f0c:	f004 fd92 	bl	8007a34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f22 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f22:	b590      	push	{r4, r7, lr}
 8002f24:	b089      	sub	sp, #36	; 0x24
 8002f26:	af04      	add	r7, sp, #16
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4603      	mov	r3, r0
 8002f32:	70fb      	strb	r3, [r7, #3]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70bb      	strb	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_HCD_HC_Init+0x28>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e076      	b.n	8003038 <HAL_HCD_HC_Init+0x116>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	333d      	adds	r3, #61	; 0x3d
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3338      	adds	r3, #56	; 0x38
 8002f72:	787a      	ldrb	r2, [r7, #1]
 8002f74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3340      	adds	r3, #64	; 0x40
 8002f84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f86:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3339      	adds	r3, #57	; 0x39
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	333f      	adds	r3, #63	; 0x3f
 8002fa8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	78ba      	ldrb	r2, [r7, #2]
 8002fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fb6:	b2d0      	uxtb	r0, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	333a      	adds	r3, #58	; 0x3a
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002fc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da09      	bge.n	8002fe4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333b      	adds	r3, #59	; 0x3b
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e008      	b.n	8002ff6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	333b      	adds	r3, #59	; 0x3b
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	333c      	adds	r3, #60	; 0x3c
 8003004:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003008:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	787c      	ldrb	r4, [r7, #1]
 8003010:	78ba      	ldrb	r2, [r7, #2]
 8003012:	78f9      	ldrb	r1, [r7, #3]
 8003014:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	4623      	mov	r3, r4
 8003026:	f004 fe8b 	bl	8007d40 <USB_HC_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_HCD_HC_Halt+0x1e>
 800305a:	2302      	movs	r3, #2
 800305c:	e00f      	b.n	800307e <HAL_HCD_HC_Halt+0x3e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f005 f8db 	bl	800822a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	460b      	mov	r3, r1
 800309c:	70bb      	strb	r3, [r7, #2]
 800309e:	4613      	mov	r3, r2
 80030a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	333b      	adds	r3, #59	; 0x3b
 80030b0:	78ba      	ldrb	r2, [r7, #2]
 80030b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	333f      	adds	r3, #63	; 0x3f
 80030c2:	787a      	ldrb	r2, [r7, #1]
 80030c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030c6:	7c3b      	ldrb	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d112      	bne.n	80030f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3342      	adds	r3, #66	; 0x42
 80030da:	2203      	movs	r2, #3
 80030dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	333d      	adds	r3, #61	; 0x3d
 80030ec:	7f3a      	ldrb	r2, [r7, #28]
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e008      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3342      	adds	r3, #66	; 0x42
 8003100:	2202      	movs	r2, #2
 8003102:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003104:	787b      	ldrb	r3, [r7, #1]
 8003106:	2b03      	cmp	r3, #3
 8003108:	f200 80c6 	bhi.w	8003298 <HAL_HCD_HC_SubmitRequest+0x210>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003285 	.word	0x08003285
 800311c:	08003189 	.word	0x08003189
 8003120:	08003207 	.word	0x08003207
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003124:	7c3b      	ldrb	r3, [r7, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	f040 80b8 	bne.w	800329c <HAL_HCD_HC_SubmitRequest+0x214>
 800312c:	78bb      	ldrb	r3, [r7, #2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 80b4 	bne.w	800329c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003134:	8b3b      	ldrh	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3355      	adds	r3, #85	; 0x55
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3355      	adds	r3, #85	; 0x55
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3342      	adds	r3, #66	; 0x42
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003172:	e093      	b.n	800329c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3342      	adds	r3, #66	; 0x42
 8003182:	2202      	movs	r2, #2
 8003184:	701a      	strb	r2, [r3, #0]
      break;
 8003186:	e089      	b.n	800329c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003188:	78bb      	ldrb	r3, [r7, #2]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3355      	adds	r3, #85	; 0x55
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	3342      	adds	r3, #66	; 0x42
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031b4:	e073      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3342      	adds	r3, #66	; 0x42
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]
      break;
 80031c8:	e069      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3354      	adds	r3, #84	; 0x54
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3342      	adds	r3, #66	; 0x42
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
      break;
 80031f0:	e055      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3342      	adds	r3, #66	; 0x42
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
      break;
 8003204:	e04b      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003206:	78bb      	ldrb	r3, [r7, #2]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11d      	bne.n	8003248 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3355      	adds	r3, #85	; 0x55
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3342      	adds	r3, #66	; 0x42
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003232:	e034      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3342      	adds	r3, #66	; 0x42
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
      break;
 8003246:	e02a      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3354      	adds	r3, #84	; 0x54
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3342      	adds	r3, #66	; 0x42
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
      break;
 800326e:	e016      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3342      	adds	r3, #66	; 0x42
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
      break;
 8003282:	e00c      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3342      	adds	r3, #66	; 0x42
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
      break;
 8003296:	e002      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800329c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3344      	adds	r3, #68	; 0x44
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	8b3a      	ldrh	r2, [r7, #24]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	202c      	movs	r0, #44	; 0x2c
 80032b8:	fb00 f303 	mul.w	r3, r0, r3
 80032bc:	440b      	add	r3, r1
 80032be:	334c      	adds	r3, #76	; 0x4c
 80032c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3350      	adds	r3, #80	; 0x50
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3339      	adds	r3, #57	; 0x39
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3361      	adds	r3, #97	; 0x61
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	222c      	movs	r2, #44	; 0x2c
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	3338      	adds	r3, #56	; 0x38
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	18d1      	adds	r1, r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	f004 fe2e 	bl	8007f84 <USB_HC_StartXfer>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop

08003334 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f004 fb2f 	bl	80079ae <USB_GetMode>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 80f6 	bne.w	8003544 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fb13 	bl	8007988 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80ec 	beq.w	8003542 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fb0a 	bl	8007988 <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800337e:	d104      	bne.n	800338a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003388:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fafa 	bl	8007988 <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339e:	d104      	bne.n	80033aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 faea 	bl	8007988 <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033be:	d104      	bne.n	80033ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fada 	bl	8007988 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2202      	movs	r2, #2
 80033e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 facc 	bl	8007988 <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d11c      	bne.n	8003436 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003404:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003416:	2110      	movs	r1, #16
 8003418:	6938      	ldr	r0, [r7, #16]
 800341a:	f004 f9bb 	bl	8007794 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800341e:	6938      	ldr	r0, [r7, #16]
 8003420:	f004 f9ec 	bl	80077fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fbc2 	bl	8007bb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f007 f98f 	bl	800a754 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 faa4 	bl	8007988 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800344a:	d102      	bne.n	8003452 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f001 f89e 	bl	800458e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f004 fa96 	bl	8007988 <USB_ReadInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b08      	cmp	r3, #8
 8003464:	d106      	bne.n	8003474 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f007 f958 	bl	800a71c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2208      	movs	r2, #8
 8003472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f004 fa85 	bl	8007988 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b10      	cmp	r3, #16
 8003486:	d101      	bne.n	800348c <HAL_HCD_IRQHandler+0x158>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_HCD_IRQHandler+0x15a>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d012      	beq.n	80034b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0210 	bic.w	r2, r2, #16
 80034a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 ffa1 	bl	80043ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0210 	orr.w	r2, r2, #16
 80034b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fa63 	bl	8007988 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034cc:	d13a      	bne.n	8003544 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f004 fe98 	bl	8008208 <USB_HC_ReadInterrupt>
 80034d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e025      	b.n	800352c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d018      	beq.n	8003526 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350a:	d106      	bne.n	800351a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8ab 	bl	800366e <HCD_HC_IN_IRQHandler>
 8003518:	e005      	b.n	8003526 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fbf9 	bl	8003d18 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	3301      	adds	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	429a      	cmp	r2, r3
 8003534:	d3d4      	bcc.n	80034e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800353e:	615a      	str	r2, [r3, #20]
 8003540:	e000      	b.n	8003544 <HAL_HCD_IRQHandler+0x210>
      return;
 8003542:	bf00      	nop
    }
  }
}
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_HCD_Start+0x16>
 800355c:	2302      	movs	r3, #2
 800355e:	e013      	b.n	8003588 <HAL_HCD_Start+0x3e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fb84 	bl	8007c7c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f004 f89c 	bl	80076b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_HCD_Stop+0x16>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e00d      	b.n	80035c2 <HAL_HCD_Stop+0x32>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 ff72 	bl	800849c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 fb26 	bl	8007c28 <USB_ResetPort>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	3360      	adds	r3, #96	; 0x60
 8003600:	781b      	ldrb	r3, [r3, #0]
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3350      	adds	r3, #80	; 0x50
 8003628:	681b      	ldr	r3, [r3, #0]
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f004 fb6a 	bl	8007d1c <USB_GetCurrentFrame>
 8003648:	4603      	mov	r3, r0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fb45 	bl	8007cee <USB_GetHostSpeed>
 8003664:	4603      	mov	r3, r0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d11a      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	461a      	mov	r2, r3
 80036ac:	2304      	movs	r3, #4
 80036ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3361      	adds	r3, #97	; 0x61
 80036be:	2206      	movs	r2, #6
 80036c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 fdac 	bl	800822a <USB_HC_Halt>
 80036d2:	e0af      	b.n	8003834 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d11b      	bne.n	8003724 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	461a      	mov	r2, r3
 80036fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3361      	adds	r3, #97	; 0x61
 800370e:	2207      	movs	r2, #7
 8003710:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f004 fd84 	bl	800822a <USB_HC_Halt>
 8003722:	e087      	b.n	8003834 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b20      	cmp	r3, #32
 8003738:	d109      	bne.n	800374e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	461a      	mov	r2, r3
 8003748:	2320      	movs	r3, #32
 800374a:	6093      	str	r3, [r2, #8]
 800374c:	e072      	b.n	8003834 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d11a      	bne.n	800379a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	461a      	mov	r2, r3
 8003772:	2308      	movs	r3, #8
 8003774:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3361      	adds	r3, #97	; 0x61
 8003784:	2205      	movs	r2, #5
 8003786:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f004 fd49 	bl	800822a <USB_HC_Halt>
 8003798:	e04c      	b.n	8003834 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b0:	d11b      	bne.n	80037ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	461a      	mov	r2, r3
 80037c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3361      	adds	r3, #97	; 0x61
 80037d4:	2208      	movs	r2, #8
 80037d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f004 fd21 	bl	800822a <USB_HC_Halt>
 80037e8:	e024      	b.n	8003834 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d119      	bne.n	8003834 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	461a      	mov	r2, r3
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	3361      	adds	r3, #97	; 0x61
 8003820:	2206      	movs	r2, #6
 8003822:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fcfb 	bl	800822a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384a:	d112      	bne.n	8003872 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f004 fce7 	bl	800822a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	461a      	mov	r2, r3
 800386a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003870:	e24e      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 80df 	bne.w	8003a48 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d019      	beq.n	80038c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3348      	adds	r3, #72	; 0x48
 80038a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	0159      	lsls	r1, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	440b      	add	r3, r1
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038b4:	1ad2      	subs	r2, r2, r3
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	202c      	movs	r0, #44	; 0x2c
 80038bc:	fb00 f303 	mul.w	r3, r0, r3
 80038c0:	440b      	add	r3, r1
 80038c2:	3350      	adds	r3, #80	; 0x50
 80038c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3361      	adds	r3, #97	; 0x61
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	212c      	movs	r1, #44	; 0x2c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	335c      	adds	r3, #92	; 0x5c
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	461a      	mov	r2, r3
 80038f8:	2301      	movs	r3, #1
 80038fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	333f      	adds	r3, #63	; 0x3f
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	333f      	adds	r3, #63	; 0x3f
 800391e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003920:	2b02      	cmp	r3, #2
 8003922:	d111      	bne.n	8003948 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f004 fc7b 	bl	800822a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	461a      	mov	r2, r3
 8003942:	2310      	movs	r3, #16
 8003944:	6093      	str	r3, [r2, #8]
 8003946:	e03a      	b.n	80039be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	333f      	adds	r3, #63	; 0x3f
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d009      	beq.n	8003970 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	333f      	adds	r3, #63	; 0x3f
 800396a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800396c:	2b01      	cmp	r3, #1
 800396e:	d126      	bne.n	80039be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	440a      	add	r2, r1
 8003986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800398e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3360      	adds	r3, #96	; 0x60
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	b2d9      	uxtb	r1, r3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	202c      	movs	r0, #44	; 0x2c
 80039ac:	fb00 f303 	mul.w	r3, r0, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3360      	adds	r3, #96	; 0x60
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f006 fed9 	bl	800a770 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d12b      	bne.n	8003a1e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3348      	adds	r3, #72	; 0x48
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	202c      	movs	r0, #44	; 0x2c
 80039dc:	fb00 f202 	mul.w	r2, r0, r2
 80039e0:	440a      	add	r2, r1
 80039e2:	3240      	adds	r2, #64	; 0x40
 80039e4:	8812      	ldrh	r2, [r2, #0]
 80039e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 818e 	beq.w	8003d10 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3354      	adds	r3, #84	; 0x54
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f083 0301 	eor.w	r3, r3, #1
 8003a08:	b2d8      	uxtb	r0, r3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	3354      	adds	r3, #84	; 0x54
 8003a18:	4602      	mov	r2, r0
 8003a1a:	701a      	strb	r2, [r3, #0]
}
 8003a1c:	e178      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3354      	adds	r3, #84	; 0x54
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	f083 0301 	eor.w	r3, r3, #1
 8003a32:	b2d8      	uxtb	r0, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3354      	adds	r3, #84	; 0x54
 8003a42:	4602      	mov	r2, r0
 8003a44:	701a      	strb	r2, [r3, #0]
}
 8003a46:	e163      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	f040 80f6 	bne.w	8003c4c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3361      	adds	r3, #97	; 0x61
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d109      	bne.n	8003a88 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3360      	adds	r3, #96	; 0x60
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e0c9      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	212c      	movs	r1, #44	; 0x2c
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	3361      	adds	r3, #97	; 0x61
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d109      	bne.n	8003ab0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3360      	adds	r3, #96	; 0x60
 8003aaa:	2205      	movs	r2, #5
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e0b5      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3361      	adds	r3, #97	; 0x61
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b06      	cmp	r3, #6
 8003ac2:	d009      	beq.n	8003ad8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3361      	adds	r3, #97	; 0x61
 8003ad2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d150      	bne.n	8003b7a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	335c      	adds	r3, #92	; 0x5c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	202c      	movs	r0, #44	; 0x2c
 8003af0:	fb00 f303 	mul.w	r3, r0, r3
 8003af4:	440b      	add	r3, r1
 8003af6:	335c      	adds	r3, #92	; 0x5c
 8003af8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	335c      	adds	r3, #92	; 0x5c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d912      	bls.n	8003b34 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	335c      	adds	r3, #92	; 0x5c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3360      	adds	r3, #96	; 0x60
 8003b2e:	2204      	movs	r2, #4
 8003b30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b32:	e073      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3360      	adds	r3, #96	; 0x60
 8003b42:	2202      	movs	r2, #2
 8003b44:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b5c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b64:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b72:	461a      	mov	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b78:	e050      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3361      	adds	r3, #97	; 0x61
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d122      	bne.n	8003bd4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	3360      	adds	r3, #96	; 0x60
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bbe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e023      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	3361      	adds	r3, #97	; 0x61
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b07      	cmp	r3, #7
 8003be6:	d119      	bne.n	8003c1c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	335c      	adds	r3, #92	; 0x5c
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	202c      	movs	r0, #44	; 0x2c
 8003c00:	fb00 f303 	mul.w	r3, r0, r3
 8003c04:	440b      	add	r3, r1
 8003c06:	335c      	adds	r3, #92	; 0x5c
 8003c08:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3360      	adds	r3, #96	; 0x60
 8003c18:	2204      	movs	r2, #4
 8003c1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	b2d9      	uxtb	r1, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	202c      	movs	r0, #44	; 0x2c
 8003c38:	fb00 f303 	mul.w	r3, r0, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3360      	adds	r3, #96	; 0x60
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f006 fd93 	bl	800a770 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c4a:	e061      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d156      	bne.n	8003d10 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	333f      	adds	r3, #63	; 0x3f
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d111      	bne.n	8003c9a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	212c      	movs	r1, #44	; 0x2c
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	335c      	adds	r3, #92	; 0x5c
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 fac9 	bl	800822a <USB_HC_Halt>
 8003c98:	e031      	b.n	8003cfe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	333f      	adds	r3, #63	; 0x3f
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	333f      	adds	r3, #63	; 0x3f
 8003cbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d11d      	bne.n	8003cfe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	335c      	adds	r3, #92	; 0x5c
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d110      	bne.n	8003cfe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3361      	adds	r3, #97	; 0x61
 8003cea:	2203      	movs	r2, #3
 8003cec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 fa96 	bl	800822a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	6093      	str	r3, [r2, #8]
}
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d11a      	bne.n	8003d7e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d54:	461a      	mov	r2, r3
 8003d56:	2304      	movs	r3, #4
 8003d58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3361      	adds	r3, #97	; 0x61
 8003d68:	2206      	movs	r2, #6
 8003d6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 fa57 	bl	800822a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003d7c:	e331      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d12e      	bne.n	8003df2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	461a      	mov	r2, r3
 8003da2:	2320      	movs	r3, #32
 8003da4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	333d      	adds	r3, #61	; 0x3d
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	f040 8313 	bne.w	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	333d      	adds	r3, #61	; 0x3d
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	3360      	adds	r3, #96	; 0x60
 8003ddc:	2202      	movs	r2, #2
 8003dde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 fa1d 	bl	800822a <USB_HC_Halt>
}
 8003df0:	e2f7      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d112      	bne.n	8003e30 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e16:	461a      	mov	r2, r3
 8003e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f004 f9fe 	bl	800822a <USB_HC_Halt>
}
 8003e2e:	e2d8      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d140      	bne.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	335c      	adds	r3, #92	; 0x5c
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d111      	bne.n	8003e92 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	333d      	adds	r3, #61	; 0x3d
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2340      	movs	r3, #64	; 0x40
 8003e90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3361      	adds	r3, #97	; 0x61
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f004 f9b2 	bl	800822a <USB_HC_Halt>
}
 8003ec6:	e28c      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d12c      	bne.n	8003f38 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3361      	adds	r3, #97	; 0x61
 8003eec:	2204      	movs	r2, #4
 8003eee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	333d      	adds	r3, #61	; 0x3d
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	335c      	adds	r3, #92	; 0x5c
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 f983 	bl	800822a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	6093      	str	r3, [r2, #8]
}
 8003f36:	e254      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d11a      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3361      	adds	r3, #97	; 0x61
 8003f6e:	2205      	movs	r2, #5
 8003f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 f954 	bl	800822a <USB_HC_Halt>
}
 8003f82:	e22e      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d140      	bne.n	800401c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	335c      	adds	r3, #92	; 0x5c
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3361      	adds	r3, #97	; 0x61
 8003fba:	2203      	movs	r2, #3
 8003fbc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	333d      	adds	r3, #61	; 0x3d
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d112      	bne.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	333c      	adds	r3, #60	; 0x3c
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	212c      	movs	r1, #44	; 0x2c
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	333d      	adds	r3, #61	; 0x3d
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f004 f911 	bl	800822a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	461a      	mov	r2, r3
 8004016:	2310      	movs	r3, #16
 8004018:	6093      	str	r3, [r2, #8]
}
 800401a:	e1e2      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b80      	cmp	r3, #128	; 0x80
 8004030:	d164      	bne.n	80040fc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d111      	bne.n	800405e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3361      	adds	r3, #97	; 0x61
 8004048:	2206      	movs	r2, #6
 800404a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f004 f8e7 	bl	800822a <USB_HC_Halt>
 800405c:	e044      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	335c      	adds	r3, #92	; 0x5c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	202c      	movs	r0, #44	; 0x2c
 8004076:	fb00 f303 	mul.w	r3, r0, r3
 800407a:	440b      	add	r3, r1
 800407c:	335c      	adds	r3, #92	; 0x5c
 800407e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	335c      	adds	r3, #92	; 0x5c
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d920      	bls.n	80040d6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	335c      	adds	r3, #92	; 0x5c
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	212c      	movs	r1, #44	; 0x2c
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	4413      	add	r3, r2
 80040b2:	3360      	adds	r3, #96	; 0x60
 80040b4:	2204      	movs	r2, #4
 80040b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	b2d9      	uxtb	r1, r3
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	202c      	movs	r0, #44	; 0x2c
 80040c2:	fb00 f303 	mul.w	r3, r0, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3360      	adds	r3, #96	; 0x60
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f006 fb4e 	bl	800a770 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040d4:	e008      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3360      	adds	r3, #96	; 0x60
 80040e4:	2202      	movs	r2, #2
 80040e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	461a      	mov	r2, r3
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	6093      	str	r3, [r2, #8]
}
 80040fa:	e172      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	d11b      	bne.n	800414c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3361      	adds	r3, #97	; 0x61
 8004122:	2208      	movs	r2, #8
 8004124:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f004 f87a 	bl	800822a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	461a      	mov	r2, r3
 8004144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004148:	6093      	str	r3, [r2, #8]
}
 800414a:	e14a      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	f040 813f 	bne.w	80043e2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	3361      	adds	r3, #97	; 0x61
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d17d      	bne.n	8004274 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	3360      	adds	r3, #96	; 0x60
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	333f      	adds	r3, #63	; 0x3f
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d00a      	beq.n	80041b4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	333f      	adds	r3, #63	; 0x3f
 80041ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	f040 8100 	bne.w	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d113      	bne.n	80041e4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	3355      	adds	r3, #85	; 0x55
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f083 0301 	eor.w	r3, r3, #1
 80041d0:	b2d8      	uxtb	r0, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	3355      	adds	r3, #85	; 0x55
 80041e0:	4602      	mov	r2, r0
 80041e2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f040 80e3 	bne.w	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	212c      	movs	r1, #44	; 0x2c
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	334c      	adds	r3, #76	; 0x4c
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80d8 	beq.w	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	212c      	movs	r1, #44	; 0x2c
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	4413      	add	r3, r2
 8004210:	334c      	adds	r3, #76	; 0x4c
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	202c      	movs	r0, #44	; 0x2c
 800421a:	fb00 f202 	mul.w	r2, r0, r2
 800421e:	440a      	add	r2, r1
 8004220:	3240      	adds	r2, #64	; 0x40
 8004222:	8812      	ldrh	r2, [r2, #0]
 8004224:	4413      	add	r3, r2
 8004226:	3b01      	subs	r3, #1
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	202c      	movs	r0, #44	; 0x2c
 800422e:	fb00 f202 	mul.w	r2, r0, r2
 8004232:	440a      	add	r2, r1
 8004234:	3240      	adds	r2, #64	; 0x40
 8004236:	8812      	ldrh	r2, [r2, #0]
 8004238:	fbb3 f3f2 	udiv	r3, r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80b5 	beq.w	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3355      	adds	r3, #85	; 0x55
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2d8      	uxtb	r0, r3
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	3355      	adds	r3, #85	; 0x55
 800426e:	4602      	mov	r2, r0
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e09f      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3361      	adds	r3, #97	; 0x61
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d109      	bne.n	800429c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3360      	adds	r3, #96	; 0x60
 8004296:	2202      	movs	r2, #2
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e08b      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	212c      	movs	r1, #44	; 0x2c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	3361      	adds	r3, #97	; 0x61
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d109      	bne.n	80042c4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	3360      	adds	r3, #96	; 0x60
 80042be:	2202      	movs	r2, #2
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e077      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3361      	adds	r3, #97	; 0x61
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d109      	bne.n	80042ec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3360      	adds	r3, #96	; 0x60
 80042e6:	2205      	movs	r2, #5
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	e063      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3361      	adds	r3, #97	; 0x61
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b06      	cmp	r3, #6
 80042fe:	d009      	beq.n	8004314 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	4413      	add	r3, r2
 800430c:	3361      	adds	r3, #97	; 0x61
 800430e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004310:	2b08      	cmp	r3, #8
 8004312:	d14f      	bne.n	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	335c      	adds	r3, #92	; 0x5c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	202c      	movs	r0, #44	; 0x2c
 800432c:	fb00 f303 	mul.w	r3, r0, r3
 8004330:	440b      	add	r3, r1
 8004332:	335c      	adds	r3, #92	; 0x5c
 8004334:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	335c      	adds	r3, #92	; 0x5c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d912      	bls.n	8004370 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	335c      	adds	r3, #92	; 0x5c
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3360      	adds	r3, #96	; 0x60
 800436a:	2204      	movs	r2, #4
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e021      	b.n	80043b4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3360      	adds	r3, #96	; 0x60
 800437e:	2202      	movs	r2, #2
 8004380:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004398:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043a0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	461a      	mov	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	461a      	mov	r2, r3
 80043c2:	2302      	movs	r3, #2
 80043c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	b2d9      	uxtb	r1, r3
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	202c      	movs	r0, #44	; 0x2c
 80043d0:	fb00 f303 	mul.w	r3, r0, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3360      	adds	r3, #96	; 0x60
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f006 f9c7 	bl	800a770 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043e2:	bf00      	nop
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b08a      	sub	sp, #40	; 0x28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	0c5b      	lsrs	r3, r3, #17
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800441e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d004      	beq.n	8004430 <HCD_RXQLVL_IRQHandler+0x46>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b05      	cmp	r3, #5
 800442a:	f000 80a9 	beq.w	8004580 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800442e:	e0aa      	b.n	8004586 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a6 	beq.w	8004584 <HCD_RXQLVL_IRQHandler+0x19a>
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	212c      	movs	r1, #44	; 0x2c
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	3344      	adds	r3, #68	; 0x44
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 809b 	beq.w	8004584 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	3350      	adds	r3, #80	; 0x50
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	441a      	add	r2, r3
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	202c      	movs	r0, #44	; 0x2c
 8004468:	fb00 f303 	mul.w	r3, r0, r3
 800446c:	440b      	add	r3, r1
 800446e:	334c      	adds	r3, #76	; 0x4c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d87a      	bhi.n	800456c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	212c      	movs	r1, #44	; 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	3344      	adds	r3, #68	; 0x44
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	b292      	uxth	r2, r2
 800448e:	4619      	mov	r1, r3
 8004490:	f003 fa22 	bl	80078d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	212c      	movs	r1, #44	; 0x2c
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	3344      	adds	r3, #68	; 0x44
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	441a      	add	r2, r3
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	202c      	movs	r0, #44	; 0x2c
 80044ae:	fb00 f303 	mul.w	r3, r0, r3
 80044b2:	440b      	add	r3, r1
 80044b4:	3344      	adds	r3, #68	; 0x44
 80044b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	3350      	adds	r3, #80	; 0x50
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	441a      	add	r2, r3
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	202c      	movs	r0, #44	; 0x2c
 80044d2:	fb00 f303 	mul.w	r3, r0, r3
 80044d6:	440b      	add	r3, r1
 80044d8:	3350      	adds	r3, #80	; 0x50
 80044da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	0cdb      	lsrs	r3, r3, #19
 80044ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3340      	adds	r3, #64	; 0x40
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4293      	cmp	r3, r2
 8004508:	d13c      	bne.n	8004584 <HCD_RXQLVL_IRQHandler+0x19a>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d039      	beq.n	8004584 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004526:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800452e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	212c      	movs	r1, #44	; 0x2c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	3354      	adds	r3, #84	; 0x54
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	f083 0301 	eor.w	r3, r3, #1
 8004556:	b2d8      	uxtb	r0, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	212c      	movs	r1, #44	; 0x2c
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	3354      	adds	r3, #84	; 0x54
 8004566:	4602      	mov	r2, r0
 8004568:	701a      	strb	r2, [r3, #0]
      break;
 800456a:	e00b      	b.n	8004584 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3360      	adds	r3, #96	; 0x60
 800457a:	2204      	movs	r2, #4
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e001      	b.n	8004584 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004584:	bf00      	nop
  }
}
 8004586:	bf00      	nop
 8004588:	3728      	adds	r7, #40	; 0x28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d10b      	bne.n	80045de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d102      	bne.n	80045d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f006 f8b1 	bl	800a738 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d132      	bne.n	800464e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d126      	bne.n	8004648 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d113      	bne.n	800462a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004608:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800460c:	d106      	bne.n	800461c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f003 facd 	bl	8007bb4 <USB_InitFSLSPClkSel>
 800461a:	e011      	b.n	8004640 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f003 fac6 	bl	8007bb4 <USB_InitFSLSPClkSel>
 8004628:	e00a      	b.n	8004640 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d106      	bne.n	8004640 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004638:	461a      	mov	r2, r3
 800463a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800463e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f006 f8a3 	bl	800a78c <HAL_HCD_PortEnabled_Callback>
 8004646:	e002      	b.n	800464e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f006 f8ad 	bl	800a7a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b20      	cmp	r3, #32
 8004656:	d103      	bne.n	8004660 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f043 0320 	orr.w	r3, r3, #32
 800465e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004666:	461a      	mov	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e12b      	b.n	80048de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fbbe 	bl	8001e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046d8:	f002 f9ca 	bl	8006a70 <HAL_RCC_GetPCLK1Freq>
 80046dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4a81      	ldr	r2, [pc, #516]	; (80048e8 <HAL_I2C_Init+0x274>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d807      	bhi.n	80046f8 <HAL_I2C_Init+0x84>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a80      	ldr	r2, [pc, #512]	; (80048ec <HAL_I2C_Init+0x278>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bf94      	ite	ls
 80046f0:	2301      	movls	r3, #1
 80046f2:	2300      	movhi	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e006      	b.n	8004706 <HAL_I2C_Init+0x92>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a7d      	ldr	r2, [pc, #500]	; (80048f0 <HAL_I2C_Init+0x27c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	bf94      	ite	ls
 8004700:	2301      	movls	r3, #1
 8004702:	2300      	movhi	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0e7      	b.n	80048de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a78      	ldr	r2, [pc, #480]	; (80048f4 <HAL_I2C_Init+0x280>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	0c9b      	lsrs	r3, r3, #18
 8004718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4a6a      	ldr	r2, [pc, #424]	; (80048e8 <HAL_I2C_Init+0x274>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d802      	bhi.n	8004748 <HAL_I2C_Init+0xd4>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	e009      	b.n	800475c <HAL_I2C_Init+0xe8>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	4a69      	ldr	r2, [pc, #420]	; (80048f8 <HAL_I2C_Init+0x284>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	3301      	adds	r3, #1
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	430b      	orrs	r3, r1
 8004762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800476e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	495c      	ldr	r1, [pc, #368]	; (80048e8 <HAL_I2C_Init+0x274>)
 8004778:	428b      	cmp	r3, r1
 800477a:	d819      	bhi.n	80047b0 <HAL_I2C_Init+0x13c>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1e59      	subs	r1, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	fbb1 f3f3 	udiv	r3, r1, r3
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004790:	400b      	ands	r3, r1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_I2C_Init+0x138>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1e59      	subs	r1, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047aa:	e051      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 80047ac:	2304      	movs	r3, #4
 80047ae:	e04f      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d111      	bne.n	80047dc <HAL_I2C_Init+0x168>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e58      	subs	r0, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	440b      	add	r3, r1
 80047c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e012      	b.n	8004802 <HAL_I2C_Init+0x18e>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1e58      	subs	r0, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	0099      	lsls	r1, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Init+0x196>
 8004806:	2301      	movs	r3, #1
 8004808:	e022      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10e      	bne.n	8004830 <HAL_I2C_Init+0x1bc>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1e58      	subs	r0, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	440b      	add	r3, r1
 8004820:	fbb0 f3f3 	udiv	r3, r0, r3
 8004824:	3301      	adds	r3, #1
 8004826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	e00f      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	0099      	lsls	r1, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	fbb0 f3f3 	udiv	r3, r0, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	6809      	ldr	r1, [r1, #0]
 8004854:	4313      	orrs	r3, r2
 8004856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800487e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6911      	ldr	r1, [r2, #16]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	430b      	orrs	r3, r1
 8004892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	000186a0 	.word	0x000186a0
 80048ec:	001e847f 	.word	0x001e847f
 80048f0:	003d08ff 	.word	0x003d08ff
 80048f4:	431bde83 	.word	0x431bde83
 80048f8:	10624dd3 	.word	0x10624dd3

080048fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	817b      	strh	r3, [r7, #10]
 800490e:	460b      	mov	r3, r1
 8004910:	813b      	strh	r3, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004916:	f7fd ffc3 	bl	80028a0 <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b20      	cmp	r3, #32
 8004926:	f040 80d9 	bne.w	8004adc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	2319      	movs	r3, #25
 8004930:	2201      	movs	r2, #1
 8004932:	496d      	ldr	r1, [pc, #436]	; (8004ae8 <HAL_I2C_Mem_Write+0x1ec>)
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fdad 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004940:	2302      	movs	r3, #2
 8004942:	e0cc      	b.n	8004ade <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_I2C_Mem_Write+0x56>
 800494e:	2302      	movs	r3, #2
 8004950:	e0c5      	b.n	8004ade <HAL_I2C_Mem_Write+0x1e2>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d007      	beq.n	8004978 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004986:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2221      	movs	r2, #33	; 0x21
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a4d      	ldr	r2, [pc, #308]	; (8004aec <HAL_I2C_Mem_Write+0x1f0>)
 80049b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ba:	88f8      	ldrh	r0, [r7, #6]
 80049bc:	893a      	ldrh	r2, [r7, #8]
 80049be:	8979      	ldrh	r1, [r7, #10]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4603      	mov	r3, r0
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fbe4 	bl	8005198 <I2C_RequestMemoryWrite>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d052      	beq.n	8004a7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e081      	b.n	8004ade <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fe2e 	bl	8005640 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d107      	bne.n	8004a02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06b      	b.n	8004ade <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	781a      	ldrb	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d11b      	bne.n	8004a7c <HAL_I2C_Mem_Write+0x180>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d017      	beq.n	8004a7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1aa      	bne.n	80049da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fe1a 	bl	80056c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00d      	beq.n	8004ab0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d107      	bne.n	8004aac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e016      	b.n	8004ade <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	00100002 	.word	0x00100002
 8004aec:	ffff0000 	.word	0xffff0000

08004af0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	817b      	strh	r3, [r7, #10]
 8004b02:	460b      	mov	r3, r1
 8004b04:	813b      	strh	r3, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b0a:	f7fd fec9 	bl	80028a0 <HAL_GetTick>
 8004b0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	f040 8208 	bne.w	8004f2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2319      	movs	r3, #25
 8004b24:	2201      	movs	r2, #1
 8004b26:	497b      	ldr	r1, [pc, #492]	; (8004d14 <HAL_I2C_Mem_Read+0x224>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fcb3 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
 8004b36:	e1fb      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_I2C_Mem_Read+0x56>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e1f4      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d007      	beq.n	8004b6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2222      	movs	r2, #34	; 0x22
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2240      	movs	r2, #64	; 0x40
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_I2C_Mem_Read+0x228>)
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bae:	88f8      	ldrh	r0, [r7, #6]
 8004bb0:	893a      	ldrh	r2, [r7, #8]
 8004bb2:	8979      	ldrh	r1, [r7, #10]
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fb80 	bl	80052c4 <I2C_RequestMemoryRead>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e1b0      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e184      	b.n	8004f08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d11b      	bne.n	8004c3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e164      	b.n	8004f08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d11b      	bne.n	8004c7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	e144      	b.n	8004f08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c94:	e138      	b.n	8004f08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	f200 80f1 	bhi.w	8004e82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d123      	bne.n	8004cf0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fd49 	bl	8005744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e139      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cee:	e10b      	b.n	8004f08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d14e      	bne.n	8004d96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	2200      	movs	r2, #0
 8004d00:	4906      	ldr	r1, [pc, #24]	; (8004d1c <HAL_I2C_Mem_Read+0x22c>)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fbc6 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e10e      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
 8004d12:	bf00      	nop
 8004d14:	00100002 	.word	0x00100002
 8004d18:	ffff0000 	.word	0xffff0000
 8004d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d94:	e0b8      	b.n	8004f08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4966      	ldr	r1, [pc, #408]	; (8004f38 <HAL_I2C_Mem_Read+0x448>)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fb77 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0bf      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	2200      	movs	r2, #0
 8004dfa:	494f      	ldr	r1, [pc, #316]	; (8004f38 <HAL_I2C_Mem_Read+0x448>)
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fb49 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e091      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e80:	e042      	b.n	8004f08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fc5c 	bl	8005744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e04c      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d118      	bne.n	8004f08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f47f aec2 	bne.w	8004c96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3728      	adds	r7, #40	; 0x28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	00010004 	.word	0x00010004

08004f3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f4c:	f7fd fca8 	bl	80028a0 <HAL_GetTick>
 8004f50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	f040 8111 	bne.w	8005186 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2319      	movs	r3, #25
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4988      	ldr	r1, [pc, #544]	; (8005190 <HAL_I2C_IsDeviceReady+0x254>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fa90 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e104      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_I2C_IsDeviceReady+0x50>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0fd      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d007      	beq.n	8004fb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2224      	movs	r2, #36	; 0x24
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a70      	ldr	r2, [pc, #448]	; (8005194 <HAL_I2C_IsDeviceReady+0x258>)
 8004fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fa4e 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500c:	d103      	bne.n	8005016 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0b6      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005028:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800502a:	f7fd fc39 	bl	80028a0 <HAL_GetTick>
 800502e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	bf0c      	ite	eq
 800503e:	2301      	moveq	r3, #1
 8005040:	2300      	movne	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800505e:	e025      	b.n	80050ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005060:	f7fd fc1e 	bl	80028a0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <HAL_I2C_IsDeviceReady+0x13a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22a0      	movs	r2, #160	; 0xa0
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2ba0      	cmp	r3, #160	; 0xa0
 80050b6:	d005      	beq.n	80050c4 <HAL_I2C_IsDeviceReady+0x188>
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <HAL_I2C_IsDeviceReady+0x188>
 80050be:	7dbb      	ldrb	r3, [r7, #22]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0cd      	beq.n	8005060 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d129      	bne.n	800512e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	2319      	movs	r3, #25
 8005106:	2201      	movs	r2, #1
 8005108:	4921      	ldr	r1, [pc, #132]	; (8005190 <HAL_I2C_IsDeviceReady+0x254>)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f9c2 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e036      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e02c      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2319      	movs	r3, #25
 800514e:	2201      	movs	r2, #1
 8005150:	490f      	ldr	r1, [pc, #60]	; (8005190 <HAL_I2C_IsDeviceReady+0x254>)
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f99e 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e012      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3301      	adds	r3, #1
 8005166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	f4ff af32 	bcc.w	8004fd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	00100002 	.word	0x00100002
 8005194:	ffff0000 	.word	0xffff0000

08005198 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	817b      	strh	r3, [r7, #10]
 80051aa:	460b      	mov	r3, r1
 80051ac:	813b      	strh	r3, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f960 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e8:	d103      	bne.n	80051f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e05f      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051f6:	897b      	ldrh	r3, [r7, #10]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	492d      	ldr	r1, [pc, #180]	; (80052c0 <I2C_RequestMemoryWrite+0x128>)
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f998 	bl	8005542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e04c      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fa02 	bl	8005640 <I2C_WaitOnTXEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b04      	cmp	r3, #4
 8005248:	d107      	bne.n	800525a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e02b      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	611a      	str	r2, [r3, #16]
 800526e:	e021      	b.n	80052b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005270:	893b      	ldrh	r3, [r7, #8]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	b29b      	uxth	r3, r3
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f9dc 	bl	8005640 <I2C_WaitOnTXEFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b04      	cmp	r3, #4
 8005294:	d107      	bne.n	80052a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e005      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052aa:	893b      	ldrh	r3, [r7, #8]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	00010002 	.word	0x00010002

080052c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	4608      	mov	r0, r1
 80052ce:	4611      	mov	r1, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	817b      	strh	r3, [r7, #10]
 80052d6:	460b      	mov	r3, r1
 80052d8:	813b      	strh	r3, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f8c2 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d103      	bne.n	800532e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0aa      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	4952      	ldr	r1, [pc, #328]	; (8005490 <I2C_RequestMemoryRead+0x1cc>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f8fa 	bl	8005542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e097      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f964 	bl	8005640 <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e076      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	e021      	b.n	80053f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f93e 	bl	8005640 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e050      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e6:	893b      	ldrh	r3, [r7, #8]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	6a39      	ldr	r1, [r7, #32]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f923 	bl	8005640 <I2C_WaitOnTXEFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b04      	cmp	r3, #4
 8005406:	d107      	bne.n	8005418 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005416:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e035      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800542a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	2200      	movs	r2, #0
 8005434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f82b 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005452:	d103      	bne.n	800545c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e013      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005460:	897b      	ldrh	r3, [r7, #10]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	4906      	ldr	r1, [pc, #24]	; (8005490 <I2C_RequestMemoryRead+0x1cc>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f863 	bl	8005542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	00010002 	.word	0x00010002

08005494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a4:	e025      	b.n	80054f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ac:	d021      	beq.n	80054f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fd f9f7 	bl	80028a0 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d302      	bcc.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d116      	bne.n	80054f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e023      	b.n	800553a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10d      	bne.n	8005518 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	43da      	mvns	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf0c      	ite	eq
 800550e:	2301      	moveq	r3, #1
 8005510:	2300      	movne	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	e00c      	b.n	8005532 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	43da      	mvns	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4013      	ands	r3, r2
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf0c      	ite	eq
 800552a:	2301      	moveq	r3, #1
 800552c:	2300      	movne	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	429a      	cmp	r2, r3
 8005536:	d0b6      	beq.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005550:	e051      	b.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005560:	d123      	bne.n	80055aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005570:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800557a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f043 0204 	orr.w	r2, r3, #4
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e046      	b.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b0:	d021      	beq.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b2:	f7fd f975 	bl	80028a0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d302      	bcc.n	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d116      	bne.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e020      	b.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10c      	bne.n	800561a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	43da      	mvns	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e00b      	b.n	8005632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	43da      	mvns	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d18d      	bne.n	8005552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800564c:	e02d      	b.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f8ce 	bl	80057f0 <I2C_IsAcknowledgeFailed>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e02d      	b.n	80056ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005664:	d021      	beq.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fd f91b 	bl	80028a0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d116      	bne.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e007      	b.n	80056ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d1ca      	bne.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056ce:	e02d      	b.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f88d 	bl	80057f0 <I2C_IsAcknowledgeFailed>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e02d      	b.n	800573c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e6:	d021      	beq.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e8:	f7fd f8da 	bl	80028a0 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d116      	bne.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e007      	b.n	800573c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d1ca      	bne.n	80056d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005750:	e042      	b.n	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b10      	cmp	r3, #16
 800575e:	d119      	bne.n	8005794 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0210 	mvn.w	r2, #16
 8005768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e029      	b.n	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005794:	f7fd f884 	bl	80028a0 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d116      	bne.n	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e007      	b.n	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d1b5      	bne.n	8005752 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d11b      	bne.n	8005840 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005810:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f043 0204 	orr.w	r2, r3, #4
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e128      	b.n	8005ab4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a90      	ldr	r2, [pc, #576]	; (8005abc <HAL_I2S_Init+0x26c>)
 800587a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fc fb73 	bl	8001f68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005898:	f023 030f 	bic.w	r3, r3, #15
 800589c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2202      	movs	r2, #2
 80058a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d060      	beq.n	8005970 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80058b6:	2310      	movs	r3, #16
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e001      	b.n	80058c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80058bc:	2320      	movs	r3, #32
 80058be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d802      	bhi.n	80058ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80058ce:	2001      	movs	r0, #1
 80058d0:	f001 f9e6 	bl	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq>
 80058d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058de:	d125      	bne.n	800592c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d010      	beq.n	800590a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	3305      	adds	r3, #5
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e01f      	b.n	800594a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	fbb2 f2f3 	udiv	r2, r2, r3
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	461a      	mov	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	3305      	adds	r3, #5
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	e00e      	b.n	800594a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	fbb2 f2f3 	udiv	r2, r2, r3
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	461a      	mov	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	3305      	adds	r3, #5
 8005948:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4a5c      	ldr	r2, [pc, #368]	; (8005ac0 <HAL_I2S_Init+0x270>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	08db      	lsrs	r3, r3, #3
 8005954:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	e003      	b.n	8005978 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005970:	2302      	movs	r3, #2
 8005972:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d902      	bls.n	8005984 <HAL_I2S_Init+0x134>
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	2bff      	cmp	r3, #255	; 0xff
 8005982:	d907      	bls.n	8005994 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005988:	f043 0210 	orr.w	r2, r3, #16
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e08f      	b.n	8005ab4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	ea42 0103 	orr.w	r1, r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059b2:	f023 030f 	bic.w	r3, r3, #15
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6851      	ldr	r1, [r2, #4]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6892      	ldr	r2, [r2, #8]
 80059be:	4311      	orrs	r1, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	68d2      	ldr	r2, [r2, #12]
 80059c4:	4311      	orrs	r1, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6992      	ldr	r2, [r2, #24]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d161      	bne.n	8005aa4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a38      	ldr	r2, [pc, #224]	; (8005ac4 <HAL_I2S_Init+0x274>)
 80059e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a37      	ldr	r2, [pc, #220]	; (8005ac8 <HAL_I2S_Init+0x278>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <HAL_I2S_Init+0x1a4>
 80059f0:	4b36      	ldr	r3, [pc, #216]	; (8005acc <HAL_I2S_Init+0x27c>)
 80059f2:	e001      	b.n	80059f8 <HAL_I2S_Init+0x1a8>
 80059f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	4932      	ldr	r1, [pc, #200]	; (8005ac8 <HAL_I2S_Init+0x278>)
 8005a00:	428a      	cmp	r2, r1
 8005a02:	d101      	bne.n	8005a08 <HAL_I2S_Init+0x1b8>
 8005a04:	4a31      	ldr	r2, [pc, #196]	; (8005acc <HAL_I2S_Init+0x27c>)
 8005a06:	e001      	b.n	8005a0c <HAL_I2S_Init+0x1bc>
 8005a08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a10:	f023 030f 	bic.w	r3, r3, #15
 8005a14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ac8 <HAL_I2S_Init+0x278>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_I2S_Init+0x1d4>
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <HAL_I2S_Init+0x27c>)
 8005a22:	e001      	b.n	8005a28 <HAL_I2S_Init+0x1d8>
 8005a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a28:	2202      	movs	r2, #2
 8005a2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <HAL_I2S_Init+0x278>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d101      	bne.n	8005a3a <HAL_I2S_Init+0x1ea>
 8005a36:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_I2S_Init+0x27c>)
 8005a38:	e001      	b.n	8005a3e <HAL_I2S_Init+0x1ee>
 8005a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4a:	d003      	beq.n	8005a54 <HAL_I2S_Init+0x204>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	e001      	b.n	8005a60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a74:	4313      	orrs	r3, r2
 8005a76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	897b      	ldrh	r3, [r7, #10]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <HAL_I2S_Init+0x278>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d101      	bne.n	8005a9c <HAL_I2S_Init+0x24c>
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <HAL_I2S_Init+0x27c>)
 8005a9a:	e001      	b.n	8005aa0 <HAL_I2S_Init+0x250>
 8005a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aa0:	897a      	ldrh	r2, [r7, #10]
 8005aa2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	08005bc7 	.word	0x08005bc7
 8005ac0:	cccccccd 	.word	0xcccccccd
 8005ac4:	08005cdd 	.word	0x08005cdd
 8005ac8:	40003800 	.word	0x40003800
 8005acc:	40003400 	.word	0x40003400

08005ad0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	881a      	ldrh	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	1c9a      	adds	r2, r3, #2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10e      	bne.n	8005b60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ffb8 	bl	8005ad0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10e      	bne.n	8005bbe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff93 	bl	8005ae4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d13a      	bne.n	8005c58 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d109      	bne.n	8005c00 <I2S_IRQHandler+0x3a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d102      	bne.n	8005c00 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ffb4 	bl	8005b68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d126      	bne.n	8005c58 <I2S_IRQHandler+0x92>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d11f      	bne.n	8005c58 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff ff50 	bl	8005af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d136      	bne.n	8005cd2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d109      	bne.n	8005c82 <I2S_IRQHandler+0xbc>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d102      	bne.n	8005c82 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ff45 	bl	8005b0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d122      	bne.n	8005cd2 <I2S_IRQHandler+0x10c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d11b      	bne.n	8005cd2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ca8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f043 0204 	orr.w	r2, r3, #4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff13 	bl	8005af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a92      	ldr	r2, [pc, #584]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d101      	bne.n	8005cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005cf6:	4b92      	ldr	r3, [pc, #584]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cf8:	e001      	b.n	8005cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a8b      	ldr	r2, [pc, #556]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d101      	bne.n	8005d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d14:	4b8a      	ldr	r3, [pc, #552]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d16:	e001      	b.n	8005d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d004      	beq.n	8005d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f040 8099 	bne.w	8005e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d107      	bne.n	8005d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f925 	bl	8005f98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f9c8 	bl	80060f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	d13a      	bne.n	8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d035      	beq.n	8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a6e      	ldr	r2, [pc, #440]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005d86:	4b6e      	ldr	r3, [pc, #440]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d88:	e001      	b.n	8005d8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4969      	ldr	r1, [pc, #420]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d96:	428b      	cmp	r3, r1
 8005d98:	d101      	bne.n	8005d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005d9a:	4b69      	ldr	r3, [pc, #420]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d9c:	e001      	b.n	8005da2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005da6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005db6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	f043 0202 	orr.w	r2, r3, #2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fe88 	bl	8005af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	f040 80c3 	bne.w	8005f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80bd 	beq.w	8005f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a49      	ldr	r2, [pc, #292]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d101      	bne.n	8005e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e1a:	4b49      	ldr	r3, [pc, #292]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e1c:	e001      	b.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4944      	ldr	r1, [pc, #272]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e2a:	428b      	cmp	r3, r1
 8005e2c:	d101      	bne.n	8005e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e2e:	4b44      	ldr	r3, [pc, #272]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e30:	e001      	b.n	8005e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f043 0204 	orr.w	r2, r3, #4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fe4a 	bl	8005af8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e64:	e089      	b.n	8005f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d107      	bne.n	8005e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8be 	bl	8005ffc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f8fd 	bl	8006094 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d12f      	bne.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02a      	beq.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ebc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d101      	bne.n	8005ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005eca:	e001      	b.n	8005ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4919      	ldr	r1, [pc, #100]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ed8:	428b      	cmp	r3, r1
 8005eda:	d101      	bne.n	8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005edc:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ede:	e001      	b.n	8005ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ee8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f043 0202 	orr.w	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fdfa 	bl	8005af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d136      	bne.n	8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d031      	beq.n	8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d101      	bne.n	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f24:	e001      	b.n	8005f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4902      	ldr	r1, [pc, #8]	; (8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f32:	428b      	cmp	r3, r1
 8005f34:	d106      	bne.n	8005f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f36:	4b02      	ldr	r3, [pc, #8]	; (8005f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f38:	e006      	b.n	8005f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f3a:	bf00      	nop
 8005f3c:	40003800 	.word	0x40003800
 8005f40:	40003400 	.word	0x40003400
 8005f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f4c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	f043 0204 	orr.w	r2, r3, #4
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff fdc0 	bl	8005af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f78:	e000      	b.n	8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f7a:	bf00      	nop
}
 8005f7c:	bf00      	nop
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	1c99      	adds	r1, r3, #2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6251      	str	r1, [r2, #36]	; 0x24
 8005faa:	881a      	ldrh	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d113      	bne.n	8005ff2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ffc9 	bl	8005f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	1c99      	adds	r1, r3, #2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6251      	str	r1, [r2, #36]	; 0x24
 800600e:	8819      	ldrh	r1, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1d      	ldr	r2, [pc, #116]	; (800608c <I2SEx_TxISR_I2SExt+0x90>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d101      	bne.n	800601e <I2SEx_TxISR_I2SExt+0x22>
 800601a:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <I2SEx_TxISR_I2SExt+0x94>)
 800601c:	e001      	b.n	8006022 <I2SEx_TxISR_I2SExt+0x26>
 800601e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006022:	460a      	mov	r2, r1
 8006024:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d121      	bne.n	8006082 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a12      	ldr	r2, [pc, #72]	; (800608c <I2SEx_TxISR_I2SExt+0x90>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d101      	bne.n	800604c <I2SEx_TxISR_I2SExt+0x50>
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <I2SEx_TxISR_I2SExt+0x94>)
 800604a:	e001      	b.n	8006050 <I2SEx_TxISR_I2SExt+0x54>
 800604c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	490d      	ldr	r1, [pc, #52]	; (800608c <I2SEx_TxISR_I2SExt+0x90>)
 8006058:	428b      	cmp	r3, r1
 800605a:	d101      	bne.n	8006060 <I2SEx_TxISR_I2SExt+0x64>
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <I2SEx_TxISR_I2SExt+0x94>)
 800605e:	e001      	b.n	8006064 <I2SEx_TxISR_I2SExt+0x68>
 8006060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006064:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006068:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff81 	bl	8005f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40003800 	.word	0x40003800
 8006090:	40003400 	.word	0x40003400

08006094 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68d8      	ldr	r0, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	1c99      	adds	r1, r3, #2
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060ac:	b282      	uxth	r2, r0
 80060ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d113      	bne.n	80060f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff ff4a 	bl	8005f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a20      	ldr	r2, [pc, #128]	; (8006188 <I2SEx_RxISR_I2SExt+0x90>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <I2SEx_RxISR_I2SExt+0x16>
 800610a:	4b20      	ldr	r3, [pc, #128]	; (800618c <I2SEx_RxISR_I2SExt+0x94>)
 800610c:	e001      	b.n	8006112 <I2SEx_RxISR_I2SExt+0x1a>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	68d8      	ldr	r0, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	1c99      	adds	r1, r3, #2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800611e:	b282      	uxth	r2, r0
 8006120:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d121      	bne.n	800617e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a12      	ldr	r2, [pc, #72]	; (8006188 <I2SEx_RxISR_I2SExt+0x90>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d101      	bne.n	8006148 <I2SEx_RxISR_I2SExt+0x50>
 8006144:	4b11      	ldr	r3, [pc, #68]	; (800618c <I2SEx_RxISR_I2SExt+0x94>)
 8006146:	e001      	b.n	800614c <I2SEx_RxISR_I2SExt+0x54>
 8006148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	490d      	ldr	r1, [pc, #52]	; (8006188 <I2SEx_RxISR_I2SExt+0x90>)
 8006154:	428b      	cmp	r3, r1
 8006156:	d101      	bne.n	800615c <I2SEx_RxISR_I2SExt+0x64>
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <I2SEx_RxISR_I2SExt+0x94>)
 800615a:	e001      	b.n	8006160 <I2SEx_RxISR_I2SExt+0x68>
 800615c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006160:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006164:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff ff03 	bl	8005f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40003800 	.word	0x40003800
 800618c:	40003400 	.word	0x40003400

08006190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e267      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d075      	beq.n	800629a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ae:	4b88      	ldr	r3, [pc, #544]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 030c 	and.w	r3, r3, #12
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d00c      	beq.n	80061d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ba:	4b85      	ldr	r3, [pc, #532]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d112      	bne.n	80061ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061c6:	4b82      	ldr	r3, [pc, #520]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061d2:	d10b      	bne.n	80061ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d4:	4b7e      	ldr	r3, [pc, #504]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d05b      	beq.n	8006298 <HAL_RCC_OscConfig+0x108>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d157      	bne.n	8006298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e242      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d106      	bne.n	8006204 <HAL_RCC_OscConfig+0x74>
 80061f6:	4b76      	ldr	r3, [pc, #472]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a75      	ldr	r2, [pc, #468]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80061fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e01d      	b.n	8006240 <HAL_RCC_OscConfig+0xb0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x98>
 800620e:	4b70      	ldr	r3, [pc, #448]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a6f      	ldr	r2, [pc, #444]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 8006214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b6d      	ldr	r3, [pc, #436]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a6c      	ldr	r2, [pc, #432]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e00b      	b.n	8006240 <HAL_RCC_OscConfig+0xb0>
 8006228:	4b69      	ldr	r3, [pc, #420]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a68      	ldr	r2, [pc, #416]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 800622e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	4b66      	ldr	r3, [pc, #408]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a65      	ldr	r2, [pc, #404]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 800623a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fc fb2a 	bl	80028a0 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006250:	f7fc fb26 	bl	80028a0 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e207      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006262:	4b5b      	ldr	r3, [pc, #364]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0xc0>
 800626e:	e014      	b.n	800629a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fc fb16 	bl	80028a0 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006278:	f7fc fb12 	bl	80028a0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	; 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e1f3      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628a:	4b51      	ldr	r3, [pc, #324]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0xe8>
 8006296:	e000      	b.n	800629a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d063      	beq.n	800636e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062a6:	4b4a      	ldr	r3, [pc, #296]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062b2:	4b47      	ldr	r3, [pc, #284]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d11c      	bne.n	80062f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062be:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d116      	bne.n	80062f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_RCC_OscConfig+0x152>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d001      	beq.n	80062e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e1c7      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e2:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4937      	ldr	r1, [pc, #220]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f6:	e03a      	b.n	800636e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d020      	beq.n	8006342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006300:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006306:	f7fc facb 	bl	80028a0 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800630e:	f7fc fac7 	bl	80028a0 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e1a8      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006320:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632c:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4925      	ldr	r1, [pc, #148]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
 8006340:	e015      	b.n	800636e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HAL_RCC_OscConfig+0x244>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fc faaa 	bl	80028a0 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006350:	f7fc faa6 	bl	80028a0 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e187      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006362:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d036      	beq.n	80063e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <HAL_RCC_OscConfig+0x248>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006388:	f7fc fa8a 	bl	80028a0 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006390:	f7fc fa86 	bl	80028a0 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e167      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <HAL_RCC_OscConfig+0x240>)
 80063a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f0      	beq.n	8006390 <HAL_RCC_OscConfig+0x200>
 80063ae:	e01b      	b.n	80063e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCC_OscConfig+0x248>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b6:	f7fc fa73 	bl	80028a0 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063bc:	e00e      	b.n	80063dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063be:	f7fc fa6f 	bl	80028a0 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d907      	bls.n	80063dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e150      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
 80063d0:	40023800 	.word	0x40023800
 80063d4:	42470000 	.word	0x42470000
 80063d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063dc:	4b88      	ldr	r3, [pc, #544]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80063de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1ea      	bne.n	80063be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8097 	beq.w	8006524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063fa:	4b81      	ldr	r3, [pc, #516]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10f      	bne.n	8006426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	4b7d      	ldr	r3, [pc, #500]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	4a7c      	ldr	r2, [pc, #496]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006414:	6413      	str	r3, [r2, #64]	; 0x40
 8006416:	4b7a      	ldr	r3, [pc, #488]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	60bb      	str	r3, [r7, #8]
 8006420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006426:	4b77      	ldr	r3, [pc, #476]	; (8006604 <HAL_RCC_OscConfig+0x474>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d118      	bne.n	8006464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006432:	4b74      	ldr	r3, [pc, #464]	; (8006604 <HAL_RCC_OscConfig+0x474>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a73      	ldr	r2, [pc, #460]	; (8006604 <HAL_RCC_OscConfig+0x474>)
 8006438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800643e:	f7fc fa2f 	bl	80028a0 <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006446:	f7fc fa2b 	bl	80028a0 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e10c      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006458:	4b6a      	ldr	r3, [pc, #424]	; (8006604 <HAL_RCC_OscConfig+0x474>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0f0      	beq.n	8006446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d106      	bne.n	800647a <HAL_RCC_OscConfig+0x2ea>
 800646c:	4b64      	ldr	r3, [pc, #400]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 800646e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006470:	4a63      	ldr	r2, [pc, #396]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6713      	str	r3, [r2, #112]	; 0x70
 8006478:	e01c      	b.n	80064b4 <HAL_RCC_OscConfig+0x324>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b05      	cmp	r3, #5
 8006480:	d10c      	bne.n	800649c <HAL_RCC_OscConfig+0x30c>
 8006482:	4b5f      	ldr	r3, [pc, #380]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	4a5e      	ldr	r2, [pc, #376]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006488:	f043 0304 	orr.w	r3, r3, #4
 800648c:	6713      	str	r3, [r2, #112]	; 0x70
 800648e:	4b5c      	ldr	r3, [pc, #368]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	4a5b      	ldr	r2, [pc, #364]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	6713      	str	r3, [r2, #112]	; 0x70
 800649a:	e00b      	b.n	80064b4 <HAL_RCC_OscConfig+0x324>
 800649c:	4b58      	ldr	r3, [pc, #352]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	4a57      	ldr	r2, [pc, #348]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	6713      	str	r3, [r2, #112]	; 0x70
 80064a8:	4b55      	ldr	r3, [pc, #340]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	4a54      	ldr	r2, [pc, #336]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80064ae:	f023 0304 	bic.w	r3, r3, #4
 80064b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d015      	beq.n	80064e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064bc:	f7fc f9f0 	bl	80028a0 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c2:	e00a      	b.n	80064da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064c4:	f7fc f9ec 	bl	80028a0 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0cb      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064da:	4b49      	ldr	r3, [pc, #292]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0ee      	beq.n	80064c4 <HAL_RCC_OscConfig+0x334>
 80064e6:	e014      	b.n	8006512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e8:	f7fc f9da 	bl	80028a0 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ee:	e00a      	b.n	8006506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f0:	f7fc f9d6 	bl	80028a0 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fe:	4293      	cmp	r3, r2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e0b5      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ee      	bne.n	80064f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d105      	bne.n	8006524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006518:	4b39      	ldr	r3, [pc, #228]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	4a38      	ldr	r2, [pc, #224]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 800651e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80a1 	beq.w	8006670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800652e:	4b34      	ldr	r3, [pc, #208]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 030c 	and.w	r3, r3, #12
 8006536:	2b08      	cmp	r3, #8
 8006538:	d05c      	beq.n	80065f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d141      	bne.n	80065c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006542:	4b31      	ldr	r3, [pc, #196]	; (8006608 <HAL_RCC_OscConfig+0x478>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fc f9aa 	bl	80028a0 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006550:	f7fc f9a6 	bl	80028a0 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e087      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006562:	4b27      	ldr	r3, [pc, #156]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69da      	ldr	r2, [r3, #28]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	019b      	lsls	r3, r3, #6
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	3b01      	subs	r3, #1
 8006588:	041b      	lsls	r3, r3, #16
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	061b      	lsls	r3, r3, #24
 8006592:	491b      	ldr	r1, [pc, #108]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 8006594:	4313      	orrs	r3, r2
 8006596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006598:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <HAL_RCC_OscConfig+0x478>)
 800659a:	2201      	movs	r2, #1
 800659c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659e:	f7fc f97f 	bl	80028a0 <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a6:	f7fc f97b 	bl	80028a0 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e05c      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b8:	4b11      	ldr	r3, [pc, #68]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0f0      	beq.n	80065a6 <HAL_RCC_OscConfig+0x416>
 80065c4:	e054      	b.n	8006670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c6:	4b10      	ldr	r3, [pc, #64]	; (8006608 <HAL_RCC_OscConfig+0x478>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065cc:	f7fc f968 	bl	80028a0 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065d4:	f7fc f964 	bl	80028a0 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e045      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <HAL_RCC_OscConfig+0x470>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x444>
 80065f2:	e03d      	b.n	8006670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d107      	bne.n	800660c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e038      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
 8006600:	40023800 	.word	0x40023800
 8006604:	40007000 	.word	0x40007000
 8006608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <HAL_RCC_OscConfig+0x4ec>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d028      	beq.n	800666c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006624:	429a      	cmp	r2, r3
 8006626:	d121      	bne.n	800666c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d11a      	bne.n	800666c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800663c:	4013      	ands	r3, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006644:	4293      	cmp	r3, r2
 8006646:	d111      	bne.n	800666c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	3b01      	subs	r3, #1
 8006656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d107      	bne.n	800666c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800

08006680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0cc      	b.n	800682e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006694:	4b68      	ldr	r3, [pc, #416]	; (8006838 <HAL_RCC_ClockConfig+0x1b8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d90c      	bls.n	80066bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a2:	4b65      	ldr	r3, [pc, #404]	; (8006838 <HAL_RCC_ClockConfig+0x1b8>)
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066aa:	4b63      	ldr	r3, [pc, #396]	; (8006838 <HAL_RCC_ClockConfig+0x1b8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d001      	beq.n	80066bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0b8      	b.n	800682e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d020      	beq.n	800670a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066d4:	4b59      	ldr	r3, [pc, #356]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4a58      	ldr	r2, [pc, #352]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066ec:	4b53      	ldr	r3, [pc, #332]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4a52      	ldr	r2, [pc, #328]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f8:	4b50      	ldr	r3, [pc, #320]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	494d      	ldr	r1, [pc, #308]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	4313      	orrs	r3, r2
 8006708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d044      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d107      	bne.n	800672e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671e:	4b47      	ldr	r3, [pc, #284]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d119      	bne.n	800675e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e07f      	b.n	800682e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d003      	beq.n	800673e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800673a:	2b03      	cmp	r3, #3
 800673c:	d107      	bne.n	800674e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673e:	4b3f      	ldr	r3, [pc, #252]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e06f      	b.n	800682e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674e:	4b3b      	ldr	r3, [pc, #236]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e067      	b.n	800682e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800675e:	4b37      	ldr	r3, [pc, #220]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f023 0203 	bic.w	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4934      	ldr	r1, [pc, #208]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	4313      	orrs	r3, r2
 800676e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006770:	f7fc f896 	bl	80028a0 <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006776:	e00a      	b.n	800678e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006778:	f7fc f892 	bl	80028a0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	; 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e04f      	b.n	800682e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678e:	4b2b      	ldr	r3, [pc, #172]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 020c 	and.w	r2, r3, #12
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	429a      	cmp	r2, r3
 800679e:	d1eb      	bne.n	8006778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <HAL_RCC_ClockConfig+0x1b8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d20c      	bcs.n	80067c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ae:	4b22      	ldr	r3, [pc, #136]	; (8006838 <HAL_RCC_ClockConfig+0x1b8>)
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <HAL_RCC_ClockConfig+0x1b8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d001      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e032      	b.n	800682e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067d4:	4b19      	ldr	r3, [pc, #100]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	4916      	ldr	r1, [pc, #88]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	490e      	ldr	r1, [pc, #56]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006806:	f000 f821 	bl	800684c <HAL_RCC_GetSysClockFreq>
 800680a:	4602      	mov	r2, r0
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	490a      	ldr	r1, [pc, #40]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 8006818:	5ccb      	ldrb	r3, [r1, r3]
 800681a:	fa22 f303 	lsr.w	r3, r2, r3
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <HAL_RCC_ClockConfig+0x1c8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7fb fff6 	bl	8002818 <HAL_InitTick>

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40023c00 	.word	0x40023c00
 800683c:	40023800 	.word	0x40023800
 8006840:	0800da38 	.word	0x0800da38
 8006844:	20000000 	.word	0x20000000
 8006848:	20000004 	.word	0x20000004

0800684c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800684c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006850:	b094      	sub	sp, #80	; 0x50
 8006852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	647b      	str	r3, [r7, #68]	; 0x44
 8006858:	2300      	movs	r3, #0
 800685a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800685c:	2300      	movs	r3, #0
 800685e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006864:	4b79      	ldr	r3, [pc, #484]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b08      	cmp	r3, #8
 800686e:	d00d      	beq.n	800688c <HAL_RCC_GetSysClockFreq+0x40>
 8006870:	2b08      	cmp	r3, #8
 8006872:	f200 80e1 	bhi.w	8006a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_RCC_GetSysClockFreq+0x34>
 800687a:	2b04      	cmp	r3, #4
 800687c:	d003      	beq.n	8006886 <HAL_RCC_GetSysClockFreq+0x3a>
 800687e:	e0db      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006880:	4b73      	ldr	r3, [pc, #460]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006882:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006884:	e0db      	b.n	8006a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006886:	4b73      	ldr	r3, [pc, #460]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8006888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800688a:	e0d8      	b.n	8006a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800688c:	4b6f      	ldr	r3, [pc, #444]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006896:	4b6d      	ldr	r3, [pc, #436]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d063      	beq.n	800696a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068a2:	4b6a      	ldr	r3, [pc, #424]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	099b      	lsrs	r3, r3, #6
 80068a8:	2200      	movs	r2, #0
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
 80068b6:	2300      	movs	r3, #0
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068be:	4622      	mov	r2, r4
 80068c0:	462b      	mov	r3, r5
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f04f 0100 	mov.w	r1, #0
 80068ca:	0159      	lsls	r1, r3, #5
 80068cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068d0:	0150      	lsls	r0, r2, #5
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4621      	mov	r1, r4
 80068d8:	1a51      	subs	r1, r2, r1
 80068da:	6139      	str	r1, [r7, #16]
 80068dc:	4629      	mov	r1, r5
 80068de:	eb63 0301 	sbc.w	r3, r3, r1
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068f0:	4659      	mov	r1, fp
 80068f2:	018b      	lsls	r3, r1, #6
 80068f4:	4651      	mov	r1, sl
 80068f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068fa:	4651      	mov	r1, sl
 80068fc:	018a      	lsls	r2, r1, #6
 80068fe:	4651      	mov	r1, sl
 8006900:	ebb2 0801 	subs.w	r8, r2, r1
 8006904:	4659      	mov	r1, fp
 8006906:	eb63 0901 	sbc.w	r9, r3, r1
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800691a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800691e:	4690      	mov	r8, r2
 8006920:	4699      	mov	r9, r3
 8006922:	4623      	mov	r3, r4
 8006924:	eb18 0303 	adds.w	r3, r8, r3
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	462b      	mov	r3, r5
 800692c:	eb49 0303 	adc.w	r3, r9, r3
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800693e:	4629      	mov	r1, r5
 8006940:	024b      	lsls	r3, r1, #9
 8006942:	4621      	mov	r1, r4
 8006944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006948:	4621      	mov	r1, r4
 800694a:	024a      	lsls	r2, r1, #9
 800694c:	4610      	mov	r0, r2
 800694e:	4619      	mov	r1, r3
 8006950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006952:	2200      	movs	r2, #0
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
 8006956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800695c:	f7fa f9cc 	bl	8000cf8 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4613      	mov	r3, r2
 8006966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006968:	e058      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800696a:	4b38      	ldr	r3, [pc, #224]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	099b      	lsrs	r3, r3, #6
 8006970:	2200      	movs	r2, #0
 8006972:	4618      	mov	r0, r3
 8006974:	4611      	mov	r1, r2
 8006976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	2300      	movs	r3, #0
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
 8006980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	f04f 0000 	mov.w	r0, #0
 800698c:	f04f 0100 	mov.w	r1, #0
 8006990:	0159      	lsls	r1, r3, #5
 8006992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006996:	0150      	lsls	r0, r2, #5
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4641      	mov	r1, r8
 800699e:	ebb2 0a01 	subs.w	sl, r2, r1
 80069a2:	4649      	mov	r1, r9
 80069a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069bc:	ebb2 040a 	subs.w	r4, r2, sl
 80069c0:	eb63 050b 	sbc.w	r5, r3, fp
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	00eb      	lsls	r3, r5, #3
 80069ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069d2:	00e2      	lsls	r2, r4, #3
 80069d4:	4614      	mov	r4, r2
 80069d6:	461d      	mov	r5, r3
 80069d8:	4643      	mov	r3, r8
 80069da:	18e3      	adds	r3, r4, r3
 80069dc:	603b      	str	r3, [r7, #0]
 80069de:	464b      	mov	r3, r9
 80069e0:	eb45 0303 	adc.w	r3, r5, r3
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069f2:	4629      	mov	r1, r5
 80069f4:	028b      	lsls	r3, r1, #10
 80069f6:	4621      	mov	r1, r4
 80069f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069fc:	4621      	mov	r1, r4
 80069fe:	028a      	lsls	r2, r1, #10
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a06:	2200      	movs	r2, #0
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	61fa      	str	r2, [r7, #28]
 8006a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a10:	f7fa f972 	bl	8000cf8 <__aeabi_uldivmod>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4613      	mov	r3, r2
 8006a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	3301      	adds	r3, #1
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a36:	e002      	b.n	8006a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3750      	adds	r7, #80	; 0x50
 8006a44:	46bd      	mov	sp, r7
 8006a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	00f42400 	.word	0x00f42400
 8006a54:	007a1200 	.word	0x007a1200

08006a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a5c:	4b03      	ldr	r3, [pc, #12]	; (8006a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000000 	.word	0x20000000

08006a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a74:	f7ff fff0 	bl	8006a58 <HAL_RCC_GetHCLKFreq>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	0a9b      	lsrs	r3, r3, #10
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	4903      	ldr	r1, [pc, #12]	; (8006a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a86:	5ccb      	ldrb	r3, [r1, r3]
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40023800 	.word	0x40023800
 8006a94:	0800da48 	.word	0x0800da48

08006a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a9c:	f7ff ffdc 	bl	8006a58 <HAL_RCC_GetHCLKFreq>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	0b5b      	lsrs	r3, r3, #13
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	4903      	ldr	r1, [pc, #12]	; (8006abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aae:	5ccb      	ldrb	r3, [r1, r3]
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	0800da48 	.word	0x0800da48

08006ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d038      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ae8:	4b68      	ldr	r3, [pc, #416]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aee:	f7fb fed7 	bl	80028a0 <HAL_GetTick>
 8006af2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006af4:	e008      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006af6:	f7fb fed3 	bl	80028a0 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e0bd      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b08:	4b61      	ldr	r3, [pc, #388]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1f0      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	019b      	lsls	r3, r3, #6
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	071b      	lsls	r3, r3, #28
 8006b26:	495a      	ldr	r1, [pc, #360]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b2e:	4b57      	ldr	r3, [pc, #348]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b34:	f7fb feb4 	bl	80028a0 <HAL_GetTick>
 8006b38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b3c:	f7fb feb0 	bl	80028a0 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e09a      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b4e:	4b50      	ldr	r3, [pc, #320]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8083 	beq.w	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	4b48      	ldr	r3, [pc, #288]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	4a47      	ldr	r2, [pc, #284]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b76:	6413      	str	r3, [r2, #64]	; 0x40
 8006b78:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b84:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a42      	ldr	r2, [pc, #264]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b90:	f7fb fe86 	bl	80028a0 <HAL_GetTick>
 8006b94:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b98:	f7fb fe82 	bl	80028a0 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e06c      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006baa:	4b3a      	ldr	r3, [pc, #232]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bb6:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bbe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02f      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d028      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bd4:	4b2e      	ldr	r3, [pc, #184]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bdc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bde:	4b2e      	ldr	r3, [pc, #184]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006be4:	4b2c      	ldr	r3, [pc, #176]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bea:	4a29      	ldr	r2, [pc, #164]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bf0:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d114      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fb fe50 	bl	80028a0 <HAL_GetTick>
 8006c00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c02:	e00a      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c04:	f7fb fe4c 	bl	80028a0 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e034      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0ee      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c32:	d10d      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006c34:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c48:	4911      	ldr	r1, [pc, #68]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	608b      	str	r3, [r1, #8]
 8006c4e:	e005      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a0e      	ldr	r2, [pc, #56]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c5a:	6093      	str	r3, [r2, #8]
 8006c5c:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c68:	4909      	ldr	r1, [pc, #36]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7d1a      	ldrb	r2, [r3, #20]
 8006c7e:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c80:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	42470068 	.word	0x42470068
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40007000 	.word	0x40007000
 8006c98:	42470e40 	.word	0x42470e40
 8006c9c:	424711e0 	.word	0x424711e0

08006ca0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d140      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006cbe:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d131      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cd4:	4b1f      	ldr	r3, [pc, #124]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006cd6:	617b      	str	r3, [r7, #20]
          break;
 8006cd8:	e031      	b.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ce6:	d109      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf2:	4a19      	ldr	r2, [pc, #100]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	e008      	b.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006cfc:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	fb02 f303 	mul.w	r3, r2, r3
 8006d20:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d28:	0f1b      	lsrs	r3, r3, #28
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]
          break;
 8006d36:	e002      	b.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	617b      	str	r3, [r7, #20]
          break;
 8006d3c:	bf00      	nop
        }
      }
      break;
 8006d3e:	bf00      	nop
    }
  }
  return frequency;
 8006d40:	697b      	ldr	r3, [r7, #20]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800
 8006d54:	00bb8000 	.word	0x00bb8000
 8006d58:	007a1200 	.word	0x007a1200
 8006d5c:	00f42400 	.word	0x00f42400

08006d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e07b      	b.n	8006e6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d108      	bne.n	8006d8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d82:	d009      	beq.n	8006d98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	61da      	str	r2, [r3, #28]
 8006d8a:	e005      	b.n	8006d98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fb faf6 	bl	80023a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1c:	ea42 0103 	orr.w	r1, r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	f003 0104 	and.w	r1, r3, #4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	f003 0210 	and.w	r2, r3, #16
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e03f      	b.n	8006f04 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fb fc29 	bl	80026f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2224      	movs	r2, #36	; 0x24
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f928 	bl	800710c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d17c      	bne.n	8007026 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_UART_Transmit+0x2c>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e075      	b.n	8007028 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Transmit+0x3e>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e06e      	b.n	8007028 <HAL_UART_Transmit+0x11c>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2221      	movs	r2, #33	; 0x21
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f60:	f7fb fc9e 	bl	80028a0 <HAL_GetTick>
 8006f64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7a:	d108      	bne.n	8006f8e <HAL_UART_Transmit+0x82>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	e003      	b.n	8006f96 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f9e:	e02a      	b.n	8006ff6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2180      	movs	r1, #128	; 0x80
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f840 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e036      	b.n	8007028 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e007      	b.n	8006fe8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1cf      	bne.n	8006fa0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2200      	movs	r2, #0
 8007008:	2140      	movs	r1, #64	; 0x40
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f810 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e006      	b.n	8007028 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b090      	sub	sp, #64	; 0x40
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007040:	e050      	b.n	80070e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007048:	d04c      	beq.n	80070e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800704a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <UART_WaitOnFlagUntilTimeout+0x30>
 8007050:	f7fb fc26 	bl	80028a0 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800705c:	429a      	cmp	r2, r3
 800705e:	d241      	bcs.n	80070e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007080:	637a      	str	r2, [r7, #52]	; 0x34
 8007082:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	613b      	str	r3, [r7, #16]
   return(result);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b4:	623a      	str	r2, [r7, #32]
 80070b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e00f      	b.n	8007104 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4013      	ands	r3, r2
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d09f      	beq.n	8007042 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3740      	adds	r7, #64	; 0x40
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800710c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007110:	b0c0      	sub	sp, #256	; 0x100
 8007112:	af00      	add	r7, sp, #0
 8007114:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007128:	68d9      	ldr	r1, [r3, #12]
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	ea40 0301 	orr.w	r3, r0, r1
 8007134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	431a      	orrs	r2, r3
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	431a      	orrs	r2, r3
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007164:	f021 010c 	bic.w	r1, r1, #12
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007172:	430b      	orrs	r3, r1
 8007174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007186:	6999      	ldr	r1, [r3, #24]
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	ea40 0301 	orr.w	r3, r0, r1
 8007192:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b8f      	ldr	r3, [pc, #572]	; (80073d8 <UART_SetConfig+0x2cc>)
 800719c:	429a      	cmp	r2, r3
 800719e:	d005      	beq.n	80071ac <UART_SetConfig+0xa0>
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	4b8d      	ldr	r3, [pc, #564]	; (80073dc <UART_SetConfig+0x2d0>)
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d104      	bne.n	80071b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071ac:	f7ff fc74 	bl	8006a98 <HAL_RCC_GetPCLK2Freq>
 80071b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071b4:	e003      	b.n	80071be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071b6:	f7ff fc5b 	bl	8006a70 <HAL_RCC_GetPCLK1Freq>
 80071ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c8:	f040 810c 	bne.w	80073e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071de:	4622      	mov	r2, r4
 80071e0:	462b      	mov	r3, r5
 80071e2:	1891      	adds	r1, r2, r2
 80071e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80071e6:	415b      	adcs	r3, r3
 80071e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071ee:	4621      	mov	r1, r4
 80071f0:	eb12 0801 	adds.w	r8, r2, r1
 80071f4:	4629      	mov	r1, r5
 80071f6:	eb43 0901 	adc.w	r9, r3, r1
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800720a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800720e:	4690      	mov	r8, r2
 8007210:	4699      	mov	r9, r3
 8007212:	4623      	mov	r3, r4
 8007214:	eb18 0303 	adds.w	r3, r8, r3
 8007218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800721c:	462b      	mov	r3, r5
 800721e:	eb49 0303 	adc.w	r3, r9, r3
 8007222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007232:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800723a:	460b      	mov	r3, r1
 800723c:	18db      	adds	r3, r3, r3
 800723e:	653b      	str	r3, [r7, #80]	; 0x50
 8007240:	4613      	mov	r3, r2
 8007242:	eb42 0303 	adc.w	r3, r2, r3
 8007246:	657b      	str	r3, [r7, #84]	; 0x54
 8007248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800724c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007250:	f7f9 fd52 	bl	8000cf8 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4b61      	ldr	r3, [pc, #388]	; (80073e0 <UART_SetConfig+0x2d4>)
 800725a:	fba3 2302 	umull	r2, r3, r3, r2
 800725e:	095b      	lsrs	r3, r3, #5
 8007260:	011c      	lsls	r4, r3, #4
 8007262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007266:	2200      	movs	r2, #0
 8007268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800726c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007270:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007274:	4642      	mov	r2, r8
 8007276:	464b      	mov	r3, r9
 8007278:	1891      	adds	r1, r2, r2
 800727a:	64b9      	str	r1, [r7, #72]	; 0x48
 800727c:	415b      	adcs	r3, r3
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007284:	4641      	mov	r1, r8
 8007286:	eb12 0a01 	adds.w	sl, r2, r1
 800728a:	4649      	mov	r1, r9
 800728c:	eb43 0b01 	adc.w	fp, r3, r1
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800729c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072a4:	4692      	mov	sl, r2
 80072a6:	469b      	mov	fp, r3
 80072a8:	4643      	mov	r3, r8
 80072aa:	eb1a 0303 	adds.w	r3, sl, r3
 80072ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072b2:	464b      	mov	r3, r9
 80072b4:	eb4b 0303 	adc.w	r3, fp, r3
 80072b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072d0:	460b      	mov	r3, r1
 80072d2:	18db      	adds	r3, r3, r3
 80072d4:	643b      	str	r3, [r7, #64]	; 0x40
 80072d6:	4613      	mov	r3, r2
 80072d8:	eb42 0303 	adc.w	r3, r2, r3
 80072dc:	647b      	str	r3, [r7, #68]	; 0x44
 80072de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072e6:	f7f9 fd07 	bl	8000cf8 <__aeabi_uldivmod>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	4b3b      	ldr	r3, [pc, #236]	; (80073e0 <UART_SetConfig+0x2d4>)
 80072f2:	fba3 2301 	umull	r2, r3, r3, r1
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	2264      	movs	r2, #100	; 0x64
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	1acb      	subs	r3, r1, r3
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007306:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <UART_SetConfig+0x2d4>)
 8007308:	fba3 2302 	umull	r2, r3, r3, r2
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007314:	441c      	add	r4, r3
 8007316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800731a:	2200      	movs	r2, #0
 800731c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007320:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007324:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	1891      	adds	r1, r2, r2
 800732e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007330:	415b      	adcs	r3, r3
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007338:	4641      	mov	r1, r8
 800733a:	1851      	adds	r1, r2, r1
 800733c:	6339      	str	r1, [r7, #48]	; 0x30
 800733e:	4649      	mov	r1, r9
 8007340:	414b      	adcs	r3, r1
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007350:	4659      	mov	r1, fp
 8007352:	00cb      	lsls	r3, r1, #3
 8007354:	4651      	mov	r1, sl
 8007356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800735a:	4651      	mov	r1, sl
 800735c:	00ca      	lsls	r2, r1, #3
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	4603      	mov	r3, r0
 8007364:	4642      	mov	r2, r8
 8007366:	189b      	adds	r3, r3, r2
 8007368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800736c:	464b      	mov	r3, r9
 800736e:	460a      	mov	r2, r1
 8007370:	eb42 0303 	adc.w	r3, r2, r3
 8007374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007384:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800738c:	460b      	mov	r3, r1
 800738e:	18db      	adds	r3, r3, r3
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
 8007392:	4613      	mov	r3, r2
 8007394:	eb42 0303 	adc.w	r3, r2, r3
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800739a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800739e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073a2:	f7f9 fca9 	bl	8000cf8 <__aeabi_uldivmod>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <UART_SetConfig+0x2d4>)
 80073ac:	fba3 1302 	umull	r1, r3, r3, r2
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	2164      	movs	r1, #100	; 0x64
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	3332      	adds	r3, #50	; 0x32
 80073be:	4a08      	ldr	r2, [pc, #32]	; (80073e0 <UART_SetConfig+0x2d4>)
 80073c0:	fba2 2303 	umull	r2, r3, r2, r3
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	f003 0207 	and.w	r2, r3, #7
 80073ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4422      	add	r2, r4
 80073d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073d4:	e105      	b.n	80075e2 <UART_SetConfig+0x4d6>
 80073d6:	bf00      	nop
 80073d8:	40011000 	.word	0x40011000
 80073dc:	40011400 	.word	0x40011400
 80073e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073f6:	4642      	mov	r2, r8
 80073f8:	464b      	mov	r3, r9
 80073fa:	1891      	adds	r1, r2, r2
 80073fc:	6239      	str	r1, [r7, #32]
 80073fe:	415b      	adcs	r3, r3
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
 8007402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007406:	4641      	mov	r1, r8
 8007408:	1854      	adds	r4, r2, r1
 800740a:	4649      	mov	r1, r9
 800740c:	eb43 0501 	adc.w	r5, r3, r1
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	00eb      	lsls	r3, r5, #3
 800741a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800741e:	00e2      	lsls	r2, r4, #3
 8007420:	4614      	mov	r4, r2
 8007422:	461d      	mov	r5, r3
 8007424:	4643      	mov	r3, r8
 8007426:	18e3      	adds	r3, r4, r3
 8007428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800742c:	464b      	mov	r3, r9
 800742e:	eb45 0303 	adc.w	r3, r5, r3
 8007432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007452:	4629      	mov	r1, r5
 8007454:	008b      	lsls	r3, r1, #2
 8007456:	4621      	mov	r1, r4
 8007458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800745c:	4621      	mov	r1, r4
 800745e:	008a      	lsls	r2, r1, #2
 8007460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007464:	f7f9 fc48 	bl	8000cf8 <__aeabi_uldivmod>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4b60      	ldr	r3, [pc, #384]	; (80075f0 <UART_SetConfig+0x4e4>)
 800746e:	fba3 2302 	umull	r2, r3, r3, r2
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	011c      	lsls	r4, r3, #4
 8007476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800747a:	2200      	movs	r2, #0
 800747c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007484:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	1891      	adds	r1, r2, r2
 800748e:	61b9      	str	r1, [r7, #24]
 8007490:	415b      	adcs	r3, r3
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007498:	4641      	mov	r1, r8
 800749a:	1851      	adds	r1, r2, r1
 800749c:	6139      	str	r1, [r7, #16]
 800749e:	4649      	mov	r1, r9
 80074a0:	414b      	adcs	r3, r1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074b0:	4659      	mov	r1, fp
 80074b2:	00cb      	lsls	r3, r1, #3
 80074b4:	4651      	mov	r1, sl
 80074b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ba:	4651      	mov	r1, sl
 80074bc:	00ca      	lsls	r2, r1, #3
 80074be:	4610      	mov	r0, r2
 80074c0:	4619      	mov	r1, r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	4642      	mov	r2, r8
 80074c6:	189b      	adds	r3, r3, r2
 80074c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074cc:	464b      	mov	r3, r9
 80074ce:	460a      	mov	r2, r1
 80074d0:	eb42 0303 	adc.w	r3, r2, r3
 80074d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80074e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074f0:	4649      	mov	r1, r9
 80074f2:	008b      	lsls	r3, r1, #2
 80074f4:	4641      	mov	r1, r8
 80074f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074fa:	4641      	mov	r1, r8
 80074fc:	008a      	lsls	r2, r1, #2
 80074fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007502:	f7f9 fbf9 	bl	8000cf8 <__aeabi_uldivmod>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4b39      	ldr	r3, [pc, #228]	; (80075f0 <UART_SetConfig+0x4e4>)
 800750c:	fba3 1302 	umull	r1, r3, r3, r2
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	2164      	movs	r1, #100	; 0x64
 8007514:	fb01 f303 	mul.w	r3, r1, r3
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	3332      	adds	r3, #50	; 0x32
 800751e:	4a34      	ldr	r2, [pc, #208]	; (80075f0 <UART_SetConfig+0x4e4>)
 8007520:	fba2 2303 	umull	r2, r3, r2, r3
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800752a:	441c      	add	r4, r3
 800752c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007530:	2200      	movs	r2, #0
 8007532:	673b      	str	r3, [r7, #112]	; 0x70
 8007534:	677a      	str	r2, [r7, #116]	; 0x74
 8007536:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800753a:	4642      	mov	r2, r8
 800753c:	464b      	mov	r3, r9
 800753e:	1891      	adds	r1, r2, r2
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	415b      	adcs	r3, r3
 8007544:	60fb      	str	r3, [r7, #12]
 8007546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800754a:	4641      	mov	r1, r8
 800754c:	1851      	adds	r1, r2, r1
 800754e:	6039      	str	r1, [r7, #0]
 8007550:	4649      	mov	r1, r9
 8007552:	414b      	adcs	r3, r1
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	f04f 0300 	mov.w	r3, #0
 800755e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007562:	4659      	mov	r1, fp
 8007564:	00cb      	lsls	r3, r1, #3
 8007566:	4651      	mov	r1, sl
 8007568:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756c:	4651      	mov	r1, sl
 800756e:	00ca      	lsls	r2, r1, #3
 8007570:	4610      	mov	r0, r2
 8007572:	4619      	mov	r1, r3
 8007574:	4603      	mov	r3, r0
 8007576:	4642      	mov	r2, r8
 8007578:	189b      	adds	r3, r3, r2
 800757a:	66bb      	str	r3, [r7, #104]	; 0x68
 800757c:	464b      	mov	r3, r9
 800757e:	460a      	mov	r2, r1
 8007580:	eb42 0303 	adc.w	r3, r2, r3
 8007584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	663b      	str	r3, [r7, #96]	; 0x60
 8007590:	667a      	str	r2, [r7, #100]	; 0x64
 8007592:	f04f 0200 	mov.w	r2, #0
 8007596:	f04f 0300 	mov.w	r3, #0
 800759a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800759e:	4649      	mov	r1, r9
 80075a0:	008b      	lsls	r3, r1, #2
 80075a2:	4641      	mov	r1, r8
 80075a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a8:	4641      	mov	r1, r8
 80075aa:	008a      	lsls	r2, r1, #2
 80075ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075b0:	f7f9 fba2 	bl	8000cf8 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <UART_SetConfig+0x4e4>)
 80075ba:	fba3 1302 	umull	r1, r3, r3, r2
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	2164      	movs	r1, #100	; 0x64
 80075c2:	fb01 f303 	mul.w	r3, r1, r3
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	3332      	adds	r3, #50	; 0x32
 80075cc:	4a08      	ldr	r2, [pc, #32]	; (80075f0 <UART_SetConfig+0x4e4>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	f003 020f 	and.w	r2, r3, #15
 80075d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4422      	add	r2, r4
 80075e0:	609a      	str	r2, [r3, #8]
}
 80075e2:	bf00      	nop
 80075e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075e8:	46bd      	mov	sp, r7
 80075ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ee:	bf00      	nop
 80075f0:	51eb851f 	.word	0x51eb851f

080075f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075f4:	b084      	sub	sp, #16
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	f107 001c 	add.w	r0, r7, #28
 8007602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	2b01      	cmp	r3, #1
 800760a:	d122      	bne.n	8007652 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d105      	bne.n	8007646 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f9c0 	bl	80079cc <USB_CoreReset>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e01a      	b.n	8007688 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f9b4 	bl	80079cc <USB_CoreReset>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d106      	bne.n	800767c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
 800767a:	e005      	b.n	8007688 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10b      	bne.n	80076a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f043 0206 	orr.w	r2, r3, #6
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f043 0220 	orr.w	r2, r3, #32
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b2:	b004      	add	sp, #16
 80076b4:	4770      	bx	lr

080076b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f043 0201 	orr.w	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f023 0201 	bic.w	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d115      	bne.n	8007748 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007728:	2001      	movs	r0, #1
 800772a:	f7fb f8c5 	bl	80028b8 <HAL_Delay>
      ms++;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f93a 	bl	80079ae <USB_GetMode>
 800773a:	4603      	mov	r3, r0
 800773c:	2b01      	cmp	r3, #1
 800773e:	d01e      	beq.n	800777e <USB_SetCurrentMode+0x84>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b31      	cmp	r3, #49	; 0x31
 8007744:	d9f0      	bls.n	8007728 <USB_SetCurrentMode+0x2e>
 8007746:	e01a      	b.n	800777e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d115      	bne.n	800777a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800775a:	2001      	movs	r0, #1
 800775c:	f7fb f8ac 	bl	80028b8 <HAL_Delay>
      ms++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f921 	bl	80079ae <USB_GetMode>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <USB_SetCurrentMode+0x84>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b31      	cmp	r3, #49	; 0x31
 8007776:	d9f0      	bls.n	800775a <USB_SetCurrentMode+0x60>
 8007778:	e001      	b.n	800777e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e005      	b.n	800778a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b32      	cmp	r3, #50	; 0x32
 8007782:	d101      	bne.n	8007788 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a13      	ldr	r2, [pc, #76]	; (80077f8 <USB_FlushTxFifo+0x64>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d901      	bls.n	80077b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e01b      	b.n	80077ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	daf2      	bge.n	80077a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	019b      	lsls	r3, r3, #6
 80077c4:	f043 0220 	orr.w	r2, r3, #32
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3301      	adds	r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a08      	ldr	r2, [pc, #32]	; (80077f8 <USB_FlushTxFifo+0x64>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e006      	b.n	80077ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d0f0      	beq.n	80077cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	00030d40 	.word	0x00030d40

080077fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a11      	ldr	r2, [pc, #68]	; (8007858 <USB_FlushRxFifo+0x5c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d901      	bls.n	800781a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e018      	b.n	800784c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	daf2      	bge.n	8007808 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2210      	movs	r2, #16
 800782a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4a08      	ldr	r2, [pc, #32]	; (8007858 <USB_FlushRxFifo+0x5c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d901      	bls.n	800783e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e006      	b.n	800784c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b10      	cmp	r3, #16
 8007848:	d0f0      	beq.n	800782c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	00030d40 	.word	0x00030d40

0800785c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800785c:	b480      	push	{r7}
 800785e:	b089      	sub	sp, #36	; 0x24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4611      	mov	r1, r2
 8007868:	461a      	mov	r2, r3
 800786a:	460b      	mov	r3, r1
 800786c:	71fb      	strb	r3, [r7, #7]
 800786e:	4613      	mov	r3, r2
 8007870:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800787a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800787e:	2b00      	cmp	r3, #0
 8007880:	d123      	bne.n	80078ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007882:	88bb      	ldrh	r3, [r7, #4]
 8007884:	3303      	adds	r3, #3
 8007886:	089b      	lsrs	r3, r3, #2
 8007888:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800788a:	2300      	movs	r3, #0
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	e018      	b.n	80078c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007890:	79fb      	ldrb	r3, [r7, #7]
 8007892:	031a      	lsls	r2, r3, #12
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	4413      	add	r3, r2
 8007898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789c:	461a      	mov	r2, r3
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3301      	adds	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	3301      	adds	r3, #1
 80078ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	3301      	adds	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	3301      	adds	r3, #1
 80078ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	3301      	adds	r3, #1
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d3e2      	bcc.n	8007890 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3724      	adds	r7, #36	; 0x24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078d8:	b480      	push	{r7}
 80078da:	b08b      	sub	sp, #44	; 0x2c
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	089b      	lsrs	r3, r3, #2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	f003 0303 	and.w	r3, r3, #3
 80078fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078fe:	2300      	movs	r3, #0
 8007900:	623b      	str	r3, [r7, #32]
 8007902:	e014      	b.n	800792e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	3301      	adds	r3, #1
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	3301      	adds	r3, #1
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	3301      	adds	r3, #1
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	3301      	adds	r3, #1
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	3301      	adds	r3, #1
 800792c:	623b      	str	r3, [r7, #32]
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	429a      	cmp	r2, r3
 8007934:	d3e6      	bcc.n	8007904 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007936:	8bfb      	ldrh	r3, [r7, #30]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01e      	beq.n	800797a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007946:	461a      	mov	r2, r3
 8007948:	f107 0310 	add.w	r3, r7, #16
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	fa22 f303 	lsr.w	r3, r2, r3
 800795c:	b2da      	uxtb	r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	701a      	strb	r2, [r3, #0]
      i++;
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	3301      	adds	r3, #1
 8007966:	623b      	str	r3, [r7, #32]
      pDest++;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	3301      	adds	r3, #1
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800796e:	8bfb      	ldrh	r3, [r7, #30]
 8007970:	3b01      	subs	r3, #1
 8007972:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007974:	8bfb      	ldrh	r3, [r7, #30]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1ea      	bne.n	8007950 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800797c:	4618      	mov	r0, r3
 800797e:	372c      	adds	r7, #44	; 0x2c
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4013      	ands	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	f003 0301 	and.w	r3, r3, #1
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <USB_CoreReset+0x64>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e01b      	b.n	8007a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	daf2      	bge.n	80079d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f043 0201 	orr.w	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4a09      	ldr	r2, [pc, #36]	; (8007a30 <USB_CoreReset+0x64>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d901      	bls.n	8007a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e006      	b.n	8007a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d0f0      	beq.n	8007a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	00030d40 	.word	0x00030d40

08007a34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a34:	b084      	sub	sp, #16
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a54:	461a      	mov	r2, r3
 8007a56:	2300      	movs	r3, #0
 8007a58:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d018      	beq.n	8007abc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10a      	bne.n	8007aa6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a9e:	f043 0304 	orr.w	r3, r3, #4
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	e014      	b.n	8007ad0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ab4:	f023 0304 	bic.w	r3, r3, #4
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	e009      	b.n	8007ad0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aca:	f023 0304 	bic.w	r3, r3, #4
 8007ace:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ad0:	2110      	movs	r1, #16
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fe5e 	bl	8007794 <USB_FlushTxFifo>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff fe8a 	bl	80077fc <USB_FlushRxFifo>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007af2:	2300      	movs	r3, #0
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	e015      	b.n	8007b24 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b04:	461a      	mov	r2, r3
 8007b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	3301      	adds	r3, #1
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d3e5      	bcc.n	8007af8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00b      	beq.n	8007b5e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <USB_HostInit+0x16c>)
 8007b52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a13      	ldr	r2, [pc, #76]	; (8007ba4 <USB_HostInit+0x170>)
 8007b58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b5c:	e009      	b.n	8007b72 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2280      	movs	r2, #128	; 0x80
 8007b62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a10      	ldr	r2, [pc, #64]	; (8007ba8 <USB_HostInit+0x174>)
 8007b68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a0f      	ldr	r2, [pc, #60]	; (8007bac <USB_HostInit+0x178>)
 8007b6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d105      	bne.n	8007b84 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f043 0210 	orr.w	r2, r3, #16
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699a      	ldr	r2, [r3, #24]
 8007b88:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <USB_HostInit+0x17c>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b9c:	b004      	add	sp, #16
 8007b9e:	4770      	bx	lr
 8007ba0:	01000200 	.word	0x01000200
 8007ba4:	00e00300 	.word	0x00e00300
 8007ba8:	00600080 	.word	0x00600080
 8007bac:	004000e0 	.word	0x004000e0
 8007bb0:	a3200008 	.word	0xa3200008

08007bb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bec:	4313      	orrs	r3, r2
 8007bee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d107      	bne.n	8007c06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c02:	6053      	str	r3, [r2, #4]
 8007c04:	e009      	b.n	8007c1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d106      	bne.n	8007c1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c12:	461a      	mov	r2, r3
 8007c14:	f241 7370 	movw	r3, #6000	; 0x1770
 8007c18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c56:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007c58:	2064      	movs	r0, #100	; 0x64
 8007c5a:	f7fa fe2d 	bl	80028b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c6c:	200a      	movs	r0, #10
 8007c6e:	f7fa fe23 	bl	80028b8 <HAL_Delay>

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ca0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <USB_DriveVbus+0x44>
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d106      	bne.n	8007cc0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cbe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cca:	d109      	bne.n	8007ce0 <USB_DriveVbus+0x64>
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cde:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	0c5b      	lsrs	r3, r3, #17
 8007d0c:	f003 0303 	and.w	r3, r3, #3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	b29b      	uxth	r3, r3
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
	...

08007d40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	4608      	mov	r0, r1
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4603      	mov	r3, r0
 8007d50:	70fb      	strb	r3, [r7, #3]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70bb      	strb	r3, [r7, #2]
 8007d56:	4613      	mov	r3, r2
 8007d58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d87e      	bhi.n	8007e7c <USB_HC_Init+0x13c>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <USB_HC_Init+0x44>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007d95 	.word	0x08007d95
 8007d88:	08007e3f 	.word	0x08007e3f
 8007d8c:	08007d95 	.word	0x08007d95
 8007d90:	08007e01 	.word	0x08007e01
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da0:	461a      	mov	r2, r3
 8007da2:	f240 439d 	movw	r3, #1181	; 0x49d
 8007da6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007da8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da10      	bge.n	8007dd2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007dd0:	e057      	b.n	8007e82 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d051      	beq.n	8007e82 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	0151      	lsls	r1, r2, #5
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	440a      	add	r2, r1
 8007df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dfc:	60d3      	str	r3, [r2, #12]
      break;
 8007dfe:	e040      	b.n	8007e82 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007e12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da34      	bge.n	8007e86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e3a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007e3c:	e023      	b.n	8007e86 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f240 2325 	movw	r3, #549	; 0x225
 8007e50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	da17      	bge.n	8007e8a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e74:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007e78:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e7a:	e006      	b.n	8007e8a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	77fb      	strb	r3, [r7, #31]
      break;
 8007e80:	e004      	b.n	8007e8c <USB_HC_Init+0x14c>
      break;
 8007e82:	bf00      	nop
 8007e84:	e002      	b.n	8007e8c <USB_HC_Init+0x14c>
      break;
 8007e86:	bf00      	nop
 8007e88:	e000      	b.n	8007e8c <USB_HC_Init+0x14c>
      break;
 8007e8a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	78fa      	ldrb	r2, [r7, #3]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ea6:	f043 0302 	orr.w	r3, r3, #2
 8007eaa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	2101      	movs	r1, #1
 8007ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec0:	6939      	ldr	r1, [r7, #16]
 8007ec2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ed6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da03      	bge.n	8007ee6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	e001      	b.n	8007eea <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff feff 	bl	8007cee <USB_GetHostSpeed>
 8007ef0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d106      	bne.n	8007f08 <USB_HC_Init+0x1c8>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d003      	beq.n	8007f08 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	e001      	b.n	8007f0c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f0c:	787b      	ldrb	r3, [r7, #1]
 8007f0e:	059b      	lsls	r3, r3, #22
 8007f10:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f14:	78bb      	ldrb	r3, [r7, #2]
 8007f16:	02db      	lsls	r3, r3, #11
 8007f18:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f1c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f22:	049b      	lsls	r3, r3, #18
 8007f24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	0159      	lsls	r1, r3, #5
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	440b      	add	r3, r1
 8007f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f42:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f48:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007f4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d003      	beq.n	8007f5a <USB_HC_Init+0x21a>
 8007f52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d10f      	bne.n	8007f7a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	0151      	lsls	r1, r2, #5
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	440a      	add	r2, r1
 8007f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f78:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08c      	sub	sp, #48	; 0x30
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fa0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d02d      	beq.n	800800a <USB_HC_StartXfer+0x86>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	791b      	ldrb	r3, [r3, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d129      	bne.n	800800a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d117      	bne.n	8007fec <USB_HC_StartXfer+0x68>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	79db      	ldrb	r3, [r3, #7]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <USB_HC_StartXfer+0x48>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	79db      	ldrb	r3, [r3, #7]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d10f      	bne.n	8007fec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	6a3a      	ldr	r2, [r7, #32]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <USB_HC_StartXfer+0x86>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	795b      	ldrb	r3, [r3, #5]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d107      	bne.n	800800a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	4619      	mov	r1, r3
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 fa0f 	bl	8008424 <USB_DoPing>
      return HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	e0f8      	b.n	80081fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d018      	beq.n	8008044 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	8912      	ldrh	r2, [r2, #8]
 800801a:	4413      	add	r3, r2
 800801c:	3b01      	subs	r3, #1
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	8912      	ldrh	r2, [r2, #8]
 8008022:	fbb3 f3f2 	udiv	r3, r3, r2
 8008026:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008028:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800802a:	8b7b      	ldrh	r3, [r7, #26]
 800802c:	429a      	cmp	r2, r3
 800802e:	d90b      	bls.n	8008048 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008030:	8b7b      	ldrh	r3, [r7, #26]
 8008032:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	8912      	ldrh	r2, [r2, #8]
 800803a:	fb03 f202 	mul.w	r2, r3, r2
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	611a      	str	r2, [r3, #16]
 8008042:	e001      	b.n	8008048 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008044:	2301      	movs	r3, #1
 8008046:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	78db      	ldrb	r3, [r3, #3]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008050:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	8912      	ldrh	r2, [r2, #8]
 8008056:	fb03 f202 	mul.w	r2, r3, r2
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	611a      	str	r2, [r3, #16]
 800805e:	e003      	b.n	8008068 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008072:	04d9      	lsls	r1, r3, #19
 8008074:	4b63      	ldr	r3, [pc, #396]	; (8008204 <USB_HC_StartXfer+0x280>)
 8008076:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008078:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	7a9b      	ldrb	r3, [r3, #10]
 800807e:	075b      	lsls	r3, r3, #29
 8008080:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	0148      	lsls	r0, r1, #5
 8008088:	6a39      	ldr	r1, [r7, #32]
 800808a:	4401      	add	r1, r0
 800808c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008090:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008092:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	68d9      	ldr	r1, [r3, #12]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	460a      	mov	r2, r1
 80080ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf0c      	ite	eq
 80080be:	2301      	moveq	r3, #1
 80080c0:	2300      	movne	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	7e7b      	ldrb	r3, [r7, #25]
 80080f6:	075b      	lsls	r3, r3, #29
 80080f8:	69f9      	ldr	r1, [r7, #28]
 80080fa:	0148      	lsls	r0, r1, #5
 80080fc:	6a39      	ldr	r1, [r7, #32]
 80080fe:	4401      	add	r1, r0
 8008100:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008104:	4313      	orrs	r3, r2
 8008106:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	4413      	add	r3, r2
 8008110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800811e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	78db      	ldrb	r3, [r3, #3]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	e003      	b.n	800813a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008138:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008140:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814e:	461a      	mov	r2, r3
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e04e      	b.n	80081fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	78db      	ldrb	r3, [r3, #3]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d149      	bne.n	80081fa <USB_HC_StartXfer+0x276>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d045      	beq.n	80081fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	79db      	ldrb	r3, [r3, #7]
 8008172:	2b03      	cmp	r3, #3
 8008174:	d830      	bhi.n	80081d8 <USB_HC_StartXfer+0x254>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <USB_HC_StartXfer+0x1f8>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	0800818d 	.word	0x0800818d
 8008180:	080081b1 	.word	0x080081b1
 8008184:	0800818d 	.word	0x0800818d
 8008188:	080081b1 	.word	0x080081b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	3303      	adds	r3, #3
 8008192:	089b      	lsrs	r3, r3, #2
 8008194:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008196:	8afa      	ldrh	r2, [r7, #22]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	b29b      	uxth	r3, r3
 800819e:	429a      	cmp	r2, r3
 80081a0:	d91c      	bls.n	80081dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f043 0220 	orr.w	r2, r3, #32
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80081ae:	e015      	b.n	80081dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	3303      	adds	r3, #3
 80081b6:	089b      	lsrs	r3, r3, #2
 80081b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80081ba:	8afa      	ldrh	r2, [r7, #22]
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d90a      	bls.n	80081e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80081d6:	e003      	b.n	80081e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80081d8:	bf00      	nop
 80081da:	e002      	b.n	80081e2 <USB_HC_StartXfer+0x25e>
        break;
 80081dc:	bf00      	nop
 80081de:	e000      	b.n	80081e2 <USB_HC_StartXfer+0x25e>
        break;
 80081e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	68d9      	ldr	r1, [r3, #12]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	785a      	ldrb	r2, [r3, #1]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2000      	movs	r0, #0
 80081f2:	9000      	str	r0, [sp, #0]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff fb31 	bl	800785c <USB_WritePacket>
  }

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3728      	adds	r7, #40	; 0x28
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	1ff80000 	.word	0x1ff80000

08008208 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	b29b      	uxth	r3, r3
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800822a:	b480      	push	{r7}
 800822c:	b089      	sub	sp, #36	; 0x24
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	0c9b      	lsrs	r3, r3, #18
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	0fdb      	lsrs	r3, r3, #31
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b20      	cmp	r3, #32
 8008278:	d104      	bne.n	8008284 <USB_HC_Halt+0x5a>
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	e0c8      	b.n	8008416 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <USB_HC_Halt+0x66>
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d163      	bne.n	8008358 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	4413      	add	r3, r2
 8008298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f040 80ab 	bne.w	8008414 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d133      	bne.n	8008332 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	0151      	lsls	r1, r2, #5
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	440a      	add	r2, r1
 80082e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008308:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008316:	d81d      	bhi.n	8008354 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800832a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800832e:	d0ec      	beq.n	800830a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008330:	e070      	b.n	8008414 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	69fa      	ldr	r2, [r7, #28]
 8008346:	440a      	add	r2, r1
 8008348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800834c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008350:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008352:	e05f      	b.n	8008414 <USB_HC_Halt+0x1ea>
            break;
 8008354:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008356:	e05d      	b.n	8008414 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	0151      	lsls	r1, r2, #5
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	440a      	add	r2, r1
 800836e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008376:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d133      	bne.n	80083f0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	440a      	add	r2, r1
 800839e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	0151      	lsls	r1, r2, #5
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	440a      	add	r2, r1
 80083be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3301      	adds	r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083d4:	d81d      	bhi.n	8008412 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ec:	d0ec      	beq.n	80083c8 <USB_HC_Halt+0x19e>
 80083ee:	e011      	b.n	8008414 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	440a      	add	r2, r1
 8008406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800840a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	e000      	b.n	8008414 <USB_HC_Halt+0x1ea>
          break;
 8008412:	bf00      	nop
    }
  }

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3724      	adds	r7, #36	; 0x24
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
	...

08008424 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008438:	2301      	movs	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	04da      	lsls	r2, r3, #19
 8008440:	4b15      	ldr	r3, [pc, #84]	; (8008498 <USB_DoPing+0x74>)
 8008442:	4013      	ands	r3, r2
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	0151      	lsls	r1, r2, #5
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	440a      	add	r2, r1
 800844c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008454:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800846c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008474:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	4413      	add	r3, r2
 800847e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008482:	461a      	mov	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	1ff80000 	.word	0x1ff80000

0800849c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff f911 	bl	80076d8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084b6:	2110      	movs	r1, #16
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff f96b 	bl	8007794 <USB_FlushTxFifo>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff f997 	bl	80077fc <USB_FlushRxFifo>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80084d8:	2300      	movs	r3, #0
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	e01f      	b.n	800851e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008504:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	461a      	mov	r2, r3
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	3301      	adds	r3, #1
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b0f      	cmp	r3, #15
 8008522:	d9dc      	bls.n	80084de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008524:	2300      	movs	r3, #0
 8008526:	61bb      	str	r3, [r7, #24]
 8008528:	e034      	b.n	8008594 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	4413      	add	r3, r2
 8008532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008540:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008548:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008550:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855e:	461a      	mov	r2, r3
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008570:	d80c      	bhi.n	800858c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	4413      	add	r3, r2
 800857a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008588:	d0ec      	beq.n	8008564 <USB_StopHost+0xc8>
 800858a:	e000      	b.n	800858e <USB_StopHost+0xf2>
        break;
 800858c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	3301      	adds	r3, #1
 8008592:	61bb      	str	r3, [r7, #24]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	2b0f      	cmp	r3, #15
 8008598:	d9c7      	bls.n	800852a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085a0:	461a      	mov	r2, r3
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff f880 	bl	80076b6 <USB_EnableGlobalInt>

  return ret;
 80085b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3720      	adds	r7, #32
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b089      	sub	sp, #36	; 0x24
 80085c4:	af04      	add	r7, sp, #16
 80085c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80085c8:	2301      	movs	r3, #1
 80085ca:	2202      	movs	r2, #2
 80085cc:	2102      	movs	r1, #2
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fc66 	bl	8008ea0 <USBH_FindInterface>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	2bff      	cmp	r3, #255	; 0xff
 80085dc:	d002      	beq.n	80085e4 <USBH_CDC_InterfaceInit+0x24>
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d901      	bls.n	80085e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80085e4:	2302      	movs	r3, #2
 80085e6:	e13d      	b.n	8008864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fc3b 	bl	8008e68 <USBH_SelectInterface>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80085fc:	2302      	movs	r3, #2
 80085fe:	e131      	b.n	8008864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008606:	2050      	movs	r0, #80	; 0x50
 8008608:	f002 fafa 	bl	800ac00 <malloc>
 800860c:	4603      	mov	r3, r0
 800860e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008620:	2302      	movs	r3, #2
 8008622:	e11f      	b.n	8008864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008624:	2250      	movs	r2, #80	; 0x50
 8008626:	2100      	movs	r1, #0
 8008628:	68b8      	ldr	r0, [r7, #8]
 800862a:	f002 faf9 	bl	800ac20 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	211a      	movs	r1, #26
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	b25b      	sxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	da15      	bge.n	8008672 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	211a      	movs	r1, #26
 800864c:	fb01 f303 	mul.w	r3, r1, r3
 8008650:	4413      	add	r3, r2
 8008652:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	211a      	movs	r1, #26
 8008662:	fb01 f303 	mul.w	r3, r1, r3
 8008666:	4413      	add	r3, r2
 8008668:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800866c:	881a      	ldrh	r2, [r3, #0]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 ff2c 	bl	800a4d6 <USBH_AllocPipe>
 800867e:	4603      	mov	r3, r0
 8008680:	461a      	mov	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	7819      	ldrb	r1, [r3, #0]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	7858      	ldrb	r0, [r3, #1]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	8952      	ldrh	r2, [r2, #10]
 800869e:	9202      	str	r2, [sp, #8]
 80086a0:	2203      	movs	r2, #3
 80086a2:	9201      	str	r2, [sp, #4]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	4623      	mov	r3, r4
 80086a8:	4602      	mov	r2, r0
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fee4 	bl	800a478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2200      	movs	r2, #0
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f002 f9f3 	bl	800aaa4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80086be:	2300      	movs	r3, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	210a      	movs	r1, #10
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fbeb 	bl	8008ea0 <USBH_FindInterface>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	2bff      	cmp	r3, #255	; 0xff
 80086d2:	d002      	beq.n	80086da <USBH_CDC_InterfaceInit+0x11a>
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d901      	bls.n	80086de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086da:	2302      	movs	r3, #2
 80086dc:	e0c2      	b.n	8008864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	211a      	movs	r1, #26
 80086e4:	fb01 f303 	mul.w	r3, r1, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	b25b      	sxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da16      	bge.n	8008724 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	211a      	movs	r1, #26
 80086fc:	fb01 f303 	mul.w	r3, r1, r3
 8008700:	4413      	add	r3, r2
 8008702:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008706:	781a      	ldrb	r2, [r3, #0]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	211a      	movs	r1, #26
 8008712:	fb01 f303 	mul.w	r3, r1, r3
 8008716:	4413      	add	r3, r2
 8008718:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	835a      	strh	r2, [r3, #26]
 8008722:	e015      	b.n	8008750 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	211a      	movs	r1, #26
 800872a:	fb01 f303 	mul.w	r3, r1, r3
 800872e:	4413      	add	r3, r2
 8008730:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008734:	781a      	ldrb	r2, [r3, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	211a      	movs	r1, #26
 8008740:	fb01 f303 	mul.w	r3, r1, r3
 8008744:	4413      	add	r3, r2
 8008746:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800874a:	881a      	ldrh	r2, [r3, #0]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	211a      	movs	r1, #26
 8008756:	fb01 f303 	mul.w	r3, r1, r3
 800875a:	4413      	add	r3, r2
 800875c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	b25b      	sxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	da16      	bge.n	8008796 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	211a      	movs	r1, #26
 800876e:	fb01 f303 	mul.w	r3, r1, r3
 8008772:	4413      	add	r3, r2
 8008774:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	211a      	movs	r1, #26
 8008784:	fb01 f303 	mul.w	r3, r1, r3
 8008788:	4413      	add	r3, r2
 800878a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800878e:	881a      	ldrh	r2, [r3, #0]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	835a      	strh	r2, [r3, #26]
 8008794:	e015      	b.n	80087c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	211a      	movs	r1, #26
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	4413      	add	r3, r2
 80087a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	211a      	movs	r1, #26
 80087b2:	fb01 f303 	mul.w	r3, r1, r3
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80087bc:	881a      	ldrh	r2, [r3, #0]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	7b9b      	ldrb	r3, [r3, #14]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fe84 	bl	800a4d6 <USBH_AllocPipe>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	7bdb      	ldrb	r3, [r3, #15]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 fe7a 	bl	800a4d6 <USBH_AllocPipe>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	7b59      	ldrb	r1, [r3, #13]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	7b98      	ldrb	r0, [r3, #14]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	8b12      	ldrh	r2, [r2, #24]
 8008802:	9202      	str	r2, [sp, #8]
 8008804:	2202      	movs	r2, #2
 8008806:	9201      	str	r2, [sp, #4]
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	4623      	mov	r3, r4
 800880c:	4602      	mov	r2, r0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fe32 	bl	800a478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	7b19      	ldrb	r1, [r3, #12]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	7bd8      	ldrb	r0, [r3, #15]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	8b52      	ldrh	r2, [r2, #26]
 800882c:	9202      	str	r2, [sp, #8]
 800882e:	2202      	movs	r2, #2
 8008830:	9201      	str	r2, [sp, #4]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	4623      	mov	r3, r4
 8008836:	4602      	mov	r2, r0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 fe1d 	bl	800a478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	7b5b      	ldrb	r3, [r3, #13]
 800884a:	2200      	movs	r2, #0
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 f928 	bl	800aaa4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	7b1b      	ldrb	r3, [r3, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f002 f921 	bl	800aaa4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	bd90      	pop	{r4, r7, pc}

0800886c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00e      	beq.n	80088a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 fe12 	bl	800a4b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 fe3d 	bl	800a518 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7b1b      	ldrb	r3, [r3, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00e      	beq.n	80088ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	7b1b      	ldrb	r3, [r3, #12]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 fdff 	bl	800a4b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	7b1b      	ldrb	r3, [r3, #12]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 fe2a 	bl	800a518 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	7b5b      	ldrb	r3, [r3, #13]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00e      	beq.n	80088f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	7b5b      	ldrb	r3, [r3, #13]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f001 fdec 	bl	800a4b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	7b5b      	ldrb	r3, [r3, #13]
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 fe17 	bl	800a518 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	4618      	mov	r0, r3
 8008906:	f002 f983 	bl	800ac10 <free>
    phost->pActiveClass->pData = 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008910:	2200      	movs	r2, #0
 8008912:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3340      	adds	r3, #64	; 0x40
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8b1 	bl	8008a9e <GetLineCoding>
 800893c:	4603      	mov	r3, r0
 800893e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800894c:	2102      	movs	r1, #2
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008952:	7afb      	ldrb	r3, [r7, #11]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008964:	2301      	movs	r3, #1
 8008966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800897c:	2b04      	cmp	r3, #4
 800897e:	d877      	bhi.n	8008a70 <USBH_CDC_Process+0x114>
 8008980:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <USBH_CDC_Process+0x2c>)
 8008982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008986:	bf00      	nop
 8008988:	0800899d 	.word	0x0800899d
 800898c:	080089a3 	.word	0x080089a3
 8008990:	080089d3 	.word	0x080089d3
 8008994:	08008a47 	.word	0x08008a47
 8008998:	08008a55 	.word	0x08008a55
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
      break;
 80089a0:	e06d      	b.n	8008a7e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f897 	bl	8008adc <SetLineCoding>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80089c0:	e058      	b.n	8008a74 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d055      	beq.n	8008a74 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2204      	movs	r2, #4
 80089cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80089d0:	e050      	b.n	8008a74 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	3340      	adds	r3, #64	; 0x40
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f860 	bl	8008a9e <GetLineCoding>
 80089de:	4603      	mov	r3, r0
 80089e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d126      	bne.n	8008a36 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089fa:	791b      	ldrb	r3, [r3, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d13b      	bne.n	8008a78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a0a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d133      	bne.n	8008a78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a1a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d12b      	bne.n	8008a78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a28:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d124      	bne.n	8008a78 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f958 	bl	8008ce4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a34:	e020      	b.n	8008a78 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d01d      	beq.n	8008a78 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2204      	movs	r2, #4
 8008a40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008a44:	e018      	b.n	8008a78 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f867 	bl	8008b1a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f8da 	bl	8008c06 <CDC_ProcessReception>
      break;
 8008a52:	e014      	b.n	8008a7e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 ffef 	bl	8009a3a <USBH_ClrFeature>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10a      	bne.n	8008a7c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008a6e:	e005      	b.n	8008a7c <USBH_CDC_Process+0x120>

    default:
      break;
 8008a70:	bf00      	nop
 8008a72:	e004      	b.n	8008a7e <USBH_CDC_Process+0x122>
      break;
 8008a74:	bf00      	nop
 8008a76:	e002      	b.n	8008a7e <USBH_CDC_Process+0x122>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e000      	b.n	8008a7e <USBH_CDC_Process+0x122>
      break;
 8008a7c:	bf00      	nop

  }

  return status;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	22a1      	movs	r2, #161	; 0xa1
 8008aac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2221      	movs	r2, #33	; 0x21
 8008ab2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2207      	movs	r2, #7
 8008ac4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2207      	movs	r2, #7
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fa81 	bl	8009fd4 <USBH_CtlReq>
 8008ad2:	4603      	mov	r3, r0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2221      	movs	r2, #33	; 0x21
 8008aea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2207      	movs	r2, #7
 8008b02:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2207      	movs	r2, #7
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fa62 	bl	8009fd4 <USBH_CtlReq>
 8008b10:	4603      	mov	r3, r0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af02      	add	r7, sp, #8
 8008b20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d002      	beq.n	8008b40 <CDC_ProcessTransmission+0x26>
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d023      	beq.n	8008b86 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008b3e:	e05e      	b.n	8008bfe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	8b12      	ldrh	r2, [r2, #24]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d90b      	bls.n	8008b64 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	69d9      	ldr	r1, [r3, #28]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8b1a      	ldrh	r2, [r3, #24]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	7b5b      	ldrb	r3, [r3, #13]
 8008b58:	2001      	movs	r0, #1
 8008b5a:	9000      	str	r0, [sp, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 fc48 	bl	800a3f2 <USBH_BulkSendData>
 8008b62:	e00b      	b.n	8008b7c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	7b5b      	ldrb	r3, [r3, #13]
 8008b72:	2001      	movs	r0, #1
 8008b74:	9000      	str	r0, [sp, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fc3b 	bl	800a3f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b84:	e03b      	b.n	8008bfe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	7b5b      	ldrb	r3, [r3, #13]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f001 ff5f 	bl	800aa50 <USBH_LL_GetURBState>
 8008b92:	4603      	mov	r3, r0
 8008b94:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d128      	bne.n	8008bee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	8b12      	ldrh	r2, [r2, #24]
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d90e      	bls.n	8008bc6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	8b12      	ldrh	r2, [r2, #24]
 8008bb0:	1a9a      	subs	r2, r3, r2
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	8b12      	ldrh	r2, [r2, #24]
 8008bbe:	441a      	add	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	61da      	str	r2, [r3, #28]
 8008bc4:	e002      	b.n	8008bcc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008bdc:	e00e      	b.n	8008bfc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f868 	bl	8008cbc <USBH_CDC_TransmitCallback>
      break;
 8008bec:	e006      	b.n	8008bfc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d103      	bne.n	8008bfc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008bfc:	bf00      	nop
  }
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d002      	beq.n	8008c2c <CDC_ProcessReception+0x26>
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d00e      	beq.n	8008c48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008c2a:	e043      	b.n	8008cb4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	6a19      	ldr	r1, [r3, #32]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	8b5a      	ldrh	r2, [r3, #26]
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	7b1b      	ldrb	r3, [r3, #12]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 fbff 	bl	800a43c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2204      	movs	r2, #4
 8008c42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008c46:	e035      	b.n	8008cb4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	7b1b      	ldrb	r3, [r3, #12]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f001 fefe 	bl	800aa50 <USBH_LL_GetURBState>
 8008c54:	4603      	mov	r3, r0
 8008c56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008c58:	7cfb      	ldrb	r3, [r7, #19]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d129      	bne.n	8008cb2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	7b1b      	ldrb	r3, [r3, #12]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fe61 	bl	800a92c <USBH_LL_GetLastXferSize>
 8008c6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d016      	beq.n	8008ca4 <CDC_ProcessReception+0x9e>
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	8b5b      	ldrh	r3, [r3, #26]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d910      	bls.n	8008ca4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	1ad2      	subs	r2, r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	6a1a      	ldr	r2, [r3, #32]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	441a      	add	r2, r3
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ca2:	e006      	b.n	8008cb2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f80f 	bl	8008cd0 <USBH_CDC_ReceiveCallback>
      break;
 8008cb2:	bf00      	nop
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	4613      	mov	r3, r2
 8008d04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e029      	b.n	8008d64 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	79fa      	ldrb	r2, [r7, #7]
 8008d14:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 f81f 	bl	8008d6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f001 fd31 	bl	800a7c4 <USBH_LL_Init>

  return USBH_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	e009      	b.n	8008d92 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	33e0      	adds	r3, #224	; 0xe0
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	2200      	movs	r2, #0
 8008d8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b0f      	cmp	r3, #15
 8008d96:	d9f2      	bls.n	8008d7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	e009      	b.n	8008db2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008da8:	2200      	movs	r2, #0
 8008daa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008db8:	d3f1      	bcc.n	8008d9e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2240      	movs	r2, #64	; 0x40
 8008dde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d016      	beq.n	8008e56 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10e      	bne.n	8008e50 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e38:	1c59      	adds	r1, r3, #1
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	33de      	adds	r3, #222	; 0xde
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	e004      	b.n	8008e5a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008e50:	2302      	movs	r3, #2
 8008e52:	73fb      	strb	r3, [r7, #15]
 8008e54:	e001      	b.n	8008e5a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d204      	bcs.n	8008e8e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008e8c:	e001      	b.n	8008e92 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008e8e:	2302      	movs	r3, #2
 8008e90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	4608      	mov	r0, r1
 8008eaa:	4611      	mov	r1, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	70fb      	strb	r3, [r7, #3]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70bb      	strb	r3, [r7, #2]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ec8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008eca:	e025      	b.n	8008f18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	221a      	movs	r2, #26
 8008ed0:	fb02 f303 	mul.w	r3, r2, r3
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	4413      	add	r3, r2
 8008eda:	3302      	adds	r3, #2
 8008edc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	795b      	ldrb	r3, [r3, #5]
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d002      	beq.n	8008eee <USBH_FindInterface+0x4e>
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	2bff      	cmp	r3, #255	; 0xff
 8008eec:	d111      	bne.n	8008f12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ef2:	78ba      	ldrb	r2, [r7, #2]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d002      	beq.n	8008efe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ef8:	78bb      	ldrb	r3, [r7, #2]
 8008efa:	2bff      	cmp	r3, #255	; 0xff
 8008efc:	d109      	bne.n	8008f12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f02:	787a      	ldrb	r2, [r7, #1]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d002      	beq.n	8008f0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f08:	787b      	ldrb	r3, [r7, #1]
 8008f0a:	2bff      	cmp	r3, #255	; 0xff
 8008f0c:	d101      	bne.n	8008f12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	e006      	b.n	8008f20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	3301      	adds	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d9d6      	bls.n	8008ecc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008f1e:	23ff      	movs	r3, #255	; 0xff
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fc81 	bl	800a83c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 fd9a 	bl	800aa76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af04      	add	r7, sp, #16
 8008f52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f54:	2302      	movs	r3, #2
 8008f56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d102      	bne.n	8008f6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2203      	movs	r2, #3
 8008f6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b0b      	cmp	r3, #11
 8008f76:	f200 81be 	bhi.w	80092f6 <USBH_Process+0x3aa>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <USBH_Process+0x34>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008fb1 	.word	0x08008fb1
 8008f84:	08008fe3 	.word	0x08008fe3
 8008f88:	0800904b 	.word	0x0800904b
 8008f8c:	08009291 	.word	0x08009291
 8008f90:	080092f7 	.word	0x080092f7
 8008f94:	080090ef 	.word	0x080090ef
 8008f98:	08009237 	.word	0x08009237
 8008f9c:	08009125 	.word	0x08009125
 8008fa0:	08009145 	.word	0x08009145
 8008fa4:	08009165 	.word	0x08009165
 8008fa8:	080091a9 	.word	0x080091a9
 8008fac:	08009279 	.word	0x08009279
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 819e 	beq.w	80092fa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008fc4:	20c8      	movs	r0, #200	; 0xc8
 8008fc6:	f001 fd9d 	bl	800ab04 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fc93 	bl	800a8f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008fe0:	e18b      	b.n	80092fa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d107      	bne.n	8008ffc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ffa:	e18d      	b.n	8009318 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009006:	d914      	bls.n	8009032 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800900e:	3301      	adds	r3, #1
 8009010:	b2da      	uxtb	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800901e:	2b03      	cmp	r3, #3
 8009020:	d903      	bls.n	800902a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	220d      	movs	r2, #13
 8009026:	701a      	strb	r2, [r3, #0]
      break;
 8009028:	e176      	b.n	8009318 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	701a      	strb	r2, [r3, #0]
      break;
 8009030:	e172      	b.n	8009318 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009038:	f103 020a 	add.w	r2, r3, #10
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009042:	200a      	movs	r0, #10
 8009044:	f001 fd5e 	bl	800ab04 <USBH_Delay>
      break;
 8009048:	e166      	b.n	8009318 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800905a:	2104      	movs	r1, #4
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009060:	2064      	movs	r0, #100	; 0x64
 8009062:	f001 fd4f 	bl	800ab04 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 fc1e 	bl	800a8a8 <USBH_LL_GetSpeed>
 800906c:	4603      	mov	r3, r0
 800906e:	461a      	mov	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2205      	movs	r2, #5
 800907a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800907c:	2100      	movs	r1, #0
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fa29 	bl	800a4d6 <USBH_AllocPipe>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800908c:	2180      	movs	r1, #128	; 0x80
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 fa21 	bl	800a4d6 <USBH_AllocPipe>
 8009094:	4603      	mov	r3, r0
 8009096:	461a      	mov	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7919      	ldrb	r1, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80090b0:	b292      	uxth	r2, r2
 80090b2:	9202      	str	r2, [sp, #8]
 80090b4:	2200      	movs	r2, #0
 80090b6:	9201      	str	r2, [sp, #4]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	4603      	mov	r3, r0
 80090bc:	2280      	movs	r2, #128	; 0x80
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 f9da 	bl	800a478 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	7959      	ldrb	r1, [r3, #5]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80090d8:	b292      	uxth	r2, r2
 80090da:	9202      	str	r2, [sp, #8]
 80090dc:	2200      	movs	r2, #0
 80090de:	9201      	str	r2, [sp, #4]
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	4603      	mov	r3, r0
 80090e4:	2200      	movs	r2, #0
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 f9c6 	bl	800a478 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090ec:	e114      	b.n	8009318 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f918 	bl	8009324 <USBH_HandleEnum>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f040 80fe 	bne.w	80092fe <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009110:	2b01      	cmp	r3, #1
 8009112:	d103      	bne.n	800911c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2208      	movs	r2, #8
 8009118:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800911a:	e0f0      	b.n	80092fe <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2207      	movs	r2, #7
 8009120:	701a      	strb	r2, [r3, #0]
      break;
 8009122:	e0ec      	b.n	80092fe <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 80e9 	beq.w	8009302 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009136:	2101      	movs	r1, #1
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2208      	movs	r2, #8
 8009140:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009142:	e0de      	b.n	8009302 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800914a:	b29b      	uxth	r3, r3
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fc2c 	bl	80099ac <USBH_SetCfg>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	f040 80d5 	bne.w	8009306 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2209      	movs	r2, #9
 8009160:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009162:	e0d0      	b.n	8009306 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b00      	cmp	r3, #0
 8009170:	d016      	beq.n	80091a0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009172:	2101      	movs	r1, #1
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fc3c 	bl	80099f2 <USBH_SetFeature>
 800917a:	4603      	mov	r3, r0
 800917c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d103      	bne.n	800918e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	220a      	movs	r2, #10
 800918a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800918c:	e0bd      	b.n	800930a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b03      	cmp	r3, #3
 8009194:	f040 80b9 	bne.w	800930a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	220a      	movs	r2, #10
 800919c:	701a      	strb	r2, [r3, #0]
      break;
 800919e:	e0b4      	b.n	800930a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	220a      	movs	r2, #10
 80091a4:	701a      	strb	r2, [r3, #0]
      break;
 80091a6:	e0b0      	b.n	800930a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 80ad 	beq.w	800930e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e016      	b.n	80091f0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80091c2:	7bfa      	ldrb	r2, [r7, #15]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	32de      	adds	r2, #222	; 0xde
 80091c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091cc:	791a      	ldrb	r2, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d108      	bne.n	80091ea <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80091d8:	7bfa      	ldrb	r2, [r7, #15]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	32de      	adds	r2, #222	; 0xde
 80091de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80091e8:	e005      	b.n	80091f6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	3301      	adds	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0e5      	beq.n	80091c2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d016      	beq.n	800922e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4798      	blx	r3
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2206      	movs	r2, #6
 8009216:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800921e:	2103      	movs	r1, #3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009224:	e073      	b.n	800930e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	220d      	movs	r2, #13
 800922a:	701a      	strb	r2, [r3, #0]
      break;
 800922c:	e06f      	b.n	800930e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	220d      	movs	r2, #13
 8009232:	701a      	strb	r2, [r3, #0]
      break;
 8009234:	e06b      	b.n	800930e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d017      	beq.n	8009270 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
 800924c:	4603      	mov	r3, r0
 800924e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d103      	bne.n	8009260 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	220b      	movs	r2, #11
 800925c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800925e:	e058      	b.n	8009312 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d154      	bne.n	8009312 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	220d      	movs	r2, #13
 800926c:	701a      	strb	r2, [r3, #0]
      break;
 800926e:	e050      	b.n	8009312 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	220d      	movs	r2, #13
 8009274:	701a      	strb	r2, [r3, #0]
      break;
 8009276:	e04c      	b.n	8009312 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d049      	beq.n	8009316 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
      }
      break;
 800928e:	e042      	b.n	8009316 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff fd67 	bl	8008d6c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d009      	beq.n	80092bc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092cc:	2105      	movs	r1, #5
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d107      	bne.n	80092ee <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff fe20 	bl	8008f2c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092ec:	e014      	b.n	8009318 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 faa4 	bl	800a83c <USBH_LL_Start>
      break;
 80092f4:	e010      	b.n	8009318 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80092f6:	bf00      	nop
 80092f8:	e00e      	b.n	8009318 <USBH_Process+0x3cc>
      break;
 80092fa:	bf00      	nop
 80092fc:	e00c      	b.n	8009318 <USBH_Process+0x3cc>
      break;
 80092fe:	bf00      	nop
 8009300:	e00a      	b.n	8009318 <USBH_Process+0x3cc>
    break;
 8009302:	bf00      	nop
 8009304:	e008      	b.n	8009318 <USBH_Process+0x3cc>
      break;
 8009306:	bf00      	nop
 8009308:	e006      	b.n	8009318 <USBH_Process+0x3cc>
      break;
 800930a:	bf00      	nop
 800930c:	e004      	b.n	8009318 <USBH_Process+0x3cc>
      break;
 800930e:	bf00      	nop
 8009310:	e002      	b.n	8009318 <USBH_Process+0x3cc>
      break;
 8009312:	bf00      	nop
 8009314:	e000      	b.n	8009318 <USBH_Process+0x3cc>
      break;
 8009316:	bf00      	nop
  }
  return USBH_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop

08009324 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af04      	add	r7, sp, #16
 800932a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800932c:	2301      	movs	r3, #1
 800932e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009330:	2301      	movs	r3, #1
 8009332:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	2b07      	cmp	r3, #7
 800933a:	f200 81c1 	bhi.w	80096c0 <USBH_HandleEnum+0x39c>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <USBH_HandleEnum+0x20>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009365 	.word	0x08009365
 8009348:	08009423 	.word	0x08009423
 800934c:	0800948d 	.word	0x0800948d
 8009350:	0800951b 	.word	0x0800951b
 8009354:	08009585 	.word	0x08009585
 8009358:	080095f5 	.word	0x080095f5
 800935c:	0800963b 	.word	0x0800963b
 8009360:	08009681 	.word	0x08009681
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009364:	2108      	movs	r1, #8
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa50 	bl	800980c <USBH_Get_DevDesc>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d130      	bne.n	80093d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7919      	ldrb	r1, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800939a:	b292      	uxth	r2, r2
 800939c:	9202      	str	r2, [sp, #8]
 800939e:	2200      	movs	r2, #0
 80093a0:	9201      	str	r2, [sp, #4]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4603      	mov	r3, r0
 80093a6:	2280      	movs	r2, #128	; 0x80
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f865 	bl	800a478 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	7959      	ldrb	r1, [r3, #5]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093c2:	b292      	uxth	r2, r2
 80093c4:	9202      	str	r2, [sp, #8]
 80093c6:	2200      	movs	r2, #0
 80093c8:	9201      	str	r2, [sp, #4]
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	4603      	mov	r3, r0
 80093ce:	2200      	movs	r2, #0
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 f851 	bl	800a478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093d6:	e175      	b.n	80096c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b03      	cmp	r3, #3
 80093dc:	f040 8172 	bne.w	80096c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093e6:	3301      	adds	r3, #1
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d903      	bls.n	8009402 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	220d      	movs	r2, #13
 80093fe:	701a      	strb	r2, [r3, #0]
      break;
 8009400:	e160      	b.n	80096c4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	795b      	ldrb	r3, [r3, #5]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 f885 	bl	800a518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	791b      	ldrb	r3, [r3, #4]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 f87f 	bl	800a518 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	701a      	strb	r2, [r3, #0]
      break;
 8009420:	e150      	b.n	80096c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009422:	2112      	movs	r1, #18
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f9f1 	bl	800980c <USBH_Get_DevDesc>
 800942a:	4603      	mov	r3, r0
 800942c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d103      	bne.n	800943c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800943a:	e145      	b.n	80096c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	2b03      	cmp	r3, #3
 8009440:	f040 8142 	bne.w	80096c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800944a:	3301      	adds	r3, #1
 800944c:	b2da      	uxtb	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800945a:	2b03      	cmp	r3, #3
 800945c:	d903      	bls.n	8009466 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	220d      	movs	r2, #13
 8009462:	701a      	strb	r2, [r3, #0]
      break;
 8009464:	e130      	b.n	80096c8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	795b      	ldrb	r3, [r3, #5]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 f853 	bl	800a518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	791b      	ldrb	r3, [r3, #4]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f84d 	bl	800a518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	701a      	strb	r2, [r3, #0]
      break;
 800948a:	e11d      	b.n	80096c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800948c:	2101      	movs	r1, #1
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fa68 	bl	8009964 <USBH_SetAddress>
 8009494:	4603      	mov	r3, r0
 8009496:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d132      	bne.n	8009504 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800949e:	2002      	movs	r0, #2
 80094a0:	f001 fb30 	bl	800ab04 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2203      	movs	r2, #3
 80094b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	7919      	ldrb	r1, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094c6:	b292      	uxth	r2, r2
 80094c8:	9202      	str	r2, [sp, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	9201      	str	r2, [sp, #4]
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	4603      	mov	r3, r0
 80094d2:	2280      	movs	r2, #128	; 0x80
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 ffcf 	bl	800a478 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7959      	ldrb	r1, [r3, #5]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094ee:	b292      	uxth	r2, r2
 80094f0:	9202      	str	r2, [sp, #8]
 80094f2:	2200      	movs	r2, #0
 80094f4:	9201      	str	r2, [sp, #4]
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	4603      	mov	r3, r0
 80094fa:	2200      	movs	r2, #0
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 ffbb 	bl	800a478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009502:	e0e3      	b.n	80096cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	2b03      	cmp	r3, #3
 8009508:	f040 80e0 	bne.w	80096cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	220d      	movs	r2, #13
 8009510:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	705a      	strb	r2, [r3, #1]
      break;
 8009518:	e0d8      	b.n	80096cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800951a:	2109      	movs	r1, #9
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f99d 	bl	800985c <USBH_Get_CfgDesc>
 8009522:	4603      	mov	r3, r0
 8009524:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d103      	bne.n	8009534 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2204      	movs	r2, #4
 8009530:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009532:	e0cd      	b.n	80096d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	2b03      	cmp	r3, #3
 8009538:	f040 80ca 	bne.w	80096d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009542:	3301      	adds	r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009552:	2b03      	cmp	r3, #3
 8009554:	d903      	bls.n	800955e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	220d      	movs	r2, #13
 800955a:	701a      	strb	r2, [r3, #0]
      break;
 800955c:	e0b8      	b.n	80096d0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	795b      	ldrb	r3, [r3, #5]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 ffd7 	bl	800a518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	791b      	ldrb	r3, [r3, #4]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 ffd1 	bl	800a518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
      break;
 8009582:	e0a5      	b.n	80096d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f965 	bl	800985c <USBH_Get_CfgDesc>
 8009592:	4603      	mov	r3, r0
 8009594:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2205      	movs	r2, #5
 80095a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095a2:	e097      	b.n	80096d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	f040 8094 	bne.w	80096d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095b2:	3301      	adds	r3, #1
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d903      	bls.n	80095ce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	220d      	movs	r2, #13
 80095ca:	701a      	strb	r2, [r3, #0]
      break;
 80095cc:	e082      	b.n	80096d4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	795b      	ldrb	r3, [r3, #5]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 ff9f 	bl	800a518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	791b      	ldrb	r3, [r3, #4]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 ff99 	bl	800a518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
      break;
 80095f2:	e06f      	b.n	80096d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d019      	beq.n	8009632 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800960a:	23ff      	movs	r3, #255	; 0xff
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f949 	bl	80098a4 <USBH_Get_StringDesc>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2206      	movs	r2, #6
 8009620:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009622:	e059      	b.n	80096d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d156      	bne.n	80096d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2206      	movs	r2, #6
 800962e:	705a      	strb	r2, [r3, #1]
      break;
 8009630:	e052      	b.n	80096d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2206      	movs	r2, #6
 8009636:	705a      	strb	r2, [r3, #1]
      break;
 8009638:	e04e      	b.n	80096d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009640:	2b00      	cmp	r3, #0
 8009642:	d019      	beq.n	8009678 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009650:	23ff      	movs	r3, #255	; 0xff
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f926 	bl	80098a4 <USBH_Get_StringDesc>
 8009658:	4603      	mov	r3, r0
 800965a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2207      	movs	r2, #7
 8009666:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009668:	e038      	b.n	80096dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	2b03      	cmp	r3, #3
 800966e:	d135      	bne.n	80096dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2207      	movs	r2, #7
 8009674:	705a      	strb	r2, [r3, #1]
      break;
 8009676:	e031      	b.n	80096dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2207      	movs	r2, #7
 800967c:	705a      	strb	r2, [r3, #1]
      break;
 800967e:	e02d      	b.n	80096dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009686:	2b00      	cmp	r3, #0
 8009688:	d017      	beq.n	80096ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009696:	23ff      	movs	r3, #255	; 0xff
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f903 	bl	80098a4 <USBH_Get_StringDesc>
 800969e:	4603      	mov	r3, r0
 80096a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80096ac:	e018      	b.n	80096e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d115      	bne.n	80096e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
      break;
 80096b8:	e012      	b.n	80096e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
      break;
 80096be:	e00f      	b.n	80096e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80096c0:	bf00      	nop
 80096c2:	e00e      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096c4:	bf00      	nop
 80096c6:	e00c      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096c8:	bf00      	nop
 80096ca:	e00a      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096cc:	bf00      	nop
 80096ce:	e008      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096d0:	bf00      	nop
 80096d2:	e006      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096d4:	bf00      	nop
 80096d6:	e004      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096d8:	bf00      	nop
 80096da:	e002      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096dc:	bf00      	nop
 80096de:	e000      	b.n	80096e2 <USBH_HandleEnum+0x3be>
      break;
 80096e0:	bf00      	nop
  }
  return Status;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f804 	bl	800972e <USBH_HandleSof>
}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b0b      	cmp	r3, #11
 800973e:	d10a      	bne.n	8009756 <USBH_HandleSof+0x28>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	4798      	blx	r3
  }
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800975e:	b480      	push	{r7}
 8009760:	b083      	sub	sp, #12
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800976e:	bf00      	nop
}
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800978a:	bf00      	nop
}
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f844 	bl	800a872 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	791b      	ldrb	r3, [r3, #4]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fe91 	bl	800a518 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	795b      	ldrb	r3, [r3, #5]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fe8b 	bl	800a518 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af02      	add	r7, sp, #8
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	b29b      	uxth	r3, r3
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	4613      	mov	r3, r2
 8009826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800982a:	2100      	movs	r1, #0
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f864 	bl	80098fa <USBH_GetDescriptor>
 8009832:	4603      	mov	r3, r0
 8009834:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009848:	78fa      	ldrb	r2, [r7, #3]
 800984a:	b292      	uxth	r2, r2
 800984c:	4619      	mov	r1, r3
 800984e:	f000 f918 	bl	8009a82 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af02      	add	r7, sp, #8
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	331c      	adds	r3, #28
 800986c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800986e:	887b      	ldrh	r3, [r7, #2]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009878:	2100      	movs	r1, #0
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f83d 	bl	80098fa <USBH_GetDescriptor>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d107      	bne.n	800989a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800988a:	887b      	ldrh	r3, [r7, #2]
 800988c:	461a      	mov	r2, r3
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f987 	bl	8009ba4 <USBH_ParseCfgDesc>
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	607a      	str	r2, [r7, #4]
 80098ae:	461a      	mov	r2, r3
 80098b0:	460b      	mov	r3, r1
 80098b2:	72fb      	strb	r3, [r7, #11]
 80098b4:	4613      	mov	r3, r2
 80098b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80098c0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80098c8:	893b      	ldrh	r3, [r7, #8]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	460b      	mov	r3, r1
 80098ce:	2100      	movs	r1, #0
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 f812 	bl	80098fa <USBH_GetDescriptor>
 80098d6:	4603      	mov	r3, r0
 80098d8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d107      	bne.n	80098f0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098e6:	893a      	ldrh	r2, [r7, #8]
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fb24 	bl	8009f38 <USBH_ParseStringDesc>
  }

  return status;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	607b      	str	r3, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	72fb      	strb	r3, [r7, #11]
 8009908:	4613      	mov	r3, r2
 800990a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	789b      	ldrb	r3, [r3, #2]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d11c      	bne.n	800994e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800991a:	b2da      	uxtb	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2206      	movs	r2, #6
 8009924:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	893a      	ldrh	r2, [r7, #8]
 800992a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800992c:	893b      	ldrh	r3, [r7, #8]
 800992e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009936:	d104      	bne.n	8009942 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f240 4209 	movw	r2, #1033	; 0x409
 800993e:	829a      	strh	r2, [r3, #20]
 8009940:	e002      	b.n	8009948 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8b3a      	ldrh	r2, [r7, #24]
 800994c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800994e:	8b3b      	ldrh	r3, [r7, #24]
 8009950:	461a      	mov	r2, r3
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fb3d 	bl	8009fd4 <USBH_CtlReq>
 800995a:	4603      	mov	r3, r0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	789b      	ldrb	r3, [r3, #2]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d10f      	bne.n	8009998 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2205      	movs	r2, #5
 8009982:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	b29a      	uxth	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fb19 	bl	8009fd4 <USBH_CtlReq>
 80099a2:	4603      	mov	r3, r0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	789b      	ldrb	r3, [r3, #2]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d10e      	bne.n	80099de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2209      	movs	r2, #9
 80099ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	887a      	ldrh	r2, [r7, #2]
 80099d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099de:	2200      	movs	r2, #0
 80099e0:	2100      	movs	r1, #0
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 faf6 	bl	8009fd4 <USBH_CtlReq>
 80099e8:	4603      	mov	r3, r0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	789b      	ldrb	r3, [r3, #2]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d10f      	bne.n	8009a26 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2203      	movs	r2, #3
 8009a10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a26:	2200      	movs	r2, #0
 8009a28:	2100      	movs	r1, #0
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fad2 	bl	8009fd4 <USBH_CtlReq>
 8009a30:	4603      	mov	r3, r0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	789b      	ldrb	r3, [r3, #2]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d10f      	bne.n	8009a6e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2202      	movs	r2, #2
 8009a52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 faae 	bl	8009fd4 <USBH_CtlReq>
 8009a78:	4603      	mov	r3, r0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	785a      	ldrb	r2, [r3, #1]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	3302      	adds	r3, #2
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	3303      	adds	r3, #3
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	791a      	ldrb	r2, [r3, #4]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	795a      	ldrb	r2, [r3, #5]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	799a      	ldrb	r2, [r3, #6]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	79da      	ldrb	r2, [r3, #7]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	79db      	ldrb	r3, [r3, #7]
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	dc11      	bgt.n	8009b08 <USBH_ParseDevDesc+0x86>
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	db16      	blt.n	8009b16 <USBH_ParseDevDesc+0x94>
 8009ae8:	3b08      	subs	r3, #8
 8009aea:	2201      	movs	r2, #1
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bf14      	ite	ne
 8009afc:	2301      	movne	r3, #1
 8009afe:	2300      	moveq	r3, #0
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d102      	bne.n	8009b0c <USBH_ParseDevDesc+0x8a>
 8009b06:	e006      	b.n	8009b16 <USBH_ParseDevDesc+0x94>
 8009b08:	2b40      	cmp	r3, #64	; 0x40
 8009b0a:	d104      	bne.n	8009b16 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	79da      	ldrb	r2, [r3, #7]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	71da      	strb	r2, [r3, #7]
      break;
 8009b14:	e003      	b.n	8009b1e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2240      	movs	r2, #64	; 0x40
 8009b1a:	71da      	strb	r2, [r3, #7]
      break;
 8009b1c:	bf00      	nop
  }

  if (length > 8U)
 8009b1e:	88fb      	ldrh	r3, [r7, #6]
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d939      	bls.n	8009b98 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3308      	adds	r3, #8
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	3309      	adds	r3, #9
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	021b      	lsls	r3, r3, #8
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	330a      	adds	r3, #10
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	330b      	adds	r3, #11
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	021b      	lsls	r3, r3, #8
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	4313      	orrs	r3, r2
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	330c      	adds	r3, #12
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	330d      	adds	r3, #13
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	4313      	orrs	r3, r2
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	7b9a      	ldrb	r2, [r3, #14]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	7bda      	ldrb	r2, [r3, #15]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	7c1a      	ldrb	r2, [r3, #16]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	7c5a      	ldrb	r2, [r3, #17]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	745a      	strb	r2, [r3, #17]
  }
}
 8009b98:	bf00      	nop
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08c      	sub	sp, #48	; 0x30
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009bb8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	781a      	ldrb	r2, [r3, #0]
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	785a      	ldrb	r2, [r3, #1]
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	3302      	adds	r3, #2
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	3303      	adds	r3, #3
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	021b      	lsls	r3, r3, #8
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c00:	bf28      	it	cs
 8009c02:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	791a      	ldrb	r2, [r3, #4]
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	795a      	ldrb	r2, [r3, #5]
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	799a      	ldrb	r2, [r3, #6]
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	79da      	ldrb	r2, [r3, #7]
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	7a1a      	ldrb	r2, [r3, #8]
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b09      	cmp	r3, #9
 8009c3a:	d002      	beq.n	8009c42 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2209      	movs	r2, #9
 8009c40:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009c42:	88fb      	ldrh	r3, [r7, #6]
 8009c44:	2b09      	cmp	r3, #9
 8009c46:	f240 809d 	bls.w	8009d84 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009c4a:	2309      	movs	r3, #9
 8009c4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c52:	e081      	b.n	8009d58 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c54:	f107 0316 	add.w	r3, r7, #22
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c5c:	f000 f99f 	bl	8009f9e <USBH_GetNextDesc>
 8009c60:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	785b      	ldrb	r3, [r3, #1]
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	d176      	bne.n	8009d58 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b09      	cmp	r3, #9
 8009c70:	d002      	beq.n	8009c78 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	2209      	movs	r2, #9
 8009c76:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c7c:	221a      	movs	r2, #26
 8009c7e:	fb02 f303 	mul.w	r3, r2, r3
 8009c82:	3308      	adds	r3, #8
 8009c84:	6a3a      	ldr	r2, [r7, #32]
 8009c86:	4413      	add	r3, r2
 8009c88:	3302      	adds	r3, #2
 8009c8a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c8e:	69f8      	ldr	r0, [r7, #28]
 8009c90:	f000 f87e 	bl	8009d90 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c9e:	e043      	b.n	8009d28 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ca0:	f107 0316 	add.w	r3, r7, #22
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca8:	f000 f979 	bl	8009f9e <USBH_GetNextDesc>
 8009cac:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b05      	cmp	r3, #5
 8009cb4:	d138      	bne.n	8009d28 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	795b      	ldrb	r3, [r3, #5]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d10f      	bne.n	8009cde <USBH_ParseCfgDesc+0x13a>
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	799b      	ldrb	r3, [r3, #6]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d10b      	bne.n	8009cde <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	79db      	ldrb	r3, [r3, #7]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10f      	bne.n	8009cee <USBH_ParseCfgDesc+0x14a>
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b09      	cmp	r3, #9
 8009cd4:	d00b      	beq.n	8009cee <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	2209      	movs	r2, #9
 8009cda:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cdc:	e007      	b.n	8009cee <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2b07      	cmp	r3, #7
 8009ce4:	d004      	beq.n	8009cf0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	2207      	movs	r2, #7
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	e000      	b.n	8009cf0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cee:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009cf8:	3201      	adds	r2, #1
 8009cfa:	00d2      	lsls	r2, r2, #3
 8009cfc:	211a      	movs	r1, #26
 8009cfe:	fb01 f303 	mul.w	r3, r1, r3
 8009d02:	4413      	add	r3, r2
 8009d04:	3308      	adds	r3, #8
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	4413      	add	r3, r2
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d10:	69b9      	ldr	r1, [r7, #24]
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 f86b 	bl	8009dee <USBH_ParseEPDesc>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d22:	3301      	adds	r3, #1
 8009d24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	791b      	ldrb	r3, [r3, #4]
 8009d2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d204      	bcs.n	8009d3e <USBH_ParseCfgDesc+0x19a>
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	885a      	ldrh	r2, [r3, #2]
 8009d38:	8afb      	ldrh	r3, [r7, #22]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d8b0      	bhi.n	8009ca0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	791b      	ldrb	r3, [r3, #4]
 8009d42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d201      	bcs.n	8009d4e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e01c      	b.n	8009d88 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d52:	3301      	adds	r3, #1
 8009d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d805      	bhi.n	8009d6c <USBH_ParseCfgDesc+0x1c8>
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	885a      	ldrh	r2, [r3, #2]
 8009d64:	8afb      	ldrh	r3, [r7, #22]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	f63f af74 	bhi.w	8009c54 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	791b      	ldrb	r3, [r3, #4]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	bf28      	it	cs
 8009d74:	2302      	movcs	r3, #2
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d201      	bcs.n	8009d84 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e001      	b.n	8009d88 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3730      	adds	r7, #48	; 0x30
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781a      	ldrb	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	785a      	ldrb	r2, [r3, #1]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	789a      	ldrb	r2, [r3, #2]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	78da      	ldrb	r2, [r3, #3]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	791a      	ldrb	r2, [r3, #4]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	795a      	ldrb	r2, [r3, #5]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	799a      	ldrb	r2, [r3, #6]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	79da      	ldrb	r2, [r3, #7]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	7a1a      	ldrb	r2, [r3, #8]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	721a      	strb	r2, [r3, #8]
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b087      	sub	sp, #28
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	781a      	ldrb	r2, [r3, #0]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	785a      	ldrb	r2, [r3, #1]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	789a      	ldrb	r2, [r3, #2]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	78da      	ldrb	r2, [r3, #3]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3304      	adds	r3, #4
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3305      	adds	r3, #5
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	4313      	orrs	r3, r2
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	799a      	ldrb	r2, [r3, #6]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	889b      	ldrh	r3, [r3, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d102      	bne.n	8009e50 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	75fb      	strb	r3, [r7, #23]
 8009e4e:	e033      	b.n	8009eb8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	889b      	ldrh	r3, [r3, #4]
 8009e54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e58:	f023 0307 	bic.w	r3, r3, #7
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	889b      	ldrh	r3, [r3, #4]
 8009e66:	b21a      	sxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b299      	uxth	r1, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3305      	adds	r3, #5
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d110      	bne.n	8009eaa <USBH_ParseEPDesc+0xbc>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b299      	uxth	r1, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3305      	adds	r3, #5
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	b21b      	sxth	r3, r3
 8009ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ea6:	b21b      	sxth	r3, r3
 8009ea8:	e001      	b.n	8009eae <USBH_ParseEPDesc+0xc0>
 8009eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	b21b      	sxth	r3, r3
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d116      	bne.n	8009ef0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	78db      	ldrb	r3, [r3, #3]
 8009ec6:	f003 0303 	and.w	r3, r3, #3
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d005      	beq.n	8009eda <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	78db      	ldrb	r3, [r3, #3]
 8009ed2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d127      	bne.n	8009f2a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	799b      	ldrb	r3, [r3, #6]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <USBH_ParseEPDesc+0xfc>
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	799b      	ldrb	r3, [r3, #6]
 8009ee6:	2b10      	cmp	r3, #16
 8009ee8:	d91f      	bls.n	8009f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009eea:	2303      	movs	r3, #3
 8009eec:	75fb      	strb	r3, [r7, #23]
 8009eee:	e01c      	b.n	8009f2a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	78db      	ldrb	r3, [r3, #3]
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d10a      	bne.n	8009f12 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	799b      	ldrb	r3, [r3, #6]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <USBH_ParseEPDesc+0x11e>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	799b      	ldrb	r3, [r3, #6]
 8009f08:	2b10      	cmp	r3, #16
 8009f0a:	d90e      	bls.n	8009f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	75fb      	strb	r3, [r7, #23]
 8009f10:	e00b      	b.n	8009f2a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	78db      	ldrb	r3, [r3, #3]
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d105      	bne.n	8009f2a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	799b      	ldrb	r3, [r3, #6]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009f26:	2303      	movs	r3, #3
 8009f28:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d120      	bne.n	8009f92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	1e9a      	subs	r2, r3, #2
 8009f56:	88fb      	ldrh	r3, [r7, #6]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bf28      	it	cs
 8009f5c:	4613      	movcs	r3, r2
 8009f5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3302      	adds	r3, #2
 8009f64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f66:	2300      	movs	r3, #0
 8009f68:	82fb      	strh	r3, [r7, #22]
 8009f6a:	e00b      	b.n	8009f84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f6c:	8afb      	ldrh	r3, [r7, #22]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	781a      	ldrb	r2, [r3, #0]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f7e:	8afb      	ldrh	r3, [r7, #22]
 8009f80:	3302      	adds	r3, #2
 8009f82:	82fb      	strh	r3, [r7, #22]
 8009f84:	8afa      	ldrh	r2, [r7, #22]
 8009f86:	8abb      	ldrh	r3, [r7, #20]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d3ef      	bcc.n	8009f6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	701a      	strb	r2, [r3, #0]
  }
}
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b085      	sub	sp, #20
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	881a      	ldrh	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	789b      	ldrb	r3, [r3, #2]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d002      	beq.n	8009ff4 <USBH_CtlReq+0x20>
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d00f      	beq.n	800a012 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009ff2:	e027      	b.n	800a044 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	88fa      	ldrh	r2, [r7, #6]
 8009ffe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2201      	movs	r2, #1
 800a004:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2202      	movs	r2, #2
 800a00a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a00c:	2301      	movs	r3, #1
 800a00e:	75fb      	strb	r3, [r7, #23]
      break;
 800a010:	e018      	b.n	800a044 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f000 f81c 	bl	800a050 <USBH_HandleControl>
 800a018:	4603      	mov	r3, r0
 800a01a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <USBH_CtlReq+0x54>
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	2b03      	cmp	r3, #3
 800a026:	d106      	bne.n	800a036 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2201      	movs	r2, #1
 800a02c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	761a      	strb	r2, [r3, #24]
      break;
 800a034:	e005      	b.n	800a042 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d102      	bne.n	800a042 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2201      	movs	r2, #1
 800a040:	709a      	strb	r2, [r3, #2]
      break;
 800a042:	bf00      	nop
  }
  return status;
 800a044:	7dfb      	ldrb	r3, [r7, #23]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af02      	add	r7, sp, #8
 800a056:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a058:	2301      	movs	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	7e1b      	ldrb	r3, [r3, #24]
 800a064:	3b01      	subs	r3, #1
 800a066:	2b0a      	cmp	r3, #10
 800a068:	f200 8156 	bhi.w	800a318 <USBH_HandleControl+0x2c8>
 800a06c:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <USBH_HandleControl+0x24>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a0a1 	.word	0x0800a0a1
 800a078:	0800a0bb 	.word	0x0800a0bb
 800a07c:	0800a125 	.word	0x0800a125
 800a080:	0800a14b 	.word	0x0800a14b
 800a084:	0800a183 	.word	0x0800a183
 800a088:	0800a1ad 	.word	0x0800a1ad
 800a08c:	0800a1ff 	.word	0x0800a1ff
 800a090:	0800a221 	.word	0x0800a221
 800a094:	0800a25d 	.word	0x0800a25d
 800a098:	0800a283 	.word	0x0800a283
 800a09c:	0800a2c1 	.word	0x0800a2c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f103 0110 	add.w	r1, r3, #16
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	795b      	ldrb	r3, [r3, #5]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f943 	bl	800a338 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	761a      	strb	r2, [r3, #24]
      break;
 800a0b8:	e139      	b.n	800a32e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	795b      	ldrb	r3, [r3, #5]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fcc5 	bl	800aa50 <USBH_LL_GetURBState>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d11e      	bne.n	800a10e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7c1b      	ldrb	r3, [r3, #16]
 800a0d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	8adb      	ldrh	r3, [r3, #22]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a0e2:	7b7b      	ldrb	r3, [r7, #13]
 800a0e4:	2b80      	cmp	r3, #128	; 0x80
 800a0e6:	d103      	bne.n	800a0f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0ee:	e115      	b.n	800a31c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2205      	movs	r2, #5
 800a0f4:	761a      	strb	r2, [r3, #24]
      break;
 800a0f6:	e111      	b.n	800a31c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a0f8:	7b7b      	ldrb	r3, [r7, #13]
 800a0fa:	2b80      	cmp	r3, #128	; 0x80
 800a0fc:	d103      	bne.n	800a106 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2209      	movs	r2, #9
 800a102:	761a      	strb	r2, [r3, #24]
      break;
 800a104:	e10a      	b.n	800a31c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2207      	movs	r2, #7
 800a10a:	761a      	strb	r2, [r3, #24]
      break;
 800a10c:	e106      	b.n	800a31c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	2b04      	cmp	r3, #4
 800a112:	d003      	beq.n	800a11c <USBH_HandleControl+0xcc>
 800a114:	7bbb      	ldrb	r3, [r7, #14]
 800a116:	2b02      	cmp	r3, #2
 800a118:	f040 8100 	bne.w	800a31c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	220b      	movs	r2, #11
 800a120:	761a      	strb	r2, [r3, #24]
      break;
 800a122:	e0fb      	b.n	800a31c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6899      	ldr	r1, [r3, #8]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	899a      	ldrh	r2, [r3, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	791b      	ldrb	r3, [r3, #4]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f93a 	bl	800a3b6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2204      	movs	r2, #4
 800a146:	761a      	strb	r2, [r3, #24]
      break;
 800a148:	e0f1      	b.n	800a32e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	791b      	ldrb	r3, [r3, #4]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fc7d 	bl	800aa50 <USBH_LL_GetURBState>
 800a156:	4603      	mov	r3, r0
 800a158:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d102      	bne.n	800a166 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2209      	movs	r2, #9
 800a164:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b05      	cmp	r3, #5
 800a16a:	d102      	bne.n	800a172 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a16c:	2303      	movs	r3, #3
 800a16e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a170:	e0d6      	b.n	800a320 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	2b04      	cmp	r3, #4
 800a176:	f040 80d3 	bne.w	800a320 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	220b      	movs	r2, #11
 800a17e:	761a      	strb	r2, [r3, #24]
      break;
 800a180:	e0ce      	b.n	800a320 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6899      	ldr	r1, [r3, #8]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	899a      	ldrh	r2, [r3, #12]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	795b      	ldrb	r3, [r3, #5]
 800a18e:	2001      	movs	r0, #1
 800a190:	9000      	str	r0, [sp, #0]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f8ea 	bl	800a36c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2206      	movs	r2, #6
 800a1a8:	761a      	strb	r2, [r3, #24]
      break;
 800a1aa:	e0c0      	b.n	800a32e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	795b      	ldrb	r3, [r3, #5]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fc4c 	bl	800aa50 <USBH_LL_GetURBState>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d103      	bne.n	800a1ca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2207      	movs	r2, #7
 800a1c6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1c8:	e0ac      	b.n	800a324 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	d105      	bne.n	800a1dc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	220c      	movs	r2, #12
 800a1d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1da:	e0a3      	b.n	800a324 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d103      	bne.n	800a1ea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2205      	movs	r2, #5
 800a1e6:	761a      	strb	r2, [r3, #24]
      break;
 800a1e8:	e09c      	b.n	800a324 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	f040 8099 	bne.w	800a324 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	220b      	movs	r2, #11
 800a1f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a1fc:	e092      	b.n	800a324 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	791b      	ldrb	r3, [r3, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	2100      	movs	r1, #0
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f8d5 	bl	800a3b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a212:	b29a      	uxth	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2208      	movs	r2, #8
 800a21c:	761a      	strb	r2, [r3, #24]

      break;
 800a21e:	e086      	b.n	800a32e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fc12 	bl	800aa50 <USBH_LL_GetURBState>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a230:	7bbb      	ldrb	r3, [r7, #14]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d105      	bne.n	800a242 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	220d      	movs	r2, #13
 800a23a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a240:	e072      	b.n	800a328 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	2b04      	cmp	r3, #4
 800a246:	d103      	bne.n	800a250 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	220b      	movs	r2, #11
 800a24c:	761a      	strb	r2, [r3, #24]
      break;
 800a24e:	e06b      	b.n	800a328 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	2b05      	cmp	r3, #5
 800a254:	d168      	bne.n	800a328 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a256:	2303      	movs	r3, #3
 800a258:	73fb      	strb	r3, [r7, #15]
      break;
 800a25a:	e065      	b.n	800a328 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	795b      	ldrb	r3, [r3, #5]
 800a260:	2201      	movs	r2, #1
 800a262:	9200      	str	r2, [sp, #0]
 800a264:	2200      	movs	r2, #0
 800a266:	2100      	movs	r1, #0
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f87f 	bl	800a36c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a274:	b29a      	uxth	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	220a      	movs	r2, #10
 800a27e:	761a      	strb	r2, [r3, #24]
      break;
 800a280:	e055      	b.n	800a32e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	795b      	ldrb	r3, [r3, #5]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fbe1 	bl	800aa50 <USBH_LL_GetURBState>
 800a28e:	4603      	mov	r3, r0
 800a290:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d105      	bne.n	800a2a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	220d      	movs	r2, #13
 800a2a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2a2:	e043      	b.n	800a32c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d103      	bne.n	800a2b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2209      	movs	r2, #9
 800a2ae:	761a      	strb	r2, [r3, #24]
      break;
 800a2b0:	e03c      	b.n	800a32c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d139      	bne.n	800a32c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	220b      	movs	r2, #11
 800a2bc:	761a      	strb	r2, [r3, #24]
      break;
 800a2be:	e035      	b.n	800a32c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7e5b      	ldrb	r3, [r3, #25]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	765a      	strb	r2, [r3, #25]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7e5b      	ldrb	r3, [r3, #25]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d806      	bhi.n	800a2e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a2e0:	e025      	b.n	800a32e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2e8:	2106      	movs	r1, #6
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	795b      	ldrb	r3, [r3, #5]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f90c 	bl	800a518 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	791b      	ldrb	r3, [r3, #4]
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f906 	bl	800a518 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a312:	2302      	movs	r3, #2
 800a314:	73fb      	strb	r3, [r7, #15]
      break;
 800a316:	e00a      	b.n	800a32e <USBH_HandleControl+0x2de>

    default:
      break;
 800a318:	bf00      	nop
 800a31a:	e008      	b.n	800a32e <USBH_HandleControl+0x2de>
      break;
 800a31c:	bf00      	nop
 800a31e:	e006      	b.n	800a32e <USBH_HandleControl+0x2de>
      break;
 800a320:	bf00      	nop
 800a322:	e004      	b.n	800a32e <USBH_HandleControl+0x2de>
      break;
 800a324:	bf00      	nop
 800a326:	e002      	b.n	800a32e <USBH_HandleControl+0x2de>
      break;
 800a328:	bf00      	nop
 800a32a:	e000      	b.n	800a32e <USBH_HandleControl+0x2de>
      break;
 800a32c:	bf00      	nop
  }

  return status;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af04      	add	r7, sp, #16
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a346:	79f9      	ldrb	r1, [r7, #7]
 800a348:	2300      	movs	r3, #0
 800a34a:	9303      	str	r3, [sp, #12]
 800a34c:	2308      	movs	r3, #8
 800a34e:	9302      	str	r3, [sp, #8]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	2300      	movs	r3, #0
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	2300      	movs	r3, #0
 800a35a:	2200      	movs	r2, #0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fb46 	bl	800a9ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af04      	add	r7, sp, #16
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4611      	mov	r1, r2
 800a378:	461a      	mov	r2, r3
 800a37a:	460b      	mov	r3, r1
 800a37c:	80fb      	strh	r3, [r7, #6]
 800a37e:	4613      	mov	r3, r2
 800a380:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a390:	7979      	ldrb	r1, [r7, #5]
 800a392:	7e3b      	ldrb	r3, [r7, #24]
 800a394:	9303      	str	r3, [sp, #12]
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	9302      	str	r3, [sp, #8]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	2301      	movs	r3, #1
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 fb21 	bl	800a9ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b088      	sub	sp, #32
 800a3ba:	af04      	add	r7, sp, #16
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	80fb      	strh	r3, [r7, #6]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a3cc:	7979      	ldrb	r1, [r7, #5]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	9303      	str	r3, [sp, #12]
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	9302      	str	r3, [sp, #8]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	2301      	movs	r3, #1
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 fb03 	bl	800a9ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a3e8:	2300      	movs	r3, #0

}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b088      	sub	sp, #32
 800a3f6:	af04      	add	r7, sp, #16
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	461a      	mov	r2, r3
 800a400:	460b      	mov	r3, r1
 800a402:	80fb      	strh	r3, [r7, #6]
 800a404:	4613      	mov	r3, r2
 800a406:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a416:	7979      	ldrb	r1, [r7, #5]
 800a418:	7e3b      	ldrb	r3, [r7, #24]
 800a41a:	9303      	str	r3, [sp, #12]
 800a41c:	88fb      	ldrh	r3, [r7, #6]
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	2301      	movs	r3, #1
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	2302      	movs	r3, #2
 800a42a:	2200      	movs	r2, #0
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f000 fade 	bl	800a9ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b088      	sub	sp, #32
 800a440:	af04      	add	r7, sp, #16
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4611      	mov	r1, r2
 800a448:	461a      	mov	r2, r3
 800a44a:	460b      	mov	r3, r1
 800a44c:	80fb      	strh	r3, [r7, #6]
 800a44e:	4613      	mov	r3, r2
 800a450:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a452:	7979      	ldrb	r1, [r7, #5]
 800a454:	2300      	movs	r3, #0
 800a456:	9303      	str	r3, [sp, #12]
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	9302      	str	r3, [sp, #8]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	2301      	movs	r3, #1
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	2302      	movs	r3, #2
 800a466:	2201      	movs	r2, #1
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 fac0 	bl	800a9ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af04      	add	r7, sp, #16
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	4608      	mov	r0, r1
 800a482:	4611      	mov	r1, r2
 800a484:	461a      	mov	r2, r3
 800a486:	4603      	mov	r3, r0
 800a488:	70fb      	strb	r3, [r7, #3]
 800a48a:	460b      	mov	r3, r1
 800a48c:	70bb      	strb	r3, [r7, #2]
 800a48e:	4613      	mov	r3, r2
 800a490:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a492:	7878      	ldrb	r0, [r7, #1]
 800a494:	78ba      	ldrb	r2, [r7, #2]
 800a496:	78f9      	ldrb	r1, [r7, #3]
 800a498:	8b3b      	ldrh	r3, [r7, #24]
 800a49a:	9302      	str	r3, [sp, #8]
 800a49c:	7d3b      	ldrb	r3, [r7, #20]
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	7c3b      	ldrb	r3, [r7, #16]
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fa53 	bl	800a952 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a4c2:	78fb      	ldrb	r3, [r7, #3]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fa72 	bl	800a9b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f836 	bl	800a554 <USBH_GetFreePipe>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00a      	beq.n	800a50c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a4f6:	78fa      	ldrb	r2, [r7, #3]
 800a4f8:	89fb      	ldrh	r3, [r7, #14]
 800a4fa:	f003 030f 	and.w	r3, r3, #15
 800a4fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	33e0      	adds	r3, #224	; 0xe0
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a50c:	89fb      	ldrh	r3, [r7, #14]
 800a50e:	b2db      	uxtb	r3, r3
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	2b0f      	cmp	r3, #15
 800a528:	d80d      	bhi.n	800a546 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	33e0      	adds	r3, #224	; 0xe0
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	78fb      	ldrb	r3, [r7, #3]
 800a538:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	33e0      	adds	r3, #224	; 0xe0
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	440b      	add	r3, r1
 800a544:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]
 800a564:	e00f      	b.n	800a586 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	33e0      	adds	r3, #224	; 0xe0
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	e007      	b.n	800a590 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	3301      	adds	r3, #1
 800a584:	73fb      	strb	r3, [r7, #15]
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	2b0f      	cmp	r3, #15
 800a58a:	d9ec      	bls.n	800a566 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a58c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	490e      	ldr	r1, [pc, #56]	; (800a5dc <MX_USB_HOST_Init+0x40>)
 800a5a4:	480e      	ldr	r0, [pc, #56]	; (800a5e0 <MX_USB_HOST_Init+0x44>)
 800a5a6:	f7fe fba7 	bl	8008cf8 <USBH_Init>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5b0:	f7f7 febc 	bl	800232c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5b4:	490b      	ldr	r1, [pc, #44]	; (800a5e4 <MX_USB_HOST_Init+0x48>)
 800a5b6:	480a      	ldr	r0, [pc, #40]	; (800a5e0 <MX_USB_HOST_Init+0x44>)
 800a5b8:	f7fe fc2c 	bl	8008e14 <USBH_RegisterClass>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a5c2:	f7f7 feb3 	bl	800232c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a5c6:	4806      	ldr	r0, [pc, #24]	; (800a5e0 <MX_USB_HOST_Init+0x44>)
 800a5c8:	f7fe fcb0 	bl	8008f2c <USBH_Start>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a5d2:	f7f7 feab 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a5d6:	bf00      	nop
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800a5fd 	.word	0x0800a5fd
 800a5e0:	20000428 	.word	0x20000428
 800a5e4:	2000000c 	.word	0x2000000c

0800a5e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a5ec:	4802      	ldr	r0, [pc, #8]	; (800a5f8 <MX_USB_HOST_Process+0x10>)
 800a5ee:	f7fe fcad 	bl	8008f4c <USBH_Process>
}
 800a5f2:	bf00      	nop
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000428 	.word	0x20000428

0800a5fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d819      	bhi.n	800a644 <USBH_UserProcess+0x48>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <USBH_UserProcess+0x1c>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a645 	.word	0x0800a645
 800a61c:	0800a635 	.word	0x0800a635
 800a620:	0800a645 	.word	0x0800a645
 800a624:	0800a63d 	.word	0x0800a63d
 800a628:	0800a62d 	.word	0x0800a62d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a62c:	4b09      	ldr	r3, [pc, #36]	; (800a654 <USBH_UserProcess+0x58>)
 800a62e:	2203      	movs	r2, #3
 800a630:	701a      	strb	r2, [r3, #0]
  break;
 800a632:	e008      	b.n	800a646 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a634:	4b07      	ldr	r3, [pc, #28]	; (800a654 <USBH_UserProcess+0x58>)
 800a636:	2202      	movs	r2, #2
 800a638:	701a      	strb	r2, [r3, #0]
  break;
 800a63a:	e004      	b.n	800a646 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <USBH_UserProcess+0x58>)
 800a63e:	2201      	movs	r2, #1
 800a640:	701a      	strb	r2, [r3, #0]
  break;
 800a642:	e000      	b.n	800a646 <USBH_UserProcess+0x4a>

  default:
  break;
 800a644:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20000800 	.word	0x20000800

0800a658 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	; 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a660:	f107 0314 	add.w	r3, r7, #20
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	605a      	str	r2, [r3, #4]
 800a66a:	609a      	str	r2, [r3, #8]
 800a66c:	60da      	str	r2, [r3, #12]
 800a66e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a678:	d147      	bne.n	800a70a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a67a:	2300      	movs	r3, #0
 800a67c:	613b      	str	r3, [r7, #16]
 800a67e:	4b25      	ldr	r3, [pc, #148]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a682:	4a24      	ldr	r2, [pc, #144]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	6313      	str	r3, [r2, #48]	; 0x30
 800a68a:	4b22      	ldr	r3, [pc, #136]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	613b      	str	r3, [r7, #16]
 800a694:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a69a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a69c:	2300      	movs	r3, #0
 800a69e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a6a4:	f107 0314 	add.w	r3, r7, #20
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	481b      	ldr	r0, [pc, #108]	; (800a718 <HAL_HCD_MspInit+0xc0>)
 800a6ac:	f7f8 fa3a 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a6b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a6b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6c2:	230a      	movs	r3, #10
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6c6:	f107 0314 	add.w	r3, r7, #20
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4812      	ldr	r0, [pc, #72]	; (800a718 <HAL_HCD_MspInit+0xc0>)
 800a6ce:	f7f8 fa29 	bl	8002b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6d2:	4b10      	ldr	r3, [pc, #64]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d6:	4a0f      	ldr	r2, [pc, #60]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6dc:	6353      	str	r3, [r2, #52]	; 0x34
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e6:	4a0b      	ldr	r2, [pc, #44]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a6e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <HAL_HCD_MspInit+0xbc>)
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	2043      	movs	r0, #67	; 0x43
 800a700:	f7f8 f9d9 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a704:	2043      	movs	r0, #67	; 0x43
 800a706:	f7f8 f9f2 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a70a:	bf00      	nop
 800a70c:	3728      	adds	r7, #40	; 0x28
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	40023800 	.word	0x40023800
 800a718:	40020000 	.word	0x40020000

0800a71c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe ffed 	bl	800970a <USBH_LL_IncTimer>
}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff f825 	bl	8009796 <USBH_LL_Connect>
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff f82e 	bl	80097c4 <USBH_LL_Disconnect>
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
 800a77c:	4613      	mov	r3, r2
 800a77e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe ffdf 	bl	800975e <USBH_LL_PortEnabled>
}
 800a7a0:	bf00      	nop
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe ffdf 	bl	800977a <USBH_LL_PortDisabled>
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d12a      	bne.n	800a82c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a7d6:	4a18      	ldr	r2, [pc, #96]	; (800a838 <USBH_LL_Init+0x74>)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a15      	ldr	r2, [pc, #84]	; (800a838 <USBH_LL_Init+0x74>)
 800a7e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7e6:	4b14      	ldr	r3, [pc, #80]	; (800a838 <USBH_LL_Init+0x74>)
 800a7e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a7ee:	4b12      	ldr	r3, [pc, #72]	; (800a838 <USBH_LL_Init+0x74>)
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a7f4:	4b10      	ldr	r3, [pc, #64]	; (800a838 <USBH_LL_Init+0x74>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7fa:	4b0f      	ldr	r3, [pc, #60]	; (800a838 <USBH_LL_Init+0x74>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a800:	4b0d      	ldr	r3, [pc, #52]	; (800a838 <USBH_LL_Init+0x74>)
 800a802:	2202      	movs	r2, #2
 800a804:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <USBH_LL_Init+0x74>)
 800a808:	2200      	movs	r2, #0
 800a80a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a80c:	480a      	ldr	r0, [pc, #40]	; (800a838 <USBH_LL_Init+0x74>)
 800a80e:	f7f8 fb26 	bl	8002e5e <HAL_HCD_Init>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a818:	f7f7 fd88 	bl	800232c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a81c:	4806      	ldr	r0, [pc, #24]	; (800a838 <USBH_LL_Init+0x74>)
 800a81e:	f7f8 ff0a 	bl	8003636 <HAL_HCD_GetCurrentFrame>
 800a822:	4603      	mov	r3, r0
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7fe ff60 	bl	80096ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20000804 	.word	0x20000804

0800a83c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a852:	4618      	mov	r0, r3
 800a854:	f7f8 fe79 	bl	800354a <HAL_HCD_Start>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 f95c 	bl	800ab1c <USBH_Get_USB_Status>
 800a864:	4603      	mov	r3, r0
 800a866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a868:	7bbb      	ldrb	r3, [r7, #14]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f8 fe81 	bl	8003590 <HAL_HCD_Stop>
 800a88e:	4603      	mov	r3, r0
 800a890:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f941 	bl	800ab1c <USBH_Get_USB_Status>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f8 fec9 	bl	8003652 <HAL_HCD_GetCurrentSpeed>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d00c      	beq.n	800a8e0 <USBH_LL_GetSpeed+0x38>
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d80d      	bhi.n	800a8e6 <USBH_LL_GetSpeed+0x3e>
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <USBH_LL_GetSpeed+0x2c>
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d003      	beq.n	800a8da <USBH_LL_GetSpeed+0x32>
 800a8d2:	e008      	b.n	800a8e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d8:	e008      	b.n	800a8ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8de:	e005      	b.n	800a8ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e4:	e002      	b.n	800a8ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ea:	bf00      	nop
  }
  return  speed;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f8 fe5c 	bl	80035ca <HAL_HCD_ResetPort>
 800a912:	4603      	mov	r3, r0
 800a914:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 f8ff 	bl	800ab1c <USBH_Get_USB_Status>
 800a91e:	4603      	mov	r3, r0
 800a920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a922:	7bbb      	ldrb	r3, [r7, #14]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a93e:	78fa      	ldrb	r2, [r7, #3]
 800a940:	4611      	mov	r1, r2
 800a942:	4618      	mov	r0, r3
 800a944:	f7f8 fe63 	bl	800360e <HAL_HCD_HC_GetXferCount>
 800a948:	4603      	mov	r3, r0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a952:	b590      	push	{r4, r7, lr}
 800a954:	b089      	sub	sp, #36	; 0x24
 800a956:	af04      	add	r7, sp, #16
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	461a      	mov	r2, r3
 800a960:	4603      	mov	r3, r0
 800a962:	70fb      	strb	r3, [r7, #3]
 800a964:	460b      	mov	r3, r1
 800a966:	70bb      	strb	r3, [r7, #2]
 800a968:	4613      	mov	r3, r2
 800a96a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a97a:	787c      	ldrb	r4, [r7, #1]
 800a97c:	78ba      	ldrb	r2, [r7, #2]
 800a97e:	78f9      	ldrb	r1, [r7, #3]
 800a980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a982:	9302      	str	r3, [sp, #8]
 800a984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4623      	mov	r3, r4
 800a992:	f7f8 fac6 	bl	8002f22 <HAL_HCD_HC_Init>
 800a996:	4603      	mov	r3, r0
 800a998:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 f8bd 	bl	800ab1c <USBH_Get_USB_Status>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd90      	pop	{r4, r7, pc}

0800a9b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9ca:	78fa      	ldrb	r2, [r7, #3]
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7f8 fb36 	bl	8003040 <HAL_HCD_HC_Halt>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f89e 	bl	800ab1c <USBH_Get_USB_Status>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a9ee:	b590      	push	{r4, r7, lr}
 800a9f0:	b089      	sub	sp, #36	; 0x24
 800a9f2:	af04      	add	r7, sp, #16
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	70fb      	strb	r3, [r7, #3]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70bb      	strb	r3, [r7, #2]
 800aa04:	4613      	mov	r3, r2
 800aa06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa16:	787c      	ldrb	r4, [r7, #1]
 800aa18:	78ba      	ldrb	r2, [r7, #2]
 800aa1a:	78f9      	ldrb	r1, [r7, #3]
 800aa1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa20:	9303      	str	r3, [sp, #12]
 800aa22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa24:	9302      	str	r3, [sp, #8]
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	9301      	str	r3, [sp, #4]
 800aa2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	4623      	mov	r3, r4
 800aa32:	f7f8 fb29 	bl	8003088 <HAL_HCD_HC_SubmitRequest>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f86d 	bl	800ab1c <USBH_Get_USB_Status>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd90      	pop	{r4, r7, pc}

0800aa50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa62:	78fa      	ldrb	r2, [r7, #3]
 800aa64:	4611      	mov	r1, r2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7f8 fdbd 	bl	80035e6 <HAL_HCD_HC_GetURBState>
 800aa6c:	4603      	mov	r3, r0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d103      	bne.n	800aa94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aa8c:	78fb      	ldrb	r3, [r7, #3]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 f870 	bl	800ab74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aa94:	20c8      	movs	r0, #200	; 0xc8
 800aa96:	f7f7 ff0f 	bl	80028b8 <HAL_Delay>
  return USBH_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
 800aab0:	4613      	mov	r3, r2
 800aab2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aaba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	212c      	movs	r1, #44	; 0x2c
 800aac2:	fb01 f303 	mul.w	r3, r1, r3
 800aac6:	4413      	add	r3, r2
 800aac8:	333b      	adds	r3, #59	; 0x3b
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d009      	beq.n	800aae4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	212c      	movs	r1, #44	; 0x2c
 800aad6:	fb01 f303 	mul.w	r3, r1, r3
 800aada:	4413      	add	r3, r2
 800aadc:	3354      	adds	r3, #84	; 0x54
 800aade:	78ba      	ldrb	r2, [r7, #2]
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	e008      	b.n	800aaf6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aae4:	78fb      	ldrb	r3, [r7, #3]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	212c      	movs	r1, #44	; 0x2c
 800aaea:	fb01 f303 	mul.w	r3, r1, r3
 800aaee:	4413      	add	r3, r2
 800aaf0:	3355      	adds	r3, #85	; 0x55
 800aaf2:	78ba      	ldrb	r2, [r7, #2]
 800aaf4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7f7 fed3 	bl	80028b8 <HAL_Delay>
}
 800ab12:	bf00      	nop
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
	...

0800ab1c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d817      	bhi.n	800ab60 <USBH_Get_USB_Status+0x44>
 800ab30:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <USBH_Get_USB_Status+0x1c>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab4f 	.word	0x0800ab4f
 800ab40:	0800ab55 	.word	0x0800ab55
 800ab44:	0800ab5b 	.word	0x0800ab5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab4c:	e00b      	b.n	800ab66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	73fb      	strb	r3, [r7, #15]
    break;
 800ab52:	e008      	b.n	800ab66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab54:	2301      	movs	r3, #1
 800ab56:	73fb      	strb	r3, [r7, #15]
    break;
 800ab58:	e005      	b.n	800ab66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5e:	e002      	b.n	800ab66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab60:	2302      	movs	r3, #2
 800ab62:	73fb      	strb	r3, [r7, #15]
    break;
 800ab64:	bf00      	nop
  }
  return usb_status;
 800ab66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ab82:	79fb      	ldrb	r3, [r7, #7]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d102      	bne.n	800ab8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
 800ab8c:	e001      	b.n	800ab92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
 800ab94:	461a      	mov	r2, r3
 800ab96:	2101      	movs	r1, #1
 800ab98:	4803      	ldr	r0, [pc, #12]	; (800aba8 <MX_DriverVbusFS+0x34>)
 800ab9a:	f7f8 f947 	bl	8002e2c <HAL_GPIO_WritePin>
}
 800ab9e:	bf00      	nop
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	40020800 	.word	0x40020800

0800abac <__errno>:
 800abac:	4b01      	ldr	r3, [pc, #4]	; (800abb4 <__errno+0x8>)
 800abae:	6818      	ldr	r0, [r3, #0]
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	2000002c 	.word	0x2000002c

0800abb8 <__libc_init_array>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	4d0d      	ldr	r5, [pc, #52]	; (800abf0 <__libc_init_array+0x38>)
 800abbc:	4c0d      	ldr	r4, [pc, #52]	; (800abf4 <__libc_init_array+0x3c>)
 800abbe:	1b64      	subs	r4, r4, r5
 800abc0:	10a4      	asrs	r4, r4, #2
 800abc2:	2600      	movs	r6, #0
 800abc4:	42a6      	cmp	r6, r4
 800abc6:	d109      	bne.n	800abdc <__libc_init_array+0x24>
 800abc8:	4d0b      	ldr	r5, [pc, #44]	; (800abf8 <__libc_init_array+0x40>)
 800abca:	4c0c      	ldr	r4, [pc, #48]	; (800abfc <__libc_init_array+0x44>)
 800abcc:	f002 ff0c 	bl	800d9e8 <_init>
 800abd0:	1b64      	subs	r4, r4, r5
 800abd2:	10a4      	asrs	r4, r4, #2
 800abd4:	2600      	movs	r6, #0
 800abd6:	42a6      	cmp	r6, r4
 800abd8:	d105      	bne.n	800abe6 <__libc_init_array+0x2e>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe0:	4798      	blx	r3
 800abe2:	3601      	adds	r6, #1
 800abe4:	e7ee      	b.n	800abc4 <__libc_init_array+0xc>
 800abe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abea:	4798      	blx	r3
 800abec:	3601      	adds	r6, #1
 800abee:	e7f2      	b.n	800abd6 <__libc_init_array+0x1e>
 800abf0:	0800de34 	.word	0x0800de34
 800abf4:	0800de34 	.word	0x0800de34
 800abf8:	0800de34 	.word	0x0800de34
 800abfc:	0800de38 	.word	0x0800de38

0800ac00 <malloc>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <malloc+0xc>)
 800ac02:	4601      	mov	r1, r0
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f000 b87f 	b.w	800ad08 <_malloc_r>
 800ac0a:	bf00      	nop
 800ac0c:	2000002c 	.word	0x2000002c

0800ac10 <free>:
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <free+0xc>)
 800ac12:	4601      	mov	r1, r0
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	f000 b80b 	b.w	800ac30 <_free_r>
 800ac1a:	bf00      	nop
 800ac1c:	2000002c 	.word	0x2000002c

0800ac20 <memset>:
 800ac20:	4402      	add	r2, r0
 800ac22:	4603      	mov	r3, r0
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d100      	bne.n	800ac2a <memset+0xa>
 800ac28:	4770      	bx	lr
 800ac2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac2e:	e7f9      	b.n	800ac24 <memset+0x4>

0800ac30 <_free_r>:
 800ac30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac32:	2900      	cmp	r1, #0
 800ac34:	d044      	beq.n	800acc0 <_free_r+0x90>
 800ac36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac3a:	9001      	str	r0, [sp, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ac42:	bfb8      	it	lt
 800ac44:	18e4      	addlt	r4, r4, r3
 800ac46:	f001 fbfb 	bl	800c440 <__malloc_lock>
 800ac4a:	4a1e      	ldr	r2, [pc, #120]	; (800acc4 <_free_r+0x94>)
 800ac4c:	9801      	ldr	r0, [sp, #4]
 800ac4e:	6813      	ldr	r3, [r2, #0]
 800ac50:	b933      	cbnz	r3, 800ac60 <_free_r+0x30>
 800ac52:	6063      	str	r3, [r4, #4]
 800ac54:	6014      	str	r4, [r2, #0]
 800ac56:	b003      	add	sp, #12
 800ac58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac5c:	f001 bbf6 	b.w	800c44c <__malloc_unlock>
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	d908      	bls.n	800ac76 <_free_r+0x46>
 800ac64:	6825      	ldr	r5, [r4, #0]
 800ac66:	1961      	adds	r1, r4, r5
 800ac68:	428b      	cmp	r3, r1
 800ac6a:	bf01      	itttt	eq
 800ac6c:	6819      	ldreq	r1, [r3, #0]
 800ac6e:	685b      	ldreq	r3, [r3, #4]
 800ac70:	1949      	addeq	r1, r1, r5
 800ac72:	6021      	streq	r1, [r4, #0]
 800ac74:	e7ed      	b.n	800ac52 <_free_r+0x22>
 800ac76:	461a      	mov	r2, r3
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	b10b      	cbz	r3, 800ac80 <_free_r+0x50>
 800ac7c:	42a3      	cmp	r3, r4
 800ac7e:	d9fa      	bls.n	800ac76 <_free_r+0x46>
 800ac80:	6811      	ldr	r1, [r2, #0]
 800ac82:	1855      	adds	r5, r2, r1
 800ac84:	42a5      	cmp	r5, r4
 800ac86:	d10b      	bne.n	800aca0 <_free_r+0x70>
 800ac88:	6824      	ldr	r4, [r4, #0]
 800ac8a:	4421      	add	r1, r4
 800ac8c:	1854      	adds	r4, r2, r1
 800ac8e:	42a3      	cmp	r3, r4
 800ac90:	6011      	str	r1, [r2, #0]
 800ac92:	d1e0      	bne.n	800ac56 <_free_r+0x26>
 800ac94:	681c      	ldr	r4, [r3, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	6053      	str	r3, [r2, #4]
 800ac9a:	4421      	add	r1, r4
 800ac9c:	6011      	str	r1, [r2, #0]
 800ac9e:	e7da      	b.n	800ac56 <_free_r+0x26>
 800aca0:	d902      	bls.n	800aca8 <_free_r+0x78>
 800aca2:	230c      	movs	r3, #12
 800aca4:	6003      	str	r3, [r0, #0]
 800aca6:	e7d6      	b.n	800ac56 <_free_r+0x26>
 800aca8:	6825      	ldr	r5, [r4, #0]
 800acaa:	1961      	adds	r1, r4, r5
 800acac:	428b      	cmp	r3, r1
 800acae:	bf04      	itt	eq
 800acb0:	6819      	ldreq	r1, [r3, #0]
 800acb2:	685b      	ldreq	r3, [r3, #4]
 800acb4:	6063      	str	r3, [r4, #4]
 800acb6:	bf04      	itt	eq
 800acb8:	1949      	addeq	r1, r1, r5
 800acba:	6021      	streq	r1, [r4, #0]
 800acbc:	6054      	str	r4, [r2, #4]
 800acbe:	e7ca      	b.n	800ac56 <_free_r+0x26>
 800acc0:	b003      	add	sp, #12
 800acc2:	bd30      	pop	{r4, r5, pc}
 800acc4:	20000b08 	.word	0x20000b08

0800acc8 <sbrk_aligned>:
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	4e0e      	ldr	r6, [pc, #56]	; (800ad04 <sbrk_aligned+0x3c>)
 800accc:	460c      	mov	r4, r1
 800acce:	6831      	ldr	r1, [r6, #0]
 800acd0:	4605      	mov	r5, r0
 800acd2:	b911      	cbnz	r1, 800acda <sbrk_aligned+0x12>
 800acd4:	f000 fcf6 	bl	800b6c4 <_sbrk_r>
 800acd8:	6030      	str	r0, [r6, #0]
 800acda:	4621      	mov	r1, r4
 800acdc:	4628      	mov	r0, r5
 800acde:	f000 fcf1 	bl	800b6c4 <_sbrk_r>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	d00a      	beq.n	800acfc <sbrk_aligned+0x34>
 800ace6:	1cc4      	adds	r4, r0, #3
 800ace8:	f024 0403 	bic.w	r4, r4, #3
 800acec:	42a0      	cmp	r0, r4
 800acee:	d007      	beq.n	800ad00 <sbrk_aligned+0x38>
 800acf0:	1a21      	subs	r1, r4, r0
 800acf2:	4628      	mov	r0, r5
 800acf4:	f000 fce6 	bl	800b6c4 <_sbrk_r>
 800acf8:	3001      	adds	r0, #1
 800acfa:	d101      	bne.n	800ad00 <sbrk_aligned+0x38>
 800acfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad00:	4620      	mov	r0, r4
 800ad02:	bd70      	pop	{r4, r5, r6, pc}
 800ad04:	20000b0c 	.word	0x20000b0c

0800ad08 <_malloc_r>:
 800ad08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0c:	1ccd      	adds	r5, r1, #3
 800ad0e:	f025 0503 	bic.w	r5, r5, #3
 800ad12:	3508      	adds	r5, #8
 800ad14:	2d0c      	cmp	r5, #12
 800ad16:	bf38      	it	cc
 800ad18:	250c      	movcc	r5, #12
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	db01      	blt.n	800ad24 <_malloc_r+0x1c>
 800ad20:	42a9      	cmp	r1, r5
 800ad22:	d905      	bls.n	800ad30 <_malloc_r+0x28>
 800ad24:	230c      	movs	r3, #12
 800ad26:	603b      	str	r3, [r7, #0]
 800ad28:	2600      	movs	r6, #0
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	4e2e      	ldr	r6, [pc, #184]	; (800adec <_malloc_r+0xe4>)
 800ad32:	f001 fb85 	bl	800c440 <__malloc_lock>
 800ad36:	6833      	ldr	r3, [r6, #0]
 800ad38:	461c      	mov	r4, r3
 800ad3a:	bb34      	cbnz	r4, 800ad8a <_malloc_r+0x82>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7ff ffc2 	bl	800acc8 <sbrk_aligned>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	4604      	mov	r4, r0
 800ad48:	d14d      	bne.n	800ade6 <_malloc_r+0xde>
 800ad4a:	6834      	ldr	r4, [r6, #0]
 800ad4c:	4626      	mov	r6, r4
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d140      	bne.n	800add4 <_malloc_r+0xcc>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	4631      	mov	r1, r6
 800ad56:	4638      	mov	r0, r7
 800ad58:	eb04 0803 	add.w	r8, r4, r3
 800ad5c:	f000 fcb2 	bl	800b6c4 <_sbrk_r>
 800ad60:	4580      	cmp	r8, r0
 800ad62:	d13a      	bne.n	800adda <_malloc_r+0xd2>
 800ad64:	6821      	ldr	r1, [r4, #0]
 800ad66:	3503      	adds	r5, #3
 800ad68:	1a6d      	subs	r5, r5, r1
 800ad6a:	f025 0503 	bic.w	r5, r5, #3
 800ad6e:	3508      	adds	r5, #8
 800ad70:	2d0c      	cmp	r5, #12
 800ad72:	bf38      	it	cc
 800ad74:	250c      	movcc	r5, #12
 800ad76:	4629      	mov	r1, r5
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f7ff ffa5 	bl	800acc8 <sbrk_aligned>
 800ad7e:	3001      	adds	r0, #1
 800ad80:	d02b      	beq.n	800adda <_malloc_r+0xd2>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	442b      	add	r3, r5
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	e00e      	b.n	800ada8 <_malloc_r+0xa0>
 800ad8a:	6822      	ldr	r2, [r4, #0]
 800ad8c:	1b52      	subs	r2, r2, r5
 800ad8e:	d41e      	bmi.n	800adce <_malloc_r+0xc6>
 800ad90:	2a0b      	cmp	r2, #11
 800ad92:	d916      	bls.n	800adc2 <_malloc_r+0xba>
 800ad94:	1961      	adds	r1, r4, r5
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	6025      	str	r5, [r4, #0]
 800ad9a:	bf18      	it	ne
 800ad9c:	6059      	strne	r1, [r3, #4]
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	bf08      	it	eq
 800ada2:	6031      	streq	r1, [r6, #0]
 800ada4:	5162      	str	r2, [r4, r5]
 800ada6:	604b      	str	r3, [r1, #4]
 800ada8:	4638      	mov	r0, r7
 800adaa:	f104 060b 	add.w	r6, r4, #11
 800adae:	f001 fb4d 	bl	800c44c <__malloc_unlock>
 800adb2:	f026 0607 	bic.w	r6, r6, #7
 800adb6:	1d23      	adds	r3, r4, #4
 800adb8:	1af2      	subs	r2, r6, r3
 800adba:	d0b6      	beq.n	800ad2a <_malloc_r+0x22>
 800adbc:	1b9b      	subs	r3, r3, r6
 800adbe:	50a3      	str	r3, [r4, r2]
 800adc0:	e7b3      	b.n	800ad2a <_malloc_r+0x22>
 800adc2:	6862      	ldr	r2, [r4, #4]
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	bf0c      	ite	eq
 800adc8:	6032      	streq	r2, [r6, #0]
 800adca:	605a      	strne	r2, [r3, #4]
 800adcc:	e7ec      	b.n	800ada8 <_malloc_r+0xa0>
 800adce:	4623      	mov	r3, r4
 800add0:	6864      	ldr	r4, [r4, #4]
 800add2:	e7b2      	b.n	800ad3a <_malloc_r+0x32>
 800add4:	4634      	mov	r4, r6
 800add6:	6876      	ldr	r6, [r6, #4]
 800add8:	e7b9      	b.n	800ad4e <_malloc_r+0x46>
 800adda:	230c      	movs	r3, #12
 800addc:	603b      	str	r3, [r7, #0]
 800adde:	4638      	mov	r0, r7
 800ade0:	f001 fb34 	bl	800c44c <__malloc_unlock>
 800ade4:	e7a1      	b.n	800ad2a <_malloc_r+0x22>
 800ade6:	6025      	str	r5, [r4, #0]
 800ade8:	e7de      	b.n	800ada8 <_malloc_r+0xa0>
 800adea:	bf00      	nop
 800adec:	20000b08 	.word	0x20000b08

0800adf0 <__cvt>:
 800adf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adf4:	ec55 4b10 	vmov	r4, r5, d0
 800adf8:	2d00      	cmp	r5, #0
 800adfa:	460e      	mov	r6, r1
 800adfc:	4619      	mov	r1, r3
 800adfe:	462b      	mov	r3, r5
 800ae00:	bfbb      	ittet	lt
 800ae02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae06:	461d      	movlt	r5, r3
 800ae08:	2300      	movge	r3, #0
 800ae0a:	232d      	movlt	r3, #45	; 0x2d
 800ae0c:	700b      	strb	r3, [r1, #0]
 800ae0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae14:	4691      	mov	r9, r2
 800ae16:	f023 0820 	bic.w	r8, r3, #32
 800ae1a:	bfbc      	itt	lt
 800ae1c:	4622      	movlt	r2, r4
 800ae1e:	4614      	movlt	r4, r2
 800ae20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae24:	d005      	beq.n	800ae32 <__cvt+0x42>
 800ae26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae2a:	d100      	bne.n	800ae2e <__cvt+0x3e>
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	2102      	movs	r1, #2
 800ae30:	e000      	b.n	800ae34 <__cvt+0x44>
 800ae32:	2103      	movs	r1, #3
 800ae34:	ab03      	add	r3, sp, #12
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	ab02      	add	r3, sp, #8
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	ec45 4b10 	vmov	d0, r4, r5
 800ae40:	4653      	mov	r3, sl
 800ae42:	4632      	mov	r2, r6
 800ae44:	f000 fcfc 	bl	800b840 <_dtoa_r>
 800ae48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae4c:	4607      	mov	r7, r0
 800ae4e:	d102      	bne.n	800ae56 <__cvt+0x66>
 800ae50:	f019 0f01 	tst.w	r9, #1
 800ae54:	d022      	beq.n	800ae9c <__cvt+0xac>
 800ae56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae5a:	eb07 0906 	add.w	r9, r7, r6
 800ae5e:	d110      	bne.n	800ae82 <__cvt+0x92>
 800ae60:	783b      	ldrb	r3, [r7, #0]
 800ae62:	2b30      	cmp	r3, #48	; 0x30
 800ae64:	d10a      	bne.n	800ae7c <__cvt+0x8c>
 800ae66:	2200      	movs	r2, #0
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	f7f5 fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae72:	b918      	cbnz	r0, 800ae7c <__cvt+0x8c>
 800ae74:	f1c6 0601 	rsb	r6, r6, #1
 800ae78:	f8ca 6000 	str.w	r6, [sl]
 800ae7c:	f8da 3000 	ldr.w	r3, [sl]
 800ae80:	4499      	add	r9, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	2300      	movs	r3, #0
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae8e:	b108      	cbz	r0, 800ae94 <__cvt+0xa4>
 800ae90:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae94:	2230      	movs	r2, #48	; 0x30
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	454b      	cmp	r3, r9
 800ae9a:	d307      	bcc.n	800aeac <__cvt+0xbc>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aea0:	1bdb      	subs	r3, r3, r7
 800aea2:	4638      	mov	r0, r7
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	b004      	add	sp, #16
 800aea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeac:	1c59      	adds	r1, r3, #1
 800aeae:	9103      	str	r1, [sp, #12]
 800aeb0:	701a      	strb	r2, [r3, #0]
 800aeb2:	e7f0      	b.n	800ae96 <__cvt+0xa6>

0800aeb4 <__exponent>:
 800aeb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2900      	cmp	r1, #0
 800aeba:	bfb8      	it	lt
 800aebc:	4249      	neglt	r1, r1
 800aebe:	f803 2b02 	strb.w	r2, [r3], #2
 800aec2:	bfb4      	ite	lt
 800aec4:	222d      	movlt	r2, #45	; 0x2d
 800aec6:	222b      	movge	r2, #43	; 0x2b
 800aec8:	2909      	cmp	r1, #9
 800aeca:	7042      	strb	r2, [r0, #1]
 800aecc:	dd2a      	ble.n	800af24 <__exponent+0x70>
 800aece:	f10d 0407 	add.w	r4, sp, #7
 800aed2:	46a4      	mov	ip, r4
 800aed4:	270a      	movs	r7, #10
 800aed6:	46a6      	mov	lr, r4
 800aed8:	460a      	mov	r2, r1
 800aeda:	fb91 f6f7 	sdiv	r6, r1, r7
 800aede:	fb07 1516 	mls	r5, r7, r6, r1
 800aee2:	3530      	adds	r5, #48	; 0x30
 800aee4:	2a63      	cmp	r2, #99	; 0x63
 800aee6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aeea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aeee:	4631      	mov	r1, r6
 800aef0:	dcf1      	bgt.n	800aed6 <__exponent+0x22>
 800aef2:	3130      	adds	r1, #48	; 0x30
 800aef4:	f1ae 0502 	sub.w	r5, lr, #2
 800aef8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aefc:	1c44      	adds	r4, r0, #1
 800aefe:	4629      	mov	r1, r5
 800af00:	4561      	cmp	r1, ip
 800af02:	d30a      	bcc.n	800af1a <__exponent+0x66>
 800af04:	f10d 0209 	add.w	r2, sp, #9
 800af08:	eba2 020e 	sub.w	r2, r2, lr
 800af0c:	4565      	cmp	r5, ip
 800af0e:	bf88      	it	hi
 800af10:	2200      	movhi	r2, #0
 800af12:	4413      	add	r3, r2
 800af14:	1a18      	subs	r0, r3, r0
 800af16:	b003      	add	sp, #12
 800af18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af22:	e7ed      	b.n	800af00 <__exponent+0x4c>
 800af24:	2330      	movs	r3, #48	; 0x30
 800af26:	3130      	adds	r1, #48	; 0x30
 800af28:	7083      	strb	r3, [r0, #2]
 800af2a:	70c1      	strb	r1, [r0, #3]
 800af2c:	1d03      	adds	r3, r0, #4
 800af2e:	e7f1      	b.n	800af14 <__exponent+0x60>

0800af30 <_printf_float>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	ed2d 8b02 	vpush	{d8}
 800af38:	b08d      	sub	sp, #52	; 0x34
 800af3a:	460c      	mov	r4, r1
 800af3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af40:	4616      	mov	r6, r2
 800af42:	461f      	mov	r7, r3
 800af44:	4605      	mov	r5, r0
 800af46:	f001 fa69 	bl	800c41c <_localeconv_r>
 800af4a:	f8d0 a000 	ldr.w	sl, [r0]
 800af4e:	4650      	mov	r0, sl
 800af50:	f7f5 f946 	bl	80001e0 <strlen>
 800af54:	2300      	movs	r3, #0
 800af56:	930a      	str	r3, [sp, #40]	; 0x28
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	f8d8 3000 	ldr.w	r3, [r8]
 800af60:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af64:	3307      	adds	r3, #7
 800af66:	f023 0307 	bic.w	r3, r3, #7
 800af6a:	f103 0208 	add.w	r2, r3, #8
 800af6e:	f8c8 2000 	str.w	r2, [r8]
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af82:	9307      	str	r3, [sp, #28]
 800af84:	f8cd 8018 	str.w	r8, [sp, #24]
 800af88:	ee08 0a10 	vmov	s16, r0
 800af8c:	4b9f      	ldr	r3, [pc, #636]	; (800b20c <_printf_float+0x2dc>)
 800af8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af96:	f7f5 fdd1 	bl	8000b3c <__aeabi_dcmpun>
 800af9a:	bb88      	cbnz	r0, 800b000 <_printf_float+0xd0>
 800af9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afa0:	4b9a      	ldr	r3, [pc, #616]	; (800b20c <_printf_float+0x2dc>)
 800afa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afa6:	f7f5 fdab 	bl	8000b00 <__aeabi_dcmple>
 800afaa:	bb48      	cbnz	r0, 800b000 <_printf_float+0xd0>
 800afac:	2200      	movs	r2, #0
 800afae:	2300      	movs	r3, #0
 800afb0:	4640      	mov	r0, r8
 800afb2:	4649      	mov	r1, r9
 800afb4:	f7f5 fd9a 	bl	8000aec <__aeabi_dcmplt>
 800afb8:	b110      	cbz	r0, 800afc0 <_printf_float+0x90>
 800afba:	232d      	movs	r3, #45	; 0x2d
 800afbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc0:	4b93      	ldr	r3, [pc, #588]	; (800b210 <_printf_float+0x2e0>)
 800afc2:	4894      	ldr	r0, [pc, #592]	; (800b214 <_printf_float+0x2e4>)
 800afc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afc8:	bf94      	ite	ls
 800afca:	4698      	movls	r8, r3
 800afcc:	4680      	movhi	r8, r0
 800afce:	2303      	movs	r3, #3
 800afd0:	6123      	str	r3, [r4, #16]
 800afd2:	9b05      	ldr	r3, [sp, #20]
 800afd4:	f023 0204 	bic.w	r2, r3, #4
 800afd8:	6022      	str	r2, [r4, #0]
 800afda:	f04f 0900 	mov.w	r9, #0
 800afde:	9700      	str	r7, [sp, #0]
 800afe0:	4633      	mov	r3, r6
 800afe2:	aa0b      	add	r2, sp, #44	; 0x2c
 800afe4:	4621      	mov	r1, r4
 800afe6:	4628      	mov	r0, r5
 800afe8:	f000 f9d8 	bl	800b39c <_printf_common>
 800afec:	3001      	adds	r0, #1
 800afee:	f040 8090 	bne.w	800b112 <_printf_float+0x1e2>
 800aff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aff6:	b00d      	add	sp, #52	; 0x34
 800aff8:	ecbd 8b02 	vpop	{d8}
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	4642      	mov	r2, r8
 800b002:	464b      	mov	r3, r9
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 fd98 	bl	8000b3c <__aeabi_dcmpun>
 800b00c:	b140      	cbz	r0, 800b020 <_printf_float+0xf0>
 800b00e:	464b      	mov	r3, r9
 800b010:	2b00      	cmp	r3, #0
 800b012:	bfbc      	itt	lt
 800b014:	232d      	movlt	r3, #45	; 0x2d
 800b016:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b01a:	487f      	ldr	r0, [pc, #508]	; (800b218 <_printf_float+0x2e8>)
 800b01c:	4b7f      	ldr	r3, [pc, #508]	; (800b21c <_printf_float+0x2ec>)
 800b01e:	e7d1      	b.n	800afc4 <_printf_float+0x94>
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b026:	9206      	str	r2, [sp, #24]
 800b028:	1c5a      	adds	r2, r3, #1
 800b02a:	d13f      	bne.n	800b0ac <_printf_float+0x17c>
 800b02c:	2306      	movs	r3, #6
 800b02e:	6063      	str	r3, [r4, #4]
 800b030:	9b05      	ldr	r3, [sp, #20]
 800b032:	6861      	ldr	r1, [r4, #4]
 800b034:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b038:	2300      	movs	r3, #0
 800b03a:	9303      	str	r3, [sp, #12]
 800b03c:	ab0a      	add	r3, sp, #40	; 0x28
 800b03e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b042:	ab09      	add	r3, sp, #36	; 0x24
 800b044:	ec49 8b10 	vmov	d0, r8, r9
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	6022      	str	r2, [r4, #0]
 800b04c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b050:	4628      	mov	r0, r5
 800b052:	f7ff fecd 	bl	800adf0 <__cvt>
 800b056:	9b06      	ldr	r3, [sp, #24]
 800b058:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b05a:	2b47      	cmp	r3, #71	; 0x47
 800b05c:	4680      	mov	r8, r0
 800b05e:	d108      	bne.n	800b072 <_printf_float+0x142>
 800b060:	1cc8      	adds	r0, r1, #3
 800b062:	db02      	blt.n	800b06a <_printf_float+0x13a>
 800b064:	6863      	ldr	r3, [r4, #4]
 800b066:	4299      	cmp	r1, r3
 800b068:	dd41      	ble.n	800b0ee <_printf_float+0x1be>
 800b06a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b06e:	fa5f fb8b 	uxtb.w	fp, fp
 800b072:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b076:	d820      	bhi.n	800b0ba <_printf_float+0x18a>
 800b078:	3901      	subs	r1, #1
 800b07a:	465a      	mov	r2, fp
 800b07c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b080:	9109      	str	r1, [sp, #36]	; 0x24
 800b082:	f7ff ff17 	bl	800aeb4 <__exponent>
 800b086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b088:	1813      	adds	r3, r2, r0
 800b08a:	2a01      	cmp	r2, #1
 800b08c:	4681      	mov	r9, r0
 800b08e:	6123      	str	r3, [r4, #16]
 800b090:	dc02      	bgt.n	800b098 <_printf_float+0x168>
 800b092:	6822      	ldr	r2, [r4, #0]
 800b094:	07d2      	lsls	r2, r2, #31
 800b096:	d501      	bpl.n	800b09c <_printf_float+0x16c>
 800b098:	3301      	adds	r3, #1
 800b09a:	6123      	str	r3, [r4, #16]
 800b09c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d09c      	beq.n	800afde <_printf_float+0xae>
 800b0a4:	232d      	movs	r3, #45	; 0x2d
 800b0a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0aa:	e798      	b.n	800afde <_printf_float+0xae>
 800b0ac:	9a06      	ldr	r2, [sp, #24]
 800b0ae:	2a47      	cmp	r2, #71	; 0x47
 800b0b0:	d1be      	bne.n	800b030 <_printf_float+0x100>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1bc      	bne.n	800b030 <_printf_float+0x100>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e7b9      	b.n	800b02e <_printf_float+0xfe>
 800b0ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0be:	d118      	bne.n	800b0f2 <_printf_float+0x1c2>
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	6863      	ldr	r3, [r4, #4]
 800b0c4:	dd0b      	ble.n	800b0de <_printf_float+0x1ae>
 800b0c6:	6121      	str	r1, [r4, #16]
 800b0c8:	b913      	cbnz	r3, 800b0d0 <_printf_float+0x1a0>
 800b0ca:	6822      	ldr	r2, [r4, #0]
 800b0cc:	07d0      	lsls	r0, r2, #31
 800b0ce:	d502      	bpl.n	800b0d6 <_printf_float+0x1a6>
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	440b      	add	r3, r1
 800b0d4:	6123      	str	r3, [r4, #16]
 800b0d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0d8:	f04f 0900 	mov.w	r9, #0
 800b0dc:	e7de      	b.n	800b09c <_printf_float+0x16c>
 800b0de:	b913      	cbnz	r3, 800b0e6 <_printf_float+0x1b6>
 800b0e0:	6822      	ldr	r2, [r4, #0]
 800b0e2:	07d2      	lsls	r2, r2, #31
 800b0e4:	d501      	bpl.n	800b0ea <_printf_float+0x1ba>
 800b0e6:	3302      	adds	r3, #2
 800b0e8:	e7f4      	b.n	800b0d4 <_printf_float+0x1a4>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e7f2      	b.n	800b0d4 <_printf_float+0x1a4>
 800b0ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f4:	4299      	cmp	r1, r3
 800b0f6:	db05      	blt.n	800b104 <_printf_float+0x1d4>
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	6121      	str	r1, [r4, #16]
 800b0fc:	07d8      	lsls	r0, r3, #31
 800b0fe:	d5ea      	bpl.n	800b0d6 <_printf_float+0x1a6>
 800b100:	1c4b      	adds	r3, r1, #1
 800b102:	e7e7      	b.n	800b0d4 <_printf_float+0x1a4>
 800b104:	2900      	cmp	r1, #0
 800b106:	bfd4      	ite	le
 800b108:	f1c1 0202 	rsble	r2, r1, #2
 800b10c:	2201      	movgt	r2, #1
 800b10e:	4413      	add	r3, r2
 800b110:	e7e0      	b.n	800b0d4 <_printf_float+0x1a4>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	055a      	lsls	r2, r3, #21
 800b116:	d407      	bmi.n	800b128 <_printf_float+0x1f8>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	4642      	mov	r2, r8
 800b11c:	4631      	mov	r1, r6
 800b11e:	4628      	mov	r0, r5
 800b120:	47b8      	blx	r7
 800b122:	3001      	adds	r0, #1
 800b124:	d12c      	bne.n	800b180 <_printf_float+0x250>
 800b126:	e764      	b.n	800aff2 <_printf_float+0xc2>
 800b128:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b12c:	f240 80e0 	bls.w	800b2f0 <_printf_float+0x3c0>
 800b130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b134:	2200      	movs	r2, #0
 800b136:	2300      	movs	r3, #0
 800b138:	f7f5 fcce 	bl	8000ad8 <__aeabi_dcmpeq>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d034      	beq.n	800b1aa <_printf_float+0x27a>
 800b140:	4a37      	ldr	r2, [pc, #220]	; (800b220 <_printf_float+0x2f0>)
 800b142:	2301      	movs	r3, #1
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	f43f af51 	beq.w	800aff2 <_printf_float+0xc2>
 800b150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b154:	429a      	cmp	r2, r3
 800b156:	db02      	blt.n	800b15e <_printf_float+0x22e>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	07d8      	lsls	r0, r3, #31
 800b15c:	d510      	bpl.n	800b180 <_printf_float+0x250>
 800b15e:	ee18 3a10 	vmov	r3, s16
 800b162:	4652      	mov	r2, sl
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f af41 	beq.w	800aff2 <_printf_float+0xc2>
 800b170:	f04f 0800 	mov.w	r8, #0
 800b174:	f104 091a 	add.w	r9, r4, #26
 800b178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b17a:	3b01      	subs	r3, #1
 800b17c:	4543      	cmp	r3, r8
 800b17e:	dc09      	bgt.n	800b194 <_printf_float+0x264>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	079b      	lsls	r3, r3, #30
 800b184:	f100 8105 	bmi.w	800b392 <_printf_float+0x462>
 800b188:	68e0      	ldr	r0, [r4, #12]
 800b18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b18c:	4298      	cmp	r0, r3
 800b18e:	bfb8      	it	lt
 800b190:	4618      	movlt	r0, r3
 800b192:	e730      	b.n	800aff6 <_printf_float+0xc6>
 800b194:	2301      	movs	r3, #1
 800b196:	464a      	mov	r2, r9
 800b198:	4631      	mov	r1, r6
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b8      	blx	r7
 800b19e:	3001      	adds	r0, #1
 800b1a0:	f43f af27 	beq.w	800aff2 <_printf_float+0xc2>
 800b1a4:	f108 0801 	add.w	r8, r8, #1
 800b1a8:	e7e6      	b.n	800b178 <_printf_float+0x248>
 800b1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dc39      	bgt.n	800b224 <_printf_float+0x2f4>
 800b1b0:	4a1b      	ldr	r2, [pc, #108]	; (800b220 <_printf_float+0x2f0>)
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	47b8      	blx	r7
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	f43f af19 	beq.w	800aff2 <_printf_float+0xc2>
 800b1c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	d102      	bne.n	800b1ce <_printf_float+0x29e>
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	07d9      	lsls	r1, r3, #31
 800b1cc:	d5d8      	bpl.n	800b180 <_printf_float+0x250>
 800b1ce:	ee18 3a10 	vmov	r3, s16
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	47b8      	blx	r7
 800b1da:	3001      	adds	r0, #1
 800b1dc:	f43f af09 	beq.w	800aff2 <_printf_float+0xc2>
 800b1e0:	f04f 0900 	mov.w	r9, #0
 800b1e4:	f104 0a1a 	add.w	sl, r4, #26
 800b1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ea:	425b      	negs	r3, r3
 800b1ec:	454b      	cmp	r3, r9
 800b1ee:	dc01      	bgt.n	800b1f4 <_printf_float+0x2c4>
 800b1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f2:	e792      	b.n	800b11a <_printf_float+0x1ea>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	4652      	mov	r2, sl
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	f43f aef7 	beq.w	800aff2 <_printf_float+0xc2>
 800b204:	f109 0901 	add.w	r9, r9, #1
 800b208:	e7ee      	b.n	800b1e8 <_printf_float+0x2b8>
 800b20a:	bf00      	nop
 800b20c:	7fefffff 	.word	0x7fefffff
 800b210:	0800da54 	.word	0x0800da54
 800b214:	0800da58 	.word	0x0800da58
 800b218:	0800da60 	.word	0x0800da60
 800b21c:	0800da5c 	.word	0x0800da5c
 800b220:	0800da64 	.word	0x0800da64
 800b224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b226:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b228:	429a      	cmp	r2, r3
 800b22a:	bfa8      	it	ge
 800b22c:	461a      	movge	r2, r3
 800b22e:	2a00      	cmp	r2, #0
 800b230:	4691      	mov	r9, r2
 800b232:	dc37      	bgt.n	800b2a4 <_printf_float+0x374>
 800b234:	f04f 0b00 	mov.w	fp, #0
 800b238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b23c:	f104 021a 	add.w	r2, r4, #26
 800b240:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	eba3 0309 	sub.w	r3, r3, r9
 800b248:	455b      	cmp	r3, fp
 800b24a:	dc33      	bgt.n	800b2b4 <_printf_float+0x384>
 800b24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b250:	429a      	cmp	r2, r3
 800b252:	db3b      	blt.n	800b2cc <_printf_float+0x39c>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	07da      	lsls	r2, r3, #31
 800b258:	d438      	bmi.n	800b2cc <_printf_float+0x39c>
 800b25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b25c:	9a05      	ldr	r2, [sp, #20]
 800b25e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b260:	1a9a      	subs	r2, r3, r2
 800b262:	eba3 0901 	sub.w	r9, r3, r1
 800b266:	4591      	cmp	r9, r2
 800b268:	bfa8      	it	ge
 800b26a:	4691      	movge	r9, r2
 800b26c:	f1b9 0f00 	cmp.w	r9, #0
 800b270:	dc35      	bgt.n	800b2de <_printf_float+0x3ae>
 800b272:	f04f 0800 	mov.w	r8, #0
 800b276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b27a:	f104 0a1a 	add.w	sl, r4, #26
 800b27e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	eba3 0309 	sub.w	r3, r3, r9
 800b288:	4543      	cmp	r3, r8
 800b28a:	f77f af79 	ble.w	800b180 <_printf_float+0x250>
 800b28e:	2301      	movs	r3, #1
 800b290:	4652      	mov	r2, sl
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	47b8      	blx	r7
 800b298:	3001      	adds	r0, #1
 800b29a:	f43f aeaa 	beq.w	800aff2 <_printf_float+0xc2>
 800b29e:	f108 0801 	add.w	r8, r8, #1
 800b2a2:	e7ec      	b.n	800b27e <_printf_float+0x34e>
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4642      	mov	r2, r8
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d1c0      	bne.n	800b234 <_printf_float+0x304>
 800b2b2:	e69e      	b.n	800aff2 <_printf_float+0xc2>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	9205      	str	r2, [sp, #20]
 800b2bc:	47b8      	blx	r7
 800b2be:	3001      	adds	r0, #1
 800b2c0:	f43f ae97 	beq.w	800aff2 <_printf_float+0xc2>
 800b2c4:	9a05      	ldr	r2, [sp, #20]
 800b2c6:	f10b 0b01 	add.w	fp, fp, #1
 800b2ca:	e7b9      	b.n	800b240 <_printf_float+0x310>
 800b2cc:	ee18 3a10 	vmov	r3, s16
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d1be      	bne.n	800b25a <_printf_float+0x32a>
 800b2dc:	e689      	b.n	800aff2 <_printf_float+0xc2>
 800b2de:	9a05      	ldr	r2, [sp, #20]
 800b2e0:	464b      	mov	r3, r9
 800b2e2:	4442      	add	r2, r8
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	47b8      	blx	r7
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d1c1      	bne.n	800b272 <_printf_float+0x342>
 800b2ee:	e680      	b.n	800aff2 <_printf_float+0xc2>
 800b2f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2f2:	2a01      	cmp	r2, #1
 800b2f4:	dc01      	bgt.n	800b2fa <_printf_float+0x3ca>
 800b2f6:	07db      	lsls	r3, r3, #31
 800b2f8:	d538      	bpl.n	800b36c <_printf_float+0x43c>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4642      	mov	r2, r8
 800b2fe:	4631      	mov	r1, r6
 800b300:	4628      	mov	r0, r5
 800b302:	47b8      	blx	r7
 800b304:	3001      	adds	r0, #1
 800b306:	f43f ae74 	beq.w	800aff2 <_printf_float+0xc2>
 800b30a:	ee18 3a10 	vmov	r3, s16
 800b30e:	4652      	mov	r2, sl
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	47b8      	blx	r7
 800b316:	3001      	adds	r0, #1
 800b318:	f43f ae6b 	beq.w	800aff2 <_printf_float+0xc2>
 800b31c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b320:	2200      	movs	r2, #0
 800b322:	2300      	movs	r3, #0
 800b324:	f7f5 fbd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b328:	b9d8      	cbnz	r0, 800b362 <_printf_float+0x432>
 800b32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b32c:	f108 0201 	add.w	r2, r8, #1
 800b330:	3b01      	subs	r3, #1
 800b332:	4631      	mov	r1, r6
 800b334:	4628      	mov	r0, r5
 800b336:	47b8      	blx	r7
 800b338:	3001      	adds	r0, #1
 800b33a:	d10e      	bne.n	800b35a <_printf_float+0x42a>
 800b33c:	e659      	b.n	800aff2 <_printf_float+0xc2>
 800b33e:	2301      	movs	r3, #1
 800b340:	4652      	mov	r2, sl
 800b342:	4631      	mov	r1, r6
 800b344:	4628      	mov	r0, r5
 800b346:	47b8      	blx	r7
 800b348:	3001      	adds	r0, #1
 800b34a:	f43f ae52 	beq.w	800aff2 <_printf_float+0xc2>
 800b34e:	f108 0801 	add.w	r8, r8, #1
 800b352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b354:	3b01      	subs	r3, #1
 800b356:	4543      	cmp	r3, r8
 800b358:	dcf1      	bgt.n	800b33e <_printf_float+0x40e>
 800b35a:	464b      	mov	r3, r9
 800b35c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b360:	e6dc      	b.n	800b11c <_printf_float+0x1ec>
 800b362:	f04f 0800 	mov.w	r8, #0
 800b366:	f104 0a1a 	add.w	sl, r4, #26
 800b36a:	e7f2      	b.n	800b352 <_printf_float+0x422>
 800b36c:	2301      	movs	r3, #1
 800b36e:	4642      	mov	r2, r8
 800b370:	e7df      	b.n	800b332 <_printf_float+0x402>
 800b372:	2301      	movs	r3, #1
 800b374:	464a      	mov	r2, r9
 800b376:	4631      	mov	r1, r6
 800b378:	4628      	mov	r0, r5
 800b37a:	47b8      	blx	r7
 800b37c:	3001      	adds	r0, #1
 800b37e:	f43f ae38 	beq.w	800aff2 <_printf_float+0xc2>
 800b382:	f108 0801 	add.w	r8, r8, #1
 800b386:	68e3      	ldr	r3, [r4, #12]
 800b388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b38a:	1a5b      	subs	r3, r3, r1
 800b38c:	4543      	cmp	r3, r8
 800b38e:	dcf0      	bgt.n	800b372 <_printf_float+0x442>
 800b390:	e6fa      	b.n	800b188 <_printf_float+0x258>
 800b392:	f04f 0800 	mov.w	r8, #0
 800b396:	f104 0919 	add.w	r9, r4, #25
 800b39a:	e7f4      	b.n	800b386 <_printf_float+0x456>

0800b39c <_printf_common>:
 800b39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a0:	4616      	mov	r6, r2
 800b3a2:	4699      	mov	r9, r3
 800b3a4:	688a      	ldr	r2, [r1, #8]
 800b3a6:	690b      	ldr	r3, [r1, #16]
 800b3a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	bfb8      	it	lt
 800b3b0:	4613      	movlt	r3, r2
 800b3b2:	6033      	str	r3, [r6, #0]
 800b3b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3b8:	4607      	mov	r7, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	b10a      	cbz	r2, 800b3c2 <_printf_common+0x26>
 800b3be:	3301      	adds	r3, #1
 800b3c0:	6033      	str	r3, [r6, #0]
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	0699      	lsls	r1, r3, #26
 800b3c6:	bf42      	ittt	mi
 800b3c8:	6833      	ldrmi	r3, [r6, #0]
 800b3ca:	3302      	addmi	r3, #2
 800b3cc:	6033      	strmi	r3, [r6, #0]
 800b3ce:	6825      	ldr	r5, [r4, #0]
 800b3d0:	f015 0506 	ands.w	r5, r5, #6
 800b3d4:	d106      	bne.n	800b3e4 <_printf_common+0x48>
 800b3d6:	f104 0a19 	add.w	sl, r4, #25
 800b3da:	68e3      	ldr	r3, [r4, #12]
 800b3dc:	6832      	ldr	r2, [r6, #0]
 800b3de:	1a9b      	subs	r3, r3, r2
 800b3e0:	42ab      	cmp	r3, r5
 800b3e2:	dc26      	bgt.n	800b432 <_printf_common+0x96>
 800b3e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3e8:	1e13      	subs	r3, r2, #0
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	bf18      	it	ne
 800b3ee:	2301      	movne	r3, #1
 800b3f0:	0692      	lsls	r2, r2, #26
 800b3f2:	d42b      	bmi.n	800b44c <_printf_common+0xb0>
 800b3f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	47c0      	blx	r8
 800b3fe:	3001      	adds	r0, #1
 800b400:	d01e      	beq.n	800b440 <_printf_common+0xa4>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	68e5      	ldr	r5, [r4, #12]
 800b406:	6832      	ldr	r2, [r6, #0]
 800b408:	f003 0306 	and.w	r3, r3, #6
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	bf08      	it	eq
 800b410:	1aad      	subeq	r5, r5, r2
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	6922      	ldr	r2, [r4, #16]
 800b416:	bf0c      	ite	eq
 800b418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b41c:	2500      	movne	r5, #0
 800b41e:	4293      	cmp	r3, r2
 800b420:	bfc4      	itt	gt
 800b422:	1a9b      	subgt	r3, r3, r2
 800b424:	18ed      	addgt	r5, r5, r3
 800b426:	2600      	movs	r6, #0
 800b428:	341a      	adds	r4, #26
 800b42a:	42b5      	cmp	r5, r6
 800b42c:	d11a      	bne.n	800b464 <_printf_common+0xc8>
 800b42e:	2000      	movs	r0, #0
 800b430:	e008      	b.n	800b444 <_printf_common+0xa8>
 800b432:	2301      	movs	r3, #1
 800b434:	4652      	mov	r2, sl
 800b436:	4649      	mov	r1, r9
 800b438:	4638      	mov	r0, r7
 800b43a:	47c0      	blx	r8
 800b43c:	3001      	adds	r0, #1
 800b43e:	d103      	bne.n	800b448 <_printf_common+0xac>
 800b440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b448:	3501      	adds	r5, #1
 800b44a:	e7c6      	b.n	800b3da <_printf_common+0x3e>
 800b44c:	18e1      	adds	r1, r4, r3
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	2030      	movs	r0, #48	; 0x30
 800b452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b456:	4422      	add	r2, r4
 800b458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b45c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b460:	3302      	adds	r3, #2
 800b462:	e7c7      	b.n	800b3f4 <_printf_common+0x58>
 800b464:	2301      	movs	r3, #1
 800b466:	4622      	mov	r2, r4
 800b468:	4649      	mov	r1, r9
 800b46a:	4638      	mov	r0, r7
 800b46c:	47c0      	blx	r8
 800b46e:	3001      	adds	r0, #1
 800b470:	d0e6      	beq.n	800b440 <_printf_common+0xa4>
 800b472:	3601      	adds	r6, #1
 800b474:	e7d9      	b.n	800b42a <_printf_common+0x8e>
	...

0800b478 <_printf_i>:
 800b478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	7e0f      	ldrb	r7, [r1, #24]
 800b47e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b480:	2f78      	cmp	r7, #120	; 0x78
 800b482:	4691      	mov	r9, r2
 800b484:	4680      	mov	r8, r0
 800b486:	460c      	mov	r4, r1
 800b488:	469a      	mov	sl, r3
 800b48a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b48e:	d807      	bhi.n	800b4a0 <_printf_i+0x28>
 800b490:	2f62      	cmp	r7, #98	; 0x62
 800b492:	d80a      	bhi.n	800b4aa <_printf_i+0x32>
 800b494:	2f00      	cmp	r7, #0
 800b496:	f000 80d8 	beq.w	800b64a <_printf_i+0x1d2>
 800b49a:	2f58      	cmp	r7, #88	; 0x58
 800b49c:	f000 80a3 	beq.w	800b5e6 <_printf_i+0x16e>
 800b4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4a8:	e03a      	b.n	800b520 <_printf_i+0xa8>
 800b4aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4ae:	2b15      	cmp	r3, #21
 800b4b0:	d8f6      	bhi.n	800b4a0 <_printf_i+0x28>
 800b4b2:	a101      	add	r1, pc, #4	; (adr r1, 800b4b8 <_printf_i+0x40>)
 800b4b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4b8:	0800b511 	.word	0x0800b511
 800b4bc:	0800b525 	.word	0x0800b525
 800b4c0:	0800b4a1 	.word	0x0800b4a1
 800b4c4:	0800b4a1 	.word	0x0800b4a1
 800b4c8:	0800b4a1 	.word	0x0800b4a1
 800b4cc:	0800b4a1 	.word	0x0800b4a1
 800b4d0:	0800b525 	.word	0x0800b525
 800b4d4:	0800b4a1 	.word	0x0800b4a1
 800b4d8:	0800b4a1 	.word	0x0800b4a1
 800b4dc:	0800b4a1 	.word	0x0800b4a1
 800b4e0:	0800b4a1 	.word	0x0800b4a1
 800b4e4:	0800b631 	.word	0x0800b631
 800b4e8:	0800b555 	.word	0x0800b555
 800b4ec:	0800b613 	.word	0x0800b613
 800b4f0:	0800b4a1 	.word	0x0800b4a1
 800b4f4:	0800b4a1 	.word	0x0800b4a1
 800b4f8:	0800b653 	.word	0x0800b653
 800b4fc:	0800b4a1 	.word	0x0800b4a1
 800b500:	0800b555 	.word	0x0800b555
 800b504:	0800b4a1 	.word	0x0800b4a1
 800b508:	0800b4a1 	.word	0x0800b4a1
 800b50c:	0800b61b 	.word	0x0800b61b
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	1d1a      	adds	r2, r3, #4
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	602a      	str	r2, [r5, #0]
 800b518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b51c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b520:	2301      	movs	r3, #1
 800b522:	e0a3      	b.n	800b66c <_printf_i+0x1f4>
 800b524:	6820      	ldr	r0, [r4, #0]
 800b526:	6829      	ldr	r1, [r5, #0]
 800b528:	0606      	lsls	r6, r0, #24
 800b52a:	f101 0304 	add.w	r3, r1, #4
 800b52e:	d50a      	bpl.n	800b546 <_printf_i+0xce>
 800b530:	680e      	ldr	r6, [r1, #0]
 800b532:	602b      	str	r3, [r5, #0]
 800b534:	2e00      	cmp	r6, #0
 800b536:	da03      	bge.n	800b540 <_printf_i+0xc8>
 800b538:	232d      	movs	r3, #45	; 0x2d
 800b53a:	4276      	negs	r6, r6
 800b53c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b540:	485e      	ldr	r0, [pc, #376]	; (800b6bc <_printf_i+0x244>)
 800b542:	230a      	movs	r3, #10
 800b544:	e019      	b.n	800b57a <_printf_i+0x102>
 800b546:	680e      	ldr	r6, [r1, #0]
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b54e:	bf18      	it	ne
 800b550:	b236      	sxthne	r6, r6
 800b552:	e7ef      	b.n	800b534 <_printf_i+0xbc>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	6820      	ldr	r0, [r4, #0]
 800b558:	1d19      	adds	r1, r3, #4
 800b55a:	6029      	str	r1, [r5, #0]
 800b55c:	0601      	lsls	r1, r0, #24
 800b55e:	d501      	bpl.n	800b564 <_printf_i+0xec>
 800b560:	681e      	ldr	r6, [r3, #0]
 800b562:	e002      	b.n	800b56a <_printf_i+0xf2>
 800b564:	0646      	lsls	r6, r0, #25
 800b566:	d5fb      	bpl.n	800b560 <_printf_i+0xe8>
 800b568:	881e      	ldrh	r6, [r3, #0]
 800b56a:	4854      	ldr	r0, [pc, #336]	; (800b6bc <_printf_i+0x244>)
 800b56c:	2f6f      	cmp	r7, #111	; 0x6f
 800b56e:	bf0c      	ite	eq
 800b570:	2308      	moveq	r3, #8
 800b572:	230a      	movne	r3, #10
 800b574:	2100      	movs	r1, #0
 800b576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b57a:	6865      	ldr	r5, [r4, #4]
 800b57c:	60a5      	str	r5, [r4, #8]
 800b57e:	2d00      	cmp	r5, #0
 800b580:	bfa2      	ittt	ge
 800b582:	6821      	ldrge	r1, [r4, #0]
 800b584:	f021 0104 	bicge.w	r1, r1, #4
 800b588:	6021      	strge	r1, [r4, #0]
 800b58a:	b90e      	cbnz	r6, 800b590 <_printf_i+0x118>
 800b58c:	2d00      	cmp	r5, #0
 800b58e:	d04d      	beq.n	800b62c <_printf_i+0x1b4>
 800b590:	4615      	mov	r5, r2
 800b592:	fbb6 f1f3 	udiv	r1, r6, r3
 800b596:	fb03 6711 	mls	r7, r3, r1, r6
 800b59a:	5dc7      	ldrb	r7, [r0, r7]
 800b59c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5a0:	4637      	mov	r7, r6
 800b5a2:	42bb      	cmp	r3, r7
 800b5a4:	460e      	mov	r6, r1
 800b5a6:	d9f4      	bls.n	800b592 <_printf_i+0x11a>
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d10b      	bne.n	800b5c4 <_printf_i+0x14c>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	07de      	lsls	r6, r3, #31
 800b5b0:	d508      	bpl.n	800b5c4 <_printf_i+0x14c>
 800b5b2:	6923      	ldr	r3, [r4, #16]
 800b5b4:	6861      	ldr	r1, [r4, #4]
 800b5b6:	4299      	cmp	r1, r3
 800b5b8:	bfde      	ittt	le
 800b5ba:	2330      	movle	r3, #48	; 0x30
 800b5bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b5c4:	1b52      	subs	r2, r2, r5
 800b5c6:	6122      	str	r2, [r4, #16]
 800b5c8:	f8cd a000 	str.w	sl, [sp]
 800b5cc:	464b      	mov	r3, r9
 800b5ce:	aa03      	add	r2, sp, #12
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	f7ff fee2 	bl	800b39c <_printf_common>
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d14c      	bne.n	800b676 <_printf_i+0x1fe>
 800b5dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5e0:	b004      	add	sp, #16
 800b5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e6:	4835      	ldr	r0, [pc, #212]	; (800b6bc <_printf_i+0x244>)
 800b5e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5ec:	6829      	ldr	r1, [r5, #0]
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5f4:	6029      	str	r1, [r5, #0]
 800b5f6:	061d      	lsls	r5, r3, #24
 800b5f8:	d514      	bpl.n	800b624 <_printf_i+0x1ac>
 800b5fa:	07df      	lsls	r7, r3, #31
 800b5fc:	bf44      	itt	mi
 800b5fe:	f043 0320 	orrmi.w	r3, r3, #32
 800b602:	6023      	strmi	r3, [r4, #0]
 800b604:	b91e      	cbnz	r6, 800b60e <_printf_i+0x196>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	f023 0320 	bic.w	r3, r3, #32
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	2310      	movs	r3, #16
 800b610:	e7b0      	b.n	800b574 <_printf_i+0xfc>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	f043 0320 	orr.w	r3, r3, #32
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	2378      	movs	r3, #120	; 0x78
 800b61c:	4828      	ldr	r0, [pc, #160]	; (800b6c0 <_printf_i+0x248>)
 800b61e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b622:	e7e3      	b.n	800b5ec <_printf_i+0x174>
 800b624:	0659      	lsls	r1, r3, #25
 800b626:	bf48      	it	mi
 800b628:	b2b6      	uxthmi	r6, r6
 800b62a:	e7e6      	b.n	800b5fa <_printf_i+0x182>
 800b62c:	4615      	mov	r5, r2
 800b62e:	e7bb      	b.n	800b5a8 <_printf_i+0x130>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	6826      	ldr	r6, [r4, #0]
 800b634:	6961      	ldr	r1, [r4, #20]
 800b636:	1d18      	adds	r0, r3, #4
 800b638:	6028      	str	r0, [r5, #0]
 800b63a:	0635      	lsls	r5, r6, #24
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	d501      	bpl.n	800b644 <_printf_i+0x1cc>
 800b640:	6019      	str	r1, [r3, #0]
 800b642:	e002      	b.n	800b64a <_printf_i+0x1d2>
 800b644:	0670      	lsls	r0, r6, #25
 800b646:	d5fb      	bpl.n	800b640 <_printf_i+0x1c8>
 800b648:	8019      	strh	r1, [r3, #0]
 800b64a:	2300      	movs	r3, #0
 800b64c:	6123      	str	r3, [r4, #16]
 800b64e:	4615      	mov	r5, r2
 800b650:	e7ba      	b.n	800b5c8 <_printf_i+0x150>
 800b652:	682b      	ldr	r3, [r5, #0]
 800b654:	1d1a      	adds	r2, r3, #4
 800b656:	602a      	str	r2, [r5, #0]
 800b658:	681d      	ldr	r5, [r3, #0]
 800b65a:	6862      	ldr	r2, [r4, #4]
 800b65c:	2100      	movs	r1, #0
 800b65e:	4628      	mov	r0, r5
 800b660:	f7f4 fdc6 	bl	80001f0 <memchr>
 800b664:	b108      	cbz	r0, 800b66a <_printf_i+0x1f2>
 800b666:	1b40      	subs	r0, r0, r5
 800b668:	6060      	str	r0, [r4, #4]
 800b66a:	6863      	ldr	r3, [r4, #4]
 800b66c:	6123      	str	r3, [r4, #16]
 800b66e:	2300      	movs	r3, #0
 800b670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b674:	e7a8      	b.n	800b5c8 <_printf_i+0x150>
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	462a      	mov	r2, r5
 800b67a:	4649      	mov	r1, r9
 800b67c:	4640      	mov	r0, r8
 800b67e:	47d0      	blx	sl
 800b680:	3001      	adds	r0, #1
 800b682:	d0ab      	beq.n	800b5dc <_printf_i+0x164>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	079b      	lsls	r3, r3, #30
 800b688:	d413      	bmi.n	800b6b2 <_printf_i+0x23a>
 800b68a:	68e0      	ldr	r0, [r4, #12]
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	4298      	cmp	r0, r3
 800b690:	bfb8      	it	lt
 800b692:	4618      	movlt	r0, r3
 800b694:	e7a4      	b.n	800b5e0 <_printf_i+0x168>
 800b696:	2301      	movs	r3, #1
 800b698:	4632      	mov	r2, r6
 800b69a:	4649      	mov	r1, r9
 800b69c:	4640      	mov	r0, r8
 800b69e:	47d0      	blx	sl
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	d09b      	beq.n	800b5dc <_printf_i+0x164>
 800b6a4:	3501      	adds	r5, #1
 800b6a6:	68e3      	ldr	r3, [r4, #12]
 800b6a8:	9903      	ldr	r1, [sp, #12]
 800b6aa:	1a5b      	subs	r3, r3, r1
 800b6ac:	42ab      	cmp	r3, r5
 800b6ae:	dcf2      	bgt.n	800b696 <_printf_i+0x21e>
 800b6b0:	e7eb      	b.n	800b68a <_printf_i+0x212>
 800b6b2:	2500      	movs	r5, #0
 800b6b4:	f104 0619 	add.w	r6, r4, #25
 800b6b8:	e7f5      	b.n	800b6a6 <_printf_i+0x22e>
 800b6ba:	bf00      	nop
 800b6bc:	0800da66 	.word	0x0800da66
 800b6c0:	0800da77 	.word	0x0800da77

0800b6c4 <_sbrk_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4d06      	ldr	r5, [pc, #24]	; (800b6e0 <_sbrk_r+0x1c>)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	602b      	str	r3, [r5, #0]
 800b6d0:	f7f6 ff9c 	bl	800260c <_sbrk>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_sbrk_r+0x1a>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_sbrk_r+0x1a>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20000b10 	.word	0x20000b10

0800b6e4 <siprintf>:
 800b6e4:	b40e      	push	{r1, r2, r3}
 800b6e6:	b500      	push	{lr}
 800b6e8:	b09c      	sub	sp, #112	; 0x70
 800b6ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b6ec:	9002      	str	r0, [sp, #8]
 800b6ee:	9006      	str	r0, [sp, #24]
 800b6f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6f4:	4809      	ldr	r0, [pc, #36]	; (800b71c <siprintf+0x38>)
 800b6f6:	9107      	str	r1, [sp, #28]
 800b6f8:	9104      	str	r1, [sp, #16]
 800b6fa:	4909      	ldr	r1, [pc, #36]	; (800b720 <siprintf+0x3c>)
 800b6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	6800      	ldr	r0, [r0, #0]
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	a902      	add	r1, sp, #8
 800b708:	f001 fa9c 	bl	800cc44 <_svfiprintf_r>
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	2200      	movs	r2, #0
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	b01c      	add	sp, #112	; 0x70
 800b714:	f85d eb04 	ldr.w	lr, [sp], #4
 800b718:	b003      	add	sp, #12
 800b71a:	4770      	bx	lr
 800b71c:	2000002c 	.word	0x2000002c
 800b720:	ffff0208 	.word	0xffff0208

0800b724 <quorem>:
 800b724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	6903      	ldr	r3, [r0, #16]
 800b72a:	690c      	ldr	r4, [r1, #16]
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	4607      	mov	r7, r0
 800b730:	f2c0 8081 	blt.w	800b836 <quorem+0x112>
 800b734:	3c01      	subs	r4, #1
 800b736:	f101 0814 	add.w	r8, r1, #20
 800b73a:	f100 0514 	add.w	r5, r0, #20
 800b73e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b74c:	3301      	adds	r3, #1
 800b74e:	429a      	cmp	r2, r3
 800b750:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b754:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b758:	fbb2 f6f3 	udiv	r6, r2, r3
 800b75c:	d331      	bcc.n	800b7c2 <quorem+0x9e>
 800b75e:	f04f 0e00 	mov.w	lr, #0
 800b762:	4640      	mov	r0, r8
 800b764:	46ac      	mov	ip, r5
 800b766:	46f2      	mov	sl, lr
 800b768:	f850 2b04 	ldr.w	r2, [r0], #4
 800b76c:	b293      	uxth	r3, r2
 800b76e:	fb06 e303 	mla	r3, r6, r3, lr
 800b772:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b776:	b29b      	uxth	r3, r3
 800b778:	ebaa 0303 	sub.w	r3, sl, r3
 800b77c:	f8dc a000 	ldr.w	sl, [ip]
 800b780:	0c12      	lsrs	r2, r2, #16
 800b782:	fa13 f38a 	uxtah	r3, r3, sl
 800b786:	fb06 e202 	mla	r2, r6, r2, lr
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	9b00      	ldr	r3, [sp, #0]
 800b78e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b792:	b292      	uxth	r2, r2
 800b794:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b79c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b7a0:	4581      	cmp	r9, r0
 800b7a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a6:	f84c 3b04 	str.w	r3, [ip], #4
 800b7aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7ae:	d2db      	bcs.n	800b768 <quorem+0x44>
 800b7b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7b4:	b92b      	cbnz	r3, 800b7c2 <quorem+0x9e>
 800b7b6:	9b01      	ldr	r3, [sp, #4]
 800b7b8:	3b04      	subs	r3, #4
 800b7ba:	429d      	cmp	r5, r3
 800b7bc:	461a      	mov	r2, r3
 800b7be:	d32e      	bcc.n	800b81e <quorem+0xfa>
 800b7c0:	613c      	str	r4, [r7, #16]
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	f001 f8ca 	bl	800c95c <__mcmp>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	db24      	blt.n	800b816 <quorem+0xf2>
 800b7cc:	3601      	adds	r6, #1
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f04f 0c00 	mov.w	ip, #0
 800b7d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7d8:	f8d0 e000 	ldr.w	lr, [r0]
 800b7dc:	b293      	uxth	r3, r2
 800b7de:	ebac 0303 	sub.w	r3, ip, r3
 800b7e2:	0c12      	lsrs	r2, r2, #16
 800b7e4:	fa13 f38e 	uxtah	r3, r3, lr
 800b7e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7f6:	45c1      	cmp	r9, r8
 800b7f8:	f840 3b04 	str.w	r3, [r0], #4
 800b7fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b800:	d2e8      	bcs.n	800b7d4 <quorem+0xb0>
 800b802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b80a:	b922      	cbnz	r2, 800b816 <quorem+0xf2>
 800b80c:	3b04      	subs	r3, #4
 800b80e:	429d      	cmp	r5, r3
 800b810:	461a      	mov	r2, r3
 800b812:	d30a      	bcc.n	800b82a <quorem+0x106>
 800b814:	613c      	str	r4, [r7, #16]
 800b816:	4630      	mov	r0, r6
 800b818:	b003      	add	sp, #12
 800b81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	3b04      	subs	r3, #4
 800b822:	2a00      	cmp	r2, #0
 800b824:	d1cc      	bne.n	800b7c0 <quorem+0x9c>
 800b826:	3c01      	subs	r4, #1
 800b828:	e7c7      	b.n	800b7ba <quorem+0x96>
 800b82a:	6812      	ldr	r2, [r2, #0]
 800b82c:	3b04      	subs	r3, #4
 800b82e:	2a00      	cmp	r2, #0
 800b830:	d1f0      	bne.n	800b814 <quorem+0xf0>
 800b832:	3c01      	subs	r4, #1
 800b834:	e7eb      	b.n	800b80e <quorem+0xea>
 800b836:	2000      	movs	r0, #0
 800b838:	e7ee      	b.n	800b818 <quorem+0xf4>
 800b83a:	0000      	movs	r0, r0
 800b83c:	0000      	movs	r0, r0
	...

0800b840 <_dtoa_r>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	ed2d 8b04 	vpush	{d8-d9}
 800b848:	ec57 6b10 	vmov	r6, r7, d0
 800b84c:	b093      	sub	sp, #76	; 0x4c
 800b84e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b854:	9106      	str	r1, [sp, #24]
 800b856:	ee10 aa10 	vmov	sl, s0
 800b85a:	4604      	mov	r4, r0
 800b85c:	9209      	str	r2, [sp, #36]	; 0x24
 800b85e:	930c      	str	r3, [sp, #48]	; 0x30
 800b860:	46bb      	mov	fp, r7
 800b862:	b975      	cbnz	r5, 800b882 <_dtoa_r+0x42>
 800b864:	2010      	movs	r0, #16
 800b866:	f7ff f9cb 	bl	800ac00 <malloc>
 800b86a:	4602      	mov	r2, r0
 800b86c:	6260      	str	r0, [r4, #36]	; 0x24
 800b86e:	b920      	cbnz	r0, 800b87a <_dtoa_r+0x3a>
 800b870:	4ba7      	ldr	r3, [pc, #668]	; (800bb10 <_dtoa_r+0x2d0>)
 800b872:	21ea      	movs	r1, #234	; 0xea
 800b874:	48a7      	ldr	r0, [pc, #668]	; (800bb14 <_dtoa_r+0x2d4>)
 800b876:	f001 fae5 	bl	800ce44 <__assert_func>
 800b87a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b87e:	6005      	str	r5, [r0, #0]
 800b880:	60c5      	str	r5, [r0, #12]
 800b882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b884:	6819      	ldr	r1, [r3, #0]
 800b886:	b151      	cbz	r1, 800b89e <_dtoa_r+0x5e>
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	604a      	str	r2, [r1, #4]
 800b88c:	2301      	movs	r3, #1
 800b88e:	4093      	lsls	r3, r2
 800b890:	608b      	str	r3, [r1, #8]
 800b892:	4620      	mov	r0, r4
 800b894:	f000 fe20 	bl	800c4d8 <_Bfree>
 800b898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	1e3b      	subs	r3, r7, #0
 800b8a0:	bfaa      	itet	ge
 800b8a2:	2300      	movge	r3, #0
 800b8a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b8a8:	f8c8 3000 	strge.w	r3, [r8]
 800b8ac:	4b9a      	ldr	r3, [pc, #616]	; (800bb18 <_dtoa_r+0x2d8>)
 800b8ae:	bfbc      	itt	lt
 800b8b0:	2201      	movlt	r2, #1
 800b8b2:	f8c8 2000 	strlt.w	r2, [r8]
 800b8b6:	ea33 030b 	bics.w	r3, r3, fp
 800b8ba:	d11b      	bne.n	800b8f4 <_dtoa_r+0xb4>
 800b8bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8be:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8c8:	4333      	orrs	r3, r6
 800b8ca:	f000 8592 	beq.w	800c3f2 <_dtoa_r+0xbb2>
 800b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d0:	b963      	cbnz	r3, 800b8ec <_dtoa_r+0xac>
 800b8d2:	4b92      	ldr	r3, [pc, #584]	; (800bb1c <_dtoa_r+0x2dc>)
 800b8d4:	e022      	b.n	800b91c <_dtoa_r+0xdc>
 800b8d6:	4b92      	ldr	r3, [pc, #584]	; (800bb20 <_dtoa_r+0x2e0>)
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	3308      	adds	r3, #8
 800b8dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	9801      	ldr	r0, [sp, #4]
 800b8e2:	b013      	add	sp, #76	; 0x4c
 800b8e4:	ecbd 8b04 	vpop	{d8-d9}
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	4b8b      	ldr	r3, [pc, #556]	; (800bb1c <_dtoa_r+0x2dc>)
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	3303      	adds	r3, #3
 800b8f2:	e7f3      	b.n	800b8dc <_dtoa_r+0x9c>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	4659      	mov	r1, fp
 800b8fc:	f7f5 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 800b900:	ec4b ab19 	vmov	d9, sl, fp
 800b904:	4680      	mov	r8, r0
 800b906:	b158      	cbz	r0, 800b920 <_dtoa_r+0xe0>
 800b908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b90a:	2301      	movs	r3, #1
 800b90c:	6013      	str	r3, [r2, #0]
 800b90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 856b 	beq.w	800c3ec <_dtoa_r+0xbac>
 800b916:	4883      	ldr	r0, [pc, #524]	; (800bb24 <_dtoa_r+0x2e4>)
 800b918:	6018      	str	r0, [r3, #0]
 800b91a:	1e43      	subs	r3, r0, #1
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	e7df      	b.n	800b8e0 <_dtoa_r+0xa0>
 800b920:	ec4b ab10 	vmov	d0, sl, fp
 800b924:	aa10      	add	r2, sp, #64	; 0x40
 800b926:	a911      	add	r1, sp, #68	; 0x44
 800b928:	4620      	mov	r0, r4
 800b92a:	f001 f8bd 	bl	800caa8 <__d2b>
 800b92e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b932:	ee08 0a10 	vmov	s16, r0
 800b936:	2d00      	cmp	r5, #0
 800b938:	f000 8084 	beq.w	800ba44 <_dtoa_r+0x204>
 800b93c:	ee19 3a90 	vmov	r3, s19
 800b940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b944:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b948:	4656      	mov	r6, sl
 800b94a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b94e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b952:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b956:	4b74      	ldr	r3, [pc, #464]	; (800bb28 <_dtoa_r+0x2e8>)
 800b958:	2200      	movs	r2, #0
 800b95a:	4630      	mov	r0, r6
 800b95c:	4639      	mov	r1, r7
 800b95e:	f7f4 fc9b 	bl	8000298 <__aeabi_dsub>
 800b962:	a365      	add	r3, pc, #404	; (adr r3, 800baf8 <_dtoa_r+0x2b8>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fe4e 	bl	8000608 <__aeabi_dmul>
 800b96c:	a364      	add	r3, pc, #400	; (adr r3, 800bb00 <_dtoa_r+0x2c0>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fc93 	bl	800029c <__adddf3>
 800b976:	4606      	mov	r6, r0
 800b978:	4628      	mov	r0, r5
 800b97a:	460f      	mov	r7, r1
 800b97c:	f7f4 fdda 	bl	8000534 <__aeabi_i2d>
 800b980:	a361      	add	r3, pc, #388	; (adr r3, 800bb08 <_dtoa_r+0x2c8>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fe3f 	bl	8000608 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	f7f4 fc83 	bl	800029c <__adddf3>
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	f7f5 f8e5 	bl	8000b68 <__aeabi_d2iz>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	9000      	str	r0, [sp, #0]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f5 f8a0 	bl	8000aec <__aeabi_dcmplt>
 800b9ac:	b150      	cbz	r0, 800b9c4 <_dtoa_r+0x184>
 800b9ae:	9800      	ldr	r0, [sp, #0]
 800b9b0:	f7f4 fdc0 	bl	8000534 <__aeabi_i2d>
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	f7f5 f88e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9bc:	b910      	cbnz	r0, 800b9c4 <_dtoa_r+0x184>
 800b9be:	9b00      	ldr	r3, [sp, #0]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	9b00      	ldr	r3, [sp, #0]
 800b9c6:	2b16      	cmp	r3, #22
 800b9c8:	d85a      	bhi.n	800ba80 <_dtoa_r+0x240>
 800b9ca:	9a00      	ldr	r2, [sp, #0]
 800b9cc:	4b57      	ldr	r3, [pc, #348]	; (800bb2c <_dtoa_r+0x2ec>)
 800b9ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	ec51 0b19 	vmov	r0, r1, d9
 800b9da:	f7f5 f887 	bl	8000aec <__aeabi_dcmplt>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d050      	beq.n	800ba84 <_dtoa_r+0x244>
 800b9e2:	9b00      	ldr	r3, [sp, #0]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ee:	1b5d      	subs	r5, r3, r5
 800b9f0:	1e6b      	subs	r3, r5, #1
 800b9f2:	9305      	str	r3, [sp, #20]
 800b9f4:	bf45      	ittet	mi
 800b9f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9fa:	9304      	strmi	r3, [sp, #16]
 800b9fc:	2300      	movpl	r3, #0
 800b9fe:	2300      	movmi	r3, #0
 800ba00:	bf4c      	ite	mi
 800ba02:	9305      	strmi	r3, [sp, #20]
 800ba04:	9304      	strpl	r3, [sp, #16]
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	db3d      	blt.n	800ba88 <_dtoa_r+0x248>
 800ba0c:	9b05      	ldr	r3, [sp, #20]
 800ba0e:	9a00      	ldr	r2, [sp, #0]
 800ba10:	920a      	str	r2, [sp, #40]	; 0x28
 800ba12:	4413      	add	r3, r2
 800ba14:	9305      	str	r3, [sp, #20]
 800ba16:	2300      	movs	r3, #0
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	9b06      	ldr	r3, [sp, #24]
 800ba1c:	2b09      	cmp	r3, #9
 800ba1e:	f200 8089 	bhi.w	800bb34 <_dtoa_r+0x2f4>
 800ba22:	2b05      	cmp	r3, #5
 800ba24:	bfc4      	itt	gt
 800ba26:	3b04      	subgt	r3, #4
 800ba28:	9306      	strgt	r3, [sp, #24]
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	f1a3 0302 	sub.w	r3, r3, #2
 800ba30:	bfcc      	ite	gt
 800ba32:	2500      	movgt	r5, #0
 800ba34:	2501      	movle	r5, #1
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	f200 8087 	bhi.w	800bb4a <_dtoa_r+0x30a>
 800ba3c:	e8df f003 	tbb	[pc, r3]
 800ba40:	59383a2d 	.word	0x59383a2d
 800ba44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba48:	441d      	add	r5, r3
 800ba4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	bfc1      	itttt	gt
 800ba52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba62:	bfda      	itte	le
 800ba64:	f1c3 0320 	rsble	r3, r3, #32
 800ba68:	fa06 f003 	lslle.w	r0, r6, r3
 800ba6c:	4318      	orrgt	r0, r3
 800ba6e:	f7f4 fd51 	bl	8000514 <__aeabi_ui2d>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4606      	mov	r6, r0
 800ba76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba7a:	3d01      	subs	r5, #1
 800ba7c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba7e:	e76a      	b.n	800b956 <_dtoa_r+0x116>
 800ba80:	2301      	movs	r3, #1
 800ba82:	e7b2      	b.n	800b9ea <_dtoa_r+0x1aa>
 800ba84:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba86:	e7b1      	b.n	800b9ec <_dtoa_r+0x1ac>
 800ba88:	9b04      	ldr	r3, [sp, #16]
 800ba8a:	9a00      	ldr	r2, [sp, #0]
 800ba8c:	1a9b      	subs	r3, r3, r2
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	4253      	negs	r3, r2
 800ba92:	9307      	str	r3, [sp, #28]
 800ba94:	2300      	movs	r3, #0
 800ba96:	930a      	str	r3, [sp, #40]	; 0x28
 800ba98:	e7bf      	b.n	800ba1a <_dtoa_r+0x1da>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	9308      	str	r3, [sp, #32]
 800ba9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	dc55      	bgt.n	800bb50 <_dtoa_r+0x310>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baaa:	461a      	mov	r2, r3
 800baac:	9209      	str	r2, [sp, #36]	; 0x24
 800baae:	e00c      	b.n	800baca <_dtoa_r+0x28a>
 800bab0:	2301      	movs	r3, #1
 800bab2:	e7f3      	b.n	800ba9c <_dtoa_r+0x25c>
 800bab4:	2300      	movs	r3, #0
 800bab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bab8:	9308      	str	r3, [sp, #32]
 800baba:	9b00      	ldr	r3, [sp, #0]
 800babc:	4413      	add	r3, r2
 800babe:	9302      	str	r3, [sp, #8]
 800bac0:	3301      	adds	r3, #1
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	bfb8      	it	lt
 800bac8:	2301      	movlt	r3, #1
 800baca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bacc:	2200      	movs	r2, #0
 800bace:	6042      	str	r2, [r0, #4]
 800bad0:	2204      	movs	r2, #4
 800bad2:	f102 0614 	add.w	r6, r2, #20
 800bad6:	429e      	cmp	r6, r3
 800bad8:	6841      	ldr	r1, [r0, #4]
 800bada:	d93d      	bls.n	800bb58 <_dtoa_r+0x318>
 800badc:	4620      	mov	r0, r4
 800bade:	f000 fcbb 	bl	800c458 <_Balloc>
 800bae2:	9001      	str	r0, [sp, #4]
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d13b      	bne.n	800bb60 <_dtoa_r+0x320>
 800bae8:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <_dtoa_r+0x2f0>)
 800baea:	4602      	mov	r2, r0
 800baec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800baf0:	e6c0      	b.n	800b874 <_dtoa_r+0x34>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7df      	b.n	800bab6 <_dtoa_r+0x276>
 800baf6:	bf00      	nop
 800baf8:	636f4361 	.word	0x636f4361
 800bafc:	3fd287a7 	.word	0x3fd287a7
 800bb00:	8b60c8b3 	.word	0x8b60c8b3
 800bb04:	3fc68a28 	.word	0x3fc68a28
 800bb08:	509f79fb 	.word	0x509f79fb
 800bb0c:	3fd34413 	.word	0x3fd34413
 800bb10:	0800da95 	.word	0x0800da95
 800bb14:	0800daac 	.word	0x0800daac
 800bb18:	7ff00000 	.word	0x7ff00000
 800bb1c:	0800da91 	.word	0x0800da91
 800bb20:	0800da88 	.word	0x0800da88
 800bb24:	0800da65 	.word	0x0800da65
 800bb28:	3ff80000 	.word	0x3ff80000
 800bb2c:	0800dba0 	.word	0x0800dba0
 800bb30:	0800db07 	.word	0x0800db07
 800bb34:	2501      	movs	r5, #1
 800bb36:	2300      	movs	r3, #0
 800bb38:	9306      	str	r3, [sp, #24]
 800bb3a:	9508      	str	r5, [sp, #32]
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb44:	2200      	movs	r2, #0
 800bb46:	2312      	movs	r3, #18
 800bb48:	e7b0      	b.n	800baac <_dtoa_r+0x26c>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	9308      	str	r3, [sp, #32]
 800bb4e:	e7f5      	b.n	800bb3c <_dtoa_r+0x2fc>
 800bb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb56:	e7b8      	b.n	800baca <_dtoa_r+0x28a>
 800bb58:	3101      	adds	r1, #1
 800bb5a:	6041      	str	r1, [r0, #4]
 800bb5c:	0052      	lsls	r2, r2, #1
 800bb5e:	e7b8      	b.n	800bad2 <_dtoa_r+0x292>
 800bb60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb62:	9a01      	ldr	r2, [sp, #4]
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	2b0e      	cmp	r3, #14
 800bb6a:	f200 809d 	bhi.w	800bca8 <_dtoa_r+0x468>
 800bb6e:	2d00      	cmp	r5, #0
 800bb70:	f000 809a 	beq.w	800bca8 <_dtoa_r+0x468>
 800bb74:	9b00      	ldr	r3, [sp, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	dd32      	ble.n	800bbe0 <_dtoa_r+0x3a0>
 800bb7a:	4ab7      	ldr	r2, [pc, #732]	; (800be58 <_dtoa_r+0x618>)
 800bb7c:	f003 030f 	and.w	r3, r3, #15
 800bb80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb88:	9b00      	ldr	r3, [sp, #0]
 800bb8a:	05d8      	lsls	r0, r3, #23
 800bb8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb90:	d516      	bpl.n	800bbc0 <_dtoa_r+0x380>
 800bb92:	4bb2      	ldr	r3, [pc, #712]	; (800be5c <_dtoa_r+0x61c>)
 800bb94:	ec51 0b19 	vmov	r0, r1, d9
 800bb98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb9c:	f7f4 fe5e 	bl	800085c <__aeabi_ddiv>
 800bba0:	f007 070f 	and.w	r7, r7, #15
 800bba4:	4682      	mov	sl, r0
 800bba6:	468b      	mov	fp, r1
 800bba8:	2503      	movs	r5, #3
 800bbaa:	4eac      	ldr	r6, [pc, #688]	; (800be5c <_dtoa_r+0x61c>)
 800bbac:	b957      	cbnz	r7, 800bbc4 <_dtoa_r+0x384>
 800bbae:	4642      	mov	r2, r8
 800bbb0:	464b      	mov	r3, r9
 800bbb2:	4650      	mov	r0, sl
 800bbb4:	4659      	mov	r1, fp
 800bbb6:	f7f4 fe51 	bl	800085c <__aeabi_ddiv>
 800bbba:	4682      	mov	sl, r0
 800bbbc:	468b      	mov	fp, r1
 800bbbe:	e028      	b.n	800bc12 <_dtoa_r+0x3d2>
 800bbc0:	2502      	movs	r5, #2
 800bbc2:	e7f2      	b.n	800bbaa <_dtoa_r+0x36a>
 800bbc4:	07f9      	lsls	r1, r7, #31
 800bbc6:	d508      	bpl.n	800bbda <_dtoa_r+0x39a>
 800bbc8:	4640      	mov	r0, r8
 800bbca:	4649      	mov	r1, r9
 800bbcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbd0:	f7f4 fd1a 	bl	8000608 <__aeabi_dmul>
 800bbd4:	3501      	adds	r5, #1
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	4689      	mov	r9, r1
 800bbda:	107f      	asrs	r7, r7, #1
 800bbdc:	3608      	adds	r6, #8
 800bbde:	e7e5      	b.n	800bbac <_dtoa_r+0x36c>
 800bbe0:	f000 809b 	beq.w	800bd1a <_dtoa_r+0x4da>
 800bbe4:	9b00      	ldr	r3, [sp, #0]
 800bbe6:	4f9d      	ldr	r7, [pc, #628]	; (800be5c <_dtoa_r+0x61c>)
 800bbe8:	425e      	negs	r6, r3
 800bbea:	4b9b      	ldr	r3, [pc, #620]	; (800be58 <_dtoa_r+0x618>)
 800bbec:	f006 020f 	and.w	r2, r6, #15
 800bbf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	ec51 0b19 	vmov	r0, r1, d9
 800bbfc:	f7f4 fd04 	bl	8000608 <__aeabi_dmul>
 800bc00:	1136      	asrs	r6, r6, #4
 800bc02:	4682      	mov	sl, r0
 800bc04:	468b      	mov	fp, r1
 800bc06:	2300      	movs	r3, #0
 800bc08:	2502      	movs	r5, #2
 800bc0a:	2e00      	cmp	r6, #0
 800bc0c:	d17a      	bne.n	800bd04 <_dtoa_r+0x4c4>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1d3      	bne.n	800bbba <_dtoa_r+0x37a>
 800bc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8082 	beq.w	800bd1e <_dtoa_r+0x4de>
 800bc1a:	4b91      	ldr	r3, [pc, #580]	; (800be60 <_dtoa_r+0x620>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4650      	mov	r0, sl
 800bc20:	4659      	mov	r1, fp
 800bc22:	f7f4 ff63 	bl	8000aec <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d079      	beq.n	800bd1e <_dtoa_r+0x4de>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d076      	beq.n	800bd1e <_dtoa_r+0x4de>
 800bc30:	9b02      	ldr	r3, [sp, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dd36      	ble.n	800bca4 <_dtoa_r+0x464>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	4650      	mov	r0, sl
 800bc3a:	4659      	mov	r1, fp
 800bc3c:	1e5f      	subs	r7, r3, #1
 800bc3e:	2200      	movs	r2, #0
 800bc40:	4b88      	ldr	r3, [pc, #544]	; (800be64 <_dtoa_r+0x624>)
 800bc42:	f7f4 fce1 	bl	8000608 <__aeabi_dmul>
 800bc46:	9e02      	ldr	r6, [sp, #8]
 800bc48:	4682      	mov	sl, r0
 800bc4a:	468b      	mov	fp, r1
 800bc4c:	3501      	adds	r5, #1
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f7f4 fc70 	bl	8000534 <__aeabi_i2d>
 800bc54:	4652      	mov	r2, sl
 800bc56:	465b      	mov	r3, fp
 800bc58:	f7f4 fcd6 	bl	8000608 <__aeabi_dmul>
 800bc5c:	4b82      	ldr	r3, [pc, #520]	; (800be68 <_dtoa_r+0x628>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f7f4 fb1c 	bl	800029c <__adddf3>
 800bc64:	46d0      	mov	r8, sl
 800bc66:	46d9      	mov	r9, fp
 800bc68:	4682      	mov	sl, r0
 800bc6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d158      	bne.n	800bd24 <_dtoa_r+0x4e4>
 800bc72:	4b7e      	ldr	r3, [pc, #504]	; (800be6c <_dtoa_r+0x62c>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	4640      	mov	r0, r8
 800bc78:	4649      	mov	r1, r9
 800bc7a:	f7f4 fb0d 	bl	8000298 <__aeabi_dsub>
 800bc7e:	4652      	mov	r2, sl
 800bc80:	465b      	mov	r3, fp
 800bc82:	4680      	mov	r8, r0
 800bc84:	4689      	mov	r9, r1
 800bc86:	f7f4 ff4f 	bl	8000b28 <__aeabi_dcmpgt>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	f040 8295 	bne.w	800c1ba <_dtoa_r+0x97a>
 800bc90:	4652      	mov	r2, sl
 800bc92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc96:	4640      	mov	r0, r8
 800bc98:	4649      	mov	r1, r9
 800bc9a:	f7f4 ff27 	bl	8000aec <__aeabi_dcmplt>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f040 8289 	bne.w	800c1b6 <_dtoa_r+0x976>
 800bca4:	ec5b ab19 	vmov	sl, fp, d9
 800bca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f2c0 8148 	blt.w	800bf40 <_dtoa_r+0x700>
 800bcb0:	9a00      	ldr	r2, [sp, #0]
 800bcb2:	2a0e      	cmp	r2, #14
 800bcb4:	f300 8144 	bgt.w	800bf40 <_dtoa_r+0x700>
 800bcb8:	4b67      	ldr	r3, [pc, #412]	; (800be58 <_dtoa_r+0x618>)
 800bcba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f280 80d5 	bge.w	800be74 <_dtoa_r+0x634>
 800bcca:	9b03      	ldr	r3, [sp, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f300 80d1 	bgt.w	800be74 <_dtoa_r+0x634>
 800bcd2:	f040 826f 	bne.w	800c1b4 <_dtoa_r+0x974>
 800bcd6:	4b65      	ldr	r3, [pc, #404]	; (800be6c <_dtoa_r+0x62c>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fc93 	bl	8000608 <__aeabi_dmul>
 800bce2:	4652      	mov	r2, sl
 800bce4:	465b      	mov	r3, fp
 800bce6:	f7f4 ff15 	bl	8000b14 <__aeabi_dcmpge>
 800bcea:	9e03      	ldr	r6, [sp, #12]
 800bcec:	4637      	mov	r7, r6
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f040 8245 	bne.w	800c17e <_dtoa_r+0x93e>
 800bcf4:	9d01      	ldr	r5, [sp, #4]
 800bcf6:	2331      	movs	r3, #49	; 0x31
 800bcf8:	f805 3b01 	strb.w	r3, [r5], #1
 800bcfc:	9b00      	ldr	r3, [sp, #0]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	e240      	b.n	800c186 <_dtoa_r+0x946>
 800bd04:	07f2      	lsls	r2, r6, #31
 800bd06:	d505      	bpl.n	800bd14 <_dtoa_r+0x4d4>
 800bd08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd0c:	f7f4 fc7c 	bl	8000608 <__aeabi_dmul>
 800bd10:	3501      	adds	r5, #1
 800bd12:	2301      	movs	r3, #1
 800bd14:	1076      	asrs	r6, r6, #1
 800bd16:	3708      	adds	r7, #8
 800bd18:	e777      	b.n	800bc0a <_dtoa_r+0x3ca>
 800bd1a:	2502      	movs	r5, #2
 800bd1c:	e779      	b.n	800bc12 <_dtoa_r+0x3d2>
 800bd1e:	9f00      	ldr	r7, [sp, #0]
 800bd20:	9e03      	ldr	r6, [sp, #12]
 800bd22:	e794      	b.n	800bc4e <_dtoa_r+0x40e>
 800bd24:	9901      	ldr	r1, [sp, #4]
 800bd26:	4b4c      	ldr	r3, [pc, #304]	; (800be58 <_dtoa_r+0x618>)
 800bd28:	4431      	add	r1, r6
 800bd2a:	910d      	str	r1, [sp, #52]	; 0x34
 800bd2c:	9908      	ldr	r1, [sp, #32]
 800bd2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	d043      	beq.n	800bdc2 <_dtoa_r+0x582>
 800bd3a:	494d      	ldr	r1, [pc, #308]	; (800be70 <_dtoa_r+0x630>)
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	f7f4 fd8d 	bl	800085c <__aeabi_ddiv>
 800bd42:	4652      	mov	r2, sl
 800bd44:	465b      	mov	r3, fp
 800bd46:	f7f4 faa7 	bl	8000298 <__aeabi_dsub>
 800bd4a:	9d01      	ldr	r5, [sp, #4]
 800bd4c:	4682      	mov	sl, r0
 800bd4e:	468b      	mov	fp, r1
 800bd50:	4649      	mov	r1, r9
 800bd52:	4640      	mov	r0, r8
 800bd54:	f7f4 ff08 	bl	8000b68 <__aeabi_d2iz>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	f7f4 fbeb 	bl	8000534 <__aeabi_i2d>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4640      	mov	r0, r8
 800bd64:	4649      	mov	r1, r9
 800bd66:	f7f4 fa97 	bl	8000298 <__aeabi_dsub>
 800bd6a:	3630      	adds	r6, #48	; 0x30
 800bd6c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd70:	4652      	mov	r2, sl
 800bd72:	465b      	mov	r3, fp
 800bd74:	4680      	mov	r8, r0
 800bd76:	4689      	mov	r9, r1
 800bd78:	f7f4 feb8 	bl	8000aec <__aeabi_dcmplt>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d163      	bne.n	800be48 <_dtoa_r+0x608>
 800bd80:	4642      	mov	r2, r8
 800bd82:	464b      	mov	r3, r9
 800bd84:	4936      	ldr	r1, [pc, #216]	; (800be60 <_dtoa_r+0x620>)
 800bd86:	2000      	movs	r0, #0
 800bd88:	f7f4 fa86 	bl	8000298 <__aeabi_dsub>
 800bd8c:	4652      	mov	r2, sl
 800bd8e:	465b      	mov	r3, fp
 800bd90:	f7f4 feac 	bl	8000aec <__aeabi_dcmplt>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	f040 80b5 	bne.w	800bf04 <_dtoa_r+0x6c4>
 800bd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd9c:	429d      	cmp	r5, r3
 800bd9e:	d081      	beq.n	800bca4 <_dtoa_r+0x464>
 800bda0:	4b30      	ldr	r3, [pc, #192]	; (800be64 <_dtoa_r+0x624>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	4650      	mov	r0, sl
 800bda6:	4659      	mov	r1, fp
 800bda8:	f7f4 fc2e 	bl	8000608 <__aeabi_dmul>
 800bdac:	4b2d      	ldr	r3, [pc, #180]	; (800be64 <_dtoa_r+0x624>)
 800bdae:	4682      	mov	sl, r0
 800bdb0:	468b      	mov	fp, r1
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f7f4 fc26 	bl	8000608 <__aeabi_dmul>
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	e7c6      	b.n	800bd50 <_dtoa_r+0x510>
 800bdc2:	4650      	mov	r0, sl
 800bdc4:	4659      	mov	r1, fp
 800bdc6:	f7f4 fc1f 	bl	8000608 <__aeabi_dmul>
 800bdca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdcc:	9d01      	ldr	r5, [sp, #4]
 800bdce:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	468b      	mov	fp, r1
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	f7f4 fec6 	bl	8000b68 <__aeabi_d2iz>
 800bddc:	4606      	mov	r6, r0
 800bdde:	f7f4 fba9 	bl	8000534 <__aeabi_i2d>
 800bde2:	3630      	adds	r6, #48	; 0x30
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4640      	mov	r0, r8
 800bdea:	4649      	mov	r1, r9
 800bdec:	f7f4 fa54 	bl	8000298 <__aeabi_dsub>
 800bdf0:	f805 6b01 	strb.w	r6, [r5], #1
 800bdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf6:	429d      	cmp	r5, r3
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	4689      	mov	r9, r1
 800bdfc:	f04f 0200 	mov.w	r2, #0
 800be00:	d124      	bne.n	800be4c <_dtoa_r+0x60c>
 800be02:	4b1b      	ldr	r3, [pc, #108]	; (800be70 <_dtoa_r+0x630>)
 800be04:	4650      	mov	r0, sl
 800be06:	4659      	mov	r1, fp
 800be08:	f7f4 fa48 	bl	800029c <__adddf3>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4640      	mov	r0, r8
 800be12:	4649      	mov	r1, r9
 800be14:	f7f4 fe88 	bl	8000b28 <__aeabi_dcmpgt>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d173      	bne.n	800bf04 <_dtoa_r+0x6c4>
 800be1c:	4652      	mov	r2, sl
 800be1e:	465b      	mov	r3, fp
 800be20:	4913      	ldr	r1, [pc, #76]	; (800be70 <_dtoa_r+0x630>)
 800be22:	2000      	movs	r0, #0
 800be24:	f7f4 fa38 	bl	8000298 <__aeabi_dsub>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4640      	mov	r0, r8
 800be2e:	4649      	mov	r1, r9
 800be30:	f7f4 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800be34:	2800      	cmp	r0, #0
 800be36:	f43f af35 	beq.w	800bca4 <_dtoa_r+0x464>
 800be3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be3c:	1e6b      	subs	r3, r5, #1
 800be3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be44:	2b30      	cmp	r3, #48	; 0x30
 800be46:	d0f8      	beq.n	800be3a <_dtoa_r+0x5fa>
 800be48:	9700      	str	r7, [sp, #0]
 800be4a:	e049      	b.n	800bee0 <_dtoa_r+0x6a0>
 800be4c:	4b05      	ldr	r3, [pc, #20]	; (800be64 <_dtoa_r+0x624>)
 800be4e:	f7f4 fbdb 	bl	8000608 <__aeabi_dmul>
 800be52:	4680      	mov	r8, r0
 800be54:	4689      	mov	r9, r1
 800be56:	e7bd      	b.n	800bdd4 <_dtoa_r+0x594>
 800be58:	0800dba0 	.word	0x0800dba0
 800be5c:	0800db78 	.word	0x0800db78
 800be60:	3ff00000 	.word	0x3ff00000
 800be64:	40240000 	.word	0x40240000
 800be68:	401c0000 	.word	0x401c0000
 800be6c:	40140000 	.word	0x40140000
 800be70:	3fe00000 	.word	0x3fe00000
 800be74:	9d01      	ldr	r5, [sp, #4]
 800be76:	4656      	mov	r6, sl
 800be78:	465f      	mov	r7, fp
 800be7a:	4642      	mov	r2, r8
 800be7c:	464b      	mov	r3, r9
 800be7e:	4630      	mov	r0, r6
 800be80:	4639      	mov	r1, r7
 800be82:	f7f4 fceb 	bl	800085c <__aeabi_ddiv>
 800be86:	f7f4 fe6f 	bl	8000b68 <__aeabi_d2iz>
 800be8a:	4682      	mov	sl, r0
 800be8c:	f7f4 fb52 	bl	8000534 <__aeabi_i2d>
 800be90:	4642      	mov	r2, r8
 800be92:	464b      	mov	r3, r9
 800be94:	f7f4 fbb8 	bl	8000608 <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bea4:	f7f4 f9f8 	bl	8000298 <__aeabi_dsub>
 800bea8:	f805 6b01 	strb.w	r6, [r5], #1
 800beac:	9e01      	ldr	r6, [sp, #4]
 800beae:	9f03      	ldr	r7, [sp, #12]
 800beb0:	1bae      	subs	r6, r5, r6
 800beb2:	42b7      	cmp	r7, r6
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	d135      	bne.n	800bf26 <_dtoa_r+0x6e6>
 800beba:	f7f4 f9ef 	bl	800029c <__adddf3>
 800bebe:	4642      	mov	r2, r8
 800bec0:	464b      	mov	r3, r9
 800bec2:	4606      	mov	r6, r0
 800bec4:	460f      	mov	r7, r1
 800bec6:	f7f4 fe2f 	bl	8000b28 <__aeabi_dcmpgt>
 800beca:	b9d0      	cbnz	r0, 800bf02 <_dtoa_r+0x6c2>
 800becc:	4642      	mov	r2, r8
 800bece:	464b      	mov	r3, r9
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed8:	b110      	cbz	r0, 800bee0 <_dtoa_r+0x6a0>
 800beda:	f01a 0f01 	tst.w	sl, #1
 800bede:	d110      	bne.n	800bf02 <_dtoa_r+0x6c2>
 800bee0:	4620      	mov	r0, r4
 800bee2:	ee18 1a10 	vmov	r1, s16
 800bee6:	f000 faf7 	bl	800c4d8 <_Bfree>
 800beea:	2300      	movs	r3, #0
 800beec:	9800      	ldr	r0, [sp, #0]
 800beee:	702b      	strb	r3, [r5, #0]
 800bef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bef2:	3001      	adds	r0, #1
 800bef4:	6018      	str	r0, [r3, #0]
 800bef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f43f acf1 	beq.w	800b8e0 <_dtoa_r+0xa0>
 800befe:	601d      	str	r5, [r3, #0]
 800bf00:	e4ee      	b.n	800b8e0 <_dtoa_r+0xa0>
 800bf02:	9f00      	ldr	r7, [sp, #0]
 800bf04:	462b      	mov	r3, r5
 800bf06:	461d      	mov	r5, r3
 800bf08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf0c:	2a39      	cmp	r2, #57	; 0x39
 800bf0e:	d106      	bne.n	800bf1e <_dtoa_r+0x6de>
 800bf10:	9a01      	ldr	r2, [sp, #4]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d1f7      	bne.n	800bf06 <_dtoa_r+0x6c6>
 800bf16:	9901      	ldr	r1, [sp, #4]
 800bf18:	2230      	movs	r2, #48	; 0x30
 800bf1a:	3701      	adds	r7, #1
 800bf1c:	700a      	strb	r2, [r1, #0]
 800bf1e:	781a      	ldrb	r2, [r3, #0]
 800bf20:	3201      	adds	r2, #1
 800bf22:	701a      	strb	r2, [r3, #0]
 800bf24:	e790      	b.n	800be48 <_dtoa_r+0x608>
 800bf26:	4ba6      	ldr	r3, [pc, #664]	; (800c1c0 <_dtoa_r+0x980>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f7f4 fb6d 	bl	8000608 <__aeabi_dmul>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2300      	movs	r3, #0
 800bf32:	4606      	mov	r6, r0
 800bf34:	460f      	mov	r7, r1
 800bf36:	f7f4 fdcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d09d      	beq.n	800be7a <_dtoa_r+0x63a>
 800bf3e:	e7cf      	b.n	800bee0 <_dtoa_r+0x6a0>
 800bf40:	9a08      	ldr	r2, [sp, #32]
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	f000 80d7 	beq.w	800c0f6 <_dtoa_r+0x8b6>
 800bf48:	9a06      	ldr	r2, [sp, #24]
 800bf4a:	2a01      	cmp	r2, #1
 800bf4c:	f300 80ba 	bgt.w	800c0c4 <_dtoa_r+0x884>
 800bf50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf52:	2a00      	cmp	r2, #0
 800bf54:	f000 80b2 	beq.w	800c0bc <_dtoa_r+0x87c>
 800bf58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf5c:	9e07      	ldr	r6, [sp, #28]
 800bf5e:	9d04      	ldr	r5, [sp, #16]
 800bf60:	9a04      	ldr	r2, [sp, #16]
 800bf62:	441a      	add	r2, r3
 800bf64:	9204      	str	r2, [sp, #16]
 800bf66:	9a05      	ldr	r2, [sp, #20]
 800bf68:	2101      	movs	r1, #1
 800bf6a:	441a      	add	r2, r3
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	9205      	str	r2, [sp, #20]
 800bf70:	f000 fb6a 	bl	800c648 <__i2b>
 800bf74:	4607      	mov	r7, r0
 800bf76:	2d00      	cmp	r5, #0
 800bf78:	dd0c      	ble.n	800bf94 <_dtoa_r+0x754>
 800bf7a:	9b05      	ldr	r3, [sp, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd09      	ble.n	800bf94 <_dtoa_r+0x754>
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	9a04      	ldr	r2, [sp, #16]
 800bf84:	bfa8      	it	ge
 800bf86:	462b      	movge	r3, r5
 800bf88:	1ad2      	subs	r2, r2, r3
 800bf8a:	9204      	str	r2, [sp, #16]
 800bf8c:	9a05      	ldr	r2, [sp, #20]
 800bf8e:	1aed      	subs	r5, r5, r3
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	b31b      	cbz	r3, 800bfe0 <_dtoa_r+0x7a0>
 800bf98:	9b08      	ldr	r3, [sp, #32]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 80af 	beq.w	800c0fe <_dtoa_r+0x8be>
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	dd13      	ble.n	800bfcc <_dtoa_r+0x78c>
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 fc0d 	bl	800c7c8 <__pow5mult>
 800bfae:	ee18 2a10 	vmov	r2, s16
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 fb5c 	bl	800c674 <__multiply>
 800bfbc:	ee18 1a10 	vmov	r1, s16
 800bfc0:	4680      	mov	r8, r0
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 fa88 	bl	800c4d8 <_Bfree>
 800bfc8:	ee08 8a10 	vmov	s16, r8
 800bfcc:	9b07      	ldr	r3, [sp, #28]
 800bfce:	1b9a      	subs	r2, r3, r6
 800bfd0:	d006      	beq.n	800bfe0 <_dtoa_r+0x7a0>
 800bfd2:	ee18 1a10 	vmov	r1, s16
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 fbf6 	bl	800c7c8 <__pow5mult>
 800bfdc:	ee08 0a10 	vmov	s16, r0
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f000 fb30 	bl	800c648 <__i2b>
 800bfe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	4606      	mov	r6, r0
 800bfee:	f340 8088 	ble.w	800c102 <_dtoa_r+0x8c2>
 800bff2:	461a      	mov	r2, r3
 800bff4:	4601      	mov	r1, r0
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 fbe6 	bl	800c7c8 <__pow5mult>
 800bffc:	9b06      	ldr	r3, [sp, #24]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	4606      	mov	r6, r0
 800c002:	f340 8081 	ble.w	800c108 <_dtoa_r+0x8c8>
 800c006:	f04f 0800 	mov.w	r8, #0
 800c00a:	6933      	ldr	r3, [r6, #16]
 800c00c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c010:	6918      	ldr	r0, [r3, #16]
 800c012:	f000 fac9 	bl	800c5a8 <__hi0bits>
 800c016:	f1c0 0020 	rsb	r0, r0, #32
 800c01a:	9b05      	ldr	r3, [sp, #20]
 800c01c:	4418      	add	r0, r3
 800c01e:	f010 001f 	ands.w	r0, r0, #31
 800c022:	f000 8092 	beq.w	800c14a <_dtoa_r+0x90a>
 800c026:	f1c0 0320 	rsb	r3, r0, #32
 800c02a:	2b04      	cmp	r3, #4
 800c02c:	f340 808a 	ble.w	800c144 <_dtoa_r+0x904>
 800c030:	f1c0 001c 	rsb	r0, r0, #28
 800c034:	9b04      	ldr	r3, [sp, #16]
 800c036:	4403      	add	r3, r0
 800c038:	9304      	str	r3, [sp, #16]
 800c03a:	9b05      	ldr	r3, [sp, #20]
 800c03c:	4403      	add	r3, r0
 800c03e:	4405      	add	r5, r0
 800c040:	9305      	str	r3, [sp, #20]
 800c042:	9b04      	ldr	r3, [sp, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	dd07      	ble.n	800c058 <_dtoa_r+0x818>
 800c048:	ee18 1a10 	vmov	r1, s16
 800c04c:	461a      	mov	r2, r3
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 fc14 	bl	800c87c <__lshift>
 800c054:	ee08 0a10 	vmov	s16, r0
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	dd05      	ble.n	800c06a <_dtoa_r+0x82a>
 800c05e:	4631      	mov	r1, r6
 800c060:	461a      	mov	r2, r3
 800c062:	4620      	mov	r0, r4
 800c064:	f000 fc0a 	bl	800c87c <__lshift>
 800c068:	4606      	mov	r6, r0
 800c06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d06e      	beq.n	800c14e <_dtoa_r+0x90e>
 800c070:	ee18 0a10 	vmov	r0, s16
 800c074:	4631      	mov	r1, r6
 800c076:	f000 fc71 	bl	800c95c <__mcmp>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	da67      	bge.n	800c14e <_dtoa_r+0x90e>
 800c07e:	9b00      	ldr	r3, [sp, #0]
 800c080:	3b01      	subs	r3, #1
 800c082:	ee18 1a10 	vmov	r1, s16
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	220a      	movs	r2, #10
 800c08a:	2300      	movs	r3, #0
 800c08c:	4620      	mov	r0, r4
 800c08e:	f000 fa45 	bl	800c51c <__multadd>
 800c092:	9b08      	ldr	r3, [sp, #32]
 800c094:	ee08 0a10 	vmov	s16, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 81b1 	beq.w	800c400 <_dtoa_r+0xbc0>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	4639      	mov	r1, r7
 800c0a2:	220a      	movs	r2, #10
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f000 fa39 	bl	800c51c <__multadd>
 800c0aa:	9b02      	ldr	r3, [sp, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	f300 808e 	bgt.w	800c1d0 <_dtoa_r+0x990>
 800c0b4:	9b06      	ldr	r3, [sp, #24]
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	dc51      	bgt.n	800c15e <_dtoa_r+0x91e>
 800c0ba:	e089      	b.n	800c1d0 <_dtoa_r+0x990>
 800c0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0c2:	e74b      	b.n	800bf5c <_dtoa_r+0x71c>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	1e5e      	subs	r6, r3, #1
 800c0c8:	9b07      	ldr	r3, [sp, #28]
 800c0ca:	42b3      	cmp	r3, r6
 800c0cc:	bfbf      	itttt	lt
 800c0ce:	9b07      	ldrlt	r3, [sp, #28]
 800c0d0:	9607      	strlt	r6, [sp, #28]
 800c0d2:	1af2      	sublt	r2, r6, r3
 800c0d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0d6:	bfb6      	itet	lt
 800c0d8:	189b      	addlt	r3, r3, r2
 800c0da:	1b9e      	subge	r6, r3, r6
 800c0dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	bfb8      	it	lt
 800c0e2:	2600      	movlt	r6, #0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bfb7      	itett	lt
 800c0e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0f0:	1a9d      	sublt	r5, r3, r2
 800c0f2:	2300      	movlt	r3, #0
 800c0f4:	e734      	b.n	800bf60 <_dtoa_r+0x720>
 800c0f6:	9e07      	ldr	r6, [sp, #28]
 800c0f8:	9d04      	ldr	r5, [sp, #16]
 800c0fa:	9f08      	ldr	r7, [sp, #32]
 800c0fc:	e73b      	b.n	800bf76 <_dtoa_r+0x736>
 800c0fe:	9a07      	ldr	r2, [sp, #28]
 800c100:	e767      	b.n	800bfd2 <_dtoa_r+0x792>
 800c102:	9b06      	ldr	r3, [sp, #24]
 800c104:	2b01      	cmp	r3, #1
 800c106:	dc18      	bgt.n	800c13a <_dtoa_r+0x8fa>
 800c108:	f1ba 0f00 	cmp.w	sl, #0
 800c10c:	d115      	bne.n	800c13a <_dtoa_r+0x8fa>
 800c10e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c112:	b993      	cbnz	r3, 800c13a <_dtoa_r+0x8fa>
 800c114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c118:	0d1b      	lsrs	r3, r3, #20
 800c11a:	051b      	lsls	r3, r3, #20
 800c11c:	b183      	cbz	r3, 800c140 <_dtoa_r+0x900>
 800c11e:	9b04      	ldr	r3, [sp, #16]
 800c120:	3301      	adds	r3, #1
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	9b05      	ldr	r3, [sp, #20]
 800c126:	3301      	adds	r3, #1
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	f04f 0801 	mov.w	r8, #1
 800c12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c130:	2b00      	cmp	r3, #0
 800c132:	f47f af6a 	bne.w	800c00a <_dtoa_r+0x7ca>
 800c136:	2001      	movs	r0, #1
 800c138:	e76f      	b.n	800c01a <_dtoa_r+0x7da>
 800c13a:	f04f 0800 	mov.w	r8, #0
 800c13e:	e7f6      	b.n	800c12e <_dtoa_r+0x8ee>
 800c140:	4698      	mov	r8, r3
 800c142:	e7f4      	b.n	800c12e <_dtoa_r+0x8ee>
 800c144:	f43f af7d 	beq.w	800c042 <_dtoa_r+0x802>
 800c148:	4618      	mov	r0, r3
 800c14a:	301c      	adds	r0, #28
 800c14c:	e772      	b.n	800c034 <_dtoa_r+0x7f4>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dc37      	bgt.n	800c1c4 <_dtoa_r+0x984>
 800c154:	9b06      	ldr	r3, [sp, #24]
 800c156:	2b02      	cmp	r3, #2
 800c158:	dd34      	ble.n	800c1c4 <_dtoa_r+0x984>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	9302      	str	r3, [sp, #8]
 800c15e:	9b02      	ldr	r3, [sp, #8]
 800c160:	b96b      	cbnz	r3, 800c17e <_dtoa_r+0x93e>
 800c162:	4631      	mov	r1, r6
 800c164:	2205      	movs	r2, #5
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f9d8 	bl	800c51c <__multadd>
 800c16c:	4601      	mov	r1, r0
 800c16e:	4606      	mov	r6, r0
 800c170:	ee18 0a10 	vmov	r0, s16
 800c174:	f000 fbf2 	bl	800c95c <__mcmp>
 800c178:	2800      	cmp	r0, #0
 800c17a:	f73f adbb 	bgt.w	800bcf4 <_dtoa_r+0x4b4>
 800c17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c180:	9d01      	ldr	r5, [sp, #4]
 800c182:	43db      	mvns	r3, r3
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	4631      	mov	r1, r6
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 f9a3 	bl	800c4d8 <_Bfree>
 800c192:	2f00      	cmp	r7, #0
 800c194:	f43f aea4 	beq.w	800bee0 <_dtoa_r+0x6a0>
 800c198:	f1b8 0f00 	cmp.w	r8, #0
 800c19c:	d005      	beq.n	800c1aa <_dtoa_r+0x96a>
 800c19e:	45b8      	cmp	r8, r7
 800c1a0:	d003      	beq.n	800c1aa <_dtoa_r+0x96a>
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 f997 	bl	800c4d8 <_Bfree>
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f000 f993 	bl	800c4d8 <_Bfree>
 800c1b2:	e695      	b.n	800bee0 <_dtoa_r+0x6a0>
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	4637      	mov	r7, r6
 800c1b8:	e7e1      	b.n	800c17e <_dtoa_r+0x93e>
 800c1ba:	9700      	str	r7, [sp, #0]
 800c1bc:	4637      	mov	r7, r6
 800c1be:	e599      	b.n	800bcf4 <_dtoa_r+0x4b4>
 800c1c0:	40240000 	.word	0x40240000
 800c1c4:	9b08      	ldr	r3, [sp, #32]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 80ca 	beq.w	800c360 <_dtoa_r+0xb20>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	9302      	str	r3, [sp, #8]
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	dd05      	ble.n	800c1e0 <_dtoa_r+0x9a0>
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fb4f 	bl	800c87c <__lshift>
 800c1de:	4607      	mov	r7, r0
 800c1e0:	f1b8 0f00 	cmp.w	r8, #0
 800c1e4:	d05b      	beq.n	800c29e <_dtoa_r+0xa5e>
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 f935 	bl	800c458 <_Balloc>
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b928      	cbnz	r0, 800c1fe <_dtoa_r+0x9be>
 800c1f2:	4b87      	ldr	r3, [pc, #540]	; (800c410 <_dtoa_r+0xbd0>)
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1fa:	f7ff bb3b 	b.w	800b874 <_dtoa_r+0x34>
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	3202      	adds	r2, #2
 800c202:	0092      	lsls	r2, r2, #2
 800c204:	f107 010c 	add.w	r1, r7, #12
 800c208:	300c      	adds	r0, #12
 800c20a:	f000 f90b 	bl	800c424 <memcpy>
 800c20e:	2201      	movs	r2, #1
 800c210:	4629      	mov	r1, r5
 800c212:	4620      	mov	r0, r4
 800c214:	f000 fb32 	bl	800c87c <__lshift>
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	f103 0901 	add.w	r9, r3, #1
 800c21e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c222:	4413      	add	r3, r2
 800c224:	9305      	str	r3, [sp, #20]
 800c226:	f00a 0301 	and.w	r3, sl, #1
 800c22a:	46b8      	mov	r8, r7
 800c22c:	9304      	str	r3, [sp, #16]
 800c22e:	4607      	mov	r7, r0
 800c230:	4631      	mov	r1, r6
 800c232:	ee18 0a10 	vmov	r0, s16
 800c236:	f7ff fa75 	bl	800b724 <quorem>
 800c23a:	4641      	mov	r1, r8
 800c23c:	9002      	str	r0, [sp, #8]
 800c23e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c242:	ee18 0a10 	vmov	r0, s16
 800c246:	f000 fb89 	bl	800c95c <__mcmp>
 800c24a:	463a      	mov	r2, r7
 800c24c:	9003      	str	r0, [sp, #12]
 800c24e:	4631      	mov	r1, r6
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fb9f 	bl	800c994 <__mdiff>
 800c256:	68c2      	ldr	r2, [r0, #12]
 800c258:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c25c:	4605      	mov	r5, r0
 800c25e:	bb02      	cbnz	r2, 800c2a2 <_dtoa_r+0xa62>
 800c260:	4601      	mov	r1, r0
 800c262:	ee18 0a10 	vmov	r0, s16
 800c266:	f000 fb79 	bl	800c95c <__mcmp>
 800c26a:	4602      	mov	r2, r0
 800c26c:	4629      	mov	r1, r5
 800c26e:	4620      	mov	r0, r4
 800c270:	9207      	str	r2, [sp, #28]
 800c272:	f000 f931 	bl	800c4d8 <_Bfree>
 800c276:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c27a:	ea43 0102 	orr.w	r1, r3, r2
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	430b      	orrs	r3, r1
 800c282:	464d      	mov	r5, r9
 800c284:	d10f      	bne.n	800c2a6 <_dtoa_r+0xa66>
 800c286:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c28a:	d02a      	beq.n	800c2e2 <_dtoa_r+0xaa2>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	dd02      	ble.n	800c298 <_dtoa_r+0xa58>
 800c292:	9b02      	ldr	r3, [sp, #8]
 800c294:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c298:	f88b a000 	strb.w	sl, [fp]
 800c29c:	e775      	b.n	800c18a <_dtoa_r+0x94a>
 800c29e:	4638      	mov	r0, r7
 800c2a0:	e7ba      	b.n	800c218 <_dtoa_r+0x9d8>
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	e7e2      	b.n	800c26c <_dtoa_r+0xa2c>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	db04      	blt.n	800c2b6 <_dtoa_r+0xa76>
 800c2ac:	9906      	ldr	r1, [sp, #24]
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	9904      	ldr	r1, [sp, #16]
 800c2b2:	430b      	orrs	r3, r1
 800c2b4:	d122      	bne.n	800c2fc <_dtoa_r+0xabc>
 800c2b6:	2a00      	cmp	r2, #0
 800c2b8:	ddee      	ble.n	800c298 <_dtoa_r+0xa58>
 800c2ba:	ee18 1a10 	vmov	r1, s16
 800c2be:	2201      	movs	r2, #1
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fadb 	bl	800c87c <__lshift>
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	ee08 0a10 	vmov	s16, r0
 800c2cc:	f000 fb46 	bl	800c95c <__mcmp>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	dc03      	bgt.n	800c2dc <_dtoa_r+0xa9c>
 800c2d4:	d1e0      	bne.n	800c298 <_dtoa_r+0xa58>
 800c2d6:	f01a 0f01 	tst.w	sl, #1
 800c2da:	d0dd      	beq.n	800c298 <_dtoa_r+0xa58>
 800c2dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2e0:	d1d7      	bne.n	800c292 <_dtoa_r+0xa52>
 800c2e2:	2339      	movs	r3, #57	; 0x39
 800c2e4:	f88b 3000 	strb.w	r3, [fp]
 800c2e8:	462b      	mov	r3, r5
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2f2:	2a39      	cmp	r2, #57	; 0x39
 800c2f4:	d071      	beq.n	800c3da <_dtoa_r+0xb9a>
 800c2f6:	3201      	adds	r2, #1
 800c2f8:	701a      	strb	r2, [r3, #0]
 800c2fa:	e746      	b.n	800c18a <_dtoa_r+0x94a>
 800c2fc:	2a00      	cmp	r2, #0
 800c2fe:	dd07      	ble.n	800c310 <_dtoa_r+0xad0>
 800c300:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c304:	d0ed      	beq.n	800c2e2 <_dtoa_r+0xaa2>
 800c306:	f10a 0301 	add.w	r3, sl, #1
 800c30a:	f88b 3000 	strb.w	r3, [fp]
 800c30e:	e73c      	b.n	800c18a <_dtoa_r+0x94a>
 800c310:	9b05      	ldr	r3, [sp, #20]
 800c312:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c316:	4599      	cmp	r9, r3
 800c318:	d047      	beq.n	800c3aa <_dtoa_r+0xb6a>
 800c31a:	ee18 1a10 	vmov	r1, s16
 800c31e:	2300      	movs	r3, #0
 800c320:	220a      	movs	r2, #10
 800c322:	4620      	mov	r0, r4
 800c324:	f000 f8fa 	bl	800c51c <__multadd>
 800c328:	45b8      	cmp	r8, r7
 800c32a:	ee08 0a10 	vmov	s16, r0
 800c32e:	f04f 0300 	mov.w	r3, #0
 800c332:	f04f 020a 	mov.w	r2, #10
 800c336:	4641      	mov	r1, r8
 800c338:	4620      	mov	r0, r4
 800c33a:	d106      	bne.n	800c34a <_dtoa_r+0xb0a>
 800c33c:	f000 f8ee 	bl	800c51c <__multadd>
 800c340:	4680      	mov	r8, r0
 800c342:	4607      	mov	r7, r0
 800c344:	f109 0901 	add.w	r9, r9, #1
 800c348:	e772      	b.n	800c230 <_dtoa_r+0x9f0>
 800c34a:	f000 f8e7 	bl	800c51c <__multadd>
 800c34e:	4639      	mov	r1, r7
 800c350:	4680      	mov	r8, r0
 800c352:	2300      	movs	r3, #0
 800c354:	220a      	movs	r2, #10
 800c356:	4620      	mov	r0, r4
 800c358:	f000 f8e0 	bl	800c51c <__multadd>
 800c35c:	4607      	mov	r7, r0
 800c35e:	e7f1      	b.n	800c344 <_dtoa_r+0xb04>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	9302      	str	r3, [sp, #8]
 800c364:	9d01      	ldr	r5, [sp, #4]
 800c366:	ee18 0a10 	vmov	r0, s16
 800c36a:	4631      	mov	r1, r6
 800c36c:	f7ff f9da 	bl	800b724 <quorem>
 800c370:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	f805 ab01 	strb.w	sl, [r5], #1
 800c37a:	1aea      	subs	r2, r5, r3
 800c37c:	9b02      	ldr	r3, [sp, #8]
 800c37e:	4293      	cmp	r3, r2
 800c380:	dd09      	ble.n	800c396 <_dtoa_r+0xb56>
 800c382:	ee18 1a10 	vmov	r1, s16
 800c386:	2300      	movs	r3, #0
 800c388:	220a      	movs	r2, #10
 800c38a:	4620      	mov	r0, r4
 800c38c:	f000 f8c6 	bl	800c51c <__multadd>
 800c390:	ee08 0a10 	vmov	s16, r0
 800c394:	e7e7      	b.n	800c366 <_dtoa_r+0xb26>
 800c396:	9b02      	ldr	r3, [sp, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfc8      	it	gt
 800c39c:	461d      	movgt	r5, r3
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	bfd8      	it	le
 800c3a2:	2501      	movle	r5, #1
 800c3a4:	441d      	add	r5, r3
 800c3a6:	f04f 0800 	mov.w	r8, #0
 800c3aa:	ee18 1a10 	vmov	r1, s16
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 fa63 	bl	800c87c <__lshift>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	ee08 0a10 	vmov	s16, r0
 800c3bc:	f000 face 	bl	800c95c <__mcmp>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	dc91      	bgt.n	800c2e8 <_dtoa_r+0xaa8>
 800c3c4:	d102      	bne.n	800c3cc <_dtoa_r+0xb8c>
 800c3c6:	f01a 0f01 	tst.w	sl, #1
 800c3ca:	d18d      	bne.n	800c2e8 <_dtoa_r+0xaa8>
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	461d      	mov	r5, r3
 800c3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3d4:	2a30      	cmp	r2, #48	; 0x30
 800c3d6:	d0fa      	beq.n	800c3ce <_dtoa_r+0xb8e>
 800c3d8:	e6d7      	b.n	800c18a <_dtoa_r+0x94a>
 800c3da:	9a01      	ldr	r2, [sp, #4]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d184      	bne.n	800c2ea <_dtoa_r+0xaaa>
 800c3e0:	9b00      	ldr	r3, [sp, #0]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	2331      	movs	r3, #49	; 0x31
 800c3e8:	7013      	strb	r3, [r2, #0]
 800c3ea:	e6ce      	b.n	800c18a <_dtoa_r+0x94a>
 800c3ec:	4b09      	ldr	r3, [pc, #36]	; (800c414 <_dtoa_r+0xbd4>)
 800c3ee:	f7ff ba95 	b.w	800b91c <_dtoa_r+0xdc>
 800c3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f47f aa6e 	bne.w	800b8d6 <_dtoa_r+0x96>
 800c3fa:	4b07      	ldr	r3, [pc, #28]	; (800c418 <_dtoa_r+0xbd8>)
 800c3fc:	f7ff ba8e 	b.w	800b91c <_dtoa_r+0xdc>
 800c400:	9b02      	ldr	r3, [sp, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	dcae      	bgt.n	800c364 <_dtoa_r+0xb24>
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	2b02      	cmp	r3, #2
 800c40a:	f73f aea8 	bgt.w	800c15e <_dtoa_r+0x91e>
 800c40e:	e7a9      	b.n	800c364 <_dtoa_r+0xb24>
 800c410:	0800db07 	.word	0x0800db07
 800c414:	0800da64 	.word	0x0800da64
 800c418:	0800da88 	.word	0x0800da88

0800c41c <_localeconv_r>:
 800c41c:	4800      	ldr	r0, [pc, #0]	; (800c420 <_localeconv_r+0x4>)
 800c41e:	4770      	bx	lr
 800c420:	20000180 	.word	0x20000180

0800c424 <memcpy>:
 800c424:	440a      	add	r2, r1
 800c426:	4291      	cmp	r1, r2
 800c428:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c42c:	d100      	bne.n	800c430 <memcpy+0xc>
 800c42e:	4770      	bx	lr
 800c430:	b510      	push	{r4, lr}
 800c432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c43a:	4291      	cmp	r1, r2
 800c43c:	d1f9      	bne.n	800c432 <memcpy+0xe>
 800c43e:	bd10      	pop	{r4, pc}

0800c440 <__malloc_lock>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__malloc_lock+0x8>)
 800c442:	f000 bd30 	b.w	800cea6 <__retarget_lock_acquire_recursive>
 800c446:	bf00      	nop
 800c448:	20000b14 	.word	0x20000b14

0800c44c <__malloc_unlock>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__malloc_unlock+0x8>)
 800c44e:	f000 bd2b 	b.w	800cea8 <__retarget_lock_release_recursive>
 800c452:	bf00      	nop
 800c454:	20000b14 	.word	0x20000b14

0800c458 <_Balloc>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c45c:	4604      	mov	r4, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	b976      	cbnz	r6, 800c480 <_Balloc+0x28>
 800c462:	2010      	movs	r0, #16
 800c464:	f7fe fbcc 	bl	800ac00 <malloc>
 800c468:	4602      	mov	r2, r0
 800c46a:	6260      	str	r0, [r4, #36]	; 0x24
 800c46c:	b920      	cbnz	r0, 800c478 <_Balloc+0x20>
 800c46e:	4b18      	ldr	r3, [pc, #96]	; (800c4d0 <_Balloc+0x78>)
 800c470:	4818      	ldr	r0, [pc, #96]	; (800c4d4 <_Balloc+0x7c>)
 800c472:	2166      	movs	r1, #102	; 0x66
 800c474:	f000 fce6 	bl	800ce44 <__assert_func>
 800c478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c47c:	6006      	str	r6, [r0, #0]
 800c47e:	60c6      	str	r6, [r0, #12]
 800c480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c482:	68f3      	ldr	r3, [r6, #12]
 800c484:	b183      	cbz	r3, 800c4a8 <_Balloc+0x50>
 800c486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c48e:	b9b8      	cbnz	r0, 800c4c0 <_Balloc+0x68>
 800c490:	2101      	movs	r1, #1
 800c492:	fa01 f605 	lsl.w	r6, r1, r5
 800c496:	1d72      	adds	r2, r6, #5
 800c498:	0092      	lsls	r2, r2, #2
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 fb60 	bl	800cb60 <_calloc_r>
 800c4a0:	b160      	cbz	r0, 800c4bc <_Balloc+0x64>
 800c4a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4a6:	e00e      	b.n	800c4c6 <_Balloc+0x6e>
 800c4a8:	2221      	movs	r2, #33	; 0x21
 800c4aa:	2104      	movs	r1, #4
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f000 fb57 	bl	800cb60 <_calloc_r>
 800c4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b4:	60f0      	str	r0, [r6, #12]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1e4      	bne.n	800c486 <_Balloc+0x2e>
 800c4bc:	2000      	movs	r0, #0
 800c4be:	bd70      	pop	{r4, r5, r6, pc}
 800c4c0:	6802      	ldr	r2, [r0, #0]
 800c4c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4cc:	e7f7      	b.n	800c4be <_Balloc+0x66>
 800c4ce:	bf00      	nop
 800c4d0:	0800da95 	.word	0x0800da95
 800c4d4:	0800db18 	.word	0x0800db18

0800c4d8 <_Bfree>:
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4dc:	4605      	mov	r5, r0
 800c4de:	460c      	mov	r4, r1
 800c4e0:	b976      	cbnz	r6, 800c500 <_Bfree+0x28>
 800c4e2:	2010      	movs	r0, #16
 800c4e4:	f7fe fb8c 	bl	800ac00 <malloc>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	6268      	str	r0, [r5, #36]	; 0x24
 800c4ec:	b920      	cbnz	r0, 800c4f8 <_Bfree+0x20>
 800c4ee:	4b09      	ldr	r3, [pc, #36]	; (800c514 <_Bfree+0x3c>)
 800c4f0:	4809      	ldr	r0, [pc, #36]	; (800c518 <_Bfree+0x40>)
 800c4f2:	218a      	movs	r1, #138	; 0x8a
 800c4f4:	f000 fca6 	bl	800ce44 <__assert_func>
 800c4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4fc:	6006      	str	r6, [r0, #0]
 800c4fe:	60c6      	str	r6, [r0, #12]
 800c500:	b13c      	cbz	r4, 800c512 <_Bfree+0x3a>
 800c502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c504:	6862      	ldr	r2, [r4, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c50c:	6021      	str	r1, [r4, #0]
 800c50e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c512:	bd70      	pop	{r4, r5, r6, pc}
 800c514:	0800da95 	.word	0x0800da95
 800c518:	0800db18 	.word	0x0800db18

0800c51c <__multadd>:
 800c51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c520:	690d      	ldr	r5, [r1, #16]
 800c522:	4607      	mov	r7, r0
 800c524:	460c      	mov	r4, r1
 800c526:	461e      	mov	r6, r3
 800c528:	f101 0c14 	add.w	ip, r1, #20
 800c52c:	2000      	movs	r0, #0
 800c52e:	f8dc 3000 	ldr.w	r3, [ip]
 800c532:	b299      	uxth	r1, r3
 800c534:	fb02 6101 	mla	r1, r2, r1, r6
 800c538:	0c1e      	lsrs	r6, r3, #16
 800c53a:	0c0b      	lsrs	r3, r1, #16
 800c53c:	fb02 3306 	mla	r3, r2, r6, r3
 800c540:	b289      	uxth	r1, r1
 800c542:	3001      	adds	r0, #1
 800c544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c548:	4285      	cmp	r5, r0
 800c54a:	f84c 1b04 	str.w	r1, [ip], #4
 800c54e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c552:	dcec      	bgt.n	800c52e <__multadd+0x12>
 800c554:	b30e      	cbz	r6, 800c59a <__multadd+0x7e>
 800c556:	68a3      	ldr	r3, [r4, #8]
 800c558:	42ab      	cmp	r3, r5
 800c55a:	dc19      	bgt.n	800c590 <__multadd+0x74>
 800c55c:	6861      	ldr	r1, [r4, #4]
 800c55e:	4638      	mov	r0, r7
 800c560:	3101      	adds	r1, #1
 800c562:	f7ff ff79 	bl	800c458 <_Balloc>
 800c566:	4680      	mov	r8, r0
 800c568:	b928      	cbnz	r0, 800c576 <__multadd+0x5a>
 800c56a:	4602      	mov	r2, r0
 800c56c:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <__multadd+0x84>)
 800c56e:	480d      	ldr	r0, [pc, #52]	; (800c5a4 <__multadd+0x88>)
 800c570:	21b5      	movs	r1, #181	; 0xb5
 800c572:	f000 fc67 	bl	800ce44 <__assert_func>
 800c576:	6922      	ldr	r2, [r4, #16]
 800c578:	3202      	adds	r2, #2
 800c57a:	f104 010c 	add.w	r1, r4, #12
 800c57e:	0092      	lsls	r2, r2, #2
 800c580:	300c      	adds	r0, #12
 800c582:	f7ff ff4f 	bl	800c424 <memcpy>
 800c586:	4621      	mov	r1, r4
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff ffa5 	bl	800c4d8 <_Bfree>
 800c58e:	4644      	mov	r4, r8
 800c590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c594:	3501      	adds	r5, #1
 800c596:	615e      	str	r6, [r3, #20]
 800c598:	6125      	str	r5, [r4, #16]
 800c59a:	4620      	mov	r0, r4
 800c59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a0:	0800db07 	.word	0x0800db07
 800c5a4:	0800db18 	.word	0x0800db18

0800c5a8 <__hi0bits>:
 800c5a8:	0c03      	lsrs	r3, r0, #16
 800c5aa:	041b      	lsls	r3, r3, #16
 800c5ac:	b9d3      	cbnz	r3, 800c5e4 <__hi0bits+0x3c>
 800c5ae:	0400      	lsls	r0, r0, #16
 800c5b0:	2310      	movs	r3, #16
 800c5b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5b6:	bf04      	itt	eq
 800c5b8:	0200      	lsleq	r0, r0, #8
 800c5ba:	3308      	addeq	r3, #8
 800c5bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5c0:	bf04      	itt	eq
 800c5c2:	0100      	lsleq	r0, r0, #4
 800c5c4:	3304      	addeq	r3, #4
 800c5c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5ca:	bf04      	itt	eq
 800c5cc:	0080      	lsleq	r0, r0, #2
 800c5ce:	3302      	addeq	r3, #2
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	db05      	blt.n	800c5e0 <__hi0bits+0x38>
 800c5d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5d8:	f103 0301 	add.w	r3, r3, #1
 800c5dc:	bf08      	it	eq
 800c5de:	2320      	moveq	r3, #32
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	4770      	bx	lr
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	e7e4      	b.n	800c5b2 <__hi0bits+0xa>

0800c5e8 <__lo0bits>:
 800c5e8:	6803      	ldr	r3, [r0, #0]
 800c5ea:	f013 0207 	ands.w	r2, r3, #7
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	d00b      	beq.n	800c60a <__lo0bits+0x22>
 800c5f2:	07da      	lsls	r2, r3, #31
 800c5f4:	d423      	bmi.n	800c63e <__lo0bits+0x56>
 800c5f6:	0798      	lsls	r0, r3, #30
 800c5f8:	bf49      	itett	mi
 800c5fa:	085b      	lsrmi	r3, r3, #1
 800c5fc:	089b      	lsrpl	r3, r3, #2
 800c5fe:	2001      	movmi	r0, #1
 800c600:	600b      	strmi	r3, [r1, #0]
 800c602:	bf5c      	itt	pl
 800c604:	600b      	strpl	r3, [r1, #0]
 800c606:	2002      	movpl	r0, #2
 800c608:	4770      	bx	lr
 800c60a:	b298      	uxth	r0, r3
 800c60c:	b9a8      	cbnz	r0, 800c63a <__lo0bits+0x52>
 800c60e:	0c1b      	lsrs	r3, r3, #16
 800c610:	2010      	movs	r0, #16
 800c612:	b2da      	uxtb	r2, r3
 800c614:	b90a      	cbnz	r2, 800c61a <__lo0bits+0x32>
 800c616:	3008      	adds	r0, #8
 800c618:	0a1b      	lsrs	r3, r3, #8
 800c61a:	071a      	lsls	r2, r3, #28
 800c61c:	bf04      	itt	eq
 800c61e:	091b      	lsreq	r3, r3, #4
 800c620:	3004      	addeq	r0, #4
 800c622:	079a      	lsls	r2, r3, #30
 800c624:	bf04      	itt	eq
 800c626:	089b      	lsreq	r3, r3, #2
 800c628:	3002      	addeq	r0, #2
 800c62a:	07da      	lsls	r2, r3, #31
 800c62c:	d403      	bmi.n	800c636 <__lo0bits+0x4e>
 800c62e:	085b      	lsrs	r3, r3, #1
 800c630:	f100 0001 	add.w	r0, r0, #1
 800c634:	d005      	beq.n	800c642 <__lo0bits+0x5a>
 800c636:	600b      	str	r3, [r1, #0]
 800c638:	4770      	bx	lr
 800c63a:	4610      	mov	r0, r2
 800c63c:	e7e9      	b.n	800c612 <__lo0bits+0x2a>
 800c63e:	2000      	movs	r0, #0
 800c640:	4770      	bx	lr
 800c642:	2020      	movs	r0, #32
 800c644:	4770      	bx	lr
	...

0800c648 <__i2b>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	460c      	mov	r4, r1
 800c64c:	2101      	movs	r1, #1
 800c64e:	f7ff ff03 	bl	800c458 <_Balloc>
 800c652:	4602      	mov	r2, r0
 800c654:	b928      	cbnz	r0, 800c662 <__i2b+0x1a>
 800c656:	4b05      	ldr	r3, [pc, #20]	; (800c66c <__i2b+0x24>)
 800c658:	4805      	ldr	r0, [pc, #20]	; (800c670 <__i2b+0x28>)
 800c65a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c65e:	f000 fbf1 	bl	800ce44 <__assert_func>
 800c662:	2301      	movs	r3, #1
 800c664:	6144      	str	r4, [r0, #20]
 800c666:	6103      	str	r3, [r0, #16]
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	bf00      	nop
 800c66c:	0800db07 	.word	0x0800db07
 800c670:	0800db18 	.word	0x0800db18

0800c674 <__multiply>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4691      	mov	r9, r2
 800c67a:	690a      	ldr	r2, [r1, #16]
 800c67c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c680:	429a      	cmp	r2, r3
 800c682:	bfb8      	it	lt
 800c684:	460b      	movlt	r3, r1
 800c686:	460c      	mov	r4, r1
 800c688:	bfbc      	itt	lt
 800c68a:	464c      	movlt	r4, r9
 800c68c:	4699      	movlt	r9, r3
 800c68e:	6927      	ldr	r7, [r4, #16]
 800c690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c694:	68a3      	ldr	r3, [r4, #8]
 800c696:	6861      	ldr	r1, [r4, #4]
 800c698:	eb07 060a 	add.w	r6, r7, sl
 800c69c:	42b3      	cmp	r3, r6
 800c69e:	b085      	sub	sp, #20
 800c6a0:	bfb8      	it	lt
 800c6a2:	3101      	addlt	r1, #1
 800c6a4:	f7ff fed8 	bl	800c458 <_Balloc>
 800c6a8:	b930      	cbnz	r0, 800c6b8 <__multiply+0x44>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	4b44      	ldr	r3, [pc, #272]	; (800c7c0 <__multiply+0x14c>)
 800c6ae:	4845      	ldr	r0, [pc, #276]	; (800c7c4 <__multiply+0x150>)
 800c6b0:	f240 115d 	movw	r1, #349	; 0x15d
 800c6b4:	f000 fbc6 	bl	800ce44 <__assert_func>
 800c6b8:	f100 0514 	add.w	r5, r0, #20
 800c6bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6c0:	462b      	mov	r3, r5
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4543      	cmp	r3, r8
 800c6c6:	d321      	bcc.n	800c70c <__multiply+0x98>
 800c6c8:	f104 0314 	add.w	r3, r4, #20
 800c6cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6d0:	f109 0314 	add.w	r3, r9, #20
 800c6d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6d8:	9202      	str	r2, [sp, #8]
 800c6da:	1b3a      	subs	r2, r7, r4
 800c6dc:	3a15      	subs	r2, #21
 800c6de:	f022 0203 	bic.w	r2, r2, #3
 800c6e2:	3204      	adds	r2, #4
 800c6e4:	f104 0115 	add.w	r1, r4, #21
 800c6e8:	428f      	cmp	r7, r1
 800c6ea:	bf38      	it	cc
 800c6ec:	2204      	movcc	r2, #4
 800c6ee:	9201      	str	r2, [sp, #4]
 800c6f0:	9a02      	ldr	r2, [sp, #8]
 800c6f2:	9303      	str	r3, [sp, #12]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d80c      	bhi.n	800c712 <__multiply+0x9e>
 800c6f8:	2e00      	cmp	r6, #0
 800c6fa:	dd03      	ble.n	800c704 <__multiply+0x90>
 800c6fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c700:	2b00      	cmp	r3, #0
 800c702:	d05a      	beq.n	800c7ba <__multiply+0x146>
 800c704:	6106      	str	r6, [r0, #16]
 800c706:	b005      	add	sp, #20
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	f843 2b04 	str.w	r2, [r3], #4
 800c710:	e7d8      	b.n	800c6c4 <__multiply+0x50>
 800c712:	f8b3 a000 	ldrh.w	sl, [r3]
 800c716:	f1ba 0f00 	cmp.w	sl, #0
 800c71a:	d024      	beq.n	800c766 <__multiply+0xf2>
 800c71c:	f104 0e14 	add.w	lr, r4, #20
 800c720:	46a9      	mov	r9, r5
 800c722:	f04f 0c00 	mov.w	ip, #0
 800c726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c72a:	f8d9 1000 	ldr.w	r1, [r9]
 800c72e:	fa1f fb82 	uxth.w	fp, r2
 800c732:	b289      	uxth	r1, r1
 800c734:	fb0a 110b 	mla	r1, sl, fp, r1
 800c738:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c73c:	f8d9 2000 	ldr.w	r2, [r9]
 800c740:	4461      	add	r1, ip
 800c742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c746:	fb0a c20b 	mla	r2, sl, fp, ip
 800c74a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c74e:	b289      	uxth	r1, r1
 800c750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c754:	4577      	cmp	r7, lr
 800c756:	f849 1b04 	str.w	r1, [r9], #4
 800c75a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c75e:	d8e2      	bhi.n	800c726 <__multiply+0xb2>
 800c760:	9a01      	ldr	r2, [sp, #4]
 800c762:	f845 c002 	str.w	ip, [r5, r2]
 800c766:	9a03      	ldr	r2, [sp, #12]
 800c768:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c76c:	3304      	adds	r3, #4
 800c76e:	f1b9 0f00 	cmp.w	r9, #0
 800c772:	d020      	beq.n	800c7b6 <__multiply+0x142>
 800c774:	6829      	ldr	r1, [r5, #0]
 800c776:	f104 0c14 	add.w	ip, r4, #20
 800c77a:	46ae      	mov	lr, r5
 800c77c:	f04f 0a00 	mov.w	sl, #0
 800c780:	f8bc b000 	ldrh.w	fp, [ip]
 800c784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c788:	fb09 220b 	mla	r2, r9, fp, r2
 800c78c:	4492      	add	sl, r2
 800c78e:	b289      	uxth	r1, r1
 800c790:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c794:	f84e 1b04 	str.w	r1, [lr], #4
 800c798:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c79c:	f8be 1000 	ldrh.w	r1, [lr]
 800c7a0:	0c12      	lsrs	r2, r2, #16
 800c7a2:	fb09 1102 	mla	r1, r9, r2, r1
 800c7a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c7aa:	4567      	cmp	r7, ip
 800c7ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7b0:	d8e6      	bhi.n	800c780 <__multiply+0x10c>
 800c7b2:	9a01      	ldr	r2, [sp, #4]
 800c7b4:	50a9      	str	r1, [r5, r2]
 800c7b6:	3504      	adds	r5, #4
 800c7b8:	e79a      	b.n	800c6f0 <__multiply+0x7c>
 800c7ba:	3e01      	subs	r6, #1
 800c7bc:	e79c      	b.n	800c6f8 <__multiply+0x84>
 800c7be:	bf00      	nop
 800c7c0:	0800db07 	.word	0x0800db07
 800c7c4:	0800db18 	.word	0x0800db18

0800c7c8 <__pow5mult>:
 800c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7cc:	4615      	mov	r5, r2
 800c7ce:	f012 0203 	ands.w	r2, r2, #3
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	460f      	mov	r7, r1
 800c7d6:	d007      	beq.n	800c7e8 <__pow5mult+0x20>
 800c7d8:	4c25      	ldr	r4, [pc, #148]	; (800c870 <__pow5mult+0xa8>)
 800c7da:	3a01      	subs	r2, #1
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7e2:	f7ff fe9b 	bl	800c51c <__multadd>
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	10ad      	asrs	r5, r5, #2
 800c7ea:	d03d      	beq.n	800c868 <__pow5mult+0xa0>
 800c7ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7ee:	b97c      	cbnz	r4, 800c810 <__pow5mult+0x48>
 800c7f0:	2010      	movs	r0, #16
 800c7f2:	f7fe fa05 	bl	800ac00 <malloc>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	6270      	str	r0, [r6, #36]	; 0x24
 800c7fa:	b928      	cbnz	r0, 800c808 <__pow5mult+0x40>
 800c7fc:	4b1d      	ldr	r3, [pc, #116]	; (800c874 <__pow5mult+0xac>)
 800c7fe:	481e      	ldr	r0, [pc, #120]	; (800c878 <__pow5mult+0xb0>)
 800c800:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c804:	f000 fb1e 	bl	800ce44 <__assert_func>
 800c808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c80c:	6004      	str	r4, [r0, #0]
 800c80e:	60c4      	str	r4, [r0, #12]
 800c810:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c818:	b94c      	cbnz	r4, 800c82e <__pow5mult+0x66>
 800c81a:	f240 2171 	movw	r1, #625	; 0x271
 800c81e:	4630      	mov	r0, r6
 800c820:	f7ff ff12 	bl	800c648 <__i2b>
 800c824:	2300      	movs	r3, #0
 800c826:	f8c8 0008 	str.w	r0, [r8, #8]
 800c82a:	4604      	mov	r4, r0
 800c82c:	6003      	str	r3, [r0, #0]
 800c82e:	f04f 0900 	mov.w	r9, #0
 800c832:	07eb      	lsls	r3, r5, #31
 800c834:	d50a      	bpl.n	800c84c <__pow5mult+0x84>
 800c836:	4639      	mov	r1, r7
 800c838:	4622      	mov	r2, r4
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7ff ff1a 	bl	800c674 <__multiply>
 800c840:	4639      	mov	r1, r7
 800c842:	4680      	mov	r8, r0
 800c844:	4630      	mov	r0, r6
 800c846:	f7ff fe47 	bl	800c4d8 <_Bfree>
 800c84a:	4647      	mov	r7, r8
 800c84c:	106d      	asrs	r5, r5, #1
 800c84e:	d00b      	beq.n	800c868 <__pow5mult+0xa0>
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	b938      	cbnz	r0, 800c864 <__pow5mult+0x9c>
 800c854:	4622      	mov	r2, r4
 800c856:	4621      	mov	r1, r4
 800c858:	4630      	mov	r0, r6
 800c85a:	f7ff ff0b 	bl	800c674 <__multiply>
 800c85e:	6020      	str	r0, [r4, #0]
 800c860:	f8c0 9000 	str.w	r9, [r0]
 800c864:	4604      	mov	r4, r0
 800c866:	e7e4      	b.n	800c832 <__pow5mult+0x6a>
 800c868:	4638      	mov	r0, r7
 800c86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86e:	bf00      	nop
 800c870:	0800dc68 	.word	0x0800dc68
 800c874:	0800da95 	.word	0x0800da95
 800c878:	0800db18 	.word	0x0800db18

0800c87c <__lshift>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	460c      	mov	r4, r1
 800c882:	6849      	ldr	r1, [r1, #4]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c88a:	68a3      	ldr	r3, [r4, #8]
 800c88c:	4607      	mov	r7, r0
 800c88e:	4691      	mov	r9, r2
 800c890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c894:	f108 0601 	add.w	r6, r8, #1
 800c898:	42b3      	cmp	r3, r6
 800c89a:	db0b      	blt.n	800c8b4 <__lshift+0x38>
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7ff fddb 	bl	800c458 <_Balloc>
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	b948      	cbnz	r0, 800c8ba <__lshift+0x3e>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	4b2a      	ldr	r3, [pc, #168]	; (800c954 <__lshift+0xd8>)
 800c8aa:	482b      	ldr	r0, [pc, #172]	; (800c958 <__lshift+0xdc>)
 800c8ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8b0:	f000 fac8 	bl	800ce44 <__assert_func>
 800c8b4:	3101      	adds	r1, #1
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	e7ee      	b.n	800c898 <__lshift+0x1c>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f100 0114 	add.w	r1, r0, #20
 800c8c0:	f100 0210 	add.w	r2, r0, #16
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	4553      	cmp	r3, sl
 800c8c8:	db37      	blt.n	800c93a <__lshift+0xbe>
 800c8ca:	6920      	ldr	r0, [r4, #16]
 800c8cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8d0:	f104 0314 	add.w	r3, r4, #20
 800c8d4:	f019 091f 	ands.w	r9, r9, #31
 800c8d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c8e0:	d02f      	beq.n	800c942 <__lshift+0xc6>
 800c8e2:	f1c9 0e20 	rsb	lr, r9, #32
 800c8e6:	468a      	mov	sl, r1
 800c8e8:	f04f 0c00 	mov.w	ip, #0
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	fa02 f209 	lsl.w	r2, r2, r9
 800c8f2:	ea42 020c 	orr.w	r2, r2, ip
 800c8f6:	f84a 2b04 	str.w	r2, [sl], #4
 800c8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8fe:	4298      	cmp	r0, r3
 800c900:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c904:	d8f2      	bhi.n	800c8ec <__lshift+0x70>
 800c906:	1b03      	subs	r3, r0, r4
 800c908:	3b15      	subs	r3, #21
 800c90a:	f023 0303 	bic.w	r3, r3, #3
 800c90e:	3304      	adds	r3, #4
 800c910:	f104 0215 	add.w	r2, r4, #21
 800c914:	4290      	cmp	r0, r2
 800c916:	bf38      	it	cc
 800c918:	2304      	movcc	r3, #4
 800c91a:	f841 c003 	str.w	ip, [r1, r3]
 800c91e:	f1bc 0f00 	cmp.w	ip, #0
 800c922:	d001      	beq.n	800c928 <__lshift+0xac>
 800c924:	f108 0602 	add.w	r6, r8, #2
 800c928:	3e01      	subs	r6, #1
 800c92a:	4638      	mov	r0, r7
 800c92c:	612e      	str	r6, [r5, #16]
 800c92e:	4621      	mov	r1, r4
 800c930:	f7ff fdd2 	bl	800c4d8 <_Bfree>
 800c934:	4628      	mov	r0, r5
 800c936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c93e:	3301      	adds	r3, #1
 800c940:	e7c1      	b.n	800c8c6 <__lshift+0x4a>
 800c942:	3904      	subs	r1, #4
 800c944:	f853 2b04 	ldr.w	r2, [r3], #4
 800c948:	f841 2f04 	str.w	r2, [r1, #4]!
 800c94c:	4298      	cmp	r0, r3
 800c94e:	d8f9      	bhi.n	800c944 <__lshift+0xc8>
 800c950:	e7ea      	b.n	800c928 <__lshift+0xac>
 800c952:	bf00      	nop
 800c954:	0800db07 	.word	0x0800db07
 800c958:	0800db18 	.word	0x0800db18

0800c95c <__mcmp>:
 800c95c:	b530      	push	{r4, r5, lr}
 800c95e:	6902      	ldr	r2, [r0, #16]
 800c960:	690c      	ldr	r4, [r1, #16]
 800c962:	1b12      	subs	r2, r2, r4
 800c964:	d10e      	bne.n	800c984 <__mcmp+0x28>
 800c966:	f100 0314 	add.w	r3, r0, #20
 800c96a:	3114      	adds	r1, #20
 800c96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c97c:	42a5      	cmp	r5, r4
 800c97e:	d003      	beq.n	800c988 <__mcmp+0x2c>
 800c980:	d305      	bcc.n	800c98e <__mcmp+0x32>
 800c982:	2201      	movs	r2, #1
 800c984:	4610      	mov	r0, r2
 800c986:	bd30      	pop	{r4, r5, pc}
 800c988:	4283      	cmp	r3, r0
 800c98a:	d3f3      	bcc.n	800c974 <__mcmp+0x18>
 800c98c:	e7fa      	b.n	800c984 <__mcmp+0x28>
 800c98e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c992:	e7f7      	b.n	800c984 <__mcmp+0x28>

0800c994 <__mdiff>:
 800c994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	460c      	mov	r4, r1
 800c99a:	4606      	mov	r6, r0
 800c99c:	4611      	mov	r1, r2
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4690      	mov	r8, r2
 800c9a2:	f7ff ffdb 	bl	800c95c <__mcmp>
 800c9a6:	1e05      	subs	r5, r0, #0
 800c9a8:	d110      	bne.n	800c9cc <__mdiff+0x38>
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff fd53 	bl	800c458 <_Balloc>
 800c9b2:	b930      	cbnz	r0, 800c9c2 <__mdiff+0x2e>
 800c9b4:	4b3a      	ldr	r3, [pc, #232]	; (800caa0 <__mdiff+0x10c>)
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	f240 2132 	movw	r1, #562	; 0x232
 800c9bc:	4839      	ldr	r0, [pc, #228]	; (800caa4 <__mdiff+0x110>)
 800c9be:	f000 fa41 	bl	800ce44 <__assert_func>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9cc:	bfa4      	itt	ge
 800c9ce:	4643      	movge	r3, r8
 800c9d0:	46a0      	movge	r8, r4
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9d8:	bfa6      	itte	ge
 800c9da:	461c      	movge	r4, r3
 800c9dc:	2500      	movge	r5, #0
 800c9de:	2501      	movlt	r5, #1
 800c9e0:	f7ff fd3a 	bl	800c458 <_Balloc>
 800c9e4:	b920      	cbnz	r0, 800c9f0 <__mdiff+0x5c>
 800c9e6:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <__mdiff+0x10c>)
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9ee:	e7e5      	b.n	800c9bc <__mdiff+0x28>
 800c9f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9f4:	6926      	ldr	r6, [r4, #16]
 800c9f6:	60c5      	str	r5, [r0, #12]
 800c9f8:	f104 0914 	add.w	r9, r4, #20
 800c9fc:	f108 0514 	add.w	r5, r8, #20
 800ca00:	f100 0e14 	add.w	lr, r0, #20
 800ca04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca0c:	f108 0210 	add.w	r2, r8, #16
 800ca10:	46f2      	mov	sl, lr
 800ca12:	2100      	movs	r1, #0
 800ca14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca1c:	fa1f f883 	uxth.w	r8, r3
 800ca20:	fa11 f18b 	uxtah	r1, r1, fp
 800ca24:	0c1b      	lsrs	r3, r3, #16
 800ca26:	eba1 0808 	sub.w	r8, r1, r8
 800ca2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca32:	fa1f f888 	uxth.w	r8, r8
 800ca36:	1419      	asrs	r1, r3, #16
 800ca38:	454e      	cmp	r6, r9
 800ca3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca3e:	f84a 3b04 	str.w	r3, [sl], #4
 800ca42:	d8e7      	bhi.n	800ca14 <__mdiff+0x80>
 800ca44:	1b33      	subs	r3, r6, r4
 800ca46:	3b15      	subs	r3, #21
 800ca48:	f023 0303 	bic.w	r3, r3, #3
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	3415      	adds	r4, #21
 800ca50:	42a6      	cmp	r6, r4
 800ca52:	bf38      	it	cc
 800ca54:	2304      	movcc	r3, #4
 800ca56:	441d      	add	r5, r3
 800ca58:	4473      	add	r3, lr
 800ca5a:	469e      	mov	lr, r3
 800ca5c:	462e      	mov	r6, r5
 800ca5e:	4566      	cmp	r6, ip
 800ca60:	d30e      	bcc.n	800ca80 <__mdiff+0xec>
 800ca62:	f10c 0203 	add.w	r2, ip, #3
 800ca66:	1b52      	subs	r2, r2, r5
 800ca68:	f022 0203 	bic.w	r2, r2, #3
 800ca6c:	3d03      	subs	r5, #3
 800ca6e:	45ac      	cmp	ip, r5
 800ca70:	bf38      	it	cc
 800ca72:	2200      	movcc	r2, #0
 800ca74:	441a      	add	r2, r3
 800ca76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca7a:	b17b      	cbz	r3, 800ca9c <__mdiff+0x108>
 800ca7c:	6107      	str	r7, [r0, #16]
 800ca7e:	e7a3      	b.n	800c9c8 <__mdiff+0x34>
 800ca80:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca84:	fa11 f288 	uxtah	r2, r1, r8
 800ca88:	1414      	asrs	r4, r2, #16
 800ca8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca8e:	b292      	uxth	r2, r2
 800ca90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca94:	f84e 2b04 	str.w	r2, [lr], #4
 800ca98:	1421      	asrs	r1, r4, #16
 800ca9a:	e7e0      	b.n	800ca5e <__mdiff+0xca>
 800ca9c:	3f01      	subs	r7, #1
 800ca9e:	e7ea      	b.n	800ca76 <__mdiff+0xe2>
 800caa0:	0800db07 	.word	0x0800db07
 800caa4:	0800db18 	.word	0x0800db18

0800caa8 <__d2b>:
 800caa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caac:	4689      	mov	r9, r1
 800caae:	2101      	movs	r1, #1
 800cab0:	ec57 6b10 	vmov	r6, r7, d0
 800cab4:	4690      	mov	r8, r2
 800cab6:	f7ff fccf 	bl	800c458 <_Balloc>
 800caba:	4604      	mov	r4, r0
 800cabc:	b930      	cbnz	r0, 800cacc <__d2b+0x24>
 800cabe:	4602      	mov	r2, r0
 800cac0:	4b25      	ldr	r3, [pc, #148]	; (800cb58 <__d2b+0xb0>)
 800cac2:	4826      	ldr	r0, [pc, #152]	; (800cb5c <__d2b+0xb4>)
 800cac4:	f240 310a 	movw	r1, #778	; 0x30a
 800cac8:	f000 f9bc 	bl	800ce44 <__assert_func>
 800cacc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cad4:	bb35      	cbnz	r5, 800cb24 <__d2b+0x7c>
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	d028      	beq.n	800cb2e <__d2b+0x86>
 800cadc:	4668      	mov	r0, sp
 800cade:	9600      	str	r6, [sp, #0]
 800cae0:	f7ff fd82 	bl	800c5e8 <__lo0bits>
 800cae4:	9900      	ldr	r1, [sp, #0]
 800cae6:	b300      	cbz	r0, 800cb2a <__d2b+0x82>
 800cae8:	9a01      	ldr	r2, [sp, #4]
 800caea:	f1c0 0320 	rsb	r3, r0, #32
 800caee:	fa02 f303 	lsl.w	r3, r2, r3
 800caf2:	430b      	orrs	r3, r1
 800caf4:	40c2      	lsrs	r2, r0
 800caf6:	6163      	str	r3, [r4, #20]
 800caf8:	9201      	str	r2, [sp, #4]
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	61a3      	str	r3, [r4, #24]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	bf14      	ite	ne
 800cb02:	2202      	movne	r2, #2
 800cb04:	2201      	moveq	r2, #1
 800cb06:	6122      	str	r2, [r4, #16]
 800cb08:	b1d5      	cbz	r5, 800cb40 <__d2b+0x98>
 800cb0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb0e:	4405      	add	r5, r0
 800cb10:	f8c9 5000 	str.w	r5, [r9]
 800cb14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb18:	f8c8 0000 	str.w	r0, [r8]
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	b003      	add	sp, #12
 800cb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb28:	e7d5      	b.n	800cad6 <__d2b+0x2e>
 800cb2a:	6161      	str	r1, [r4, #20]
 800cb2c:	e7e5      	b.n	800cafa <__d2b+0x52>
 800cb2e:	a801      	add	r0, sp, #4
 800cb30:	f7ff fd5a 	bl	800c5e8 <__lo0bits>
 800cb34:	9b01      	ldr	r3, [sp, #4]
 800cb36:	6163      	str	r3, [r4, #20]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	6122      	str	r2, [r4, #16]
 800cb3c:	3020      	adds	r0, #32
 800cb3e:	e7e3      	b.n	800cb08 <__d2b+0x60>
 800cb40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb48:	f8c9 0000 	str.w	r0, [r9]
 800cb4c:	6918      	ldr	r0, [r3, #16]
 800cb4e:	f7ff fd2b 	bl	800c5a8 <__hi0bits>
 800cb52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb56:	e7df      	b.n	800cb18 <__d2b+0x70>
 800cb58:	0800db07 	.word	0x0800db07
 800cb5c:	0800db18 	.word	0x0800db18

0800cb60 <_calloc_r>:
 800cb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb62:	fba1 2402 	umull	r2, r4, r1, r2
 800cb66:	b94c      	cbnz	r4, 800cb7c <_calloc_r+0x1c>
 800cb68:	4611      	mov	r1, r2
 800cb6a:	9201      	str	r2, [sp, #4]
 800cb6c:	f7fe f8cc 	bl	800ad08 <_malloc_r>
 800cb70:	9a01      	ldr	r2, [sp, #4]
 800cb72:	4605      	mov	r5, r0
 800cb74:	b930      	cbnz	r0, 800cb84 <_calloc_r+0x24>
 800cb76:	4628      	mov	r0, r5
 800cb78:	b003      	add	sp, #12
 800cb7a:	bd30      	pop	{r4, r5, pc}
 800cb7c:	220c      	movs	r2, #12
 800cb7e:	6002      	str	r2, [r0, #0]
 800cb80:	2500      	movs	r5, #0
 800cb82:	e7f8      	b.n	800cb76 <_calloc_r+0x16>
 800cb84:	4621      	mov	r1, r4
 800cb86:	f7fe f84b 	bl	800ac20 <memset>
 800cb8a:	e7f4      	b.n	800cb76 <_calloc_r+0x16>

0800cb8c <__ssputs_r>:
 800cb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb90:	688e      	ldr	r6, [r1, #8]
 800cb92:	429e      	cmp	r6, r3
 800cb94:	4682      	mov	sl, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	4690      	mov	r8, r2
 800cb9a:	461f      	mov	r7, r3
 800cb9c:	d838      	bhi.n	800cc10 <__ssputs_r+0x84>
 800cb9e:	898a      	ldrh	r2, [r1, #12]
 800cba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cba4:	d032      	beq.n	800cc0c <__ssputs_r+0x80>
 800cba6:	6825      	ldr	r5, [r4, #0]
 800cba8:	6909      	ldr	r1, [r1, #16]
 800cbaa:	eba5 0901 	sub.w	r9, r5, r1
 800cbae:	6965      	ldr	r5, [r4, #20]
 800cbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbb8:	3301      	adds	r3, #1
 800cbba:	444b      	add	r3, r9
 800cbbc:	106d      	asrs	r5, r5, #1
 800cbbe:	429d      	cmp	r5, r3
 800cbc0:	bf38      	it	cc
 800cbc2:	461d      	movcc	r5, r3
 800cbc4:	0553      	lsls	r3, r2, #21
 800cbc6:	d531      	bpl.n	800cc2c <__ssputs_r+0xa0>
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7fe f89d 	bl	800ad08 <_malloc_r>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	b950      	cbnz	r0, 800cbe8 <__ssputs_r+0x5c>
 800cbd2:	230c      	movs	r3, #12
 800cbd4:	f8ca 3000 	str.w	r3, [sl]
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbde:	81a3      	strh	r3, [r4, #12]
 800cbe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe8:	6921      	ldr	r1, [r4, #16]
 800cbea:	464a      	mov	r2, r9
 800cbec:	f7ff fc1a 	bl	800c424 <memcpy>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	6126      	str	r6, [r4, #16]
 800cbfe:	6165      	str	r5, [r4, #20]
 800cc00:	444e      	add	r6, r9
 800cc02:	eba5 0509 	sub.w	r5, r5, r9
 800cc06:	6026      	str	r6, [r4, #0]
 800cc08:	60a5      	str	r5, [r4, #8]
 800cc0a:	463e      	mov	r6, r7
 800cc0c:	42be      	cmp	r6, r7
 800cc0e:	d900      	bls.n	800cc12 <__ssputs_r+0x86>
 800cc10:	463e      	mov	r6, r7
 800cc12:	6820      	ldr	r0, [r4, #0]
 800cc14:	4632      	mov	r2, r6
 800cc16:	4641      	mov	r1, r8
 800cc18:	f000 f959 	bl	800cece <memmove>
 800cc1c:	68a3      	ldr	r3, [r4, #8]
 800cc1e:	1b9b      	subs	r3, r3, r6
 800cc20:	60a3      	str	r3, [r4, #8]
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	4433      	add	r3, r6
 800cc26:	6023      	str	r3, [r4, #0]
 800cc28:	2000      	movs	r0, #0
 800cc2a:	e7db      	b.n	800cbe4 <__ssputs_r+0x58>
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	f000 f968 	bl	800cf02 <_realloc_r>
 800cc32:	4606      	mov	r6, r0
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1e1      	bne.n	800cbfc <__ssputs_r+0x70>
 800cc38:	6921      	ldr	r1, [r4, #16]
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	f7fd fff8 	bl	800ac30 <_free_r>
 800cc40:	e7c7      	b.n	800cbd2 <__ssputs_r+0x46>
	...

0800cc44 <_svfiprintf_r>:
 800cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc48:	4698      	mov	r8, r3
 800cc4a:	898b      	ldrh	r3, [r1, #12]
 800cc4c:	061b      	lsls	r3, r3, #24
 800cc4e:	b09d      	sub	sp, #116	; 0x74
 800cc50:	4607      	mov	r7, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	4614      	mov	r4, r2
 800cc56:	d50e      	bpl.n	800cc76 <_svfiprintf_r+0x32>
 800cc58:	690b      	ldr	r3, [r1, #16]
 800cc5a:	b963      	cbnz	r3, 800cc76 <_svfiprintf_r+0x32>
 800cc5c:	2140      	movs	r1, #64	; 0x40
 800cc5e:	f7fe f853 	bl	800ad08 <_malloc_r>
 800cc62:	6028      	str	r0, [r5, #0]
 800cc64:	6128      	str	r0, [r5, #16]
 800cc66:	b920      	cbnz	r0, 800cc72 <_svfiprintf_r+0x2e>
 800cc68:	230c      	movs	r3, #12
 800cc6a:	603b      	str	r3, [r7, #0]
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc70:	e0d1      	b.n	800ce16 <_svfiprintf_r+0x1d2>
 800cc72:	2340      	movs	r3, #64	; 0x40
 800cc74:	616b      	str	r3, [r5, #20]
 800cc76:	2300      	movs	r3, #0
 800cc78:	9309      	str	r3, [sp, #36]	; 0x24
 800cc7a:	2320      	movs	r3, #32
 800cc7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc80:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc84:	2330      	movs	r3, #48	; 0x30
 800cc86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce30 <_svfiprintf_r+0x1ec>
 800cc8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc8e:	f04f 0901 	mov.w	r9, #1
 800cc92:	4623      	mov	r3, r4
 800cc94:	469a      	mov	sl, r3
 800cc96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc9a:	b10a      	cbz	r2, 800cca0 <_svfiprintf_r+0x5c>
 800cc9c:	2a25      	cmp	r2, #37	; 0x25
 800cc9e:	d1f9      	bne.n	800cc94 <_svfiprintf_r+0x50>
 800cca0:	ebba 0b04 	subs.w	fp, sl, r4
 800cca4:	d00b      	beq.n	800ccbe <_svfiprintf_r+0x7a>
 800cca6:	465b      	mov	r3, fp
 800cca8:	4622      	mov	r2, r4
 800ccaa:	4629      	mov	r1, r5
 800ccac:	4638      	mov	r0, r7
 800ccae:	f7ff ff6d 	bl	800cb8c <__ssputs_r>
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	f000 80aa 	beq.w	800ce0c <_svfiprintf_r+0x1c8>
 800ccb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccba:	445a      	add	r2, fp
 800ccbc:	9209      	str	r2, [sp, #36]	; 0x24
 800ccbe:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f000 80a2 	beq.w	800ce0c <_svfiprintf_r+0x1c8>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccd2:	f10a 0a01 	add.w	sl, sl, #1
 800ccd6:	9304      	str	r3, [sp, #16]
 800ccd8:	9307      	str	r3, [sp, #28]
 800ccda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccde:	931a      	str	r3, [sp, #104]	; 0x68
 800cce0:	4654      	mov	r4, sl
 800cce2:	2205      	movs	r2, #5
 800cce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce8:	4851      	ldr	r0, [pc, #324]	; (800ce30 <_svfiprintf_r+0x1ec>)
 800ccea:	f7f3 fa81 	bl	80001f0 <memchr>
 800ccee:	9a04      	ldr	r2, [sp, #16]
 800ccf0:	b9d8      	cbnz	r0, 800cd2a <_svfiprintf_r+0xe6>
 800ccf2:	06d0      	lsls	r0, r2, #27
 800ccf4:	bf44      	itt	mi
 800ccf6:	2320      	movmi	r3, #32
 800ccf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccfc:	0711      	lsls	r1, r2, #28
 800ccfe:	bf44      	itt	mi
 800cd00:	232b      	movmi	r3, #43	; 0x2b
 800cd02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd06:	f89a 3000 	ldrb.w	r3, [sl]
 800cd0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd0c:	d015      	beq.n	800cd3a <_svfiprintf_r+0xf6>
 800cd0e:	9a07      	ldr	r2, [sp, #28]
 800cd10:	4654      	mov	r4, sl
 800cd12:	2000      	movs	r0, #0
 800cd14:	f04f 0c0a 	mov.w	ip, #10
 800cd18:	4621      	mov	r1, r4
 800cd1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd1e:	3b30      	subs	r3, #48	; 0x30
 800cd20:	2b09      	cmp	r3, #9
 800cd22:	d94e      	bls.n	800cdc2 <_svfiprintf_r+0x17e>
 800cd24:	b1b0      	cbz	r0, 800cd54 <_svfiprintf_r+0x110>
 800cd26:	9207      	str	r2, [sp, #28]
 800cd28:	e014      	b.n	800cd54 <_svfiprintf_r+0x110>
 800cd2a:	eba0 0308 	sub.w	r3, r0, r8
 800cd2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cd32:	4313      	orrs	r3, r2
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	46a2      	mov	sl, r4
 800cd38:	e7d2      	b.n	800cce0 <_svfiprintf_r+0x9c>
 800cd3a:	9b03      	ldr	r3, [sp, #12]
 800cd3c:	1d19      	adds	r1, r3, #4
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	9103      	str	r1, [sp, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	bfbb      	ittet	lt
 800cd46:	425b      	neglt	r3, r3
 800cd48:	f042 0202 	orrlt.w	r2, r2, #2
 800cd4c:	9307      	strge	r3, [sp, #28]
 800cd4e:	9307      	strlt	r3, [sp, #28]
 800cd50:	bfb8      	it	lt
 800cd52:	9204      	strlt	r2, [sp, #16]
 800cd54:	7823      	ldrb	r3, [r4, #0]
 800cd56:	2b2e      	cmp	r3, #46	; 0x2e
 800cd58:	d10c      	bne.n	800cd74 <_svfiprintf_r+0x130>
 800cd5a:	7863      	ldrb	r3, [r4, #1]
 800cd5c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd5e:	d135      	bne.n	800cdcc <_svfiprintf_r+0x188>
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	1d1a      	adds	r2, r3, #4
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	9203      	str	r2, [sp, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	bfb8      	it	lt
 800cd6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd70:	3402      	adds	r4, #2
 800cd72:	9305      	str	r3, [sp, #20]
 800cd74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce40 <_svfiprintf_r+0x1fc>
 800cd78:	7821      	ldrb	r1, [r4, #0]
 800cd7a:	2203      	movs	r2, #3
 800cd7c:	4650      	mov	r0, sl
 800cd7e:	f7f3 fa37 	bl	80001f0 <memchr>
 800cd82:	b140      	cbz	r0, 800cd96 <_svfiprintf_r+0x152>
 800cd84:	2340      	movs	r3, #64	; 0x40
 800cd86:	eba0 000a 	sub.w	r0, r0, sl
 800cd8a:	fa03 f000 	lsl.w	r0, r3, r0
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	4303      	orrs	r3, r0
 800cd92:	3401      	adds	r4, #1
 800cd94:	9304      	str	r3, [sp, #16]
 800cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9a:	4826      	ldr	r0, [pc, #152]	; (800ce34 <_svfiprintf_r+0x1f0>)
 800cd9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cda0:	2206      	movs	r2, #6
 800cda2:	f7f3 fa25 	bl	80001f0 <memchr>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d038      	beq.n	800ce1c <_svfiprintf_r+0x1d8>
 800cdaa:	4b23      	ldr	r3, [pc, #140]	; (800ce38 <_svfiprintf_r+0x1f4>)
 800cdac:	bb1b      	cbnz	r3, 800cdf6 <_svfiprintf_r+0x1b2>
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	3307      	adds	r3, #7
 800cdb2:	f023 0307 	bic.w	r3, r3, #7
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	9303      	str	r3, [sp, #12]
 800cdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdbc:	4433      	add	r3, r6
 800cdbe:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc0:	e767      	b.n	800cc92 <_svfiprintf_r+0x4e>
 800cdc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	2001      	movs	r0, #1
 800cdca:	e7a5      	b.n	800cd18 <_svfiprintf_r+0xd4>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	3401      	adds	r4, #1
 800cdd0:	9305      	str	r3, [sp, #20]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	f04f 0c0a 	mov.w	ip, #10
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdde:	3a30      	subs	r2, #48	; 0x30
 800cde0:	2a09      	cmp	r2, #9
 800cde2:	d903      	bls.n	800cdec <_svfiprintf_r+0x1a8>
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0c5      	beq.n	800cd74 <_svfiprintf_r+0x130>
 800cde8:	9105      	str	r1, [sp, #20]
 800cdea:	e7c3      	b.n	800cd74 <_svfiprintf_r+0x130>
 800cdec:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e7f0      	b.n	800cdd8 <_svfiprintf_r+0x194>
 800cdf6:	ab03      	add	r3, sp, #12
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	4b0f      	ldr	r3, [pc, #60]	; (800ce3c <_svfiprintf_r+0x1f8>)
 800cdfe:	a904      	add	r1, sp, #16
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7fe f895 	bl	800af30 <_printf_float>
 800ce06:	1c42      	adds	r2, r0, #1
 800ce08:	4606      	mov	r6, r0
 800ce0a:	d1d6      	bne.n	800cdba <_svfiprintf_r+0x176>
 800ce0c:	89ab      	ldrh	r3, [r5, #12]
 800ce0e:	065b      	lsls	r3, r3, #25
 800ce10:	f53f af2c 	bmi.w	800cc6c <_svfiprintf_r+0x28>
 800ce14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce16:	b01d      	add	sp, #116	; 0x74
 800ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1c:	ab03      	add	r3, sp, #12
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	462a      	mov	r2, r5
 800ce22:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <_svfiprintf_r+0x1f8>)
 800ce24:	a904      	add	r1, sp, #16
 800ce26:	4638      	mov	r0, r7
 800ce28:	f7fe fb26 	bl	800b478 <_printf_i>
 800ce2c:	e7eb      	b.n	800ce06 <_svfiprintf_r+0x1c2>
 800ce2e:	bf00      	nop
 800ce30:	0800dc74 	.word	0x0800dc74
 800ce34:	0800dc7e 	.word	0x0800dc7e
 800ce38:	0800af31 	.word	0x0800af31
 800ce3c:	0800cb8d 	.word	0x0800cb8d
 800ce40:	0800dc7a 	.word	0x0800dc7a

0800ce44 <__assert_func>:
 800ce44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce46:	4614      	mov	r4, r2
 800ce48:	461a      	mov	r2, r3
 800ce4a:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <__assert_func+0x2c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4605      	mov	r5, r0
 800ce50:	68d8      	ldr	r0, [r3, #12]
 800ce52:	b14c      	cbz	r4, 800ce68 <__assert_func+0x24>
 800ce54:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <__assert_func+0x30>)
 800ce56:	9100      	str	r1, [sp, #0]
 800ce58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce5c:	4906      	ldr	r1, [pc, #24]	; (800ce78 <__assert_func+0x34>)
 800ce5e:	462b      	mov	r3, r5
 800ce60:	f000 f80e 	bl	800ce80 <fiprintf>
 800ce64:	f000 faa4 	bl	800d3b0 <abort>
 800ce68:	4b04      	ldr	r3, [pc, #16]	; (800ce7c <__assert_func+0x38>)
 800ce6a:	461c      	mov	r4, r3
 800ce6c:	e7f3      	b.n	800ce56 <__assert_func+0x12>
 800ce6e:	bf00      	nop
 800ce70:	2000002c 	.word	0x2000002c
 800ce74:	0800dc85 	.word	0x0800dc85
 800ce78:	0800dc92 	.word	0x0800dc92
 800ce7c:	0800dcc0 	.word	0x0800dcc0

0800ce80 <fiprintf>:
 800ce80:	b40e      	push	{r1, r2, r3}
 800ce82:	b503      	push	{r0, r1, lr}
 800ce84:	4601      	mov	r1, r0
 800ce86:	ab03      	add	r3, sp, #12
 800ce88:	4805      	ldr	r0, [pc, #20]	; (800cea0 <fiprintf+0x20>)
 800ce8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce8e:	6800      	ldr	r0, [r0, #0]
 800ce90:	9301      	str	r3, [sp, #4]
 800ce92:	f000 f88f 	bl	800cfb4 <_vfiprintf_r>
 800ce96:	b002      	add	sp, #8
 800ce98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce9c:	b003      	add	sp, #12
 800ce9e:	4770      	bx	lr
 800cea0:	2000002c 	.word	0x2000002c

0800cea4 <__retarget_lock_init_recursive>:
 800cea4:	4770      	bx	lr

0800cea6 <__retarget_lock_acquire_recursive>:
 800cea6:	4770      	bx	lr

0800cea8 <__retarget_lock_release_recursive>:
 800cea8:	4770      	bx	lr

0800ceaa <__ascii_mbtowc>:
 800ceaa:	b082      	sub	sp, #8
 800ceac:	b901      	cbnz	r1, 800ceb0 <__ascii_mbtowc+0x6>
 800ceae:	a901      	add	r1, sp, #4
 800ceb0:	b142      	cbz	r2, 800cec4 <__ascii_mbtowc+0x1a>
 800ceb2:	b14b      	cbz	r3, 800cec8 <__ascii_mbtowc+0x1e>
 800ceb4:	7813      	ldrb	r3, [r2, #0]
 800ceb6:	600b      	str	r3, [r1, #0]
 800ceb8:	7812      	ldrb	r2, [r2, #0]
 800ceba:	1e10      	subs	r0, r2, #0
 800cebc:	bf18      	it	ne
 800cebe:	2001      	movne	r0, #1
 800cec0:	b002      	add	sp, #8
 800cec2:	4770      	bx	lr
 800cec4:	4610      	mov	r0, r2
 800cec6:	e7fb      	b.n	800cec0 <__ascii_mbtowc+0x16>
 800cec8:	f06f 0001 	mvn.w	r0, #1
 800cecc:	e7f8      	b.n	800cec0 <__ascii_mbtowc+0x16>

0800cece <memmove>:
 800cece:	4288      	cmp	r0, r1
 800ced0:	b510      	push	{r4, lr}
 800ced2:	eb01 0402 	add.w	r4, r1, r2
 800ced6:	d902      	bls.n	800cede <memmove+0x10>
 800ced8:	4284      	cmp	r4, r0
 800ceda:	4623      	mov	r3, r4
 800cedc:	d807      	bhi.n	800ceee <memmove+0x20>
 800cede:	1e43      	subs	r3, r0, #1
 800cee0:	42a1      	cmp	r1, r4
 800cee2:	d008      	beq.n	800cef6 <memmove+0x28>
 800cee4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cee8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceec:	e7f8      	b.n	800cee0 <memmove+0x12>
 800ceee:	4402      	add	r2, r0
 800cef0:	4601      	mov	r1, r0
 800cef2:	428a      	cmp	r2, r1
 800cef4:	d100      	bne.n	800cef8 <memmove+0x2a>
 800cef6:	bd10      	pop	{r4, pc}
 800cef8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cefc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf00:	e7f7      	b.n	800cef2 <memmove+0x24>

0800cf02 <_realloc_r>:
 800cf02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf06:	4680      	mov	r8, r0
 800cf08:	4614      	mov	r4, r2
 800cf0a:	460e      	mov	r6, r1
 800cf0c:	b921      	cbnz	r1, 800cf18 <_realloc_r+0x16>
 800cf0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf12:	4611      	mov	r1, r2
 800cf14:	f7fd bef8 	b.w	800ad08 <_malloc_r>
 800cf18:	b92a      	cbnz	r2, 800cf26 <_realloc_r+0x24>
 800cf1a:	f7fd fe89 	bl	800ac30 <_free_r>
 800cf1e:	4625      	mov	r5, r4
 800cf20:	4628      	mov	r0, r5
 800cf22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf26:	f000 fc67 	bl	800d7f8 <_malloc_usable_size_r>
 800cf2a:	4284      	cmp	r4, r0
 800cf2c:	4607      	mov	r7, r0
 800cf2e:	d802      	bhi.n	800cf36 <_realloc_r+0x34>
 800cf30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf34:	d812      	bhi.n	800cf5c <_realloc_r+0x5a>
 800cf36:	4621      	mov	r1, r4
 800cf38:	4640      	mov	r0, r8
 800cf3a:	f7fd fee5 	bl	800ad08 <_malloc_r>
 800cf3e:	4605      	mov	r5, r0
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d0ed      	beq.n	800cf20 <_realloc_r+0x1e>
 800cf44:	42bc      	cmp	r4, r7
 800cf46:	4622      	mov	r2, r4
 800cf48:	4631      	mov	r1, r6
 800cf4a:	bf28      	it	cs
 800cf4c:	463a      	movcs	r2, r7
 800cf4e:	f7ff fa69 	bl	800c424 <memcpy>
 800cf52:	4631      	mov	r1, r6
 800cf54:	4640      	mov	r0, r8
 800cf56:	f7fd fe6b 	bl	800ac30 <_free_r>
 800cf5a:	e7e1      	b.n	800cf20 <_realloc_r+0x1e>
 800cf5c:	4635      	mov	r5, r6
 800cf5e:	e7df      	b.n	800cf20 <_realloc_r+0x1e>

0800cf60 <__sfputc_r>:
 800cf60:	6893      	ldr	r3, [r2, #8]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	b410      	push	{r4}
 800cf68:	6093      	str	r3, [r2, #8]
 800cf6a:	da08      	bge.n	800cf7e <__sfputc_r+0x1e>
 800cf6c:	6994      	ldr	r4, [r2, #24]
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	db01      	blt.n	800cf76 <__sfputc_r+0x16>
 800cf72:	290a      	cmp	r1, #10
 800cf74:	d103      	bne.n	800cf7e <__sfputc_r+0x1e>
 800cf76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf7a:	f000 b94b 	b.w	800d214 <__swbuf_r>
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	1c58      	adds	r0, r3, #1
 800cf82:	6010      	str	r0, [r2, #0]
 800cf84:	7019      	strb	r1, [r3, #0]
 800cf86:	4608      	mov	r0, r1
 800cf88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <__sfputs_r>:
 800cf8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf90:	4606      	mov	r6, r0
 800cf92:	460f      	mov	r7, r1
 800cf94:	4614      	mov	r4, r2
 800cf96:	18d5      	adds	r5, r2, r3
 800cf98:	42ac      	cmp	r4, r5
 800cf9a:	d101      	bne.n	800cfa0 <__sfputs_r+0x12>
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	e007      	b.n	800cfb0 <__sfputs_r+0x22>
 800cfa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa4:	463a      	mov	r2, r7
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f7ff ffda 	bl	800cf60 <__sfputc_r>
 800cfac:	1c43      	adds	r3, r0, #1
 800cfae:	d1f3      	bne.n	800cf98 <__sfputs_r+0xa>
 800cfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfb4 <_vfiprintf_r>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	460d      	mov	r5, r1
 800cfba:	b09d      	sub	sp, #116	; 0x74
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	4698      	mov	r8, r3
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	b118      	cbz	r0, 800cfcc <_vfiprintf_r+0x18>
 800cfc4:	6983      	ldr	r3, [r0, #24]
 800cfc6:	b90b      	cbnz	r3, 800cfcc <_vfiprintf_r+0x18>
 800cfc8:	f000 fb14 	bl	800d5f4 <__sinit>
 800cfcc:	4b89      	ldr	r3, [pc, #548]	; (800d1f4 <_vfiprintf_r+0x240>)
 800cfce:	429d      	cmp	r5, r3
 800cfd0:	d11b      	bne.n	800d00a <_vfiprintf_r+0x56>
 800cfd2:	6875      	ldr	r5, [r6, #4]
 800cfd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfd6:	07d9      	lsls	r1, r3, #31
 800cfd8:	d405      	bmi.n	800cfe6 <_vfiprintf_r+0x32>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	059a      	lsls	r2, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_vfiprintf_r+0x32>
 800cfe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe2:	f7ff ff60 	bl	800cea6 <__retarget_lock_acquire_recursive>
 800cfe6:	89ab      	ldrh	r3, [r5, #12]
 800cfe8:	071b      	lsls	r3, r3, #28
 800cfea:	d501      	bpl.n	800cff0 <_vfiprintf_r+0x3c>
 800cfec:	692b      	ldr	r3, [r5, #16]
 800cfee:	b9eb      	cbnz	r3, 800d02c <_vfiprintf_r+0x78>
 800cff0:	4629      	mov	r1, r5
 800cff2:	4630      	mov	r0, r6
 800cff4:	f000 f96e 	bl	800d2d4 <__swsetup_r>
 800cff8:	b1c0      	cbz	r0, 800d02c <_vfiprintf_r+0x78>
 800cffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cffc:	07dc      	lsls	r4, r3, #31
 800cffe:	d50e      	bpl.n	800d01e <_vfiprintf_r+0x6a>
 800d000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d004:	b01d      	add	sp, #116	; 0x74
 800d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00a:	4b7b      	ldr	r3, [pc, #492]	; (800d1f8 <_vfiprintf_r+0x244>)
 800d00c:	429d      	cmp	r5, r3
 800d00e:	d101      	bne.n	800d014 <_vfiprintf_r+0x60>
 800d010:	68b5      	ldr	r5, [r6, #8]
 800d012:	e7df      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d014:	4b79      	ldr	r3, [pc, #484]	; (800d1fc <_vfiprintf_r+0x248>)
 800d016:	429d      	cmp	r5, r3
 800d018:	bf08      	it	eq
 800d01a:	68f5      	ldreq	r5, [r6, #12]
 800d01c:	e7da      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d01e:	89ab      	ldrh	r3, [r5, #12]
 800d020:	0598      	lsls	r0, r3, #22
 800d022:	d4ed      	bmi.n	800d000 <_vfiprintf_r+0x4c>
 800d024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d026:	f7ff ff3f 	bl	800cea8 <__retarget_lock_release_recursive>
 800d02a:	e7e9      	b.n	800d000 <_vfiprintf_r+0x4c>
 800d02c:	2300      	movs	r3, #0
 800d02e:	9309      	str	r3, [sp, #36]	; 0x24
 800d030:	2320      	movs	r3, #32
 800d032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d036:	f8cd 800c 	str.w	r8, [sp, #12]
 800d03a:	2330      	movs	r3, #48	; 0x30
 800d03c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d200 <_vfiprintf_r+0x24c>
 800d040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d044:	f04f 0901 	mov.w	r9, #1
 800d048:	4623      	mov	r3, r4
 800d04a:	469a      	mov	sl, r3
 800d04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d050:	b10a      	cbz	r2, 800d056 <_vfiprintf_r+0xa2>
 800d052:	2a25      	cmp	r2, #37	; 0x25
 800d054:	d1f9      	bne.n	800d04a <_vfiprintf_r+0x96>
 800d056:	ebba 0b04 	subs.w	fp, sl, r4
 800d05a:	d00b      	beq.n	800d074 <_vfiprintf_r+0xc0>
 800d05c:	465b      	mov	r3, fp
 800d05e:	4622      	mov	r2, r4
 800d060:	4629      	mov	r1, r5
 800d062:	4630      	mov	r0, r6
 800d064:	f7ff ff93 	bl	800cf8e <__sfputs_r>
 800d068:	3001      	adds	r0, #1
 800d06a:	f000 80aa 	beq.w	800d1c2 <_vfiprintf_r+0x20e>
 800d06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d070:	445a      	add	r2, fp
 800d072:	9209      	str	r2, [sp, #36]	; 0x24
 800d074:	f89a 3000 	ldrb.w	r3, [sl]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80a2 	beq.w	800d1c2 <_vfiprintf_r+0x20e>
 800d07e:	2300      	movs	r3, #0
 800d080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d088:	f10a 0a01 	add.w	sl, sl, #1
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	9307      	str	r3, [sp, #28]
 800d090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d094:	931a      	str	r3, [sp, #104]	; 0x68
 800d096:	4654      	mov	r4, sl
 800d098:	2205      	movs	r2, #5
 800d09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09e:	4858      	ldr	r0, [pc, #352]	; (800d200 <_vfiprintf_r+0x24c>)
 800d0a0:	f7f3 f8a6 	bl	80001f0 <memchr>
 800d0a4:	9a04      	ldr	r2, [sp, #16]
 800d0a6:	b9d8      	cbnz	r0, 800d0e0 <_vfiprintf_r+0x12c>
 800d0a8:	06d1      	lsls	r1, r2, #27
 800d0aa:	bf44      	itt	mi
 800d0ac:	2320      	movmi	r3, #32
 800d0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b2:	0713      	lsls	r3, r2, #28
 800d0b4:	bf44      	itt	mi
 800d0b6:	232b      	movmi	r3, #43	; 0x2b
 800d0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c2:	d015      	beq.n	800d0f0 <_vfiprintf_r+0x13c>
 800d0c4:	9a07      	ldr	r2, [sp, #28]
 800d0c6:	4654      	mov	r4, sl
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	f04f 0c0a 	mov.w	ip, #10
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d4:	3b30      	subs	r3, #48	; 0x30
 800d0d6:	2b09      	cmp	r3, #9
 800d0d8:	d94e      	bls.n	800d178 <_vfiprintf_r+0x1c4>
 800d0da:	b1b0      	cbz	r0, 800d10a <_vfiprintf_r+0x156>
 800d0dc:	9207      	str	r2, [sp, #28]
 800d0de:	e014      	b.n	800d10a <_vfiprintf_r+0x156>
 800d0e0:	eba0 0308 	sub.w	r3, r0, r8
 800d0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	9304      	str	r3, [sp, #16]
 800d0ec:	46a2      	mov	sl, r4
 800d0ee:	e7d2      	b.n	800d096 <_vfiprintf_r+0xe2>
 800d0f0:	9b03      	ldr	r3, [sp, #12]
 800d0f2:	1d19      	adds	r1, r3, #4
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	9103      	str	r1, [sp, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bfbb      	ittet	lt
 800d0fc:	425b      	neglt	r3, r3
 800d0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d102:	9307      	strge	r3, [sp, #28]
 800d104:	9307      	strlt	r3, [sp, #28]
 800d106:	bfb8      	it	lt
 800d108:	9204      	strlt	r2, [sp, #16]
 800d10a:	7823      	ldrb	r3, [r4, #0]
 800d10c:	2b2e      	cmp	r3, #46	; 0x2e
 800d10e:	d10c      	bne.n	800d12a <_vfiprintf_r+0x176>
 800d110:	7863      	ldrb	r3, [r4, #1]
 800d112:	2b2a      	cmp	r3, #42	; 0x2a
 800d114:	d135      	bne.n	800d182 <_vfiprintf_r+0x1ce>
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	1d1a      	adds	r2, r3, #4
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	9203      	str	r2, [sp, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	bfb8      	it	lt
 800d122:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d126:	3402      	adds	r4, #2
 800d128:	9305      	str	r3, [sp, #20]
 800d12a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d210 <_vfiprintf_r+0x25c>
 800d12e:	7821      	ldrb	r1, [r4, #0]
 800d130:	2203      	movs	r2, #3
 800d132:	4650      	mov	r0, sl
 800d134:	f7f3 f85c 	bl	80001f0 <memchr>
 800d138:	b140      	cbz	r0, 800d14c <_vfiprintf_r+0x198>
 800d13a:	2340      	movs	r3, #64	; 0x40
 800d13c:	eba0 000a 	sub.w	r0, r0, sl
 800d140:	fa03 f000 	lsl.w	r0, r3, r0
 800d144:	9b04      	ldr	r3, [sp, #16]
 800d146:	4303      	orrs	r3, r0
 800d148:	3401      	adds	r4, #1
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d150:	482c      	ldr	r0, [pc, #176]	; (800d204 <_vfiprintf_r+0x250>)
 800d152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d156:	2206      	movs	r2, #6
 800d158:	f7f3 f84a 	bl	80001f0 <memchr>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d03f      	beq.n	800d1e0 <_vfiprintf_r+0x22c>
 800d160:	4b29      	ldr	r3, [pc, #164]	; (800d208 <_vfiprintf_r+0x254>)
 800d162:	bb1b      	cbnz	r3, 800d1ac <_vfiprintf_r+0x1f8>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	3307      	adds	r3, #7
 800d168:	f023 0307 	bic.w	r3, r3, #7
 800d16c:	3308      	adds	r3, #8
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d172:	443b      	add	r3, r7
 800d174:	9309      	str	r3, [sp, #36]	; 0x24
 800d176:	e767      	b.n	800d048 <_vfiprintf_r+0x94>
 800d178:	fb0c 3202 	mla	r2, ip, r2, r3
 800d17c:	460c      	mov	r4, r1
 800d17e:	2001      	movs	r0, #1
 800d180:	e7a5      	b.n	800d0ce <_vfiprintf_r+0x11a>
 800d182:	2300      	movs	r3, #0
 800d184:	3401      	adds	r4, #1
 800d186:	9305      	str	r3, [sp, #20]
 800d188:	4619      	mov	r1, r3
 800d18a:	f04f 0c0a 	mov.w	ip, #10
 800d18e:	4620      	mov	r0, r4
 800d190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d194:	3a30      	subs	r2, #48	; 0x30
 800d196:	2a09      	cmp	r2, #9
 800d198:	d903      	bls.n	800d1a2 <_vfiprintf_r+0x1ee>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0c5      	beq.n	800d12a <_vfiprintf_r+0x176>
 800d19e:	9105      	str	r1, [sp, #20]
 800d1a0:	e7c3      	b.n	800d12a <_vfiprintf_r+0x176>
 800d1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e7f0      	b.n	800d18e <_vfiprintf_r+0x1da>
 800d1ac:	ab03      	add	r3, sp, #12
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	462a      	mov	r2, r5
 800d1b2:	4b16      	ldr	r3, [pc, #88]	; (800d20c <_vfiprintf_r+0x258>)
 800d1b4:	a904      	add	r1, sp, #16
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7fd feba 	bl	800af30 <_printf_float>
 800d1bc:	4607      	mov	r7, r0
 800d1be:	1c78      	adds	r0, r7, #1
 800d1c0:	d1d6      	bne.n	800d170 <_vfiprintf_r+0x1bc>
 800d1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c4:	07d9      	lsls	r1, r3, #31
 800d1c6:	d405      	bmi.n	800d1d4 <_vfiprintf_r+0x220>
 800d1c8:	89ab      	ldrh	r3, [r5, #12]
 800d1ca:	059a      	lsls	r2, r3, #22
 800d1cc:	d402      	bmi.n	800d1d4 <_vfiprintf_r+0x220>
 800d1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d0:	f7ff fe6a 	bl	800cea8 <__retarget_lock_release_recursive>
 800d1d4:	89ab      	ldrh	r3, [r5, #12]
 800d1d6:	065b      	lsls	r3, r3, #25
 800d1d8:	f53f af12 	bmi.w	800d000 <_vfiprintf_r+0x4c>
 800d1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1de:	e711      	b.n	800d004 <_vfiprintf_r+0x50>
 800d1e0:	ab03      	add	r3, sp, #12
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	462a      	mov	r2, r5
 800d1e6:	4b09      	ldr	r3, [pc, #36]	; (800d20c <_vfiprintf_r+0x258>)
 800d1e8:	a904      	add	r1, sp, #16
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7fe f944 	bl	800b478 <_printf_i>
 800d1f0:	e7e4      	b.n	800d1bc <_vfiprintf_r+0x208>
 800d1f2:	bf00      	nop
 800d1f4:	0800ddec 	.word	0x0800ddec
 800d1f8:	0800de0c 	.word	0x0800de0c
 800d1fc:	0800ddcc 	.word	0x0800ddcc
 800d200:	0800dc74 	.word	0x0800dc74
 800d204:	0800dc7e 	.word	0x0800dc7e
 800d208:	0800af31 	.word	0x0800af31
 800d20c:	0800cf8f 	.word	0x0800cf8f
 800d210:	0800dc7a 	.word	0x0800dc7a

0800d214 <__swbuf_r>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	460e      	mov	r6, r1
 800d218:	4614      	mov	r4, r2
 800d21a:	4605      	mov	r5, r0
 800d21c:	b118      	cbz	r0, 800d226 <__swbuf_r+0x12>
 800d21e:	6983      	ldr	r3, [r0, #24]
 800d220:	b90b      	cbnz	r3, 800d226 <__swbuf_r+0x12>
 800d222:	f000 f9e7 	bl	800d5f4 <__sinit>
 800d226:	4b21      	ldr	r3, [pc, #132]	; (800d2ac <__swbuf_r+0x98>)
 800d228:	429c      	cmp	r4, r3
 800d22a:	d12b      	bne.n	800d284 <__swbuf_r+0x70>
 800d22c:	686c      	ldr	r4, [r5, #4]
 800d22e:	69a3      	ldr	r3, [r4, #24]
 800d230:	60a3      	str	r3, [r4, #8]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	071a      	lsls	r2, r3, #28
 800d236:	d52f      	bpl.n	800d298 <__swbuf_r+0x84>
 800d238:	6923      	ldr	r3, [r4, #16]
 800d23a:	b36b      	cbz	r3, 800d298 <__swbuf_r+0x84>
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	6820      	ldr	r0, [r4, #0]
 800d240:	1ac0      	subs	r0, r0, r3
 800d242:	6963      	ldr	r3, [r4, #20]
 800d244:	b2f6      	uxtb	r6, r6
 800d246:	4283      	cmp	r3, r0
 800d248:	4637      	mov	r7, r6
 800d24a:	dc04      	bgt.n	800d256 <__swbuf_r+0x42>
 800d24c:	4621      	mov	r1, r4
 800d24e:	4628      	mov	r0, r5
 800d250:	f000 f93c 	bl	800d4cc <_fflush_r>
 800d254:	bb30      	cbnz	r0, 800d2a4 <__swbuf_r+0x90>
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	3b01      	subs	r3, #1
 800d25a:	60a3      	str	r3, [r4, #8]
 800d25c:	6823      	ldr	r3, [r4, #0]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	6022      	str	r2, [r4, #0]
 800d262:	701e      	strb	r6, [r3, #0]
 800d264:	6963      	ldr	r3, [r4, #20]
 800d266:	3001      	adds	r0, #1
 800d268:	4283      	cmp	r3, r0
 800d26a:	d004      	beq.n	800d276 <__swbuf_r+0x62>
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	07db      	lsls	r3, r3, #31
 800d270:	d506      	bpl.n	800d280 <__swbuf_r+0x6c>
 800d272:	2e0a      	cmp	r6, #10
 800d274:	d104      	bne.n	800d280 <__swbuf_r+0x6c>
 800d276:	4621      	mov	r1, r4
 800d278:	4628      	mov	r0, r5
 800d27a:	f000 f927 	bl	800d4cc <_fflush_r>
 800d27e:	b988      	cbnz	r0, 800d2a4 <__swbuf_r+0x90>
 800d280:	4638      	mov	r0, r7
 800d282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d284:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <__swbuf_r+0x9c>)
 800d286:	429c      	cmp	r4, r3
 800d288:	d101      	bne.n	800d28e <__swbuf_r+0x7a>
 800d28a:	68ac      	ldr	r4, [r5, #8]
 800d28c:	e7cf      	b.n	800d22e <__swbuf_r+0x1a>
 800d28e:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <__swbuf_r+0xa0>)
 800d290:	429c      	cmp	r4, r3
 800d292:	bf08      	it	eq
 800d294:	68ec      	ldreq	r4, [r5, #12]
 800d296:	e7ca      	b.n	800d22e <__swbuf_r+0x1a>
 800d298:	4621      	mov	r1, r4
 800d29a:	4628      	mov	r0, r5
 800d29c:	f000 f81a 	bl	800d2d4 <__swsetup_r>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d0cb      	beq.n	800d23c <__swbuf_r+0x28>
 800d2a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d2a8:	e7ea      	b.n	800d280 <__swbuf_r+0x6c>
 800d2aa:	bf00      	nop
 800d2ac:	0800ddec 	.word	0x0800ddec
 800d2b0:	0800de0c 	.word	0x0800de0c
 800d2b4:	0800ddcc 	.word	0x0800ddcc

0800d2b8 <__ascii_wctomb>:
 800d2b8:	b149      	cbz	r1, 800d2ce <__ascii_wctomb+0x16>
 800d2ba:	2aff      	cmp	r2, #255	; 0xff
 800d2bc:	bf85      	ittet	hi
 800d2be:	238a      	movhi	r3, #138	; 0x8a
 800d2c0:	6003      	strhi	r3, [r0, #0]
 800d2c2:	700a      	strbls	r2, [r1, #0]
 800d2c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d2c8:	bf98      	it	ls
 800d2ca:	2001      	movls	r0, #1
 800d2cc:	4770      	bx	lr
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4770      	bx	lr
	...

0800d2d4 <__swsetup_r>:
 800d2d4:	4b32      	ldr	r3, [pc, #200]	; (800d3a0 <__swsetup_r+0xcc>)
 800d2d6:	b570      	push	{r4, r5, r6, lr}
 800d2d8:	681d      	ldr	r5, [r3, #0]
 800d2da:	4606      	mov	r6, r0
 800d2dc:	460c      	mov	r4, r1
 800d2de:	b125      	cbz	r5, 800d2ea <__swsetup_r+0x16>
 800d2e0:	69ab      	ldr	r3, [r5, #24]
 800d2e2:	b913      	cbnz	r3, 800d2ea <__swsetup_r+0x16>
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	f000 f985 	bl	800d5f4 <__sinit>
 800d2ea:	4b2e      	ldr	r3, [pc, #184]	; (800d3a4 <__swsetup_r+0xd0>)
 800d2ec:	429c      	cmp	r4, r3
 800d2ee:	d10f      	bne.n	800d310 <__swsetup_r+0x3c>
 800d2f0:	686c      	ldr	r4, [r5, #4]
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2f8:	0719      	lsls	r1, r3, #28
 800d2fa:	d42c      	bmi.n	800d356 <__swsetup_r+0x82>
 800d2fc:	06dd      	lsls	r5, r3, #27
 800d2fe:	d411      	bmi.n	800d324 <__swsetup_r+0x50>
 800d300:	2309      	movs	r3, #9
 800d302:	6033      	str	r3, [r6, #0]
 800d304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d308:	81a3      	strh	r3, [r4, #12]
 800d30a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d30e:	e03e      	b.n	800d38e <__swsetup_r+0xba>
 800d310:	4b25      	ldr	r3, [pc, #148]	; (800d3a8 <__swsetup_r+0xd4>)
 800d312:	429c      	cmp	r4, r3
 800d314:	d101      	bne.n	800d31a <__swsetup_r+0x46>
 800d316:	68ac      	ldr	r4, [r5, #8]
 800d318:	e7eb      	b.n	800d2f2 <__swsetup_r+0x1e>
 800d31a:	4b24      	ldr	r3, [pc, #144]	; (800d3ac <__swsetup_r+0xd8>)
 800d31c:	429c      	cmp	r4, r3
 800d31e:	bf08      	it	eq
 800d320:	68ec      	ldreq	r4, [r5, #12]
 800d322:	e7e6      	b.n	800d2f2 <__swsetup_r+0x1e>
 800d324:	0758      	lsls	r0, r3, #29
 800d326:	d512      	bpl.n	800d34e <__swsetup_r+0x7a>
 800d328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d32a:	b141      	cbz	r1, 800d33e <__swsetup_r+0x6a>
 800d32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d330:	4299      	cmp	r1, r3
 800d332:	d002      	beq.n	800d33a <__swsetup_r+0x66>
 800d334:	4630      	mov	r0, r6
 800d336:	f7fd fc7b 	bl	800ac30 <_free_r>
 800d33a:	2300      	movs	r3, #0
 800d33c:	6363      	str	r3, [r4, #52]	; 0x34
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d344:	81a3      	strh	r3, [r4, #12]
 800d346:	2300      	movs	r3, #0
 800d348:	6063      	str	r3, [r4, #4]
 800d34a:	6923      	ldr	r3, [r4, #16]
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	f043 0308 	orr.w	r3, r3, #8
 800d354:	81a3      	strh	r3, [r4, #12]
 800d356:	6923      	ldr	r3, [r4, #16]
 800d358:	b94b      	cbnz	r3, 800d36e <__swsetup_r+0x9a>
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d364:	d003      	beq.n	800d36e <__swsetup_r+0x9a>
 800d366:	4621      	mov	r1, r4
 800d368:	4630      	mov	r0, r6
 800d36a:	f000 fa05 	bl	800d778 <__smakebuf_r>
 800d36e:	89a0      	ldrh	r0, [r4, #12]
 800d370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d374:	f010 0301 	ands.w	r3, r0, #1
 800d378:	d00a      	beq.n	800d390 <__swsetup_r+0xbc>
 800d37a:	2300      	movs	r3, #0
 800d37c:	60a3      	str	r3, [r4, #8]
 800d37e:	6963      	ldr	r3, [r4, #20]
 800d380:	425b      	negs	r3, r3
 800d382:	61a3      	str	r3, [r4, #24]
 800d384:	6923      	ldr	r3, [r4, #16]
 800d386:	b943      	cbnz	r3, 800d39a <__swsetup_r+0xc6>
 800d388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d38c:	d1ba      	bne.n	800d304 <__swsetup_r+0x30>
 800d38e:	bd70      	pop	{r4, r5, r6, pc}
 800d390:	0781      	lsls	r1, r0, #30
 800d392:	bf58      	it	pl
 800d394:	6963      	ldrpl	r3, [r4, #20]
 800d396:	60a3      	str	r3, [r4, #8]
 800d398:	e7f4      	b.n	800d384 <__swsetup_r+0xb0>
 800d39a:	2000      	movs	r0, #0
 800d39c:	e7f7      	b.n	800d38e <__swsetup_r+0xba>
 800d39e:	bf00      	nop
 800d3a0:	2000002c 	.word	0x2000002c
 800d3a4:	0800ddec 	.word	0x0800ddec
 800d3a8:	0800de0c 	.word	0x0800de0c
 800d3ac:	0800ddcc 	.word	0x0800ddcc

0800d3b0 <abort>:
 800d3b0:	b508      	push	{r3, lr}
 800d3b2:	2006      	movs	r0, #6
 800d3b4:	f000 fa50 	bl	800d858 <raise>
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	f7f5 f8af 	bl	800251c <_exit>
	...

0800d3c0 <__sflush_r>:
 800d3c0:	898a      	ldrh	r2, [r1, #12]
 800d3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	0710      	lsls	r0, r2, #28
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	d458      	bmi.n	800d480 <__sflush_r+0xc0>
 800d3ce:	684b      	ldr	r3, [r1, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dc05      	bgt.n	800d3e0 <__sflush_r+0x20>
 800d3d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dc02      	bgt.n	800d3e0 <__sflush_r+0x20>
 800d3da:	2000      	movs	r0, #0
 800d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3e2:	2e00      	cmp	r6, #0
 800d3e4:	d0f9      	beq.n	800d3da <__sflush_r+0x1a>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3ec:	682f      	ldr	r7, [r5, #0]
 800d3ee:	602b      	str	r3, [r5, #0]
 800d3f0:	d032      	beq.n	800d458 <__sflush_r+0x98>
 800d3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	075a      	lsls	r2, r3, #29
 800d3f8:	d505      	bpl.n	800d406 <__sflush_r+0x46>
 800d3fa:	6863      	ldr	r3, [r4, #4]
 800d3fc:	1ac0      	subs	r0, r0, r3
 800d3fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d400:	b10b      	cbz	r3, 800d406 <__sflush_r+0x46>
 800d402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d404:	1ac0      	subs	r0, r0, r3
 800d406:	2300      	movs	r3, #0
 800d408:	4602      	mov	r2, r0
 800d40a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d40c:	6a21      	ldr	r1, [r4, #32]
 800d40e:	4628      	mov	r0, r5
 800d410:	47b0      	blx	r6
 800d412:	1c43      	adds	r3, r0, #1
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	d106      	bne.n	800d426 <__sflush_r+0x66>
 800d418:	6829      	ldr	r1, [r5, #0]
 800d41a:	291d      	cmp	r1, #29
 800d41c:	d82c      	bhi.n	800d478 <__sflush_r+0xb8>
 800d41e:	4a2a      	ldr	r2, [pc, #168]	; (800d4c8 <__sflush_r+0x108>)
 800d420:	40ca      	lsrs	r2, r1
 800d422:	07d6      	lsls	r6, r2, #31
 800d424:	d528      	bpl.n	800d478 <__sflush_r+0xb8>
 800d426:	2200      	movs	r2, #0
 800d428:	6062      	str	r2, [r4, #4]
 800d42a:	04d9      	lsls	r1, r3, #19
 800d42c:	6922      	ldr	r2, [r4, #16]
 800d42e:	6022      	str	r2, [r4, #0]
 800d430:	d504      	bpl.n	800d43c <__sflush_r+0x7c>
 800d432:	1c42      	adds	r2, r0, #1
 800d434:	d101      	bne.n	800d43a <__sflush_r+0x7a>
 800d436:	682b      	ldr	r3, [r5, #0]
 800d438:	b903      	cbnz	r3, 800d43c <__sflush_r+0x7c>
 800d43a:	6560      	str	r0, [r4, #84]	; 0x54
 800d43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d43e:	602f      	str	r7, [r5, #0]
 800d440:	2900      	cmp	r1, #0
 800d442:	d0ca      	beq.n	800d3da <__sflush_r+0x1a>
 800d444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d448:	4299      	cmp	r1, r3
 800d44a:	d002      	beq.n	800d452 <__sflush_r+0x92>
 800d44c:	4628      	mov	r0, r5
 800d44e:	f7fd fbef 	bl	800ac30 <_free_r>
 800d452:	2000      	movs	r0, #0
 800d454:	6360      	str	r0, [r4, #52]	; 0x34
 800d456:	e7c1      	b.n	800d3dc <__sflush_r+0x1c>
 800d458:	6a21      	ldr	r1, [r4, #32]
 800d45a:	2301      	movs	r3, #1
 800d45c:	4628      	mov	r0, r5
 800d45e:	47b0      	blx	r6
 800d460:	1c41      	adds	r1, r0, #1
 800d462:	d1c7      	bne.n	800d3f4 <__sflush_r+0x34>
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d0c4      	beq.n	800d3f4 <__sflush_r+0x34>
 800d46a:	2b1d      	cmp	r3, #29
 800d46c:	d001      	beq.n	800d472 <__sflush_r+0xb2>
 800d46e:	2b16      	cmp	r3, #22
 800d470:	d101      	bne.n	800d476 <__sflush_r+0xb6>
 800d472:	602f      	str	r7, [r5, #0]
 800d474:	e7b1      	b.n	800d3da <__sflush_r+0x1a>
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d47c:	81a3      	strh	r3, [r4, #12]
 800d47e:	e7ad      	b.n	800d3dc <__sflush_r+0x1c>
 800d480:	690f      	ldr	r7, [r1, #16]
 800d482:	2f00      	cmp	r7, #0
 800d484:	d0a9      	beq.n	800d3da <__sflush_r+0x1a>
 800d486:	0793      	lsls	r3, r2, #30
 800d488:	680e      	ldr	r6, [r1, #0]
 800d48a:	bf08      	it	eq
 800d48c:	694b      	ldreq	r3, [r1, #20]
 800d48e:	600f      	str	r7, [r1, #0]
 800d490:	bf18      	it	ne
 800d492:	2300      	movne	r3, #0
 800d494:	eba6 0807 	sub.w	r8, r6, r7
 800d498:	608b      	str	r3, [r1, #8]
 800d49a:	f1b8 0f00 	cmp.w	r8, #0
 800d49e:	dd9c      	ble.n	800d3da <__sflush_r+0x1a>
 800d4a0:	6a21      	ldr	r1, [r4, #32]
 800d4a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4a4:	4643      	mov	r3, r8
 800d4a6:	463a      	mov	r2, r7
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b0      	blx	r6
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	dc06      	bgt.n	800d4be <__sflush_r+0xfe>
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4b6:	81a3      	strh	r3, [r4, #12]
 800d4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4bc:	e78e      	b.n	800d3dc <__sflush_r+0x1c>
 800d4be:	4407      	add	r7, r0
 800d4c0:	eba8 0800 	sub.w	r8, r8, r0
 800d4c4:	e7e9      	b.n	800d49a <__sflush_r+0xda>
 800d4c6:	bf00      	nop
 800d4c8:	20400001 	.word	0x20400001

0800d4cc <_fflush_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	690b      	ldr	r3, [r1, #16]
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	b913      	cbnz	r3, 800d4dc <_fflush_r+0x10>
 800d4d6:	2500      	movs	r5, #0
 800d4d8:	4628      	mov	r0, r5
 800d4da:	bd38      	pop	{r3, r4, r5, pc}
 800d4dc:	b118      	cbz	r0, 800d4e6 <_fflush_r+0x1a>
 800d4de:	6983      	ldr	r3, [r0, #24]
 800d4e0:	b90b      	cbnz	r3, 800d4e6 <_fflush_r+0x1a>
 800d4e2:	f000 f887 	bl	800d5f4 <__sinit>
 800d4e6:	4b14      	ldr	r3, [pc, #80]	; (800d538 <_fflush_r+0x6c>)
 800d4e8:	429c      	cmp	r4, r3
 800d4ea:	d11b      	bne.n	800d524 <_fflush_r+0x58>
 800d4ec:	686c      	ldr	r4, [r5, #4]
 800d4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d0ef      	beq.n	800d4d6 <_fflush_r+0xa>
 800d4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4f8:	07d0      	lsls	r0, r2, #31
 800d4fa:	d404      	bmi.n	800d506 <_fflush_r+0x3a>
 800d4fc:	0599      	lsls	r1, r3, #22
 800d4fe:	d402      	bmi.n	800d506 <_fflush_r+0x3a>
 800d500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d502:	f7ff fcd0 	bl	800cea6 <__retarget_lock_acquire_recursive>
 800d506:	4628      	mov	r0, r5
 800d508:	4621      	mov	r1, r4
 800d50a:	f7ff ff59 	bl	800d3c0 <__sflush_r>
 800d50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d510:	07da      	lsls	r2, r3, #31
 800d512:	4605      	mov	r5, r0
 800d514:	d4e0      	bmi.n	800d4d8 <_fflush_r+0xc>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	059b      	lsls	r3, r3, #22
 800d51a:	d4dd      	bmi.n	800d4d8 <_fflush_r+0xc>
 800d51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d51e:	f7ff fcc3 	bl	800cea8 <__retarget_lock_release_recursive>
 800d522:	e7d9      	b.n	800d4d8 <_fflush_r+0xc>
 800d524:	4b05      	ldr	r3, [pc, #20]	; (800d53c <_fflush_r+0x70>)
 800d526:	429c      	cmp	r4, r3
 800d528:	d101      	bne.n	800d52e <_fflush_r+0x62>
 800d52a:	68ac      	ldr	r4, [r5, #8]
 800d52c:	e7df      	b.n	800d4ee <_fflush_r+0x22>
 800d52e:	4b04      	ldr	r3, [pc, #16]	; (800d540 <_fflush_r+0x74>)
 800d530:	429c      	cmp	r4, r3
 800d532:	bf08      	it	eq
 800d534:	68ec      	ldreq	r4, [r5, #12]
 800d536:	e7da      	b.n	800d4ee <_fflush_r+0x22>
 800d538:	0800ddec 	.word	0x0800ddec
 800d53c:	0800de0c 	.word	0x0800de0c
 800d540:	0800ddcc 	.word	0x0800ddcc

0800d544 <std>:
 800d544:	2300      	movs	r3, #0
 800d546:	b510      	push	{r4, lr}
 800d548:	4604      	mov	r4, r0
 800d54a:	e9c0 3300 	strd	r3, r3, [r0]
 800d54e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d552:	6083      	str	r3, [r0, #8]
 800d554:	8181      	strh	r1, [r0, #12]
 800d556:	6643      	str	r3, [r0, #100]	; 0x64
 800d558:	81c2      	strh	r2, [r0, #14]
 800d55a:	6183      	str	r3, [r0, #24]
 800d55c:	4619      	mov	r1, r3
 800d55e:	2208      	movs	r2, #8
 800d560:	305c      	adds	r0, #92	; 0x5c
 800d562:	f7fd fb5d 	bl	800ac20 <memset>
 800d566:	4b05      	ldr	r3, [pc, #20]	; (800d57c <std+0x38>)
 800d568:	6263      	str	r3, [r4, #36]	; 0x24
 800d56a:	4b05      	ldr	r3, [pc, #20]	; (800d580 <std+0x3c>)
 800d56c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d56e:	4b05      	ldr	r3, [pc, #20]	; (800d584 <std+0x40>)
 800d570:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d572:	4b05      	ldr	r3, [pc, #20]	; (800d588 <std+0x44>)
 800d574:	6224      	str	r4, [r4, #32]
 800d576:	6323      	str	r3, [r4, #48]	; 0x30
 800d578:	bd10      	pop	{r4, pc}
 800d57a:	bf00      	nop
 800d57c:	0800d891 	.word	0x0800d891
 800d580:	0800d8b3 	.word	0x0800d8b3
 800d584:	0800d8eb 	.word	0x0800d8eb
 800d588:	0800d90f 	.word	0x0800d90f

0800d58c <_cleanup_r>:
 800d58c:	4901      	ldr	r1, [pc, #4]	; (800d594 <_cleanup_r+0x8>)
 800d58e:	f000 b8af 	b.w	800d6f0 <_fwalk_reent>
 800d592:	bf00      	nop
 800d594:	0800d4cd 	.word	0x0800d4cd

0800d598 <__sfmoreglue>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	2268      	movs	r2, #104	; 0x68
 800d59c:	1e4d      	subs	r5, r1, #1
 800d59e:	4355      	muls	r5, r2
 800d5a0:	460e      	mov	r6, r1
 800d5a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d5a6:	f7fd fbaf 	bl	800ad08 <_malloc_r>
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	b140      	cbz	r0, 800d5c0 <__sfmoreglue+0x28>
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	e9c0 1600 	strd	r1, r6, [r0]
 800d5b4:	300c      	adds	r0, #12
 800d5b6:	60a0      	str	r0, [r4, #8]
 800d5b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5bc:	f7fd fb30 	bl	800ac20 <memset>
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	bd70      	pop	{r4, r5, r6, pc}

0800d5c4 <__sfp_lock_acquire>:
 800d5c4:	4801      	ldr	r0, [pc, #4]	; (800d5cc <__sfp_lock_acquire+0x8>)
 800d5c6:	f7ff bc6e 	b.w	800cea6 <__retarget_lock_acquire_recursive>
 800d5ca:	bf00      	nop
 800d5cc:	20000b15 	.word	0x20000b15

0800d5d0 <__sfp_lock_release>:
 800d5d0:	4801      	ldr	r0, [pc, #4]	; (800d5d8 <__sfp_lock_release+0x8>)
 800d5d2:	f7ff bc69 	b.w	800cea8 <__retarget_lock_release_recursive>
 800d5d6:	bf00      	nop
 800d5d8:	20000b15 	.word	0x20000b15

0800d5dc <__sinit_lock_acquire>:
 800d5dc:	4801      	ldr	r0, [pc, #4]	; (800d5e4 <__sinit_lock_acquire+0x8>)
 800d5de:	f7ff bc62 	b.w	800cea6 <__retarget_lock_acquire_recursive>
 800d5e2:	bf00      	nop
 800d5e4:	20000b16 	.word	0x20000b16

0800d5e8 <__sinit_lock_release>:
 800d5e8:	4801      	ldr	r0, [pc, #4]	; (800d5f0 <__sinit_lock_release+0x8>)
 800d5ea:	f7ff bc5d 	b.w	800cea8 <__retarget_lock_release_recursive>
 800d5ee:	bf00      	nop
 800d5f0:	20000b16 	.word	0x20000b16

0800d5f4 <__sinit>:
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	f7ff fff0 	bl	800d5dc <__sinit_lock_acquire>
 800d5fc:	69a3      	ldr	r3, [r4, #24]
 800d5fe:	b11b      	cbz	r3, 800d608 <__sinit+0x14>
 800d600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d604:	f7ff bff0 	b.w	800d5e8 <__sinit_lock_release>
 800d608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d60c:	6523      	str	r3, [r4, #80]	; 0x50
 800d60e:	4b13      	ldr	r3, [pc, #76]	; (800d65c <__sinit+0x68>)
 800d610:	4a13      	ldr	r2, [pc, #76]	; (800d660 <__sinit+0x6c>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	62a2      	str	r2, [r4, #40]	; 0x28
 800d616:	42a3      	cmp	r3, r4
 800d618:	bf04      	itt	eq
 800d61a:	2301      	moveq	r3, #1
 800d61c:	61a3      	streq	r3, [r4, #24]
 800d61e:	4620      	mov	r0, r4
 800d620:	f000 f820 	bl	800d664 <__sfp>
 800d624:	6060      	str	r0, [r4, #4]
 800d626:	4620      	mov	r0, r4
 800d628:	f000 f81c 	bl	800d664 <__sfp>
 800d62c:	60a0      	str	r0, [r4, #8]
 800d62e:	4620      	mov	r0, r4
 800d630:	f000 f818 	bl	800d664 <__sfp>
 800d634:	2200      	movs	r2, #0
 800d636:	60e0      	str	r0, [r4, #12]
 800d638:	2104      	movs	r1, #4
 800d63a:	6860      	ldr	r0, [r4, #4]
 800d63c:	f7ff ff82 	bl	800d544 <std>
 800d640:	68a0      	ldr	r0, [r4, #8]
 800d642:	2201      	movs	r2, #1
 800d644:	2109      	movs	r1, #9
 800d646:	f7ff ff7d 	bl	800d544 <std>
 800d64a:	68e0      	ldr	r0, [r4, #12]
 800d64c:	2202      	movs	r2, #2
 800d64e:	2112      	movs	r1, #18
 800d650:	f7ff ff78 	bl	800d544 <std>
 800d654:	2301      	movs	r3, #1
 800d656:	61a3      	str	r3, [r4, #24]
 800d658:	e7d2      	b.n	800d600 <__sinit+0xc>
 800d65a:	bf00      	nop
 800d65c:	0800da50 	.word	0x0800da50
 800d660:	0800d58d 	.word	0x0800d58d

0800d664 <__sfp>:
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d666:	4607      	mov	r7, r0
 800d668:	f7ff ffac 	bl	800d5c4 <__sfp_lock_acquire>
 800d66c:	4b1e      	ldr	r3, [pc, #120]	; (800d6e8 <__sfp+0x84>)
 800d66e:	681e      	ldr	r6, [r3, #0]
 800d670:	69b3      	ldr	r3, [r6, #24]
 800d672:	b913      	cbnz	r3, 800d67a <__sfp+0x16>
 800d674:	4630      	mov	r0, r6
 800d676:	f7ff ffbd 	bl	800d5f4 <__sinit>
 800d67a:	3648      	adds	r6, #72	; 0x48
 800d67c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d680:	3b01      	subs	r3, #1
 800d682:	d503      	bpl.n	800d68c <__sfp+0x28>
 800d684:	6833      	ldr	r3, [r6, #0]
 800d686:	b30b      	cbz	r3, 800d6cc <__sfp+0x68>
 800d688:	6836      	ldr	r6, [r6, #0]
 800d68a:	e7f7      	b.n	800d67c <__sfp+0x18>
 800d68c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d690:	b9d5      	cbnz	r5, 800d6c8 <__sfp+0x64>
 800d692:	4b16      	ldr	r3, [pc, #88]	; (800d6ec <__sfp+0x88>)
 800d694:	60e3      	str	r3, [r4, #12]
 800d696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d69a:	6665      	str	r5, [r4, #100]	; 0x64
 800d69c:	f7ff fc02 	bl	800cea4 <__retarget_lock_init_recursive>
 800d6a0:	f7ff ff96 	bl	800d5d0 <__sfp_lock_release>
 800d6a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6ac:	6025      	str	r5, [r4, #0]
 800d6ae:	61a5      	str	r5, [r4, #24]
 800d6b0:	2208      	movs	r2, #8
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6b8:	f7fd fab2 	bl	800ac20 <memset>
 800d6bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6c8:	3468      	adds	r4, #104	; 0x68
 800d6ca:	e7d9      	b.n	800d680 <__sfp+0x1c>
 800d6cc:	2104      	movs	r1, #4
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	f7ff ff62 	bl	800d598 <__sfmoreglue>
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	6030      	str	r0, [r6, #0]
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d1d5      	bne.n	800d688 <__sfp+0x24>
 800d6dc:	f7ff ff78 	bl	800d5d0 <__sfp_lock_release>
 800d6e0:	230c      	movs	r3, #12
 800d6e2:	603b      	str	r3, [r7, #0]
 800d6e4:	e7ee      	b.n	800d6c4 <__sfp+0x60>
 800d6e6:	bf00      	nop
 800d6e8:	0800da50 	.word	0x0800da50
 800d6ec:	ffff0001 	.word	0xffff0001

0800d6f0 <_fwalk_reent>:
 800d6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	4688      	mov	r8, r1
 800d6f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6fc:	2700      	movs	r7, #0
 800d6fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d702:	f1b9 0901 	subs.w	r9, r9, #1
 800d706:	d505      	bpl.n	800d714 <_fwalk_reent+0x24>
 800d708:	6824      	ldr	r4, [r4, #0]
 800d70a:	2c00      	cmp	r4, #0
 800d70c:	d1f7      	bne.n	800d6fe <_fwalk_reent+0xe>
 800d70e:	4638      	mov	r0, r7
 800d710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d714:	89ab      	ldrh	r3, [r5, #12]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d907      	bls.n	800d72a <_fwalk_reent+0x3a>
 800d71a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d71e:	3301      	adds	r3, #1
 800d720:	d003      	beq.n	800d72a <_fwalk_reent+0x3a>
 800d722:	4629      	mov	r1, r5
 800d724:	4630      	mov	r0, r6
 800d726:	47c0      	blx	r8
 800d728:	4307      	orrs	r7, r0
 800d72a:	3568      	adds	r5, #104	; 0x68
 800d72c:	e7e9      	b.n	800d702 <_fwalk_reent+0x12>

0800d72e <__swhatbuf_r>:
 800d72e:	b570      	push	{r4, r5, r6, lr}
 800d730:	460e      	mov	r6, r1
 800d732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d736:	2900      	cmp	r1, #0
 800d738:	b096      	sub	sp, #88	; 0x58
 800d73a:	4614      	mov	r4, r2
 800d73c:	461d      	mov	r5, r3
 800d73e:	da08      	bge.n	800d752 <__swhatbuf_r+0x24>
 800d740:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	602a      	str	r2, [r5, #0]
 800d748:	061a      	lsls	r2, r3, #24
 800d74a:	d410      	bmi.n	800d76e <__swhatbuf_r+0x40>
 800d74c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d750:	e00e      	b.n	800d770 <__swhatbuf_r+0x42>
 800d752:	466a      	mov	r2, sp
 800d754:	f000 f902 	bl	800d95c <_fstat_r>
 800d758:	2800      	cmp	r0, #0
 800d75a:	dbf1      	blt.n	800d740 <__swhatbuf_r+0x12>
 800d75c:	9a01      	ldr	r2, [sp, #4]
 800d75e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d762:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d766:	425a      	negs	r2, r3
 800d768:	415a      	adcs	r2, r3
 800d76a:	602a      	str	r2, [r5, #0]
 800d76c:	e7ee      	b.n	800d74c <__swhatbuf_r+0x1e>
 800d76e:	2340      	movs	r3, #64	; 0x40
 800d770:	2000      	movs	r0, #0
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	b016      	add	sp, #88	; 0x58
 800d776:	bd70      	pop	{r4, r5, r6, pc}

0800d778 <__smakebuf_r>:
 800d778:	898b      	ldrh	r3, [r1, #12]
 800d77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d77c:	079d      	lsls	r5, r3, #30
 800d77e:	4606      	mov	r6, r0
 800d780:	460c      	mov	r4, r1
 800d782:	d507      	bpl.n	800d794 <__smakebuf_r+0x1c>
 800d784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	6123      	str	r3, [r4, #16]
 800d78c:	2301      	movs	r3, #1
 800d78e:	6163      	str	r3, [r4, #20]
 800d790:	b002      	add	sp, #8
 800d792:	bd70      	pop	{r4, r5, r6, pc}
 800d794:	ab01      	add	r3, sp, #4
 800d796:	466a      	mov	r2, sp
 800d798:	f7ff ffc9 	bl	800d72e <__swhatbuf_r>
 800d79c:	9900      	ldr	r1, [sp, #0]
 800d79e:	4605      	mov	r5, r0
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f7fd fab1 	bl	800ad08 <_malloc_r>
 800d7a6:	b948      	cbnz	r0, 800d7bc <__smakebuf_r+0x44>
 800d7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ac:	059a      	lsls	r2, r3, #22
 800d7ae:	d4ef      	bmi.n	800d790 <__smakebuf_r+0x18>
 800d7b0:	f023 0303 	bic.w	r3, r3, #3
 800d7b4:	f043 0302 	orr.w	r3, r3, #2
 800d7b8:	81a3      	strh	r3, [r4, #12]
 800d7ba:	e7e3      	b.n	800d784 <__smakebuf_r+0xc>
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <__smakebuf_r+0x7c>)
 800d7be:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	6020      	str	r0, [r4, #0]
 800d7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c8:	81a3      	strh	r3, [r4, #12]
 800d7ca:	9b00      	ldr	r3, [sp, #0]
 800d7cc:	6163      	str	r3, [r4, #20]
 800d7ce:	9b01      	ldr	r3, [sp, #4]
 800d7d0:	6120      	str	r0, [r4, #16]
 800d7d2:	b15b      	cbz	r3, 800d7ec <__smakebuf_r+0x74>
 800d7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f000 f8d1 	bl	800d980 <_isatty_r>
 800d7de:	b128      	cbz	r0, 800d7ec <__smakebuf_r+0x74>
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	f023 0303 	bic.w	r3, r3, #3
 800d7e6:	f043 0301 	orr.w	r3, r3, #1
 800d7ea:	81a3      	strh	r3, [r4, #12]
 800d7ec:	89a0      	ldrh	r0, [r4, #12]
 800d7ee:	4305      	orrs	r5, r0
 800d7f0:	81a5      	strh	r5, [r4, #12]
 800d7f2:	e7cd      	b.n	800d790 <__smakebuf_r+0x18>
 800d7f4:	0800d58d 	.word	0x0800d58d

0800d7f8 <_malloc_usable_size_r>:
 800d7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7fc:	1f18      	subs	r0, r3, #4
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bfbc      	itt	lt
 800d802:	580b      	ldrlt	r3, [r1, r0]
 800d804:	18c0      	addlt	r0, r0, r3
 800d806:	4770      	bx	lr

0800d808 <_raise_r>:
 800d808:	291f      	cmp	r1, #31
 800d80a:	b538      	push	{r3, r4, r5, lr}
 800d80c:	4604      	mov	r4, r0
 800d80e:	460d      	mov	r5, r1
 800d810:	d904      	bls.n	800d81c <_raise_r+0x14>
 800d812:	2316      	movs	r3, #22
 800d814:	6003      	str	r3, [r0, #0]
 800d816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d81a:	bd38      	pop	{r3, r4, r5, pc}
 800d81c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d81e:	b112      	cbz	r2, 800d826 <_raise_r+0x1e>
 800d820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d824:	b94b      	cbnz	r3, 800d83a <_raise_r+0x32>
 800d826:	4620      	mov	r0, r4
 800d828:	f000 f830 	bl	800d88c <_getpid_r>
 800d82c:	462a      	mov	r2, r5
 800d82e:	4601      	mov	r1, r0
 800d830:	4620      	mov	r0, r4
 800d832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d836:	f000 b817 	b.w	800d868 <_kill_r>
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d00a      	beq.n	800d854 <_raise_r+0x4c>
 800d83e:	1c59      	adds	r1, r3, #1
 800d840:	d103      	bne.n	800d84a <_raise_r+0x42>
 800d842:	2316      	movs	r3, #22
 800d844:	6003      	str	r3, [r0, #0]
 800d846:	2001      	movs	r0, #1
 800d848:	e7e7      	b.n	800d81a <_raise_r+0x12>
 800d84a:	2400      	movs	r4, #0
 800d84c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d850:	4628      	mov	r0, r5
 800d852:	4798      	blx	r3
 800d854:	2000      	movs	r0, #0
 800d856:	e7e0      	b.n	800d81a <_raise_r+0x12>

0800d858 <raise>:
 800d858:	4b02      	ldr	r3, [pc, #8]	; (800d864 <raise+0xc>)
 800d85a:	4601      	mov	r1, r0
 800d85c:	6818      	ldr	r0, [r3, #0]
 800d85e:	f7ff bfd3 	b.w	800d808 <_raise_r>
 800d862:	bf00      	nop
 800d864:	2000002c 	.word	0x2000002c

0800d868 <_kill_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d07      	ldr	r5, [pc, #28]	; (800d888 <_kill_r+0x20>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	4611      	mov	r1, r2
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	f7f4 fe41 	bl	80024fc <_kill>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	d102      	bne.n	800d884 <_kill_r+0x1c>
 800d87e:	682b      	ldr	r3, [r5, #0]
 800d880:	b103      	cbz	r3, 800d884 <_kill_r+0x1c>
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	bd38      	pop	{r3, r4, r5, pc}
 800d886:	bf00      	nop
 800d888:	20000b10 	.word	0x20000b10

0800d88c <_getpid_r>:
 800d88c:	f7f4 be2e 	b.w	80024ec <_getpid>

0800d890 <__sread>:
 800d890:	b510      	push	{r4, lr}
 800d892:	460c      	mov	r4, r1
 800d894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d898:	f000 f894 	bl	800d9c4 <_read_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	bfab      	itete	ge
 800d8a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d8a4:	181b      	addge	r3, r3, r0
 800d8a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8aa:	bfac      	ite	ge
 800d8ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8ae:	81a3      	strhlt	r3, [r4, #12]
 800d8b0:	bd10      	pop	{r4, pc}

0800d8b2 <__swrite>:
 800d8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	898b      	ldrh	r3, [r1, #12]
 800d8ba:	05db      	lsls	r3, r3, #23
 800d8bc:	4605      	mov	r5, r0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	d505      	bpl.n	800d8d0 <__swrite+0x1e>
 800d8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f000 f868 	bl	800d9a0 <_lseek_r>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	463b      	mov	r3, r7
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e6:	f000 b817 	b.w	800d918 <_write_r>

0800d8ea <__sseek>:
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f2:	f000 f855 	bl	800d9a0 <_lseek_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	bf15      	itete	ne
 800d8fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d906:	81a3      	strheq	r3, [r4, #12]
 800d908:	bf18      	it	ne
 800d90a:	81a3      	strhne	r3, [r4, #12]
 800d90c:	bd10      	pop	{r4, pc}

0800d90e <__sclose>:
 800d90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d912:	f000 b813 	b.w	800d93c <_close_r>
	...

0800d918 <_write_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4d07      	ldr	r5, [pc, #28]	; (800d938 <_write_r+0x20>)
 800d91c:	4604      	mov	r4, r0
 800d91e:	4608      	mov	r0, r1
 800d920:	4611      	mov	r1, r2
 800d922:	2200      	movs	r2, #0
 800d924:	602a      	str	r2, [r5, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	f7f4 fe1f 	bl	800256a <_write>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_write_r+0x1e>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	b103      	cbz	r3, 800d936 <_write_r+0x1e>
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	20000b10 	.word	0x20000b10

0800d93c <_close_r>:
 800d93c:	b538      	push	{r3, r4, r5, lr}
 800d93e:	4d06      	ldr	r5, [pc, #24]	; (800d958 <_close_r+0x1c>)
 800d940:	2300      	movs	r3, #0
 800d942:	4604      	mov	r4, r0
 800d944:	4608      	mov	r0, r1
 800d946:	602b      	str	r3, [r5, #0]
 800d948:	f7f4 fe2b 	bl	80025a2 <_close>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d102      	bne.n	800d956 <_close_r+0x1a>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	b103      	cbz	r3, 800d956 <_close_r+0x1a>
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	bd38      	pop	{r3, r4, r5, pc}
 800d958:	20000b10 	.word	0x20000b10

0800d95c <_fstat_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4d07      	ldr	r5, [pc, #28]	; (800d97c <_fstat_r+0x20>)
 800d960:	2300      	movs	r3, #0
 800d962:	4604      	mov	r4, r0
 800d964:	4608      	mov	r0, r1
 800d966:	4611      	mov	r1, r2
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	f7f4 fe26 	bl	80025ba <_fstat>
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	d102      	bne.n	800d978 <_fstat_r+0x1c>
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	b103      	cbz	r3, 800d978 <_fstat_r+0x1c>
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	bd38      	pop	{r3, r4, r5, pc}
 800d97a:	bf00      	nop
 800d97c:	20000b10 	.word	0x20000b10

0800d980 <_isatty_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4d06      	ldr	r5, [pc, #24]	; (800d99c <_isatty_r+0x1c>)
 800d984:	2300      	movs	r3, #0
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	f7f4 fe25 	bl	80025da <_isatty>
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d102      	bne.n	800d99a <_isatty_r+0x1a>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	b103      	cbz	r3, 800d99a <_isatty_r+0x1a>
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	20000b10 	.word	0x20000b10

0800d9a0 <_lseek_r>:
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 800d9a2:	4d07      	ldr	r5, [pc, #28]	; (800d9c0 <_lseek_r+0x20>)
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	4608      	mov	r0, r1
 800d9a8:	4611      	mov	r1, r2
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	602a      	str	r2, [r5, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	f7f4 fe1e 	bl	80025f0 <_lseek>
 800d9b4:	1c43      	adds	r3, r0, #1
 800d9b6:	d102      	bne.n	800d9be <_lseek_r+0x1e>
 800d9b8:	682b      	ldr	r3, [r5, #0]
 800d9ba:	b103      	cbz	r3, 800d9be <_lseek_r+0x1e>
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	20000b10 	.word	0x20000b10

0800d9c4 <_read_r>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4d07      	ldr	r5, [pc, #28]	; (800d9e4 <_read_r+0x20>)
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	4608      	mov	r0, r1
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	602a      	str	r2, [r5, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f7f4 fdac 	bl	8002530 <_read>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d102      	bne.n	800d9e2 <_read_r+0x1e>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	b103      	cbz	r3, 800d9e2 <_read_r+0x1e>
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	20000b10 	.word	0x20000b10

0800d9e8 <_init>:
 800d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ea:	bf00      	nop
 800d9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ee:	bc08      	pop	{r3}
 800d9f0:	469e      	mov	lr, r3
 800d9f2:	4770      	bx	lr

0800d9f4 <_fini>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	bf00      	nop
 800d9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fa:	bc08      	pop	{r3}
 800d9fc:	469e      	mov	lr, r3
 800d9fe:	4770      	bx	lr
